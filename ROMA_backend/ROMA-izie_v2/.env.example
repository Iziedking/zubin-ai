# ROMA-DSPy Environment Configuration
# Copy this file to .env and fill in your actual values

# ==============================================================================
# Storage Configuration (S3 + goofys)
# ==============================================================================

# Base storage path - mounted S3 bucket location (must be same on host and E2B)
# Default: /opt/sentient
STORAGE_BASE_PATH=/opt/sentient

# S3 bucket name for persistent storage (existing bucket)
ROMA_S3_BUCKET=roma-shared

# AWS region for S3 bucket
AWS_REGION=us-east-1

# ==============================================================================
# AWS Credentials
# ==============================================================================

# AWS Access Key ID (for S3 access via goofys)
AWS_ACCESS_KEY_ID=your_aws_access_key_id

# AWS Secret Access Key
AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key

# ==============================================================================
# LLM API Keys
# ==============================================================================

# OpenAI API Key (for GPT models)
OPENAI_API_KEY=your_openai_api_key

# Anthropic API Key (only if NOT using OpenRouter)
ANTHROPIC_API_KEY=your_anthropic_api_key

# Google GenAI API Key (only if NOT using OpenRouter)
GOOGLE_API_KEY=your_google_api_key

# Fireworks AI API Key (optional)
FIREWORKS_API_KEY=your_fireworks_api_key

# OpenRouter API Key (RECOMMENDED - single key for all models)
OPENROUTER_API_KEY=your_openrouter_api_key

# Serper API Key (for web search functionality)
SERPER_API_KEY=your_serper_api_key

# ==============================================================================
# E2B Configuration
# ==============================================================================

# E2B API Key (for code execution sandboxes)
E2B_API_KEY=your_e2b_api_key

# E2B Template ID (custom template with goofys and start-up.sh)
# Create template: cd docker/e2b && e2b template build
# Default: "roma-dspy-sandbox" if not set
E2B_TEMPLATE_ID=roma-dspy-sandbox

# E2B sandbox timeout in seconds (default: 300 = 5 minutes)
E2B_TIMEOUT=300

# ==============================================================================
# Crypto/Finance API Keys (for toolkit usage)
# ==============================================================================

# DefiLlama API Key (optional, for Pro features)
DEFILLAMA_API_KEY=your_defillama_api_key

# Arkham Intelligence API Key (for on-chain analytics)
ARKHAM_API_KEY=your_arkham_api_key

# Binance API credentials (optional, for trading features)
BINANCE_API_KEY=your_binance_api_key
BINANCE_API_SECRET=your_binance_api_secret

# CoinGecko API Key (optional, for Pro API)
COINGECKO_API_KEY=your_coingecko_api_key

# ==============================================================================
# Database Configuration (PostgreSQL)
# ==============================================================================

# PostgreSQL connection (for checkpoints and execution tracking)
POSTGRES_ENABLED=true
POSTGRES_DB=roma_dspy
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_HOST=localhost
POSTGRES_PORT=5432

# Full database URL (auto-constructed if not set)
# DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/roma_dspy

# PostgreSQL pool settings
POSTGRES_POOL_SIZE=5
POSTGRES_MAX_OVERFLOW=10
POSTGRES_POOL_TIMEOUT=30.0
SQL_ECHO=false

# ==============================================================================
# API Server Configuration
# ==============================================================================

# API server host and port
API_HOST=0.0.0.0
API_PORT=8000

# Number of API workers (for production)
API_WORKERS=4

# ==============================================================================
# ROMA-DSPy Runtime Configuration
# ==============================================================================

# Environment (development, testing, production)
ROMA_ENV=development

# Maximum decomposition depth
ROMA_MAX_DEPTH=5

# Verbose logging
ROMA_VERBOSE=false

# Enable debug logging
ROMA_ENABLE_LOGGING=true

# ==============================================================================
# Resilience Configuration
# ==============================================================================

# Retry settings
ROMA_RETRY_ENABLED=true
ROMA_MAX_RETRIES=3
ROMA_RETRY_STRATEGY=exponential_backoff

# Circuit breaker settings
ROMA_CIRCUIT_BREAKER_ENABLED=true
ROMA_FAILURE_THRESHOLD=5

# ==============================================================================
# Cache Configuration
# ==============================================================================

# Enable DSPy caching
ROMA_CACHE_ENABLED=true
ROMA_CACHE_DISK=true
ROMA_CACHE_MEMORY=true

# DSPy cache directory
DSPY_CACHE_DIR=.cache/dspy

# ==============================================================================
# Checkpoint Configuration
# ==============================================================================

# Enable checkpointing
ROMA_CHECKPOINT_ENABLED=true

# Checkpoint storage path
ROMA_CHECKPOINT_PATH=.checkpoints

# Maximum checkpoints to keep
ROMA_MAX_CHECKPOINTS=10

# Checkpoint retention (hours)
ROMA_CHECKPOINT_MAX_AGE_HOURS=24.0

# Compress checkpoints
ROMA_CHECKPOINT_COMPRESS=true

# Verify checkpoint integrity
ROMA_CHECKPOINT_VERIFY=true

# ==============================================================================
# Logging Configuration
# ==============================================================================

# Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Log directory (null = console only)
LOG_DIR=null

# Console format (minimal, default, detailed)
LOG_CONSOLE_FORMAT=default

# File format (default, detailed, json)
LOG_FILE_FORMAT=detailed

# Colorize console output
LOG_COLORIZE=true

# JSON serialization
LOG_SERIALIZE=false

# Log rotation size
LOG_ROTATION=100 MB

# Log retention period
LOG_RETENTION=30 days

# Log compression
LOG_COMPRESSION=zip

# Intercept standard library logging
LOG_INTERCEPT_STDLIB=true

# Full traceback on errors
LOG_BACKTRACE=true

# Show variable values in logs (disable in production)
LOG_DIAGNOSE=false

# Thread-safe logging
LOG_ENQUEUE=true

# ==============================================================================
# Observability Configuration (MLflow)
# ==============================================================================

# Enable MLflow tracking
MLFLOW_ENABLED=false

# Disable MLflow span logging without changing other MLflow features
ROMA_DISABLE_MLFLOW_SPANS=false

# MLflow tracking URI (single variable)
# - If running ROMA locally (not in Docker): set to http://127.0.0.1:<port>
# - If running ROMA inside docker-compose: set to http://mlflow:5000
# You can change the host port with MLFLOW_PORT; container port is always 5000.
MLFLOW_TRACKING_URI=http://127.0.0.1:5000

# MLflow experiment name
MLFLOW_EXPERIMENT=ROMA-DSPy

# MLflow port (for docker-compose)
MLFLOW_PORT=5000

# ==============================================================================
# Docker Configuration
# ==============================================================================

# Ports for docker-compose
POSTGRES_PORT=5432
API_PORT=8000
MLFLOW_PORT=5000

# ==============================================================================
# Optional: Local Development Overrides
# ==============================================================================

# For local development without S3, you can use a local directory
# Uncomment and set to a local path (e.g., ${HOME}/roma_storage)
# Note: This won't work with E2B - only for local testing
# STORAGE_BASE_PATH=${HOME}/roma_storage

# For local development without PostgreSQL
# POSTGRES_ENABLED=false
