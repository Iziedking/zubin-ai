{"version":3,"file":"static/js/4680.db22fddc.chunk.js","mappings":"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","sources":["experiment-tracking/utils/DatasetUtils.ts","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetWithContext.tsx","shared/building_blocks/Image.tsx","experiment-tracking/components/runs-charts/components/charts/ImageGridPlot.common.tsx","experiment-tracking/components/experiment-page/components/RunColorPill.tsx","model-registry/constants.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetSchemaTable.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetSchema.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetLink.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetSourceType.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetSourceURL.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetDigest.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetDrawer.tsx"],"sourcesContent":["import { DatasetSourceTypes, type DatasetSummary, type RunDatasetWithTags } from '../types';\n\nexport const datasetSummariesEqual = (summary1: DatasetSummary, summary2: DatasetSummary) =>\n  summary1.digest === summary2.digest && summary1.name === summary2.name && summary1.context === summary2.context;\n\nexport const getDatasetSourceUrl = (datasetWithTags: RunDatasetWithTags) => {\n  const { dataset } = datasetWithTags;\n  const sourceType = dataset.sourceType;\n  try {\n    if (sourceType === DatasetSourceTypes.HTTP) {\n      const { url } = JSON.parse(dataset.source);\n      return url;\n    }\n    if (sourceType === DatasetSourceTypes.S3) {\n      const { uri } = JSON.parse(dataset.source);\n      return uri;\n    }\n    if (sourceType === DatasetSourceTypes.HUGGING_FACE) {\n      const { path } = JSON.parse(dataset.source);\n      return `https://huggingface.co/datasets/${path}`;\n    }\n  } catch {\n    return null;\n  }\n  return null;\n};\n","import { TableIcon, Tag, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { RunDatasetWithTags } from '../../../../types';\nimport React from 'react';\nimport { MLFLOW_RUN_DATASET_CONTEXT_TAG } from '../../../../constants';\n\nexport interface DatasetWithContextProps {\n  datasetWithTags: RunDatasetWithTags;\n  displayTextAsLink: boolean;\n  className?: string;\n}\n\nexport const ExperimentViewDatasetWithContext = ({\n  datasetWithTags,\n  displayTextAsLink,\n  className,\n}: DatasetWithContextProps) => {\n  const { dataset, tags } = datasetWithTags;\n  const { theme } = useDesignSystemTheme();\n\n  const contextTag = tags?.find(({ key }) => key === MLFLOW_RUN_DATASET_CONTEXT_TAG)?.value;\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginTop: theme.spacing.xs,\n        marginBottom: theme.spacing.xs,\n      }}\n      className={className}\n    >\n      <TableIcon css={{ marginRight: theme.spacing.xs, color: theme.colors.textSecondary }} />\n      {displayTextAsLink ? (\n        <div>\n          {dataset.name} ({dataset.digest})\n        </div>\n      ) : (\n        <Typography.Text size=\"md\" css={{ marginBottom: 0 }}>\n          {dataset.name} ({dataset.digest})\n        </Typography.Text>\n      )}\n      {contextTag && (\n        <Tag\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetwithcontext.tsx_41\"\n          css={{\n            textTransform: 'capitalize',\n            marginLeft: theme.spacing.xs,\n            marginRight: theme.spacing.xs,\n          }}\n        >\n          {contextTag}\n        </Tag>\n      )}\n    </div>\n  );\n};\n","import {\n  ArrowLeftIcon,\n  ArrowRightIcon,\n  CloseIcon,\n  DesignSystemContext,\n  RedoIcon,\n  UndoIcon,\n  ZoomInIcon,\n  ZoomOutIcon,\n} from '@databricks/design-system';\nimport { useContext } from 'react';\nimport RcImage from 'rc-image';\nimport './Image.css';\nimport { MLflowImagePreviewContainer } from '../../common/components/DesignSystemContainer';\n\nconst icons = {\n  rotateLeft: <UndoIcon />,\n  rotateRight: <RedoIcon />,\n  zoomIn: <ZoomInIcon />,\n  zoomOut: <ZoomOutIcon />,\n  close: <CloseIcon />,\n  left: <ArrowLeftIcon />,\n  right: <ArrowRightIcon />,\n};\n\nexport const ImagePreviewGroup = ({\n  children,\n  visible,\n  onVisibleChange,\n}: {\n  children: React.ReactNode;\n  visible: boolean;\n  onVisibleChange: (v: boolean) => void;\n}) => {\n  const { getImagePreviewPopupContainer } = useContext(MLflowImagePreviewContainer);\n\n  return (\n    <RcImage.PreviewGroup\n      icons={icons}\n      preview={{\n        visible: visible,\n        getContainer: getImagePreviewPopupContainer,\n        onVisibleChange: (v) => onVisibleChange(v),\n      }}\n    >\n      {children}\n    </RcImage.PreviewGroup>\n  );\n};\n\nexport { RcImage as Image };\n","import { ImageIcon, Spinner } from '@databricks/design-system';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { getArtifactLocationUrl } from '@mlflow/mlflow/src/common/utils/ArtifactUtils';\nimport type { ImageEntity } from '@mlflow/mlflow/src/experiment-tracking/types';\nimport { useState, useEffect } from 'react';\nimport { Typography } from '@databricks/design-system';\nimport { ImagePreviewGroup, Image } from '../../../../../shared/building_blocks/Image';\n\n/**\n * Despite image size being dynamic, we want to set a minimum size for the grid images.\n */\nexport const MIN_GRID_IMAGE_SIZE = 200;\n\ntype ImagePlotProps = {\n  imageUrl: string;\n  compressedImageUrl: string;\n  imageSize?: number;\n  maxImageSize?: number;\n};\n\nexport const ImagePlot = ({ imageUrl, compressedImageUrl, imageSize, maxImageSize }: ImagePlotProps) => {\n  const [previewVisible, setPreviewVisible] = useState(false);\n  const { theme } = useDesignSystemTheme();\n\n  const [imageLoading, setImageLoading] = useState(true);\n\n  useEffect(() => {\n    // Load the image in the memory (should reuse the same request) in order to get the loading state\n    setImageLoading(true);\n    const img = new window.Image();\n    img.onload = () => setImageLoading(false);\n    img.onerror = () => setImageLoading(false);\n    img.src = compressedImageUrl;\n    return () => {\n      img.src = '';\n    };\n  }, [compressedImageUrl]);\n\n  return (\n    <div css={{ width: imageSize || '100%', height: imageSize || '100%' }}>\n      <div css={{ display: 'contents' }}>\n        {compressedImageUrl === undefined || imageLoading ? (\n          <div\n            css={{\n              width: '100%',\n              backgroundColor: theme.colors.backgroundSecondary,\n              display: 'flex',\n              aspectRatio: '1',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <Spinner />\n          </div>\n        ) : (\n          <div\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              width: imageSize || '100%',\n              aspectRatio: '1',\n              maxWidth: maxImageSize,\n              maxHeight: maxImageSize,\n              backgroundColor: theme.colors.backgroundSecondary,\n              '.rc-image': {\n                cursor: 'pointer',\n              },\n            }}\n          >\n            <ImagePreviewGroup visible={previewVisible} onVisibleChange={setPreviewVisible}>\n              <Image\n                src={compressedImageUrl}\n                preview={{ src: imageUrl }}\n                style={{ maxWidth: maxImageSize || '100%', maxHeight: maxImageSize || '100%' }}\n              />\n            </ImagePreviewGroup>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const ImagePlotWithHistory = ({\n  metadataByStep,\n  imageSize,\n  step,\n  runUuid,\n}: {\n  metadataByStep: Record<number, ImageEntity>;\n  imageSize?: number;\n  step: number;\n  runUuid: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  if (metadataByStep[step] === undefined) {\n    return (\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          textAlign: 'center',\n          width: imageSize,\n          backgroundColor: theme.colors.backgroundSecondary,\n          padding: theme.spacing.md,\n          aspectRatio: '1',\n        }}\n      >\n        <ImageIcon />\n        <FormattedMessage\n          defaultMessage=\"No image logged at this step\"\n          description=\"Experiment tracking > runs charts > charts > image plot with history > no image text\"\n        />\n      </div>\n    );\n  }\n  return (\n    <ImagePlot\n      imageUrl={getArtifactLocationUrl(metadataByStep[step].filepath, runUuid)}\n      compressedImageUrl={getArtifactLocationUrl(metadataByStep[step].compressed_filepath, runUuid)}\n      imageSize={imageSize}\n    />\n  );\n};\n\nexport const EmptyImageGridPlot = () => {\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%',\n        width: '100%',\n        fontSize: 16,\n      }}\n    >\n      <Typography.Title css={{ marginTop: 16 }} color=\"secondary\" level={3}>\n        Compare logged images\n      </Typography.Title>\n      <Typography.Text css={{ marginBottom: 16 }} color=\"secondary\">\n        Use the image grid chart to compare logged images across runs.\n      </Typography.Text>\n    </div>\n  );\n};\n","// This media query applies to screens with a pixel density of 2 or higher\n\nimport { debounce } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { COLORS_PALETTE_DATALIST_ID } from '../../../../common/components/ColorsPaletteDatalist';\nimport { visuallyHidden } from '@databricks/design-system';\n\n// and higher resolution values (e.g. Retina displays). 192 dpi is double the \"default\" historical 96 dpi.\nconst HIGH_RESOLUTION_MEDIA_QUERY = '@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';\n\nconst stripedHiddenBackgroundStyle = `repeating-linear-gradient(\n  135deg,\n  #959595 0,\n  #e7e7e7 1px,\n  #e7e7e7 2px,\n  #959595 3px,\n  #e7e7e7 4px,\n  #e7e7e7 5px,\n  #959595 6px,\n  #e7e7e7 7px,\n  #e7e7e7 8px,\n  #959595 9px,\n  #e7e7e7 10px,\n  #e7e7e7 11px,\n  #959595 12px,\n  #e7e7e7 13px,\n  #e7e7e7 14px\n)`;\n\n/**\n * Renders a colored rounded pill for a run.\n */\nexport const RunColorPill = ({\n  color,\n  hidden,\n  onChangeColor,\n  ...props\n}: {\n  color?: string;\n  hidden?: boolean;\n  onChangeColor?: (colorValue: string) => void;\n}) => {\n  const [colorValue, setColorValue] = useState<string | undefined>(undefined);\n\n  const onChangeColorDebounced = useMemo(() => {\n    // Implementations of <input type=\"color\"> vary from browser to browser, some browser\n    // fire an event on every color change so we debounce the event to avoid multiple\n    // calls to the onChangeColor handler.\n    if (onChangeColor) {\n      return debounce(onChangeColor, 300);\n    }\n    return () => {};\n  }, [onChangeColor]);\n\n  return (\n    <label\n      css={{\n        boxSizing: 'border-box',\n        width: 12,\n        height: 12,\n        borderRadius: 6,\n        flexShrink: 0,\n        // Add a border to make the pill visible when using very light color\n        border: `1px solid ${hidden ? 'transparent' : 'rgba(0,0,0,0.1)'}`,\n        // Straighten it up on high-res screens\n        [HIGH_RESOLUTION_MEDIA_QUERY]: {\n          marginBottom: 1,\n        },\n        background: hidden ? stripedHiddenBackgroundStyle : undefined,\n        cursor: onChangeColor ? 'pointer' : 'default',\n        position: 'relative',\n        '&:hover': {\n          opacity: onChangeColor ? 0.8 : 1,\n        },\n      }}\n      style={{ backgroundColor: colorValue ?? color ?? 'transparent' }}\n      {...props}\n    >\n      <span\n        css={[\n          visuallyHidden,\n          {\n            userSelect: 'none',\n          },\n        ]}\n      >\n        {color}\n      </span>\n      {onChangeColor && (\n        <input\n          disabled={hidden}\n          type=\"color\"\n          value={colorValue ?? color}\n          onChange={({ target }) => {\n            setColorValue(target.value);\n            onChangeColorDebounced(target.value);\n          }}\n          list={COLORS_PALETTE_DATALIST_ID}\n          css={{\n            appearance: 'none',\n            width: 0,\n            height: 0,\n            border: 0,\n            padding: 0,\n            position: 'absolute',\n            bottom: 0,\n            visibility: 'hidden',\n          }}\n        />\n      )}\n    </label>\n  );\n};\n","import { Tag } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ReadyIcon } from './utils';\n\nexport const Stages = {\n  NONE: 'None',\n  STAGING: 'Staging',\n  PRODUCTION: 'Production',\n  ARCHIVED: 'Archived',\n};\n\nexport const ACTIVE_STAGES = [Stages.STAGING, Stages.PRODUCTION];\n\nexport const StageLabels = {\n  [Stages.NONE]: 'None',\n  [Stages.STAGING]: 'Staging',\n  [Stages.PRODUCTION]: 'Production',\n  [Stages.ARCHIVED]: 'Archived',\n};\n\nexport const StageTagComponents = {\n  [Stages.NONE]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_37\">{StageLabels[Stages.NONE]}</Tag>\n  ),\n  [Stages.STAGING]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_38\" color=\"lemon\">\n      {StageLabels[Stages.STAGING]}\n    </Tag>\n  ),\n  [Stages.PRODUCTION]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_39\" color=\"lime\">\n      {StageLabels[Stages.PRODUCTION]}\n    </Tag>\n  ),\n  [Stages.ARCHIVED]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_40\" color=\"charcoal\">\n      {StageLabels[Stages.ARCHIVED]}\n    </Tag>\n  ),\n};\n\nexport interface ModelVersionActivity {\n  creation_timestamp?: number;\n  user_id?: string;\n  activity_type: ActivityTypes;\n  comment?: string;\n  last_updated_timestamp?: number;\n  from_stage?: string;\n  to_stage?: string;\n  system_comment?: string;\n  id?: string;\n}\n\nexport enum ActivityTypes {\n  APPLIED_TRANSITION = 'APPLIED_TRANSITION',\n  REQUESTED_TRANSITION = 'REQUESTED_TRANSITION',\n  SYSTEM_TRANSITION = 'SYSTEM_TRANSITION',\n  CANCELLED_REQUEST = 'CANCELLED_REQUEST',\n  APPROVED_REQUEST = 'APPROVED_REQUEST',\n  REJECTED_REQUEST = 'REJECTED_REQUEST',\n  NEW_COMMENT = 'NEW_COMMENT',\n}\n\nexport interface PendingModelVersionActivity {\n  type: ActivityTypes;\n  to_stage: string;\n}\n\nexport const EMPTY_CELL_PLACEHOLDER = <div style={{ marginTop: -12 }}>_</div>;\n\nexport const ModelVersionStatus = {\n  READY: 'READY',\n};\n\nexport const DefaultModelVersionStatusMessages = {\n  [ModelVersionStatus.READY]: (\n    <FormattedMessage defaultMessage=\"Ready.\" description=\"Default status message for model versions that are ready\" />\n  ),\n};\n\nexport const modelVersionStatusIconTooltips = {\n  [ModelVersionStatus.READY]: (\n    <FormattedMessage\n      defaultMessage=\"Ready\"\n      description=\"Tooltip text for ready model version status icon in model view page\"\n    />\n  ),\n};\n\nexport const ModelVersionStatusIcons = {\n  [ModelVersionStatus.READY]: <ReadyIcon />,\n};\n\nexport const MODEL_VERSION_STATUS_POLL_INTERVAL = 10000;\n\n// Number of registered models initially shown on the model registry list page\nconst REGISTERED_MODELS_PER_PAGE = 10;\n\n// Variant for compact tables (unified list pattern), this is\n// going to become a default soon\nexport const REGISTERED_MODELS_PER_PAGE_COMPACT = 25;\nexport const MODEL_VERSIONS_PER_PAGE_COMPACT = 25;\n\nexport const MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER = 75; // request size has a limit of 4KB\n\nexport const REGISTERED_MODELS_SEARCH_NAME_FIELD = 'name';\n\nexport const REGISTERED_MODELS_SEARCH_TIMESTAMP_FIELD = 'timestamp';\n\nexport const MODEL_VERSIONS_SEARCH_TIMESTAMP_FIELD = 'creation_timestamp';\n\nexport const AntdTableSortOrder = {\n  ASC: 'ascend',\n  DESC: 'descend',\n};\n\nexport const archiveExistingVersionToolTipText = (currentStage: string) => (\n  <FormattedMessage\n    defaultMessage=\"Model versions in the `{currentStage}` stage will be moved to the\n     `Archived` stage.\"\n    description=\"Tooltip text for transitioning existing model versions in stage to archived\n     in the model versions page\"\n    values={{ currentStage: currentStage }}\n  />\n);\n\nexport const mlflowAliasesLearnMoreLink =\n  'https://mlflow.org/docs/latest/model-registry.html#using-registered-model-aliases';\n","import { Table, TableCell, TableHeader, TableRow } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nexport interface ExperimentViewDatasetSchemaTableProps {\n  schema: any[];\n  filter: string;\n}\n\nexport const ExperimentViewDatasetSchemaTable = ({\n  schema,\n  filter,\n}: ExperimentViewDatasetSchemaTableProps): JSX.Element => {\n  const hasFilter = (name?: string, type?: string) => {\n    return (\n      filter === '' ||\n      name?.toLowerCase().includes(filter.toLowerCase()) ||\n      type?.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const filteredSchema = schema.filter((row: { name: string; type: string }, _: number) =>\n    hasFilter(row.name, row.type),\n  );\n\n  const getNameHeader = () => {\n    return (\n      <FormattedMessage\n        defaultMessage=\"Name\"\n        description='Header for \"name\" column in the experiment run dataset schema'\n      />\n    );\n  };\n\n  const getTypeHeader = () => {\n    return <FormattedMessage defaultMessage=\"Type\" description='Header for \"type\" column in the UC table schema' />;\n  };\n\n  return (\n    <Table scrollable css={{ width: '100%' }}>\n      <TableRow isHeader>\n        <TableHeader componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetschematable.tsx_57\">\n          {getNameHeader()}\n        </TableHeader>\n        <TableHeader componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetschematable.tsx_58\">\n          {getTypeHeader()}\n        </TableHeader>\n      </TableRow>\n      <div onWheel={(e) => e.stopPropagation()}>\n        {filteredSchema.length === 0 ? (\n          <TableRow>\n            <TableCell>\n              <FormattedMessage\n                defaultMessage=\"No results match this search.\"\n                description=\"No results message in datasets drawer table\"\n              />\n            </TableCell>\n          </TableRow>\n        ) : (\n          filteredSchema.map((row: { name: string; type: string }, idx: number) => (\n            <TableRow key={`table-body-row-${idx}`}>\n              <TableCell>{row.name}</TableCell>\n              <TableCell>{row.type}</TableCell>\n            </TableRow>\n          ))\n        )}\n      </div>\n    </Table>\n  );\n};\n","import {\n  Header,\n  TableIcon,\n  useDesignSystemTheme,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  TableFilterInput,\n  Spacer,\n  Typography,\n} from '@databricks/design-system';\nimport { ExperimentViewDatasetSchemaTable } from './ExperimentViewDatasetSchemaTable';\nimport type { RunDatasetWithTags } from '../../../../types';\nimport { DatasetSourceTypes } from '../../../../types';\nimport { useEffect, useMemo, useState } from 'react';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nexport interface DatasetsCellRendererProps {\n  datasetWithTags: RunDatasetWithTags;\n}\n\nexport const ExperimentViewDatasetSchema = ({ datasetWithTags }: DatasetsCellRendererProps): JSX.Element => {\n  const { theme } = useDesignSystemTheme();\n  const { dataset } = datasetWithTags;\n  const [filter, setFilter] = useState('');\n\n  if (dataset.schema === null || dataset.schema === '') {\n    return (\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          height: '100vh',\n        }}\n      >\n        <div\n          css={{\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'flex-start',\n            alignContent: 'center',\n          }}\n        >\n          <Header title={<div css={{ color: theme.colors.grey600 }}>No schema available</div>} />\n        </div>\n      </div>\n    );\n  }\n  try {\n    const schema = JSON.parse(dataset.schema);\n    if ('mlflow_colspec' in schema) {\n      // if the dataset schema is colspec\n      return (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            overflow: 'hidden',\n            height: '100vh',\n          }}\n        >\n          <div\n            css={{\n              marginTop: theme.spacing.sm,\n              form: { width: '100%' },\n            }}\n          >\n            <TableFilterInput\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetschema.tsx_92\"\n              value={filter}\n              placeholder=\"Search fields\"\n              onChange={(e) => setFilter(e.target.value)}\n              onClear={() => {\n                setFilter('');\n              }}\n              css={{ width: '100%' }}\n              containerProps={{ style: { width: 'auto' } }}\n            />\n          </div>\n          <div\n            css={{\n              marginTop: theme.spacing.sm,\n              overflow: 'hidden',\n            }}\n          >\n            <ExperimentViewDatasetSchemaTable schema={schema.mlflow_colspec} filter={filter} />\n          </div>\n        </div>\n      );\n    } else if ('mlflow_tensorspec' in schema) {\n      // if the dataset schema is tensorspec\n      return (\n        <div css={{ height: '100vh' }}>\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n              height: '100%',\n            }}\n          >\n            <TableIcon css={{ fontSize: '56px', color: theme.colors.grey600 }} />\n            <Header title={<div css={{ color: theme.colors.grey600 }}>Array Datasource</div>} />\n            {/* @ts-expect-error Type 'string' is not assignable to type '\"primary\" | \"secondary\" | \"info\" | \"error\" | \"success\" | \"warning\" | undefined' */}\n            <Typography.Text color={theme.colors.grey600} css={{ textAlign: 'center' }}>\n              <FormattedMessage\n                defaultMessage=\"The dataset is an array. To see a preview of the dataset, view the dataset in the training notebook.\"\n                description=\"Notification when the dataset is an array data source in the experiment run dataset schema\"\n              />\n            </Typography.Text>\n          </div>\n        </div>\n      );\n    } else {\n      // if the dataset schema is not colspec or tensorspec\n      return (\n        <div css={{ marginLeft: theme.spacing.lg, marginTop: theme.spacing.md, width: '100%' }}>\n          <div css={{ display: 'flex', flexDirection: 'column', justifyContent: 'flex-start' }}>\n            <Header title={<div css={{ color: theme.colors.grey600 }}>Unrecognized Schema Format</div>} />\n            {/* @ts-expect-error Type 'string' is not assignable to type '\"primary\" | \"secondary\" | \"info\" | \"error\" | \"success\" | \"warning\" | undefined' */}\n            <Typography.Text color={theme.colors.grey600}>\n              <FormattedMessage\n                defaultMessage=\"Raw Schema JSON: \"\n                description=\"Label for the raw schema JSON in the experiment run dataset schema\"\n              />\n              {JSON.stringify(schema)}\n            </Typography.Text>\n          </div>\n        </div>\n      );\n    }\n  } catch {\n    return (\n      <div css={{ marginLeft: theme.spacing.lg, marginTop: theme.spacing.md, width: '100%' }}>\n        <div css={{ display: 'flex', flexDirection: 'column', justifyContent: 'flex-start' }}>\n          <Header title={<div css={{ color: theme.colors.grey600 }}>No schema available</div>} />\n        </div>\n      </div>\n    );\n  }\n};\n","import { Button, CopyIcon, NewWindowIcon, Typography } from '@databricks/design-system';\nimport type { RunDatasetWithTags } from '../../../../types';\nimport { DatasetSourceTypes } from '../../../../types';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { getDatasetSourceUrl } from '../../../../utils/DatasetUtils';\nimport { CopyButton } from '../../../../../shared/building_blocks/CopyButton';\n\nexport interface DatasetLinkProps {\n  datasetWithTags: RunDatasetWithTags;\n  runTags: Record<string, { key: string; value: string }>;\n}\n\nexport const ExperimentViewDatasetLink = ({ datasetWithTags, runTags }: DatasetLinkProps) => {\n  const { dataset } = datasetWithTags;\n  if (dataset.sourceType === DatasetSourceTypes.HTTP || dataset.sourceType === DatasetSourceTypes.HUGGING_FACE) {\n    const url = getDatasetSourceUrl(datasetWithTags);\n    if (url) {\n      return (\n        <Button\n          type=\"primary\"\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetlink.tsx_19_1\"\n          icon={<NewWindowIcon />}\n          href={url}\n          target=\"_blank\"\n        >\n          <FormattedMessage\n            defaultMessage=\"Open dataset\"\n            description=\"Text for the HTTP/HF location link in the experiment run dataset drawer\"\n          />\n        </Button>\n      );\n    }\n  }\n  if (dataset.sourceType === DatasetSourceTypes.S3) {\n    const url = getDatasetSourceUrl(datasetWithTags);\n    if (url) {\n      return (\n        <CopyButton\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetlink.tsx_19_2\"\n          icon={<CopyIcon />}\n          copyText={url}\n        >\n          <FormattedMessage\n            defaultMessage=\"Copy S3 URI to clipboard\"\n            description=\"Text for the HTTP/HF location link in the experiment run dataset drawer\"\n          />\n        </CopyButton>\n      );\n    }\n  }\n  if (dataset.sourceType === DatasetSourceTypes.EXTERNAL) {\n    return (\n      <Button\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetlink.tsx_19_3\"\n        icon={<NewWindowIcon />}\n      >\n        <FormattedMessage\n          defaultMessage=\"Go to external location\"\n          description=\"Text for the external location link in the experiment run dataset drawer\"\n        />\n      </Button>\n    );\n  }\n  return null;\n};\n","import { Typography } from '@databricks/design-system';\nimport type { RunDatasetWithTags } from '../../../../types';\nimport { DatasetSourceTypes } from '../../../../types';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nexport interface ExperimentViewDatasetSourceTypeProps {\n  datasetWithTags: RunDatasetWithTags;\n}\n\nexport const ExperimentViewDatasetSourceType = ({ datasetWithTags }: ExperimentViewDatasetSourceTypeProps) => {\n  const { dataset } = datasetWithTags;\n\n  const sourceType = dataset.sourceType;\n\n  const getSourceTypeLabel = () => {\n    if (sourceType === DatasetSourceTypes.HTTP || sourceType === DatasetSourceTypes.EXTERNAL) {\n      return (\n        <FormattedMessage\n          defaultMessage=\"HTTP\"\n          description=\"Experiment dataset drawer > source type > HTTP source type label\"\n        />\n      );\n    }\n    if (sourceType === DatasetSourceTypes.S3) {\n      return (\n        <FormattedMessage\n          defaultMessage=\"S3\"\n          description=\"Experiment dataset drawer > source type > S3 source type label\"\n        />\n      );\n    }\n    if (sourceType === DatasetSourceTypes.HUGGING_FACE) {\n      return (\n        <FormattedMessage\n          defaultMessage=\"Hugging Face\"\n          description=\"Experiment dataset drawer > source type > Hugging Face source type label\"\n        />\n      );\n    }\n    return null;\n  };\n\n  const typeLabel = getSourceTypeLabel();\n\n  if (typeLabel) {\n    return (\n      <Typography.Hint>\n        <FormattedMessage\n          defaultMessage=\"Source type: {typeLabel}\"\n          description=\"Experiment dataset drawer > source type > label\"\n          values={{ typeLabel }}\n        />\n      </Typography.Hint>\n    );\n  }\n\n  return null;\n};\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { RunDatasetWithTags } from '../../../../types';\nimport { DatasetSourceTypes } from '../../../../types';\nimport { getDatasetSourceUrl } from '../../../../utils/DatasetUtils';\n\nexport interface ExperimentViewDatasetSourceProps {\n  datasetWithTags: RunDatasetWithTags;\n}\n\nexport const ExperimentViewDatasetSourceURL = ({ datasetWithTags }: ExperimentViewDatasetSourceProps) => {\n  const { dataset } = datasetWithTags;\n  const { theme } = useDesignSystemTheme();\n\n  const sourceType = dataset.sourceType;\n\n  if (\n    sourceType === DatasetSourceTypes.HTTP ||\n    sourceType === DatasetSourceTypes.EXTERNAL ||\n    sourceType === DatasetSourceTypes.HUGGING_FACE\n  ) {\n    const url = getDatasetSourceUrl(datasetWithTags);\n    if (url) {\n      return (\n        <div\n          css={{\n            whiteSpace: 'nowrap',\n            display: 'flex',\n            fontSize: theme.typography.fontSizeSm,\n            color: theme.colors.textSecondary,\n            columnGap: theme.spacing.xs,\n          }}\n          title={url}\n        >\n          URL:{' '}\n          <Typography.Link\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetsourceurl.tsx_34\"\n            openInNewTab\n            href={url}\n            css={{ display: 'flex', overflow: 'hidden' }}\n          >\n            <span css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>{url}</span>\n          </Typography.Link>\n        </div>\n      );\n    }\n  }\n  if (sourceType === DatasetSourceTypes.S3) {\n    try {\n      const { uri } = JSON.parse(dataset.source);\n      if (uri) {\n        return (\n          <Typography.Hint\n            title={uri}\n            css={{\n              whiteSpace: 'nowrap',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n            }}\n          >\n            S3 URI: {uri}\n          </Typography.Hint>\n        );\n      }\n    } catch {\n      return null;\n    }\n  }\n  return null;\n};\n","import { Typography } from '@databricks/design-system';\nimport type { RunDatasetWithTags } from '../../../../types';\nimport { FormattedMessage } from 'react-intl';\n\nexport const ExperimentViewDatasetDigest = ({ datasetWithTags }: { datasetWithTags: RunDatasetWithTags }) => {\n  const { dataset } = datasetWithTags;\n  return (\n    <Typography.Hint>\n      <FormattedMessage\n        defaultMessage=\"Digest: {digest}\"\n        description=\"Experiment dataset drawer > digest > label and value\"\n        values={{ digest: <code>{dataset.digest}</code> }}\n      />\n    </Typography.Hint>\n  );\n};\n","import React from 'react';\nimport { useState } from 'react';\nimport {\n  Button,\n  Drawer,\n  Header,\n  Spacer,\n  TableIcon,\n  Tag,\n  LegacyTooltip,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport type { RunDatasetWithTags } from '../../../../types';\nimport { MLFLOW_RUN_DATASET_CONTEXT_TAG } from '../../../../constants';\nimport { ExperimentViewDatasetSchema } from './ExperimentViewDatasetSchema';\nimport { ExperimentViewDatasetLink } from './ExperimentViewDatasetLink';\nimport { Link } from '../../../../../common/utils/RoutingUtils';\nimport Routes from '../../../../routes';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentViewDatasetWithContext } from './ExperimentViewDatasetWithContext';\nimport { RunColorPill } from '../RunColorPill';\nimport { ExperimentViewDatasetSourceType } from './ExperimentViewDatasetSourceType';\nimport { ExperimentViewDatasetSourceURL } from './ExperimentViewDatasetSourceURL';\nimport { ExperimentViewDatasetDigest } from './ExperimentViewDatasetDigest';\nimport { useSelector } from 'react-redux';\nimport { ReduxState } from '../../../../../redux-types';\nimport { useGetExperimentRunColor } from '../../hooks/useExperimentRunColor';\n\nexport type DatasetWithRunType = {\n  datasetWithTags: RunDatasetWithTags;\n  runData: {\n    experimentId?: string;\n    tags?: Record<string, { key: string; value: string }>;\n    runUuid: string;\n    runName?: string;\n    datasets: RunDatasetWithTags[];\n  };\n};\n\nexport interface DatasetsCellRendererProps {\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n  selectedDatasetWithRun: DatasetWithRunType;\n  setSelectedDatasetWithRun: (datasetWithRun: DatasetWithRunType) => void;\n}\n\nconst DRAWER_WITDH = '800px';\nconst MAX_PROFILE_LENGTH = 80;\n\nconst areDatasetsEqual = (datasetA: RunDatasetWithTags, datasetB: RunDatasetWithTags) => {\n  return datasetA.dataset.digest === datasetB.dataset.digest && datasetA.dataset.name === datasetB.dataset.name;\n};\n\nconst ExperimentViewDatasetDrawerImpl = ({\n  isOpen,\n  setIsOpen,\n  selectedDatasetWithRun,\n  setSelectedDatasetWithRun,\n}: DatasetsCellRendererProps): JSX.Element => {\n  const { theme } = useDesignSystemTheme();\n  const { datasetWithTags, runData } = selectedDatasetWithRun;\n  const contextTag = selectedDatasetWithRun\n    ? datasetWithTags?.tags?.find((tag) => tag.key === MLFLOW_RUN_DATASET_CONTEXT_TAG)\n    : undefined;\n  const fullProfile =\n    datasetWithTags.dataset.profile && datasetWithTags.dataset.profile !== 'null'\n      ? datasetWithTags.dataset.profile\n      : undefined;\n\n  const getRunColor = useGetExperimentRunColor();\n  const { experimentId = '', tags = {} } = runData;\n\n  return (\n    <Drawer.Root\n      open={isOpen}\n      onOpenChange={(open) => {\n        if (!open) {\n          setIsOpen(false);\n        }\n      }}\n    >\n      <Drawer.Content\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetdrawer.tsx_81\"\n        title={\n          <div css={{ display: 'flex', alignItems: 'center', height: '100%' }}>\n            <Typography.Title level={4} css={{ marginRight: theme.spacing.sm, marginBottom: 0 }}>\n              <FormattedMessage\n                defaultMessage=\"Data details for \"\n                description=\"Text for data details for the experiment run in the dataset drawer\"\n              />\n            </Typography.Title>\n            <Link to={Routes.getRunPageRoute(experimentId, runData.runUuid)} css={styles.runLink}>\n              <RunColorPill color={getRunColor(runData.runUuid)} />\n              <span css={styles.runName}>{runData.runName}</span>\n            </Link>\n          </div>\n        }\n        width={DRAWER_WITDH}\n        footer={<Spacer size=\"xs\" />}\n      >\n        <div\n          css={{\n            display: 'flex',\n            borderTop: `1px solid ${theme.colors.border}`,\n            height: '100%',\n            marginLeft: -theme.spacing.sm,\n          }}\n        >\n          {/* column for dataset selection */}\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'column',\n              width: '300px',\n              borderRight: `1px solid ${theme.colors.border}`,\n              height: '100%',\n            }}\n          >\n            <Typography.Text\n              color=\"secondary\"\n              css={{\n                marginBottom: theme.spacing.sm,\n                marginTop: theme.spacing.sm,\n                paddingLeft: theme.spacing.sm,\n              }}\n            >\n              {runData.datasets.length}{' '}\n              <FormattedMessage\n                defaultMessage=\"datasets used\"\n                description=\"Text for dataset count in the experiment run dataset drawer\"\n              />\n            </Typography.Text>\n            <div\n              css={{\n                height: '100%',\n                display: 'flex',\n                overflow: 'auto',\n              }}\n              onWheel={(e) => e.stopPropagation()}\n            >\n              <div\n                css={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  overflow: 'visible',\n                  flex: 1,\n                }}\n              >\n                {runData.datasets.map((dataset) => (\n                  <Typography.Link\n                    componentId=\"mlflow.dataset_drawer.dataset_link\"\n                    aria-label={`${dataset.dataset.name} (${dataset.dataset.digest})`}\n                    key={`${dataset.dataset.name}-${dataset.dataset.digest}`}\n                    css={{\n                      display: 'flex',\n                      whiteSpace: 'nowrap',\n                      textDecoration: 'none',\n                      cursor: 'pointer',\n                      flexDirection: 'column',\n                      justifyContent: 'center',\n                      alignItems: 'flex-start',\n                      backgroundColor: areDatasetsEqual(dataset, datasetWithTags)\n                        ? theme.colors.actionTertiaryBackgroundPress\n                        : 'transparent',\n                      paddingBottom: theme.spacing.sm,\n                      paddingTop: theme.spacing.sm,\n                      paddingLeft: theme.spacing.sm,\n                      border: 0,\n                      borderTop: `1px solid ${theme.colors.border}`,\n                      '&:hover': {\n                        backgroundColor: theme.colors.actionTertiaryBackgroundHover,\n                      },\n                    }}\n                    onClick={() => {\n                      setSelectedDatasetWithRun({ datasetWithTags: dataset, runData: runData });\n                      setIsOpen(true);\n                    }}\n                  >\n                    <ExperimentViewDatasetWithContext datasetWithTags={dataset} displayTextAsLink={false} />\n                  </Typography.Link>\n                ))}\n              </div>\n            </div>\n          </div>\n          {/* column for dataset details */}\n          <div\n            css={{\n              overflow: 'hidden',\n              paddingLeft: theme.spacing.md,\n              paddingTop: theme.spacing.md,\n              display: 'flex',\n              flexDirection: 'column',\n              width: '100%',\n            }}\n          >\n            {/* dataset metadata */}\n            <div\n              css={{\n                display: 'flex',\n                gap: theme.spacing.sm,\n              }}\n            >\n              <div css={{ flex: '1' }}>\n                <Header\n                  title={\n                    <div css={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                      <TableIcon css={{ marginRight: theme.spacing.xs }} />\n                      <LegacyTooltip title={datasetWithTags.dataset.name}>\n                        <Typography.Title ellipsis level={3} css={{ marginBottom: 0, maxWidth: 200 }}>\n                          {datasetWithTags.dataset.name}\n                        </Typography.Title>\n                      </LegacyTooltip>\n                      {contextTag && (\n                        <Tag\n                          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetdrawer.tsx_206\"\n                          css={{\n                            textTransform: 'capitalize',\n                            marginLeft: theme.spacing.xs,\n                            marginRight: theme.spacing.xs,\n                          }}\n                        >\n                          {contextTag.value}\n                        </Tag>\n                      )}\n                    </div>\n                  }\n                />\n                <Typography.Title\n                  level={4}\n                  color=\"secondary\"\n                  css={{ marginBottom: theme.spacing.xs, marginTop: theme.spacing.xs }}\n                  title={fullProfile}\n                >\n                  {datasetWithTags.dataset.profile && datasetWithTags.dataset.profile !== 'null' ? (\n                    datasetWithTags.dataset.profile.length > MAX_PROFILE_LENGTH ? (\n                      `${datasetWithTags.dataset.profile.substring(0, MAX_PROFILE_LENGTH)} ...`\n                    ) : (\n                      datasetWithTags.dataset.profile\n                    )\n                  ) : (\n                    <FormattedMessage\n                      defaultMessage=\"No profile available\"\n                      description=\"Text for no profile available in the experiment run dataset drawer\"\n                    />\n                  )}\n                </Typography.Title>\n              </div>\n              <ExperimentViewDatasetLink datasetWithTags={datasetWithTags} runTags={tags} />\n            </div>\n            <div css={{ flexShrink: 0, display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n              <ExperimentViewDatasetDigest datasetWithTags={datasetWithTags} />\n              <ExperimentViewDatasetSourceType datasetWithTags={datasetWithTags} />\n              <ExperimentViewDatasetSourceURL datasetWithTags={datasetWithTags} />\n            </div>\n            {/* dataset schema */}\n            <div\n              css={{\n                marginTop: theme.spacing.sm,\n                marginBottom: theme.spacing.xs,\n                borderTop: `1px solid ${theme.colors.border}`,\n                opacity: 0.5,\n              }}\n            />\n            <ExperimentViewDatasetSchema datasetWithTags={datasetWithTags} />\n          </div>\n        </div>\n      </Drawer.Content>\n    </Drawer.Root>\n  );\n};\n\n// Memoize the component so it rerenders only when props change directly, preventing\n// rerenders caused e.g. by the overarching context provider.\nexport const ExperimentViewDatasetDrawer = React.memo(ExperimentViewDatasetDrawerImpl);\n\nconst styles = {\n  runLink: {\n    overflow: 'hidden',\n    display: 'flex',\n    gap: 8,\n    alignItems: 'center',\n  },\n  runName: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    fontSize: '13px',\n  },\n};\n"],"names":["datasetSummariesEqual","summary1","summary2","digest","name","context","getDatasetSourceUrl","datasetWithTags","dataset","sourceType","DatasetSourceTypes","HTTP","url","JSON","parse","source","S3","uri","HUGGING_FACE","path","_ref","styles","ExperimentViewDatasetWithContext","displayTextAsLink","className","_tags$find","tags","theme","useDesignSystemTheme","contextTag","find","key","MLFLOW_RUN_DATASET_CONTEXT_TAG","value","_jsxs","css","_css","display","flexDirection","alignItems","marginTop","spacing","xs","marginBottom","children","_jsx","TableIcon","marginRight","color","colors","textSecondary","Typography","Text","size","Tag","componentId","textTransform","marginLeft","icons","rotateLeft","UndoIcon","rotateRight","RedoIcon","zoomIn","ZoomInIcon","zoomOut","ZoomOutIcon","close","CloseIcon","left","ArrowLeftIcon","right","ArrowRightIcon","ImagePreviewGroup","visible","onVisibleChange","getImagePreviewPopupContainer","useContext","MLflowImagePreviewContainer","RcImage","PreviewGroup","preview","getContainer","v","MIN_GRID_IMAGE_SIZE","ImagePlot","imageUrl","compressedImageUrl","imageSize","maxImageSize","previewVisible","setPreviewVisible","useState","imageLoading","setImageLoading","useEffect","img","window","Image","onload","onerror","src","width","height","undefined","backgroundColor","backgroundSecondary","aspectRatio","justifyContent","Spinner","maxWidth","maxHeight","cursor","style","ImagePlotWithHistory","metadataByStep","step","runUuid","textAlign","padding","md","ImageIcon","FormattedMessage","id","defaultMessage","getArtifactLocationUrl","filepath","compressed_filepath","_ref2","_ref3","_ref4","EmptyImageGridPlot","Title","level","HIGH_RESOLUTION_MEDIA_QUERY","RunColorPill","hidden","onChangeColor","props","colorValue","setColorValue","onChangeColorDebounced","useMemo","debounce","boxSizing","borderRadius","flexShrink","border","background","position","opacity","visuallyHidden","disabled","type","onChange","target","list","COLORS_PALETTE_DATALIST_ID","Stages","NONE","STAGING","PRODUCTION","ARCHIVED","ACTIVE_STAGES","StageLabels","StageTagComponents","ActivityTypes","ModelVersionStatus","READY","DefaultModelVersionStatusMessages","modelVersionStatusIconTooltips","ModelVersionStatusIcons","ReadyIcon","MODEL_VERSION_STATUS_POLL_INTERVAL","REGISTERED_MODELS_PER_PAGE_COMPACT","MODEL_VERSIONS_PER_PAGE_COMPACT","MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER","REGISTERED_MODELS_SEARCH_NAME_FIELD","REGISTERED_MODELS_SEARCH_TIMESTAMP_FIELD","MODEL_VERSIONS_SEARCH_TIMESTAMP_FIELD","AntdTableSortOrder","ASC","DESC","archiveExistingVersionToolTipText","currentStage","values","mlflowAliasesLearnMoreLink","ExperimentViewDatasetSchemaTable","schema","filter","filteredSchema","row","_","hasFilter","toLowerCase","includes","Table","scrollable","TableRow","isHeader","TableHeader","onWheel","e","stopPropagation","length","TableCell","map","idx","_ref5","_ref6","_ref7","_ref8","_ref9","ExperimentViewDatasetSchema","setFilter","Header","title","grey600","sm","form","TableFilterInput","placeholder","onClear","containerProps","overflow","mlflow_colspec","fontSize","lg","stringify","ExperimentViewDatasetLink","runTags","Button","icon","NewWindowIcon","href","CopyButton","CopyIcon","copyText","EXTERNAL","ExperimentViewDatasetSourceType","typeLabel","Hint","ExperimentViewDatasetSourceURL","whiteSpace","typography","fontSizeSm","columnGap","Link","openInNewTab","ExperimentViewDatasetDigest","ExperimentViewDatasetDrawerImpl","isOpen","setIsOpen","selectedDatasetWithRun","setSelectedDatasetWithRun","_datasetWithTags$tags","runData","tag","fullProfile","profile","getRunColor","useGetExperimentRunColor","experimentId","Drawer","Root","open","onOpenChange","Content","to","Routes","getRunPageRoute","runLink","runName","footer","Spacer","borderTop","borderRight","paddingLeft","datasets","textDecoration","datasetA","datasetB","actionTertiaryBackgroundPress","paddingBottom","paddingTop","actionTertiaryBackgroundHover","onClick","areDatasetsEqual","gap","LegacyTooltip","ellipsis","substring","ExperimentViewDatasetDrawer","React","textOverflow"],"sourceRoot":""}