{"version":3,"file":"static/js/6742.946ffb38.chunk.js","mappings":"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","sources":["experiment-tracking/pages/prompts/components/PromptsListTableVersionCell.tsx","common/components/TagSelectDropdown.tsx","common/hooks/useEditKeyValueTagsModal.tsx","shared/building_blocks/CopyButton.tsx","experiment-tracking/pages/prompts/hooks/useUpdateRegisteredPromptTags.tsx","experiment-tracking/pages/prompts/hooks/usePromptsListQuery.tsx","experiment-tracking/pages/prompts/components/PromptsListFilters.tsx","experiment-tracking/pages/prompts/components/PromptsListTableTagsCell.tsx","experiment-tracking/pages/prompts/components/PromptsListTableNameCell.tsx","experiment-tracking/pages/prompts/components/PromptsListTable.tsx","experiment-tracking/pages/prompts/PromptsPage.tsx","experiment-tracking/pages/prompts/components/PromptPageErrorHandler.tsx","../node_modules/use-debounce/src/useDebouncedCallback.ts","../node_modules/use-debounce/src/useDebounce.ts","common/components/ScrollablePageWrapper.tsx","common/components/KeyValueTagFullViewModal.tsx","common/components/KeyValueTag.tsx"],"sourcesContent":["import { Typography } from '@databricks/design-system';\nimport type { ColumnDef } from '@tanstack/react-table';\nimport { FormattedMessage } from 'react-intl';\n\nexport const PromptsListTableVersionCell: ColumnDef<any>['cell'] = ({ row: { original }, getValue }) => {\n  const version = getValue<string>();\n\n  if (!version) {\n    return null;\n  }\n  return (\n    <Typography.Text>\n      <FormattedMessage\n        defaultMessage=\"Version {version}\"\n        description=\"Label for the version of a registered prompt in the registered prompts table\"\n        values={{\n          version,\n        }}\n      />\n    </Typography.Text>\n  );\n};\n","import { sortedIndexOf } from 'lodash';\nimport React, { useMemo, useRef, useState } from 'react';\nimport type { Control } from 'react-hook-form';\nimport { useController } from 'react-hook-form';\nimport { useIntl } from 'react-intl';\n\nimport { PlusIcon, LegacySelect, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../types';\n\n/**\n * Will show an extra row at the bottom of the dropdown menu to create a new tag when\n * The user has typed something in the search input\n * and either\n * 1. The search input is not an exact match for an existing tag name\n * 2. There are no tags available based on search input\n */\n\nfunction DropdownMenu(menu: React.ReactElement, allAvailableTags: string[]) {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const searchValue = menu.props.searchValue.toLowerCase();\n\n  const resolvedMenu = useMemo(() => {\n    if (!searchValue) return menu;\n\n    const doesTagExists = sortedIndexOf(allAvailableTags, searchValue) >= 0;\n    if (doesTagExists) return menu;\n\n    const isValidTagKey = /^[^,.:/=\\-\\s]+$/.test(searchValue);\n\n    // Overriding the menu to add a new option at the top\n    return React.cloneElement(menu, {\n      flattenOptions: [\n        {\n          data: {\n            value: searchValue,\n            disabled: !isValidTagKey,\n            style: {\n              color: isValidTagKey ? theme.colors.actionTertiaryTextDefault : theme.colors.actionDisabledText,\n            },\n            children: (\n              <LegacyTooltip\n                title={\n                  isValidTagKey\n                    ? undefined\n                    : intl.formatMessage({\n                        defaultMessage: ', . : / - = and blank spaces are not allowed',\n                        description:\n                          'Key-value tag editor modal > Tag dropdown Manage Modal > Invalid characters error',\n                      })\n                }\n                placement=\"right\"\n              >\n                <span css={{ display: 'block' }}>\n                  <PlusIcon css={{ marginRight: theme.spacing.sm }} />\n                  {intl.formatMessage(\n                    {\n                      defaultMessage: 'Add tag \"{tagKey}\"',\n                      description: 'Key-value tag editor modal > Tag dropdown Manage Modal > Add new tag button',\n                    },\n                    {\n                      tagKey: searchValue,\n                    },\n                  )}\n                </span>\n              </LegacyTooltip>\n            ),\n          },\n          key: searchValue,\n          groupOption: false,\n        },\n        ...menu.props.flattenOptions,\n      ],\n    });\n  }, [allAvailableTags, menu, searchValue, intl, theme]);\n\n  return resolvedMenu;\n}\n\nfunction getDropdownMenu(allAvailableTags: string[]) {\n  return (menu: React.ReactElement) => DropdownMenu(menu, allAvailableTags);\n}\n\n/**\n * Used in tag edit feature, allows selecting existing / adding new tag value\n */\nexport function TagKeySelectDropdown({\n  allAvailableTags,\n  control,\n  onKeyChangeCallback,\n}: {\n  allAvailableTags: string[];\n  control: Control<KeyValueEntity>;\n  onKeyChangeCallback?: (key?: string) => void;\n}) {\n  const intl = useIntl();\n  const [isOpen, setIsOpen] = useState(false);\n  const selectRef = useRef<{ blur: () => void; focus: () => void }>(null);\n\n  const { field, fieldState } = useController({\n    control: control,\n    name: 'key',\n    rules: {\n      required: {\n        message: intl.formatMessage({\n          defaultMessage: 'A tag key is required',\n          description: 'Key-value tag editor modal > Tag dropdown > Tag key required error message',\n        }),\n        value: true,\n      },\n    },\n  });\n\n  const handleDropdownVisibleChange = (visible: boolean) => {\n    setIsOpen(visible);\n  };\n\n  const handleClear = () => {\n    field.onChange(undefined);\n    onKeyChangeCallback?.(undefined);\n  };\n\n  const handleSelect = (key: string) => {\n    field.onChange(key);\n    onKeyChangeCallback?.(key);\n  };\n\n  return (\n    <LegacySelect\n      allowClear\n      ref={selectRef}\n      dangerouslySetAntdProps={{\n        showSearch: true,\n        dropdownRender: getDropdownMenu(allAvailableTags),\n      }}\n      css={{ width: '100%' }}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Type a key',\n        description: 'Key-value tag editor modal > Tag dropdown > Tag input placeholder',\n      })}\n      value={field.value}\n      defaultValue={field.value}\n      open={isOpen}\n      onDropdownVisibleChange={handleDropdownVisibleChange}\n      filterOption={(input, option) => option?.value.toLowerCase().includes(input.toLowerCase())}\n      onSelect={handleSelect}\n      onClear={handleClear}\n      validationState={fieldState.error ? 'error' : undefined}\n    >\n      {allAvailableTags.map((tag) => (\n        <LegacySelect.Option value={tag} key={tag}>\n          {tag}\n        </LegacySelect.Option>\n      ))}\n    </LegacySelect>\n  );\n}\n","import { isEqual, sortBy } from 'lodash';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport { truncate } from 'lodash';\n\nimport {\n  Button,\n  FormUI,\n  Modal,\n  PlusIcon,\n  Popover,\n  RHFControlledComponents,\n  RestoreAntDDefaultClsPrefix,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Typography } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../types';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { TagKeySelectDropdown } from '../components/TagSelectDropdown';\nimport { KeyValueTag } from '../components/KeyValueTag';\nimport { ErrorWrapper } from '../utils/ErrorWrapper';\n\nfunction getTagsMap(tags: KeyValueEntity[]) {\n  return new Map(tags.map((tag) => [tag.key, tag]));\n}\n\n/**\n * Provides methods to initialize and display modal used to add and remove tags from any compatible entity\n */\nexport const useEditKeyValueTagsModal = <T extends { tags?: KeyValueEntity[] }>({\n  onSuccess,\n  saveTagsHandler,\n  allAvailableTags,\n  valueRequired = false,\n  title,\n}: {\n  onSuccess?: () => void;\n  saveTagsHandler: (editedEntity: T, existingTags: KeyValueEntity[], newTags: KeyValueEntity[]) => Promise<any>;\n  allAvailableTags?: string[];\n  valueRequired?: boolean;\n  title?: React.ReactNode;\n}) => {\n  const editedEntityRef = useRef<T>();\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const { theme } = useDesignSystemTheme();\n\n  const [initialTags, setInitialTags] = useState<Map<string, KeyValueEntity>>(new Map());\n  const [finalTags, setFinalTags] = useState<Map<string, KeyValueEntity>>(new Map());\n\n  const [showModal, setShowModal] = useState(false);\n\n  const form = useForm<KeyValueEntity>({\n    defaultValues: {\n      key: undefined,\n      value: '',\n    },\n  });\n\n  const hideModal = () => setShowModal(false);\n\n  /**\n   * Function used to invoke the modal and start editing tags of the particular model version\n   */\n  const showEditTagsModal = useCallback(\n    (editedEntity: T) => {\n      editedEntityRef.current = editedEntity;\n      setInitialTags(getTagsMap(editedEntity.tags || []));\n      setFinalTags(getTagsMap(editedEntity.tags || []));\n      form.reset();\n\n      setShowModal(true);\n    },\n    [form],\n  );\n\n  const saveTags = async () => {\n    if (!editedEntityRef.current) {\n      return;\n    }\n    setErrorMessage('');\n    setIsLoading(true);\n    saveTagsHandler(editedEntityRef.current, Array.from(initialTags.values()), Array.from(finalTags.values()))\n      .then(() => {\n        hideModal();\n        onSuccess?.();\n        setIsLoading(false);\n      })\n      .catch((e: ErrorWrapper | Error) => {\n        setIsLoading(false);\n        setErrorMessage(e instanceof ErrorWrapper ? e.getUserVisibleError()?.message : e.message);\n      });\n  };\n\n  const intl = useIntl();\n  const formValues = form.watch();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const hasNewValues = useMemo(\n    () => !isEqual(sortBy(Array.from(initialTags.values()), 'key'), sortBy(Array.from(finalTags.values()), 'key')),\n    [initialTags, finalTags],\n  );\n  const isDirty = formValues.key || formValues.value;\n  const showPopoverMessage = hasNewValues && isDirty;\n\n  const onKeyChangeCallback = (key: string | undefined) => {\n    const tag = key ? finalTags.get(key) : undefined;\n    /**\n     * If a tag value exists for provided key, set the value to the existing tag value\n     */\n    form.setValue('value', tag?.value ?? '');\n  };\n\n  const handleTagDelete = ({ key }: KeyValueEntity) => {\n    setFinalTags((currentFinalTags) => {\n      currentFinalTags.delete(key);\n      return new Map(currentFinalTags);\n    });\n  };\n\n  const onSubmit = () => {\n    // Do not accept form if no value provided while it's required\n    if (valueRequired && !formValues.value.trim()) {\n      return;\n    }\n\n    // Add new tag to existing tags leaving only one tag per key value\n    const newEntries = new Map(finalTags);\n    newEntries.set(formValues.key, formValues);\n\n    setFinalTags(newEntries);\n    form.reset();\n  };\n\n  const EditTagsModal = (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_135\"\n      destroyOnClose\n      visible={showModal}\n      title={\n        title ?? (\n          <FormattedMessage\n            defaultMessage=\"Add/Edit tags\"\n            description=\"Key-value tag editor modal > Title of the update tags modal\"\n          />\n        )\n      }\n      onCancel={hideModal}\n      footer={\n        <RestoreAntDDefaultClsPrefix>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_147\"\n            dangerouslyUseFocusPseudoClass\n            onClick={hideModal}\n            /**\n             * Hack: The footer will remove the margin to the save tags button\n             * if the button if wrapped on another component.\n             */\n            css={{ marginRight: !hasNewValues ? theme.spacing.sm : 0 }}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Cancel',\n              description: 'Key-value tag editor modal > Manage Tag cancel button',\n            })}\n          </Button>\n          {showPopoverMessage ? (\n            <UnsavedTagPopoverTrigger formValues={formValues} isLoading={isLoading} onSaveTask={saveTags} />\n          ) : (\n            <LegacyTooltip\n              title={\n                !hasNewValues\n                  ? intl.formatMessage({\n                      defaultMessage: 'Please add or remove one or more tags before saving',\n                      description: 'Key-value tag editor modal > Tag disabled message',\n                    })\n                  : undefined\n              }\n            >\n              <Button\n                componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_174\"\n                dangerouslyUseFocusPseudoClass\n                disabled={!hasNewValues}\n                loading={isLoading}\n                type=\"primary\"\n                onClick={saveTags}\n              >\n                {intl.formatMessage({\n                  defaultMessage: 'Save tags',\n                  description: 'Key-value tag editor modal > Manage Tag save button',\n                })}\n              </Button>\n            </LegacyTooltip>\n          )}\n        </RestoreAntDDefaultClsPrefix>\n      }\n    >\n      <form\n        onSubmit={form.handleSubmit(onSubmit)}\n        css={{ display: 'flex', alignItems: 'flex-end', gap: theme.spacing.md }}\n      >\n        <div css={{ minWidth: 0, display: 'flex', gap: theme.spacing.md, flex: 1 }}>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"key\">\n              {intl.formatMessage({\n                defaultMessage: 'Key',\n                description: 'Key-value tag editor modal > Key input label',\n              })}\n            </FormUI.Label>\n            <TagKeySelectDropdown\n              allAvailableTags={allAvailableTags || []}\n              control={form.control}\n              onKeyChangeCallback={onKeyChangeCallback}\n            />\n          </div>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"value\">\n              {valueRequired\n                ? intl.formatMessage({\n                    defaultMessage: 'Value',\n                    description: 'Key-value tag editor modal > Value input label (required)',\n                  })\n                : intl.formatMessage({\n                    defaultMessage: 'Value (optional)',\n                    description: 'Key-value tag editor modal > Value input label',\n                  })}\n            </FormUI.Label>\n            <RHFControlledComponents.Input\n              componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_223\"\n              name=\"value\"\n              control={form.control}\n              aria-label={\n                valueRequired\n                  ? intl.formatMessage({\n                      defaultMessage: 'Value',\n                      description: 'Key-value tag editor modal > Value input label (required)',\n                    })\n                  : intl.formatMessage({\n                      defaultMessage: 'Value (optional)',\n                      description: 'Key-value tag editor modal > Value input label',\n                    })\n              }\n              placeholder={intl.formatMessage({\n                defaultMessage: 'Type a value',\n                description: 'Key-value tag editor modal > Value input placeholder',\n              })}\n            />\n          </div>\n        </div>\n        <LegacyTooltip\n          title={intl.formatMessage({\n            defaultMessage: 'Add tag',\n            description: 'Key-value tag editor modal > Add tag button',\n          })}\n        >\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_248\"\n            htmlType=\"submit\"\n            aria-label={intl.formatMessage({\n              defaultMessage: 'Add tag',\n              description: 'Key-value tag editor modal > Add tag button',\n            })}\n          >\n            <PlusIcon />\n          </Button>\n        </LegacyTooltip>\n      </form>\n      {errorMessage && <FormUI.Message type=\"error\" message={errorMessage} />}\n      <div\n        css={{\n          display: 'flex',\n          rowGap: theme.spacing.xs,\n          flexWrap: 'wrap',\n          marginTop: theme.spacing.sm,\n        }}\n      >\n        {Array.from(finalTags.values()).map((tag) => (\n          <KeyValueTag isClosable tag={tag} onClose={() => handleTagDelete(tag)} key={tag.key} />\n        ))}\n      </div>\n    </Modal>\n  );\n\n  return { EditTagsModal, showEditTagsModal, isLoading };\n};\n\nfunction UnsavedTagPopoverTrigger({\n  isLoading,\n  formValues,\n  onSaveTask,\n}: {\n  isLoading: boolean;\n  formValues: any;\n  onSaveTask: () => void;\n}) {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const tagKeyDisplay = `${truncate(formValues.key, { length: 20 }) || '_'}`;\n  const tagValueDisplay = formValues.value ? `:${truncate(formValues.value, { length: 20 })}` : '';\n  const fullTagDisplay = `${tagKeyDisplay}${tagValueDisplay}`;\n\n  const shownText = intl.formatMessage(\n    {\n      defaultMessage: 'Are you sure you want to save and close without adding \"{tag}\"',\n      description: 'Key-value tag editor modal > Unsaved tag message',\n    },\n    {\n      tag: fullTagDisplay,\n    },\n  );\n  return (\n    <Popover.Root componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_309\">\n      <Popover.Trigger asChild>\n        <Button\n          componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_306\"\n          dangerouslyUseFocusPseudoClass\n          loading={isLoading}\n          type=\"primary\"\n        >\n          {intl.formatMessage({\n            defaultMessage: 'Save tags',\n            description: 'Key-value tag editor modal > Manage Tag save button',\n          })}\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content align=\"end\" aria-label={shownText}>\n        <Typography.Paragraph css={{ maxWidth: 400 }}>{shownText}</Typography.Paragraph>\n        <Popover.Close asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_316\"\n            onClick={onSaveTask}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Yes, save and close',\n              description: 'Key-value tag editor modal > Unsaved tag message > Yes, save and close button',\n            })}\n          </Button>\n        </Popover.Close>\n        <Popover.Close asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_324\"\n            type=\"primary\"\n            css={{ marginLeft: theme.spacing.sm }}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Cancel',\n              description: 'Key-value tag editor modal > Unsaved tag message > cancel button',\n            })}\n          </Button>\n        </Popover.Close>\n        <Popover.Arrow />\n      </Popover.Content>\n    </Popover.Root>\n  );\n}\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, type ButtonProps, LegacyTooltip } from '@databricks/design-system';\n\ninterface CopyButtonProps extends Partial<ButtonProps> {\n  copyText: string;\n  showLabel?: React.ReactNode;\n  componentId?: string;\n}\n\nexport const CopyButton = ({ copyText, showLabel = true, componentId, ...buttonProps }: CopyButtonProps) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(copyText);\n    setShowTooltip(true);\n    setTimeout(() => {\n      setShowTooltip(false);\n    }, 3000);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <LegacyTooltip\n      title={\n        <FormattedMessage defaultMessage=\"Copied\" description=\"Tooltip text shown when copy operation completes\" />\n      }\n      dangerouslySetAntdProps={{\n        visible: showTooltip,\n      }}\n    >\n      <Button\n        componentId={componentId ?? 'mlflow.shared.copy_button'}\n        type=\"primary\"\n        onClick={handleClick}\n        onMouseLeave={handleMouseLeave}\n        css={{ 'z-index': 1 }}\n        // Define children as a explicit prop so it can be easily overrideable\n        children={\n          showLabel ? <FormattedMessage defaultMessage=\"Copy\" description=\"Button text for copy button\" /> : undefined\n        }\n        {...buttonProps}\n      />\n    </LegacyTooltip>\n  );\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { useEditKeyValueTagsModal } from '../../../../common/hooks/useEditKeyValueTagsModal';\nimport { RegisteredPromptsApi } from '../api';\nimport type { RegisteredPrompt } from '../types';\nimport { useCallback } from 'react';\nimport { diffCurrentAndNewTags, isUserFacingTag } from '../../../../common/utils/TagUtils';\n\ntype UpdateTagsPayload = {\n  promptId: string;\n  toAdd: { key: string; value: string }[];\n  toDelete: { key: string }[];\n};\n\nexport const useUpdateRegisteredPromptTags = ({ onSuccess }: { onSuccess?: () => void }) => {\n  const updateMutation = useMutation<unknown, Error, UpdateTagsPayload>({\n    mutationFn: async ({ toAdd, toDelete, promptId }) => {\n      return Promise.all([\n        ...toAdd.map(({ key, value }) => RegisteredPromptsApi.setRegisteredPromptTag(promptId, key, value)),\n        ...toDelete.map(({ key }) => RegisteredPromptsApi.deleteRegisteredPromptTag(promptId, key)),\n      ]);\n    },\n  });\n\n  const { EditTagsModal, showEditTagsModal, isLoading } = useEditKeyValueTagsModal<\n    Pick<RegisteredPrompt, 'name' | 'tags'>\n  >({\n    valueRequired: true,\n    saveTagsHandler: (prompt, currentTags, newTags) => {\n      const { addedOrModifiedTags, deletedTags } = diffCurrentAndNewTags(currentTags, newTags);\n\n      return new Promise<void>((resolve, reject) => {\n        if (!prompt.name) {\n          return reject();\n        }\n        // Send all requests to the mutation\n        updateMutation.mutate(\n          {\n            promptId: prompt.name,\n            toAdd: addedOrModifiedTags,\n            toDelete: deletedTags,\n          },\n          {\n            onSuccess: () => {\n              resolve();\n              onSuccess?.();\n            },\n            onError: reject,\n          },\n        );\n      });\n    },\n  });\n\n  const showEditPromptTagsModal = useCallback(\n    (prompt: RegisteredPrompt) =>\n      showEditTagsModal({\n        name: prompt.name,\n        tags: prompt.tags.filter((tag) => isUserFacingTag(tag.key)),\n      }),\n    [showEditTagsModal],\n  );\n\n  return { EditTagsModal, showEditPromptTagsModal, isLoading };\n};\n","import type { QueryFunctionContext } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { useQuery } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { useCallback, useRef, useState } from 'react';\nimport type { RegisteredPromptsListResponse } from '../types';\nimport { RegisteredPromptsApi } from '../api';\n\nconst queryFn = ({ queryKey }: QueryFunctionContext<PromptsListQueryKey>) => {\n  const [, { searchFilter, pageToken }] = queryKey;\n  return RegisteredPromptsApi.listRegisteredPrompts(searchFilter, pageToken);\n};\n\ntype PromptsListQueryKey = ['prompts_list', { searchFilter?: string; pageToken?: string }];\n\nexport const usePromptsListQuery = ({\n  searchFilter,\n}: {\n  searchFilter?: string;\n} = {}) => {\n  const previousPageTokens = useRef<(string | undefined)[]>([]);\n\n  const [currentPageToken, setCurrentPageToken] = useState<string | undefined>(undefined);\n\n  const queryResult = useQuery<\n    RegisteredPromptsListResponse,\n    Error,\n    RegisteredPromptsListResponse,\n    PromptsListQueryKey\n  >(['prompts_list', { searchFilter, pageToken: currentPageToken }], {\n    queryFn,\n    retry: false,\n  });\n\n  const onNextPage = useCallback(() => {\n    previousPageTokens.current.push(currentPageToken);\n    setCurrentPageToken(queryResult.data?.next_page_token);\n  }, [queryResult.data?.next_page_token, currentPageToken]);\n\n  const onPreviousPage = useCallback(() => {\n    const previousPageToken = previousPageTokens.current.pop();\n    setCurrentPageToken(previousPageToken);\n  }, []);\n\n  return {\n    data: queryResult.data?.registered_models,\n    error: queryResult.error ?? undefined,\n    isLoading: queryResult.isLoading,\n    hasNextPage: queryResult.data?.next_page_token !== undefined,\n    hasPreviousPage: Boolean(currentPageToken),\n    onNextPage,\n    onPreviousPage,\n    refetch: queryResult.refetch,\n  };\n};\n","import { TableFilterInput, TableFilterLayout } from '@databricks/design-system';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { ModelSearchInputHelpTooltip } from '../../../../model-registry/components/model-list/ModelListFilters';\n\nexport const PromptsListFilters = ({\n  searchFilter,\n  onSearchFilterChange,\n}: {\n  searchFilter: string;\n  onSearchFilterChange: (searchFilter: string) => void;\n}) => {\n  return (\n    <TableFilterLayout>\n      <TableFilterInput\n        placeholder=\"Search prompts by name\"\n        componentId=\"mlflow.prompts.list.search\"\n        value={searchFilter}\n        onChange={(e) => onSearchFilterChange(e.target.value)}\n        // TODO: Add this back once we support searching with tags\n        // suffix={<ModelSearchInputHelpTooltip exampleEntityName=\"my-prompt-name\" />}\n      />\n    </TableFilterLayout>\n  );\n};\n","import type { ColumnDef } from '@tanstack/react-table';\nimport type { RegisteredPrompt } from '../types';\nimport { Button, PencilIcon } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { isUserFacingTag } from '../../../../common/utils/TagUtils';\nimport type { PromptsTableMetadata } from '../utils';\nimport { KeyValueTag } from '../../../../common/components/KeyValueTag';\n\nexport const PromptsListTableTagsCell: ColumnDef<RegisteredPrompt>['cell'] = ({\n  row: { original },\n  table: {\n    options: { meta },\n  },\n}) => {\n  const intl = useIntl();\n\n  const { onEditTags } = meta as PromptsTableMetadata;\n\n  const visibleTagList = original?.tags?.filter((tag) => isUserFacingTag(tag.key)) || [];\n  const containsTags = visibleTagList.length > 0;\n\n  return (\n    <div css={{ display: 'flex' }}>\n      <div css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', display: 'flex' }}>\n        {visibleTagList?.map((tag) => (\n          <KeyValueTag key={tag.key} tag={tag} />\n        ))}\n      </div>\n      <Button\n        componentId=\"mlflow.prompts.list.tag.add\"\n        size=\"small\"\n        icon={!containsTags ? undefined : <PencilIcon />}\n        onClick={() => onEditTags?.(original)}\n        aria-label={intl.formatMessage({\n          defaultMessage: 'Edit tags',\n          description: 'Label for the edit tags button in the registered prompts table',\n        })}\n        children={\n          !containsTags ? (\n            <FormattedMessage\n              defaultMessage=\"Add tags\"\n              description=\"Label for the add tags button in the registered prompts table\"\n            />\n          ) : undefined\n        }\n        css={{\n          flexShrink: 0,\n          opacity: 0,\n          '[role=row]:hover &': {\n            opacity: 1,\n          },\n          '[role=row]:focus-within &': {\n            opacity: 1,\n          },\n        }}\n        type=\"tertiary\"\n      />\n    </div>\n  );\n};\n","import type { ColumnDef } from '@tanstack/react-table';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport type { RegisteredPrompt } from '../types';\n\nexport const PromptsListTableNameCell: ColumnDef<RegisteredPrompt>['cell'] = ({ row: { original }, getValue }) => {\n  const name = getValue<string>();\n\n  if (!original.name) {\n    return name;\n  }\n  return <Link to={Routes.getPromptDetailsPageRoute(encodeURIComponent(original.name))}>{name}</Link>;\n};\n","import {\n  CursorPagination,\n  Empty,\n  NoIcon,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  TableSkeletonRows,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport type { ColumnDef } from '@tanstack/react-table';\nimport { flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';\nimport { useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport type { RegisteredPrompt } from '../types';\nimport { PromptsListTableTagsCell } from './PromptsListTableTagsCell';\nimport { PromptsListTableNameCell } from './PromptsListTableNameCell';\nimport Utils from '../../../../common/utils/Utils';\nimport { PromptsListTableVersionCell } from './PromptsListTableVersionCell';\nimport type { PromptsTableMetadata } from '../utils';\nimport { first, isEmpty } from 'lodash';\n\ntype PromptsTableColumnDef = ColumnDef<RegisteredPrompt>;\n\nconst usePromptsTableColumns = () => {\n  const intl = useIntl();\n  return useMemo(() => {\n    const resultColumns: PromptsTableColumnDef[] = [\n      {\n        header: intl.formatMessage({\n          defaultMessage: 'Name',\n          description: 'Header for the name column in the registered prompts table',\n        }),\n        accessorKey: 'name',\n        id: 'name',\n        cell: PromptsListTableNameCell,\n      },\n      {\n        header: intl.formatMessage({\n          defaultMessage: 'Latest version',\n          description: 'Header for the latest version column in the registered prompts table',\n        }),\n        cell: PromptsListTableVersionCell,\n        accessorFn: ({ latest_versions }) => first(latest_versions)?.version,\n        id: 'latestVersion',\n      },\n      {\n        header: intl.formatMessage({\n          defaultMessage: 'Last modified',\n          description: 'Header for the last modified column in the registered prompts table',\n        }),\n        id: 'lastModified',\n        accessorFn: ({ last_updated_timestamp }) => Utils.formatTimestamp(last_updated_timestamp, intl),\n      },\n      {\n        header: intl.formatMessage({\n          defaultMessage: 'Tags',\n          description: 'Header for the tags column in the registered prompts table',\n        }),\n        accessorKey: 'tags',\n        id: 'tags',\n        cell: PromptsListTableTagsCell,\n      },\n    ];\n\n    return resultColumns;\n  }, [intl]);\n};\n\nexport const PromptsListTable = ({\n  prompts,\n  hasNextPage,\n  hasPreviousPage,\n  isLoading,\n  isFiltered,\n  onNextPage,\n  onPreviousPage,\n  onEditTags,\n}: {\n  prompts?: RegisteredPrompt[];\n  error?: Error;\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n  isLoading?: boolean;\n  isFiltered?: boolean;\n  onNextPage: () => void;\n  onPreviousPage: () => void;\n  onEditTags: (editedEntity: RegisteredPrompt) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const columns = usePromptsTableColumns();\n\n  const table = useReactTable({\n    data: prompts ?? [],\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (row, index) => row.name ?? index.toString(),\n    meta: { onEditTags } satisfies PromptsTableMetadata,\n  });\n\n  const getEmptyState = () => {\n    const isEmptyList = !isLoading && isEmpty(prompts);\n    if (isEmptyList && isFiltered) {\n      return (\n        <Empty\n          image={<NoIcon />}\n          title={\n            <FormattedMessage\n              defaultMessage=\"No prompts found\"\n              description=\"Label for the empty state in the prompts table when no prompts are found\"\n            />\n          }\n          description={null}\n        />\n      );\n    }\n    if (isEmptyList) {\n      return (\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"No prompts created\"\n              description=\"A header for the empty state in the prompts table\"\n            />\n          }\n          description={\n            <FormattedMessage\n              defaultMessage='Use \"Create prompt\" button in order to create a new prompt'\n              description=\"Guidelines for the user on how to create a new prompt in the prompts list page\"\n            />\n          }\n        />\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <Table\n      scrollable\n      pagination={\n        <CursorPagination\n          hasNextPage={hasNextPage}\n          hasPreviousPage={hasPreviousPage}\n          onNextPage={onNextPage}\n          onPreviousPage={onPreviousPage}\n          componentId=\"mlflow.prompts.list.pagination\"\n        />\n      }\n      empty={getEmptyState()}\n    >\n      <TableRow isHeader>\n        {table.getLeafHeaders().map((header) => (\n          <TableHeader componentId=\"mlflow.prompts.list.table.header\" key={header.id}>\n            {flexRender(header.column.columnDef.header, header.getContext())}\n          </TableHeader>\n        ))}\n      </TableRow>\n      {isLoading ? (\n        <TableSkeletonRows table={table} />\n      ) : (\n        table.getRowModel().rows.map((row) => (\n          <TableRow key={row.id} css={{ height: theme.general.buttonHeight }}>\n            {row.getAllCells().map((cell) => (\n              <TableCell key={cell.id} css={{ alignItems: 'center' }}>\n                {flexRender(cell.column.columnDef.cell, cell.getContext())}\n              </TableCell>\n            ))}\n          </TableRow>\n        ))\n      )}\n    </Table>\n  );\n};\n","import { ScrollablePageWrapper } from '@mlflow/mlflow/src/common/components/ScrollablePageWrapper';\nimport { usePromptsListQuery } from './hooks/usePromptsListQuery';\nimport { Alert, Button, Header, Spacer } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { useState } from 'react';\nimport { PromptsListFilters } from './components/PromptsListFilters';\nimport { PromptsListTable } from './components/PromptsListTable';\nimport { useUpdateRegisteredPromptTags } from './hooks/useUpdateRegisteredPromptTags';\nimport { CreatePromptModalMode, useCreatePromptModal } from './hooks/useCreatePromptModal';\nimport Routes from '../../routes';\nimport { useNavigate } from '../../../common/utils/RoutingUtils';\nimport { withErrorBoundary } from '../../../common/utils/withErrorBoundary';\nimport ErrorUtils from '../../../common/utils/ErrorUtils';\nimport { PromptPageErrorHandler } from './components/PromptPageErrorHandler';\nimport { useDebounce } from 'use-debounce';\n\nconst PromptsPage = () => {\n  const [searchFilter, setSearchFilter] = useState('');\n  const navigate = useNavigate();\n\n  const [debouncedSearchFilter] = useDebounce(searchFilter, 500);\n\n  const { data, error, refetch, hasNextPage, hasPreviousPage, isLoading, onNextPage, onPreviousPage } =\n    usePromptsListQuery({ searchFilter: debouncedSearchFilter });\n\n  const { EditTagsModal, showEditPromptTagsModal } = useUpdateRegisteredPromptTags({ onSuccess: refetch });\n  const { CreatePromptModal, openModal: openCreateVersionModal } = useCreatePromptModal({\n    mode: CreatePromptModalMode.CreatePrompt,\n    onSuccess: ({ promptName }) => navigate(Routes.getPromptDetailsPageRoute(promptName)),\n  });\n\n  return (\n    <ScrollablePageWrapper css={{ overflow: 'hidden', display: 'flex', flexDirection: 'column' }}>\n      <Spacer shrinks={false} />\n      <Header\n        title={<FormattedMessage defaultMessage=\"Prompts\" description=\"Header title for the registered prompts page\" />}\n        buttons={\n          <Button componentId=\"mlflow.prompts.list.create\" type=\"primary\" onClick={openCreateVersionModal}>\n            <FormattedMessage\n              defaultMessage=\"Create prompt\"\n              description=\"Label for the create prompt button on the registered prompts page\"\n            />\n          </Button>\n        }\n      />\n      <Spacer shrinks={false} />\n      <div css={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n        <PromptsListFilters searchFilter={searchFilter} onSearchFilterChange={setSearchFilter} />\n        {error?.message && (\n          <>\n            <Alert type=\"error\" message={error.message} componentId=\"mlflow.prompts.list.error\" closable={false} />\n            <Spacer />\n          </>\n        )}\n        <PromptsListTable\n          prompts={data}\n          error={error}\n          hasNextPage={hasNextPage}\n          hasPreviousPage={hasPreviousPage}\n          isLoading={isLoading}\n          isFiltered={Boolean(searchFilter)}\n          onNextPage={onNextPage}\n          onPreviousPage={onPreviousPage}\n          onEditTags={showEditPromptTagsModal}\n        />\n      </div>\n      {EditTagsModal}\n      {CreatePromptModal}\n    </ScrollablePageWrapper>\n  );\n};\n\nexport default withErrorBoundary(ErrorUtils.mlflowServices.EXPERIMENTS, PromptsPage, undefined, PromptPageErrorHandler);\n","import { DangerIcon, Empty } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ScrollablePageWrapper } from '../../../../common/components/ScrollablePageWrapper';\n\nexport const PromptPageErrorHandler = ({ error }: { error?: Error }) => {\n  return (\n    <ScrollablePageWrapper css={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <Empty\n        data-testid=\"fallback\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Error\"\n            description=\"Title for error fallback component in prompts management UI\"\n          />\n        }\n        description={\n          error?.message ?? (\n            <FormattedMessage\n              defaultMessage=\"An error occurred while rendering this component.\"\n              description=\"Description for default error message in prompts management UI\"\n            />\n          )\n        }\n        image={<DangerIcon />}\n      />\n    </ScrollablePageWrapper>\n  );\n};\n","import { useRef, useEffect, useMemo } from 'react';\n\nexport interface CallOptions {\n  /**\n   * Controls if the function should be invoked on the leading edge of the timeout.\n   */\n  leading?: boolean;\n  /**\n   * Controls if the function should be invoked on the trailing edge of the timeout.\n   */\n  trailing?: boolean;\n}\n\nexport interface Options extends CallOptions {\n  /**\n   * The maximum time the given function is allowed to be delayed before it's invoked.\n   */\n  maxWait?: number;\n  /**\n   * If the setting is set to true, all debouncing and timers will happen on the server side as well\n   */\n  debounceOnServer?: boolean;\n}\n\nexport interface ControlFunctions<ReturnT> {\n  /**\n   * Cancel pending function invocations\n   */\n  cancel: () => void;\n  /**\n   * Immediately invoke pending function invocations\n   */\n  flush: () => ReturnT | undefined;\n  /**\n   * Returns `true` if there are any pending function invocations\n   */\n  isPending: () => boolean;\n}\n\n/**\n * Subsequent calls to the debounced function return the result of the last func invocation.\n * Note, that if there are no previous invocations you will get undefined. You should check it in your code properly.\n */\nexport interface DebouncedState<T extends (...args: any) => ReturnType<T>>\n  extends ControlFunctions<ReturnType<T>> {\n  (...args: Parameters<T>): ReturnType<T> | undefined;\n}\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn.\n *\n * The debounced function comes with a `cancel` method to cancel delayed `func`\n * invocations and a `flush` method to immediately invoke them.\n *\n * Provide `options` to indicate whether `func` should be invoked on the leading\n * and/or trailing edge of the `wait` timeout. The `func` is invoked with the\n * last arguments provided to the debounced function.\n *\n * Subsequent calls to the debounced function return the result of the last\n * `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n *  Controls if `func` should be invoked on the leading edge of the timeout.\n * @param {boolean} [options.leading=false]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {number} [options.maxWait]\n *  Controls if `func` should be invoked the trailing edge of the timeout.\n * @param {boolean} [options.trailing=true]\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nexport default function useDebouncedCallback<\n  T extends (...args: any) => ReturnType<T>,\n>(func: T, wait?: number, options?: Options): DebouncedState<T> {\n  const lastCallTime = useRef(null);\n  const lastInvokeTime = useRef(0);\n  const timerId = useRef(null);\n  const lastArgs = useRef<unknown[]>([]);\n  const lastThis = useRef<unknown>();\n  const result = useRef<ReturnType<T>>();\n  const funcRef = useRef(func);\n  const mounted = useRef(true);\n  // Always keep the latest version of debounce callback, with no wait time.\n  funcRef.current = func;\n\n  const isClientSide = typeof window !== 'undefined';\n  // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n  const useRAF = !wait && wait !== 0 && isClientSide;\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n\n  wait = +wait || 0;\n  options = options || {};\n\n  const leading = !!options.leading;\n  const trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n  const maxing = 'maxWait' in options;\n  const debounceOnServer =\n    'debounceOnServer' in options ? !!options.debounceOnServer : false; // `false` by default\n  const maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n\n  // You may have a question, why we have so many code under the useMemo definition.\n  //\n  // This was made as we want to escape from useCallback hell and\n  // not to initialize a number of functions each time useDebouncedCallback is called.\n  //\n  // It means that we have less garbage for our GC calls which improves performance.\n  // Also, it makes this library smaller.\n  //\n  // And the last reason, that the code without lots of useCallback with deps is easier to read.\n  // You have only one place for that.\n  const debounced = useMemo(() => {\n    const invokeFunc = (time: number) => {\n      const args = lastArgs.current;\n      const thisArg = lastThis.current;\n\n      lastArgs.current = lastThis.current = null;\n      lastInvokeTime.current = time;\n      return (result.current = funcRef.current.apply(thisArg, args));\n    };\n\n    const startTimer = (pendingFunc: () => void, wait: number) => {\n      if (useRAF) cancelAnimationFrame(timerId.current);\n      timerId.current = useRAF\n        ? requestAnimationFrame(pendingFunc)\n        : setTimeout(pendingFunc, wait);\n    };\n\n    const shouldInvoke = (time: number) => {\n      if (!mounted.current) return false;\n\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n\n      // Either this is the first call, activity has stopped and we're at the\n      // trailing edge, the system time has gone backwards and we're treating\n      // it as the trailing edge, or we've hit the `maxWait` limit.\n      return (\n        !lastCallTime.current ||\n        timeSinceLastCall >= wait ||\n        timeSinceLastCall < 0 ||\n        (maxing && timeSinceLastInvoke >= maxWait)\n      );\n    };\n\n    const trailingEdge = (time: number) => {\n      timerId.current = null;\n\n      // Only invoke if we have `lastArgs` which means `func` has been\n      // debounced at least once.\n      if (trailing && lastArgs.current) {\n        return invokeFunc(time);\n      }\n      lastArgs.current = lastThis.current = null;\n      return result.current;\n    };\n\n    const timerExpired = () => {\n      const time = Date.now();\n      if (shouldInvoke(time)) {\n        return trailingEdge(time);\n      }\n      // https://github.com/xnimorz/use-debounce/issues/97\n      if (!mounted.current) {\n        return;\n      }\n      // Remaining wait calculation\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n      const timeWaiting = wait - timeSinceLastCall;\n      const remainingWait = maxing\n        ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n        : timeWaiting;\n\n      // Restart the timer\n      startTimer(timerExpired, remainingWait);\n    };\n\n    const func: DebouncedState<T> = (...args: Parameters<T>): ReturnType<T> => {\n      if (!isClientSide && !debounceOnServer) {\n        return;\n      }\n      const time = Date.now();\n      const isInvoking = shouldInvoke(time);\n\n      lastArgs.current = args;\n      lastThis.current = this;\n      lastCallTime.current = time;\n\n      if (isInvoking) {\n        if (!timerId.current && mounted.current) {\n          // Reset any `maxWait` timer.\n          lastInvokeTime.current = lastCallTime.current;\n          // Start the timer for the trailing edge.\n          startTimer(timerExpired, wait);\n          // Invoke the leading edge.\n          return leading ? invokeFunc(lastCallTime.current) : result.current;\n        }\n        if (maxing) {\n          // Handle invocations in a tight loop.\n          startTimer(timerExpired, wait);\n          return invokeFunc(lastCallTime.current);\n        }\n      }\n      if (!timerId.current) {\n        startTimer(timerExpired, wait);\n      }\n      return result.current;\n    };\n\n    func.cancel = () => {\n      if (timerId.current) {\n        useRAF\n          ? cancelAnimationFrame(timerId.current)\n          : clearTimeout(timerId.current);\n      }\n      lastInvokeTime.current = 0;\n      lastArgs.current =\n        lastCallTime.current =\n        lastThis.current =\n        timerId.current =\n          null;\n    };\n\n    func.isPending = () => {\n      return !!timerId.current;\n    };\n\n    func.flush = () => {\n      return !timerId.current ? result.current : trailingEdge(Date.now());\n    };\n\n    return func;\n  }, [\n    leading,\n    maxing,\n    wait,\n    maxWait,\n    trailing,\n    useRAF,\n    isClientSide,\n    debounceOnServer,\n  ]);\n\n  return debounced;\n}\n","import { useCallback, useRef, useState } from 'react';\nimport useDebouncedCallback, { DebouncedState } from './useDebouncedCallback';\n\nfunction valueEquality<T>(left: T, right: T): boolean {\n  return left === right;\n}\n\nexport default function useDebounce<T>(\n  value: T,\n  delay: number,\n  options?: {\n    maxWait?: number;\n    leading?: boolean;\n    trailing?: boolean;\n    equalityFn?: (left: T, right: T) => boolean;\n  }\n): [T, DebouncedState<(value: T) => void>] {\n  const eq = (options && options.equalityFn) || valueEquality;\n\n  const activeValue = useRef(value);\n  const [, forceUpdate] = useState({});\n  const debounced = useDebouncedCallback(\n    useCallback(\n      (value: T) => {\n        activeValue.current = value;\n        forceUpdate({});\n      },\n      [forceUpdate]\n    ),\n    delay,\n    options\n  );\n  const previousValue = useRef(value);\n\n  if (!eq(previousValue.current, value)) {\n    debounced(value);\n    previousValue.current = value;\n  }\n\n  return [activeValue.current as T, debounced];\n}\n","import { PageWrapper } from '@databricks/design-system';\n\n/**\n * Wraps the page content in the scrollable container so e.g. constrained tables behave correctly.\n */\nexport const ScrollablePageWrapper = ({ children, className }: { children: React.ReactNode; className?: string }) => {\n  return (\n    <PageWrapper css={{ height: '100%' }} className={className}>\n      {children}\n    </PageWrapper>\n  );\n};\n","import React from 'react';\nimport { Modal, Typography, CopyIcon, useDesignSystemTheme } from '@databricks/design-system';\nconst { Paragraph } = Typography;\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\n\nexport interface KeyValueTagFullViewModalProps {\n  tagKey: string;\n  tagValue: string;\n  setIsKeyValueTagFullViewModalVisible: React.Dispatch<React.SetStateAction<boolean>>;\n  isKeyValueTagFullViewModalVisible: boolean;\n}\n\nexport const KeyValueTagFullViewModal = React.memo((props: KeyValueTagFullViewModalProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_components_keyvaluetagfullviewmodal.tsx_17\"\n      title={'Tag: ' + props.tagKey}\n      visible={props.isKeyValueTagFullViewModalVisible}\n      onCancel={() => props.setIsKeyValueTagFullViewModalVisible(false)}\n    >\n      <div css={{ display: 'flex' }}>\n        <Paragraph css={{ flexGrow: 1 }}>\n          <pre\n            css={{\n              backgroundColor: theme.colors.backgroundPrimary,\n              marginTop: theme.spacing.sm,\n              whiteSpace: 'pre-wrap',\n              wordBreak: 'break-all',\n            }}\n          >\n            {props.tagValue}\n          </pre>\n        </Paragraph>\n        <div\n          css={{\n            marginTop: theme.spacing.sm,\n          }}\n        >\n          <CopyButton copyText={props.tagValue} showLabel={false} icon={<CopyIcon />} aria-label=\"Copy\" />\n        </div>\n      </div>\n    </Modal>\n  );\n});\n","import { Tag, LegacyTooltip, Typography } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../types';\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { KeyValueTagFullViewModal } from './KeyValueTagFullViewModal';\nimport type { Interpolation, Theme } from '@emotion/react';\n\n/**\n * An arbitrary number that is used to determine if a tag is too\n * long and should be truncated. We want to avoid short keys or values\n * in a long tag to be truncated\n * */\nconst TRUNCATE_ON_CHARS_LENGTH = 30;\n\nfunction getTruncatedStyles(shouldTruncate = true): Interpolation<Theme> {\n  return shouldTruncate\n    ? {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        textWrap: 'nowrap',\n        whiteSpace: 'nowrap' as const,\n      }\n    : { whiteSpace: 'nowrap' as const };\n}\n\n/**\n * A <Tag /> wrapper used for displaying key-value entity\n */\nexport const KeyValueTag = ({\n  isClosable = false,\n  onClose,\n  tag,\n  enableFullViewModal = false,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n  maxWidth = 300,\n  className,\n}: {\n  isClosable?: boolean;\n  onClose?: () => void;\n  tag: KeyValueEntity;\n  enableFullViewModal?: boolean;\n  charLimit?: number;\n  maxWidth?: number;\n  className?: string;\n}) => {\n  const intl = useIntl();\n\n  const [isKeyValueTagFullViewModalVisible, setIsKeyValueTagFullViewModalVisible] = useState(false);\n\n  const { shouldTruncateKey, shouldTruncateValue } = getKeyAndValueComplexTruncation(tag, charLimit);\n  const allowFullViewModal = enableFullViewModal && (shouldTruncateKey || shouldTruncateValue);\n\n  const fullViewModalLabel = intl.formatMessage({\n    defaultMessage: 'Click to see more',\n    description: 'Run page > Overview > Tags cell > Tag',\n  });\n\n  return (\n    <div>\n      <Tag\n        componentId=\"codegen_mlflow_app_src_common_components_keyvaluetag.tsx_60\"\n        closable={isClosable}\n        onClose={onClose}\n        title={tag.key}\n        className={className}\n      >\n        <LegacyTooltip title={allowFullViewModal ? fullViewModalLabel : ''}>\n          <span\n            css={{ maxWidth, display: 'inline-flex' }}\n            onClick={() => (allowFullViewModal ? setIsKeyValueTagFullViewModalVisible(true) : undefined)}\n          >\n            <Typography.Text bold title={tag.key} css={getTruncatedStyles(shouldTruncateKey)}>\n              {tag.key}\n            </Typography.Text>\n            {tag.value && (\n              <Typography.Text title={tag.value} css={getTruncatedStyles(shouldTruncateValue)}>\n                : {tag.value}\n              </Typography.Text>\n            )}\n          </span>\n        </LegacyTooltip>\n      </Tag>\n      <div>\n        {isKeyValueTagFullViewModalVisible && (\n          <KeyValueTagFullViewModal\n            tagKey={tag.key}\n            tagValue={tag.value}\n            isKeyValueTagFullViewModalVisible={isKeyValueTagFullViewModalVisible}\n            setIsKeyValueTagFullViewModalVisible={setIsKeyValueTagFullViewModalVisible}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport function getKeyAndValueComplexTruncation(\n  tag: KeyValueEntity,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n): { shouldTruncateKey: boolean; shouldTruncateValue: boolean } {\n  const { key, value } = tag;\n  const fullLength = key.length + value.length;\n  const isKeyLonger = key.length > value.length;\n  const shorterLength = isKeyLonger ? value.length : key.length;\n\n  // No need to truncate if tag is short enough\n  if (fullLength <= charLimit) return { shouldTruncateKey: false, shouldTruncateValue: false };\n  // If the shorter string is too long, truncate both key and value.\n  if (shorterLength > charLimit / 2) return { shouldTruncateKey: true, shouldTruncateValue: true };\n\n  // Otherwise truncate the longer string\n  return {\n    shouldTruncateKey: isKeyLonger,\n    shouldTruncateValue: !isKeyLonger,\n  };\n}\n"],"names":["PromptsListTableVersionCell","row","original","getValue","version","_jsx","Typography","Text","children","FormattedMessage","id","defaultMessage","values","_ref","name","styles","getDropdownMenu","allAvailableTags","menu","intl","useIntl","theme","useDesignSystemTheme","searchValue","props","toLowerCase","useMemo","sortedIndexOf","isValidTagKey","test","React","flattenOptions","data","value","disabled","style","color","colors","actionTertiaryTextDefault","actionDisabledText","LegacyTooltip","title","undefined","formatMessage","placement","_jsxs","css","PlusIcon","_css","marginRight","spacing","sm","tagKey","key","groupOption","DropdownMenu","_ref2","TagKeySelectDropdown","control","onKeyChangeCallback","isOpen","setIsOpen","useState","selectRef","useRef","field","fieldState","useController","rules","required","message","LegacySelect","allowClear","ref","dangerouslySetAntdProps","showSearch","dropdownRender","placeholder","defaultValue","open","onDropdownVisibleChange","visible","filterOption","input","option","includes","onSelect","onChange","onClear","handleClear","validationState","error","map","tag","Option","getTagsMap","tags","Map","useEditKeyValueTagsModal","onSuccess","saveTagsHandler","valueRequired","editedEntityRef","errorMessage","setErrorMessage","initialTags","setInitialTags","finalTags","setFinalTags","showModal","setShowModal","form","useForm","defaultValues","hideModal","showEditTagsModal","useCallback","editedEntity","current","reset","saveTags","async","setIsLoading","Array","from","then","catch","e","_e$getUserVisibleErro","ErrorWrapper","getUserVisibleError","formValues","watch","isLoading","hasNewValues","isEqual","sortBy","isDirty","showPopoverMessage","EditTagsModal","Modal","componentId","destroyOnClose","onCancel","footer","RestoreAntDDefaultClsPrefix","Button","dangerouslyUseFocusPseudoClass","onClick","UnsavedTagPopoverTrigger","onSaveTask","loading","type","onSubmit","handleSubmit","trim","newEntries","set","display","alignItems","gap","md","minWidth","flex","FormUI","Label","htmlFor","_tag$value","get","setValue","RHFControlledComponents","Input","htmlType","Message","rowGap","xs","flexWrap","marginTop","KeyValueTag","isClosable","onClose","handleTagDelete","currentFinalTags","delete","_ref3","fullTagDisplay","truncate","length","shownText","Popover","Root","Trigger","asChild","Content","align","Paragraph","Close","marginLeft","Arrow","CopyButton","copyText","showLabel","buttonProps","showTooltip","setShowTooltip","handleClick","navigator","clipboard","writeText","setTimeout","onMouseLeave","handleMouseLeave","useUpdateRegisteredPromptTags","updateMutation","useMutation","mutationFn","toAdd","toDelete","promptId","Promise","all","RegisteredPromptsApi","setRegisteredPromptTag","deleteRegisteredPromptTag","prompt","currentTags","newTags","addedOrModifiedTags","deletedTags","diffCurrentAndNewTags","resolve","reject","mutate","onError","showEditPromptTagsModal","filter","isUserFacingTag","queryFn","queryKey","searchFilter","pageToken","listRegisteredPrompts","PromptsListFilters","onSearchFilterChange","TableFilterLayout","TableFilterInput","target","PromptsListTableTagsCell","table","options","meta","_original$tags","onEditTags","visibleTagList","containsTags","size","icon","PencilIcon","PromptsListTableNameCell","Link","to","Routes","getPromptDetailsPageRoute","encodeURIComponent","PromptsListTable","prompts","hasNextPage","hasPreviousPage","isFiltered","onNextPage","onPreviousPage","columns","usePromptsTableColumns","header","accessorKey","cell","accessorFn","latest_versions","_first","first","last_updated_timestamp","Utils","formatTimestamp","useReactTable","getCoreRowModel","getRowId","index","_row$name","toString","Table","scrollable","pagination","CursorPagination","empty","getEmptyState","isEmptyList","isEmpty","Empty","image","NoIcon","description","TableRow","isHeader","getLeafHeaders","TableHeader","flexRender","column","columnDef","getContext","TableSkeletonRows","getRowModel","rows","height","general","buttonHeight","getAllCells","TableCell","withErrorBoundary","ErrorUtils","mlflowServices","EXPERIMENTS","PromptsPage","setSearchFilter","navigate","useNavigate","debouncedSearchFilter","useDebounce","refetch","usePromptsListQuery","_queryResult$data2","_queryResult$data3","_queryResult$error","_queryResult$data4","previousPageTokens","currentPageToken","setCurrentPageToken","queryResult","useQuery","retry","_queryResult$data","push","next_page_token","previousPageToken","pop","registered_models","Boolean","CreatePromptModal","openModal","openCreateVersionModal","useCreatePromptModal","mode","CreatePromptModalMode","CreatePrompt","promptName","ScrollablePageWrapper","Spacer","shrinks","Header","buttons","_Fragment","Alert","closable","PromptPageErrorHandler","_error$message","DangerIcon","c","u","i","a","r","o","f","l","v","m","d","g","p","window","w","TypeError","s","leading","x","trailing","h","y","debounceOnServer","F","Math","max","maxWait","n","A","t","apply","cancelAnimationFrame","requestAnimationFrame","Date","now","min","slice","call","arguments","cancel","clearTimeout","isPending","flush","equalityFn","className","PageWrapper","KeyValueTagFullViewModal","isKeyValueTagFullViewModalVisible","setIsKeyValueTagFullViewModalVisible","backgroundColor","backgroundPrimary","whiteSpace","wordBreak","tagValue","CopyIcon","getTruncatedStyles","shouldTruncate","overflow","textOverflow","textWrap","enableFullViewModal","charLimit","maxWidth","shouldTruncateKey","shouldTruncateValue","fullLength","isKeyLonger","shorterLength","getKeyAndValueComplexTruncation","allowFullViewModal","fullViewModalLabel","Tag","bold"],"sourceRoot":""}