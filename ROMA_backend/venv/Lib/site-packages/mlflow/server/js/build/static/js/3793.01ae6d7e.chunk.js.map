{"version":3,"file":"static/js/3793.01ae6d7e.chunk.js","mappings":"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","sources":["shared/web-shared/genai-markdown-renderer/TableRenderer.tsx","shared/web-shared/genai-markdown-renderer/GenAIMarkdownRenderer.tsx","shared/web-shared/snippet/theme/databricks-duotone-dark.ts","shared/web-shared/copy/useCopyController.tsx","shared/web-shared/snippet/theme/databricks-light.ts","shared/web-shared/model-trace-explorer/ModelTraceExplorerHighlightedCodeSnippet.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerCodeSnippetBody.tsx","shared/web-shared/model-trace-explorer/constants.ts","shared/web-shared/model-trace-explorer/ModelTraceExplorerIcon.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatMessageHeader.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatRenderer.utils.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerToolCallMessage.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatMessage.tsx","shared/web-shared/model-trace-explorer/chat-utils/anthropic.ts","shared/web-shared/model-trace-explorer/chat-utils/autogen.ts","shared/web-shared/model-trace-explorer/chat-utils/bedrock.ts","shared/web-shared/model-trace-explorer/chat-utils/gemini.ts","shared/web-shared/model-trace-explorer/chat-utils/openai.ts","shared/web-shared/model-trace-explorer/chat-utils/langchain.ts","shared/web-shared/model-trace-explorer/chat-utils/llamaindex.ts","shared/web-shared/model-trace-explorer/chat-utils/dspy.ts"],"sourcesContent":["import React from 'react';\nimport { useVirtual } from 'react-virtual';\n\nimport { Table, TableCell, TableHeader, TableRow, useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { ReactMarkdownProps } from './types';\n\nexport function useParsedTableComponents({ children }: ReactMarkdownProps<'table'>): {\n  header: React.ReactNode | undefined;\n  rows: React.ReactElement[];\n  isValid: boolean;\n} {\n  if (!children) {\n    return {\n      header: undefined,\n      rows: [],\n      isValid: false,\n    };\n  }\n\n  const childArray = React.Children.toArray(children);\n\n  const header = childArray[0] ?? undefined;\n\n  // Parse rows, expect all children after the header to be tbody element containing the rows\n  const rows: React.ReactElement[] = childArray.slice(1).flatMap((child) => {\n    if (React.isValidElement(child)) {\n      return React.Children.toArray(child.props.children).filter((c): c is React.ReactElement =>\n        React.isValidElement(c),\n      );\n    }\n    return [];\n  });\n\n  return {\n    header,\n    rows,\n    isValid: true,\n  };\n}\n\nconst BasicTable = ({ children }: ReactMarkdownProps<'table'>) => {\n  return (\n    // Tables with many columns were not scrollable but instead become squished rendering the content unreadable\n    // Fixed by wrapping the table in a div with overflow auto and setting the table to display inline-flex\n    <div data-testid=\"basic-table\" css={{ overflow: 'auto' }}>\n      {/* Table has a \"height: 100%\" style that causes layout issues in some cases */}\n      <Table\n        scrollable\n        css={{\n          height: 'auto',\n          minHeight: 'initial',\n          display: 'inline-flex',\n          // Tables in tool call responses were not taking up the full width of the container\n          minWidth: '100%',\n          zIndex: 0, // Ensure the raised header doesn't cover elements outside the table\n        }}\n        children={children}\n      />\n    </div>\n  );\n};\n\nexport const TableRenderer = ({ children, node }: ReactMarkdownProps<'table'>) => {\n  const { header, rows, isValid } = useParsedTableComponents({ children, node });\n\n  if (!isValid) {\n    // If for some reason the table is not valid, fall back to the basic table\n    return <BasicTable children={children} node={node} />;\n  }\n\n  return <VirtualizedTable header={header} rows={rows} />;\n};\n\nconst MAX_TABLE_HEIGHT = 420;\n\nconst OVERSCAN = 20;\n\nconst VirtualizedTable = ({ header, rows }: { header: React.ReactNode; rows: React.ReactNode[] }) => {\n  const { theme } = useDesignSystemTheme();\n\n  const parentRef = React.useRef<HTMLDivElement>(null);\n\n  const rowVirtualizer = useVirtual({\n    size: rows.length,\n    parentRef,\n    overscan: OVERSCAN,\n  });\n\n  const { virtualItems, totalSize } = rowVirtualizer;\n\n  return (\n    <div\n      data-testid=\"virtualized-table\"\n      ref={parentRef}\n      css={{\n        overflow: 'auto',\n        maxHeight: MAX_TABLE_HEIGHT,\n        border: '1px solid',\n        borderColor: theme.colors.border,\n        borderRadius: theme.borders.borderRadiusMd,\n        marginBottom: theme.spacing.md,\n        zIndex: 0, // Ensure the raised header doesn't cover elements outside the table\n      }}\n    >\n      <Table\n        css={{\n          height: 'auto',\n          minHeight: 'initial',\n          display: 'inline-flex',\n          minWidth: '100%',\n        }}\n      >\n        {header}\n        <div\n          css={{\n            position: 'relative',\n            height: `${totalSize}px`,\n            width: '100%',\n            // Remove bottom border from the last row\n            '& > div:last-child [role=\"cell\"]': { borderBottom: 'none' },\n          }}\n        >\n          {virtualItems.map((virtualRow) => {\n            const rowIndex = virtualRow.index;\n            const rowElement = rows[rowIndex];\n\n            return (\n              <div\n                ref={virtualRow.measureRef}\n                key={rowIndex}\n                css={{\n                  position: 'absolute',\n                  top: `${virtualRow.start}px`,\n                  width: '100%',\n                }}\n              >\n                {rowElement}\n              </div>\n            );\n          })}\n        </div>\n      </Table>\n    </div>\n  );\n};\n\nexport const VirtualizedTableRow = ({ children, node }: ReactMarkdownProps<'tr'>) => {\n  const isHeader = node?.children.some((child) => child.tagName === 'th');\n  const { theme } = useDesignSystemTheme();\n  return (\n    <TableRow\n      style={\n        isHeader\n          ? { position: 'sticky', top: 0, zIndex: 1, backgroundColor: theme.colors.backgroundPrimary }\n          : undefined\n      }\n      children={children}\n      isHeader={isHeader}\n    />\n  );\n};\n\nexport const VirtualizedTableCell = ({ children, node }: ReactMarkdownProps<'td' | 'th'>) => {\n  const isHeader = node?.tagName === 'th';\n  const { theme } = useDesignSystemTheme();\n\n  if (isHeader) {\n    return (\n      <TableHeader\n        data-testid=\"virtualized-table-header\"\n        componentId=\"virtualized-table-header\"\n        css={{ paddingLeft: theme.spacing.sm, borderColor: theme.colors.border, color: theme.colors.textPrimary }}\n        children={children}\n      />\n    );\n  }\n\n  return <TableCell children={children} />;\n};\n","import React, { type ComponentType, useMemo } from 'react';\nimport type { Components, Options, UrlTransform } from 'react-markdown-10';\nimport ReactMarkdown, { defaultUrlTransform } from 'react-markdown-10';\nimport remarkGfm from 'remark-gfm-4';\n\nimport { TableCell, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { CodeSnippetLanguage } from '@databricks/web-shared/snippet';\nimport { CodeSnippet, SnippetCopyAction } from '@databricks/web-shared/snippet';\nimport { TableRenderer, VirtualizedTableCell, VirtualizedTableRow } from './TableRenderer';\nimport type { ReactMarkdownComponent, ReactMarkdownComponents, ReactMarkdownProps } from './types';\n\n/**\n * NOTE: react-markdown sanitizes urls by default, including `data:` urls, with the `urlTransform` prop, documented here: https://github.com/remarkjs/react-markdown?tab=readme-ov-file#defaulturltransformurl\n * It uses `micromark-util-sanitize-uri` package under the hood to escape urls and prevent injection: https://github.com/micromark/micromark/tree/main/packages/micromark-util-sanitize-uri#readme\n * We can allow jpeg and png data urls, and use the default transformer for everything else.\n */\nconst urlTransform: UrlTransform = (value) => {\n  if (value.startsWith('data:image/png') || value.startsWith('data:image/jpeg')) {\n    return value;\n  }\n  return defaultUrlTransform(value);\n};\n\nexport const GenAIMarkdownRenderer = (props: { children: string; components?: ExtendedComponents }) => {\n  const components: Components = useMemo(\n    () => getMarkdownComponents({ extensions: props.components }),\n    [props.components],\n  );\n  return (\n    <ReactMarkdown components={components} remarkPlugins={RemarkPlugins} urlTransform={urlTransform}>\n      {props.children}\n    </ReactMarkdown>\n  );\n};\n\nconst CodeMarkdownComponent = ({\n  codeBlock,\n  codeInline,\n  node,\n  ...codeProps\n}: Required<ExtededCodeRenderers> & ReactMarkdownProps<'code'>) => {\n  const language = React.useMemo(() => {\n    const match = /language-(\\w+)/.exec(codeProps.className ?? '');\n    return match && match[1] ? match[1] : undefined;\n  }, [codeProps.className]);\n\n  if (node?.position?.start.line === node?.position?.end.line) {\n    return React.createElement(codeInline, codeProps);\n  }\n\n  return React.createElement(codeBlock, { ...codeProps, language });\n};\n\nconst InlineCode = ({ children }: ReactMarkdownProps<'code'>) => <Typography.Text code>{children}</Typography.Text>;\n\n/**\n * Since this component is quite expensive to render we memoize it so if multiple\n * code blocks are being rendered, we only update the code blocks with changing props\n */\nconst CodeBlock = React.memo(({ children, language }: ReactMarkdownProps<'code'> & { language?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  const code = String(children).replace(/\\n$/, '');\n  return (\n    <div css={{ position: 'relative' }}>\n      <CodeSnippet\n        actions={<SnippetCopyAction componentId=\"genai.util.markdown-copy-code-block\" copyText={code} />}\n        theme={theme.isDarkMode ? 'duotoneDark' : 'light'}\n        children={code}\n        language={language && isCodeSnippetLanguage(language) ? language : 'text'}\n        style={{\n          padding: '8px 0',\n          borderRadius: 8,\n          width: '100%',\n          boxSizing: 'border-box',\n          // Setting a reasonable max height to avoid long code blocks taking up the entire screen.\n          // Component handles scrolling inside it gracefully\n          maxHeight: 640,\n          // Using column-reverse flex layout so the scroll position will stick to the bottom\n          // as new content is streamed in.\n          display: 'flex',\n          flexDirection: 'column-reverse',\n        }}\n        showLineNumbers\n      />\n    </div>\n  );\n});\n\nconst RemarkPlugins: Options['remarkPlugins'] = [remarkGfm];\n\n// react-markdown handles both inline and block code rendering in the same component\n// however, we want to render them differently so we need to split them into two components.\n// This also allows callees to override the default renderers separately\ntype ExtededCodeRenderers = {\n  codeInline?: ReactMarkdownComponent<'code'>;\n  codeBlock?: ComponentType<React.PropsWithChildren<Omit<ReactMarkdownProps<'code'>, 'ref'> & { language?: string }>>;\n};\n\ntype ExtendedComponents = Omit<ReactMarkdownComponents, 'code'> & ExtededCodeRenderers;\n\nexport const getMarkdownComponents = (props: { extensions?: ExtendedComponents }) =>\n  ({\n    a: ({ href, children }) => (\n      <Typography.Link\n        componentId=\"codegen_webapp_js_genai_util_markdown.tsx_71\"\n        href={href}\n        // If the link is to the footnote (starts with #user-content-fn), set id so footnote can link back to it\n        id={\n          href?.startsWith('#user-content-fn-') ? href.replace('#user-content-fn-', 'user-content-fnref-') : undefined\n        }\n        disabled={href?.startsWith('.')}\n        // If the link is to the footnote, add brackets around the children to make it appear as a footnote reference\n        children={href?.startsWith('#user-content-fn-') ? <>[{children}]</> : children}\n        // If the link is an id link, don't open in new tab\n        openInNewTab={!(href && href.startsWith('#'))}\n      />\n    ),\n    code: (codeProps) => (\n      <CodeMarkdownComponent\n        {...codeProps}\n        codeBlock={props.extensions?.codeBlock ?? CodeBlock} // Optionally override the default code block renderer\n        codeInline={props.extensions?.codeInline ?? InlineCode} // Optionally override the default inline code renderer\n      />\n    ),\n    p: ({ children }) => <Typography.Paragraph children={children} />,\n    h1: ({ children }) => <Typography.Title level={1} children={children} />,\n    h2: ({ children }) => <Typography.Title level={2} children={children} />,\n    h3: ({ children }) => <Typography.Title level={3} children={children} />,\n    h4: ({ children }) => <Typography.Title level={4} children={children} />,\n    h5: ({ children }) => <Typography.Title level={5} children={children} />,\n    table: ({ children, node }) => <TableRenderer children={children} node={node} />,\n    tr: ({ children, node }) => <VirtualizedTableRow children={children} node={node} />,\n    th: ({ children, node }) => <VirtualizedTableCell children={children} node={node} />,\n    // Without the multiline prop, the table cell will add ellipsis to the text effictively hiding the content\n    // for long text. This is not the desired behavior for markdown tables.\n    td: ({ children }) => <TableCell children={children} multiline />,\n    // Design system's table does not use thead and tbody elements\n    thead: ({ children }) => <>{children}</>,\n    tbody: ({ children }) => <>{children}</>,\n    img: ({ src, alt }) => <img src={src} alt={alt} css={{ maxWidth: '100%' }} />,\n  } satisfies ReactMarkdownComponents);\n\nconst isCodeSnippetLanguage = (languageString: string): languageString is CodeSnippetLanguage => {\n  // Casting the string to string literal so we can exhaust the union\n  const typeCast = languageString as CodeSnippetLanguage;\n  switch (typeCast) {\n    case 'go':\n    case 'java':\n    case 'javascript':\n    case 'json':\n    case 'python':\n    case 'sql':\n    case 'text':\n    case 'yaml':\n      return true;\n    default:\n      return false;\n  }\n};\n","/**\n * Adapted from `duotone-dark`\n * Ref: https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/b2457268891948f7005ccf539a70c000f0695bde/src/styles/prism/duotone-dark.js\n */\n\nconst databricksDuotoneDarkTheme = {\n  'code[class*=\"language-\"]': {\n    fontFamily:\n      'Consolas, Menlo, Monaco, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Courier New\", Courier, monospace',\n    fontSize: '14px',\n    lineHeight: '1.375',\n    direction: 'ltr',\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    background: '#2a2734',\n    color: '#5DFAFC', // D\n  },\n  'pre[class*=\"language-\"]': {\n    fontFamily:\n      'Consolas, Menlo, Monaco, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Courier New\", Courier, monospace',\n    fontSize: '14px',\n    lineHeight: '1.375',\n    direction: 'ltr',\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    background: '#2a2734',\n    color: '#5DFAFC', // D\n    padding: '1em',\n    margin: '.5em 0',\n    overflow: 'auto',\n  },\n  'pre > code[class*=\"language-\"]': {\n    fontSize: '1em',\n  },\n  'pre[class*=\"language-\"]::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'pre[class*=\"language-\"] ::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"]::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"] ::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'pre[class*=\"language-\"]::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'pre[class*=\"language-\"] ::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"]::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"] ::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  ':not(pre) > code[class*=\"language-\"]': {\n    padding: '.1em',\n    borderRadius: '.3em',\n  },\n  comment: {\n    color: '#6c6783',\n  },\n  prolog: {\n    color: '#6c6783',\n  },\n  doctype: {\n    color: '#6c6783',\n  },\n  cdata: {\n    color: '#6c6783',\n  },\n  punctuation: {\n    color: '#6c6783',\n  },\n  namespace: {\n    Opacity: '.7',\n  },\n  tag: {\n    color: '#3AACE2', // D\n  },\n  operator: {\n    color: '#3AACE2', // D\n  },\n  number: {\n    color: '#3AACE2', // D\n  },\n  property: {\n    color: '#5DFAFC', // D\n  },\n  function: {\n    color: '#5DFAFC', // D\n  },\n  'tag-id': {\n    color: '#eeebff',\n  },\n  selector: {\n    color: '#eeebff',\n  },\n  'atrule-id': {\n    color: '#eeebff',\n  },\n  'code.language-javascript': {\n    color: '#c4b9fe',\n  },\n  'attr-name': {\n    color: '#c4b9fe',\n  },\n  'code.language-css': {\n    color: '#ffffff', // D\n  },\n  'code.language-scss': {\n    color: '#ffffff', // D\n  },\n  boolean: {\n    color: '#ffffff', // D\n  },\n  string: {\n    color: '#ffffff', // D\n  },\n  entity: {\n    color: '#ffffff', // D\n    cursor: 'help',\n  },\n  url: {\n    color: '#ffffff', // D\n  },\n  '.language-css .token.string': {\n    color: '#ffffff', // D\n  },\n  '.language-scss .token.string': {\n    color: '#ffffff', // D\n  },\n  '.style .token.string': {\n    color: '#ffffff', // D\n  },\n  'attr-value': {\n    color: '#ffffff', // D\n  },\n  keyword: {\n    color: '#ffffff', // D\n  },\n  control: {\n    color: '#ffffff', // D\n  },\n  directive: {\n    color: '#ffffff', // D\n  },\n  unit: {\n    color: '#ffffff', // D\n  },\n  statement: {\n    color: '#ffffff', // D\n  },\n  regex: {\n    color: '#ffffff', // D\n  },\n  atrule: {\n    color: '#ffffff', // D\n  },\n  placeholder: {\n    color: '#ffffff', // D\n  },\n  variable: {\n    color: '#ffffff', // D\n  },\n  deleted: {\n    textDecoration: 'line-through',\n  },\n  inserted: {\n    borderBottom: '1px dotted #eeebff',\n    textDecoration: 'none',\n  },\n  italic: {\n    fontStyle: 'italic',\n  },\n  important: {\n    fontWeight: 'bold',\n    color: '#c4b9fe',\n  },\n  bold: {\n    fontWeight: 'bold',\n  },\n  'pre > code.highlight': {\n    Outline: '.4em solid #8a75f5',\n    OutlineOffset: '.4em',\n  },\n  '.line-numbers.line-numbers .line-numbers-rows': {\n    borderRightColor: '#2c2937',\n  },\n  '.line-numbers .line-numbers-rows > span:before': {\n    color: '#3c3949',\n  },\n  '.line-highlight.line-highlight': {\n    background: 'linear-gradient(to right, rgba(224, 145, 66, 0.2) 70%, rgba(224, 145, 66, 0))',\n  },\n};\n\nexport default databricksDuotoneDarkTheme;\n","import type { ReactElement } from 'react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useClipboard } from 'use-clipboard-copy';\n\nimport { CheckIcon, CopyIcon } from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nexport interface CopyController {\n  actionIcon: ReactElement;\n  tooltipMessage: string;\n  copy: () => void;\n  copied: boolean;\n  ariaLabel: string;\n  tooltipOpen: boolean;\n  handleTooltipOpenChange: (open: boolean) => void;\n}\n\n/**\n * Utility hook that is internal to web-shared, use: `Copyable` or `CopyActionButton`\n *  or if it's a `CodeSnippet`, `SnippetCopyAction`\n */\nexport function useCopyController(text: string, copyTooltip?: string, onCopy?: () => void): CopyController {\n  const intl = useIntl();\n\n  const copyMessage = copyTooltip\n    ? copyTooltip\n    : intl.formatMessage({\n        defaultMessage: 'Copy',\n        description: 'Tooltip message displayed on copy action',\n      });\n\n  const copiedMessage = intl.formatMessage({\n    defaultMessage: 'Copied',\n    description: 'Tooltip message displayed on copy action after it has been clicked',\n  });\n\n  const clipboard = useClipboard();\n  const copiedTimerIdRef = useRef<number>();\n  const [copied, setCopied] = useState(false);\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      window.clearTimeout(copiedTimerIdRef.current);\n    };\n  }, []);\n\n  const copy = () => {\n    clipboard.copy(text);\n    window.clearTimeout(copiedTimerIdRef.current);\n    setCopied(true);\n    onCopy?.();\n    copiedTimerIdRef.current = window.setTimeout(() => {\n      setCopied(false);\n    }, 3000);\n  };\n\n  return {\n    actionIcon: copied ? <CheckIcon /> : <CopyIcon />,\n    tooltipMessage: copied ? copiedMessage : copyMessage,\n    copy,\n    copied,\n    ariaLabel: copyMessage,\n    tooltipOpen: open || copied,\n    handleTooltipOpenChange: setOpen,\n  };\n}\n","/**\n * Adapted from `material-light`\n * Ref: https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/b2457268891948f7005ccf539a70c000f0695bde/src/styles/prism/material-light.js#L1\n *\n * This theme overwrites colors to be similiar to the `@databricks/editor` theme.\n */\n\nconst databricksLightTheme = {\n  'code[class*=\"language-\"]': {\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    wordWrap: 'normal',\n    color: 'rgb(77, 77, 76)', // D\n    background: '#fafafa',\n    fontFamily: 'Monaco, Menlo, Ubuntu Mono, Consolas, source-code-pro, monospace',\n    fontSize: '12px', // D\n    lineHeight: '1.5em',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n  },\n  'pre[class*=\"language-\"]': {\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    wordWrap: 'normal',\n    color: 'rgb(77, 77, 76)', // D\n    background: '#fafafa',\n    fontFamily: 'Monaco, Menlo, Ubuntu Mono, Consolas, source-code-pro, monospace',\n    fontSize: '12px', // D\n    lineHeight: '1.5em',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    overflow: 'auto',\n    position: 'relative',\n    margin: '0.5em 0',\n    padding: '1.25em 1em',\n  },\n  'code[class*=\"language-\"]::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"]::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'code[class*=\"language-\"] ::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"] ::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'code[class*=\"language-\"]::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"]::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'code[class*=\"language-\"] ::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"] ::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  ':not(pre) > code[class*=\"language-\"]': {\n    whiteSpace: 'normal',\n    borderRadius: '0.2em',\n    padding: '0.1em',\n  },\n  '.language-css > code': {\n    color: '#f5871f', // D\n  },\n  '.language-sass > code': {\n    color: '#f5871f', // D\n  },\n  '.language-scss > code': {\n    color: '#f5871f', // D\n  },\n  '[class*=\"language-\"] .namespace': {\n    Opacity: '0.7',\n  },\n  atrule: {\n    color: '#7c4dff',\n  },\n  'attr-name': {\n    color: '#39adb5',\n  },\n  'attr-value': {\n    color: '#f6a434',\n  },\n  attribute: {\n    color: '#f6a434',\n  },\n  boolean: {\n    color: '#7c4dff', // D\n  },\n  builtin: {\n    color: '#39adb5',\n  },\n  cdata: {\n    color: '#39adb5',\n  },\n  char: {\n    color: '#39adb5',\n  },\n  class: {\n    color: '#39adb5',\n  },\n  'class-name': {\n    color: '#6182b8',\n  },\n  comment: {\n    color: '#8e908c', // D\n  },\n  constant: {\n    color: '#7c4dff', // D\n  },\n  deleted: {\n    color: '#e53935',\n  },\n  doctype: {\n    color: '#aabfc9',\n  },\n  entity: {\n    color: '#e53935',\n  },\n  function: {\n    color: '#4271ae', // D\n  },\n  hexcode: {\n    color: '#f5871f', // D\n  },\n  id: {\n    color: '#7c4dff',\n    fontWeight: 'bold',\n  },\n  important: {\n    color: '#7c4dff',\n    fontWeight: 'bold',\n  },\n  inserted: {\n    color: '#39adb5',\n  },\n  keyword: {\n    color: '#8959a8', // D\n  },\n  number: {\n    color: '#f5871f', // D\n  },\n  operator: {\n    color: '#3e999f', // D\n  },\n  prolog: {\n    color: '#aabfc9',\n  },\n  property: {\n    color: '#39adb5',\n  },\n  'pseudo-class': {\n    color: '#f6a434',\n  },\n  'pseudo-element': {\n    color: '#f6a434',\n  },\n  punctuation: {\n    color: 'rgb(77, 77, 76)', // D\n  },\n  regex: {\n    color: '#6182b8',\n  },\n  selector: {\n    color: '#e53935',\n  },\n  string: {\n    color: '#3ba85f', // D\n  },\n  symbol: {\n    color: '#7c4dff',\n  },\n  tag: {\n    color: '#e53935',\n  },\n  unit: {\n    color: '#f5871f', // D\n  },\n  url: {\n    color: '#e53935',\n  },\n  variable: {\n    color: '#c72d4c', // D\n  },\n};\n\nexport default databricksLightTheme;\n","import React, { useCallback, useMemo } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { SearchMatch } from './ModelTrace.types';\nimport { getHighlightedSpanComponents } from './ModelTraceExplorer.utils';\nimport { ACTIVE_HIGHLIGHT_COLOR, INACTIVE_HIGHLIGHT_COLOR } from './constants';\n\nexport const ModelTraceExplorerHighlightedCodeSnippet = ({\n  searchFilter,\n  data,\n  activeMatch,\n  containsActiveMatch,\n}: {\n  searchFilter: string;\n  data: string;\n  activeMatch: SearchMatch;\n  containsActiveMatch: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const scrollToActiveMatch = useCallback((node: HTMLElement | null) => {\n    node?.scrollIntoView({ block: 'nearest', inline: 'nearest' });\n  }, []);\n\n  const spans = useMemo(() => {\n    if (!searchFilter) {\n      return [];\n    }\n\n    return getHighlightedSpanComponents({\n      data,\n      searchFilter,\n      activeMatchBackgroundColor: theme.colors[ACTIVE_HIGHLIGHT_COLOR],\n      inactiveMatchBackgroundColor: theme.colors[INACTIVE_HIGHLIGHT_COLOR],\n      containsActiveMatch,\n      activeMatch,\n      scrollToActiveMatch,\n    });\n  }, [searchFilter, data, theme, containsActiveMatch, activeMatch, scrollToActiveMatch]);\n\n  return (\n    <pre\n      css={{\n        whiteSpace: 'pre-wrap',\n        backgroundColor: theme.colors.backgroundSecondary,\n        padding: theme.spacing.sm,\n        fontSize: theme.typography.fontSizeSm,\n      }}\n    >\n      {spans}\n    </pre>\n  );\n};\n","import { isNil, isString } from 'lodash';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { Button, ChevronDownIcon, ChevronUpIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { SearchMatch } from './ModelTrace.types';\nimport { CodeSnippetRenderMode } from './ModelTrace.types';\nimport { ModelTraceExplorerHighlightedCodeSnippet } from './ModelTraceExplorerHighlightedCodeSnippet';\nimport { GenAIMarkdownRenderer } from '../genai-markdown-renderer';\n// eslint-disable-next-line import/no-deprecated\nimport { CodeSnippet, SnippetCopyAction } from '../snippet';\n\nconst MAX_LINES_FOR_PREVIEW = 4;\n// the `isContentLong` check does not work for\n// markdown rendering, since the content is wrapped\nconst MAX_CHARS_FOR_PREVIEW = 300;\n\nexport function ModelTraceExplorerCodeSnippetBody({\n  data,\n  searchFilter = '',\n  activeMatch = null,\n  containsActiveMatch = false,\n  renderMode = CodeSnippetRenderMode.JSON,\n  initialExpanded = false,\n}: {\n  data: string;\n  searchFilter?: string;\n  activeMatch?: SearchMatch | null;\n  containsActiveMatch?: boolean;\n  renderMode?: CodeSnippetRenderMode;\n  initialExpanded?: boolean;\n}) {\n  const containsMatches = Boolean(searchFilter) && !isNil(activeMatch) && data.toLowerCase().includes(searchFilter);\n  const { theme } = useDesignSystemTheme();\n  const [isContentLong, setIsContentLong] = useState(renderMode === 'json');\n  const [expanded, setExpanded] = useState(initialExpanded || containsMatches);\n  const snippetRef = useRef<HTMLPreElement>(null);\n  // if the data is rendered in text / markdown mode, then\n  // we need to parse it so that the newlines are unescaped\n  const dataToTruncate: string = useMemo(() => {\n    if (renderMode === 'json') {\n      return data;\n    }\n\n    const parsedData = JSON.parse(data);\n    if (isString(parsedData)) {\n      return parsedData;\n    }\n\n    return data;\n  }, [data, renderMode]);\n\n  const expandable =\n    isContentLong ||\n    dataToTruncate.split('\\n').length > MAX_LINES_FOR_PREVIEW ||\n    dataToTruncate.length > MAX_CHARS_FOR_PREVIEW;\n\n  // Truncate after first 3 lines if not expanded\n  const displayedData = useMemo(() => {\n    if (expandable && !expanded) {\n      const split = dataToTruncate.split('\\n').slice(0, MAX_LINES_FOR_PREVIEW).join('\\n');\n      return split.length > MAX_CHARS_FOR_PREVIEW ? split.slice(0, MAX_CHARS_FOR_PREVIEW) : split;\n    }\n\n    return dataToTruncate;\n  }, [dataToTruncate, expandable, expanded]);\n\n  useEffect(() => {\n    if (snippetRef.current) {\n      setIsContentLong(snippetRef.current.scrollWidth > snippetRef.current.clientWidth);\n    }\n  }, [renderMode, data]);\n\n  // add a ref to the <pre> component within <CodeSnippet>.\n  // we use the ref to check whether the <pre>'s content is overflowing\n  const PreWithRef = useCallback((preProps: any) => <pre {...preProps} ref={snippetRef} />, []);\n\n  if (containsMatches) {\n    return (\n      // if the snippet contains matches, render the search-highlighted version\n      <ModelTraceExplorerHighlightedCodeSnippet\n        data={data}\n        searchFilter={searchFilter}\n        activeMatch={activeMatch}\n        containsActiveMatch={!activeMatch.isKeyMatch && containsActiveMatch}\n      />\n    );\n  }\n\n  return (\n    <div css={{ position: 'relative' }}>\n      {renderMode === 'markdown' ? (\n        <div\n          css={{\n            padding: theme.spacing.md,\n            backgroundColor: theme.colors.backgroundSecondary,\n            marginBottom: -theme.spacing.md,\n          }}\n        >\n          <GenAIMarkdownRenderer>{displayedData}</GenAIMarkdownRenderer>\n        </div>\n      ) : (\n        <>\n          <SnippetCopyAction\n            key=\"copy-snippet\"\n            componentId=\"shared.model-trace-explorer.copy-snippet\"\n            copyText={data}\n            size=\"small\"\n            css={{ position: 'absolute', top: theme.spacing.xs, right: theme.spacing.xs, zIndex: 1 }}\n          />\n          {/* eslint-disable-next-line import/no-deprecated */}\n          <CodeSnippet\n            PreTag={PreWithRef}\n            showLineNumbers\n            language={renderMode}\n            lineProps={{ style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' } }}\n            wrapLines={expanded}\n            theme={theme.isDarkMode ? 'duotoneDark' : 'light'}\n            style={{\n              backgroundColor: theme.colors.backgroundSecondary,\n              padding: theme.spacing.sm,\n              paddingBottom: expandable ? 0 : theme.spacing.sm,\n              paddingRight: theme.spacing.md * 2,\n              overflow: expanded ? 'auto' : 'hidden',\n              textOverflow: 'ellipsis',\n              fontSize: theme.typography.fontSizeSm,\n              lineHeight: theme.typography.lineHeightBase,\n            }}\n          >\n            {displayedData}\n          </CodeSnippet>\n        </>\n      )}\n      {expandable && (\n        <div css={{ backgroundColor: theme.colors.backgroundSecondary }}>\n          <Button\n            css={{ width: '100%', padding: 0 }}\n            componentId={\n              expanded ? 'shared.model-trace-explorer.snippet-see-less' : 'shared.model-trace-explorer.snippet-see-more'\n            }\n            icon={expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n            type=\"tertiary\"\n            onClick={() => setExpanded(!expanded)}\n          >\n            {expanded ? (\n              <FormattedMessage\n                defaultMessage=\"See less\"\n                description=\"Model trace explorer > selected span > code snippet > see less button\"\n              />\n            ) : (\n              <FormattedMessage\n                defaultMessage=\"See more\"\n                description=\"Model trace explorer > selected span > code snippet > see more button\"\n              />\n            )}\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","export const ACTIVE_HIGHLIGHT_COLOR = 'yellow500';\nexport const INACTIVE_HIGHLIGHT_COLOR = 'yellow200';\n","import {\n  ModelsIcon,\n  ConnectIcon,\n  FileDocumentIcon,\n  useDesignSystemTheme,\n  SortUnsortedIcon,\n  QuestionMarkIcon,\n  CodeIcon,\n  FunctionIcon,\n  NumbersIcon,\n  SearchIcon,\n  WrenchIcon,\n  UserSparkleIcon,\n  ChainIcon,\n  UserIcon,\n  GearIcon,\n  SaveIcon,\n} from '@databricks/design-system';\n\nimport { ModelIconType } from './ModelTrace.types';\n\nexport const ModelTraceExplorerIcon = ({\n  type = ModelIconType.CONNECT,\n  // tooltips have inverted colors so the icon should match it\n  isInTooltip = false,\n  hasException = false,\n  isRootSpan = false,\n}: {\n  type?: ModelIconType;\n  isInTooltip?: boolean;\n  hasException?: boolean;\n  isRootSpan?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  // base icon colors depending on span attributes\n  let iconColor: 'ai' | 'danger' | undefined;\n  if (isRootSpan) {\n    iconColor = 'ai';\n  } else if (hasException) {\n    iconColor = 'danger';\n  }\n\n  const iconMap = {\n    [ModelIconType.MODELS]: <ModelsIcon color={iconColor} />,\n    [ModelIconType.DOCUMENT]: <FileDocumentIcon color={iconColor} />,\n    [ModelIconType.CONNECT]: <ConnectIcon color={iconColor} />,\n    [ModelIconType.CODE]: <CodeIcon color={iconColor} />,\n    [ModelIconType.FUNCTION]: <FunctionIcon color={iconColor} />,\n    [ModelIconType.NUMBERS]: <NumbersIcon color={iconColor} />,\n    [ModelIconType.SEARCH]: <SearchIcon color={iconColor} />,\n    [ModelIconType.SORT]: <SortUnsortedIcon color={iconColor} />,\n    [ModelIconType.UNKNOWN]: <QuestionMarkIcon color={iconColor} />,\n    [ModelIconType.WRENCH]: <WrenchIcon color={iconColor} />,\n    [ModelIconType.AGENT]: <UserSparkleIcon color={iconColor} />,\n    [ModelIconType.CHAIN]: <ChainIcon color={iconColor} />,\n    [ModelIconType.USER]: <UserIcon color={iconColor} />,\n    [ModelIconType.SYSTEM]: <GearIcon color={iconColor} />,\n    [ModelIconType.SAVE]: <SaveIcon color={iconColor} />,\n  };\n\n  // custom colors depending on span type\n  // these are not official props on the\n  // icon components, so they must be set\n  // via the `css` prop on the parent\n  let color: string = theme.colors.actionDefaultIconDefault;\n  let tooltipColor: string = theme.colors.actionPrimaryIcon;\n  let backgroundColor: string = theme.colors.backgroundSecondary;\n  switch (type) {\n    case ModelIconType.SEARCH:\n      color = theme.colors.textValidationSuccess;\n      tooltipColor = theme.colors.green500;\n      backgroundColor = theme.isDarkMode ? theme.colors.green800 : theme.colors.green100;\n      break;\n    case ModelIconType.MODELS:\n      color = theme.isDarkMode ? theme.colors.blue500 : theme.colors.turquoise;\n      tooltipColor = theme.isDarkMode ? theme.colors.turquoise : theme.colors.blue500;\n      backgroundColor = theme.isDarkMode ? theme.colors.blue800 : theme.colors.blue100;\n      break;\n    case ModelIconType.WRENCH:\n      color = theme.isDarkMode ? theme.colors.red500 : theme.colors.red700;\n      tooltipColor = theme.isDarkMode ? theme.colors.red700 : theme.colors.red500;\n      backgroundColor = theme.isDarkMode ? theme.colors.red800 : theme.colors.red100;\n      break;\n  }\n\n  return (\n    <div\n      css={{\n        position: 'relative',\n        width: theme.general.iconSize,\n        height: theme.general.iconSize,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: theme.borders.borderRadiusSm,\n        background: isInTooltip ? theme.colors.tooltipBackgroundTooltip : backgroundColor,\n        color: isInTooltip ? tooltipColor : color,\n        svg: { width: theme.general.iconFontSize, height: theme.general.iconFontSize },\n        flexShrink: 0,\n      }}\n    >\n      {hasException && (\n        <div\n          css={{\n            position: 'absolute',\n            top: -theme.spacing.xs,\n            right: -theme.spacing.xs,\n            height: theme.spacing.sm,\n            width: theme.spacing.sm,\n            borderRadius: theme.borders.borderRadiusSm,\n            backgroundColor: theme.colors.actionDangerPrimaryBackgroundDefault,\n            zIndex: 5,\n          }}\n        />\n      )}\n      {iconMap[type]}\n    </div>\n  );\n};\n","import {\n  ChevronRightIcon,\n  ChevronDownIcon,\n  Typography,\n  useDesignSystemTheme,\n  Tooltip,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { ModelTraceChatMessage } from '../ModelTrace.types';\nimport { ModelIconType } from '../ModelTrace.types';\nimport { ModelTraceExplorerIcon } from '../ModelTraceExplorerIcon';\n\nconst getRoleIcon = (role: string) => {\n  switch (role) {\n    case 'system':\n      return <ModelTraceExplorerIcon type={ModelIconType.SYSTEM} />;\n    case 'user':\n      return <ModelTraceExplorerIcon type={ModelIconType.USER} />;\n    case 'tool':\n    case 'function':\n      return <ModelTraceExplorerIcon type={ModelIconType.WRENCH} />;\n    default:\n      return <ModelTraceExplorerIcon type={ModelIconType.MODELS} />;\n  }\n};\n\nconst getRoleDisplayText = (message: ModelTraceChatMessage) => {\n  switch (message.role) {\n    case 'system':\n      return (\n        <FormattedMessage\n          defaultMessage=\"System\"\n          description=\"Display text for the 'system' role in a GenAI chat message.\"\n        />\n      );\n    case 'user':\n      return (\n        <FormattedMessage\n          defaultMessage=\"User\"\n          description=\"Display text for the 'user' role in a GenAI chat message.\"\n        />\n      );\n    case 'assistant':\n      return (\n        <FormattedMessage\n          defaultMessage=\"Assistant\"\n          description=\"Display text for the 'assistant' role in a GenAI chat message.\"\n        />\n      );\n    case 'tool':\n      if (message.name) {\n        return message.name;\n      }\n      return (\n        <FormattedMessage\n          defaultMessage=\"Tool\"\n          description=\"Display text for the 'tool' role in a GenAI chat message.\"\n        />\n      );\n    case 'function':\n      return (\n        <FormattedMessage\n          defaultMessage=\"Function\"\n          description=\"Display text for the 'function' role in a GenAI chat message.\"\n        />\n      );\n    default:\n      return message.role;\n  }\n};\n\nexport const ModelTraceExplorerChatMessageHeader = ({\n  isExpandable,\n  expanded,\n  setExpanded,\n  message,\n}: {\n  isExpandable: boolean;\n  expanded: boolean;\n  setExpanded: (expanded: boolean) => void;\n  message: ModelTraceChatMessage;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const hoverStyles = isExpandable\n    ? {\n        ':hover': {\n          backgroundColor: theme.colors.actionIconBackgroundHover,\n          cursor: 'pointer',\n        },\n      }\n    : {};\n\n  return (\n    <div\n      role=\"button\"\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        padding: theme.spacing.sm,\n        gap: theme.spacing.sm,\n        ...hoverStyles,\n      }}\n      onClick={() => setExpanded(!expanded)}\n    >\n      {isExpandable && (expanded ? <ChevronDownIcon /> : <ChevronRightIcon />)}\n      {getRoleIcon(message.role)}\n      {message.tool_call_id ? (\n        <Typography.Text\n          color=\"secondary\"\n          css={{\n            whiteSpace: 'nowrap',\n            display: 'inline-flex',\n            alignItems: 'center',\n            flex: 1,\n            minWidth: 0,\n          }}\n        >\n          <FormattedMessage\n            defaultMessage=\"{toolName} was called in {toolCallId}\"\n            description=\"A message that shows the tool call ID of a tool call chat message.\"\n            values={{\n              toolName: (\n                <Typography.Text css={{ marginRight: theme.spacing.xs }} bold>\n                  {getRoleDisplayText(message)}\n                </Typography.Text>\n              ),\n              toolCallId: (\n                <Tooltip componentId=\"test\" content={message.tool_call_id}>\n                  <div\n                    css={{ display: 'inline-flex', flexShrink: 1, overflow: 'hidden', marginLeft: theme.spacing.xs }}\n                  >\n                    <Typography.Text css={{ textOverflow: 'ellipsis', overflow: 'hidden', whiteSpace: 'nowrap' }} code>\n                      {message.tool_call_id}\n                    </Typography.Text>\n                  </div>\n                </Tooltip>\n              ),\n            }}\n          />\n        </Typography.Text>\n      ) : (\n        <Typography.Text bold>{getRoleDisplayText(message)}</Typography.Text>\n      )}\n    </div>\n  );\n};\n","export const CONTENT_TRUNCATION_LIMIT = 300;\n","import { FunctionIcon, Tag, Tooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { ModelTraceToolCall } from '../ModelTrace.types';\nimport { ModelTraceExplorerCodeSnippetBody } from '../ModelTraceExplorerCodeSnippetBody';\n\nexport function ModelTraceExplorerToolCallMessage({ toolCall }: { toolCall: ModelTraceToolCall }) {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div key={toolCall.id} css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n      <Typography.Text\n        color=\"secondary\"\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          padding: `0px ${theme.spacing.sm + theme.spacing.xs}px`,\n        }}\n      >\n        <FormattedMessage\n          defaultMessage=\"called {functionName} in {toolCallId}\"\n          description=\"A message that shows the tool calls that an AI assistant made. The full message reads (for example): 'Assistant called get_weather in id_123'.\"\n          values={{\n            functionName: (\n              <Tag\n                color=\"purple\"\n                componentId=\"shared.model-trace-explorer.function-name-tag\"\n                css={{ margin: `0px ${theme.spacing.xs}px` }}\n              >\n                <FunctionIcon />\n                <Typography.Text css={{ whiteSpace: 'nowrap', marginLeft: theme.spacing.xs }}>\n                  {toolCall.function.name}\n                </Typography.Text>\n              </Tag>\n            ),\n            toolCallId: (\n              <Tooltip componentId=\"test\" content={toolCall.id}>\n                <div css={{ display: 'inline-flex', flexShrink: 1, overflow: 'hidden', marginLeft: theme.spacing.xs }}>\n                  <Typography.Text\n                    css={{\n                      textOverflow: 'ellipsis',\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                    }}\n                    code\n                    color=\"secondary\"\n                  >\n                    {toolCall.id}\n                  </Typography.Text>\n                </div>\n              </Tooltip>\n            ),\n          }}\n        />\n      </Typography.Text>\n      <ModelTraceExplorerCodeSnippetBody data={toolCall.function.arguments} />\n    </div>\n  );\n}\n","import { isNil } from 'lodash';\nimport { useState } from 'react';\n\nimport { Button, ChevronDownIcon, ChevronUpIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { GenAIMarkdownRenderer } from '@databricks/web-shared/genai-markdown-renderer';\n\nimport { ModelTraceExplorerChatMessageHeader } from './ModelTraceExplorerChatMessageHeader';\nimport { CONTENT_TRUNCATION_LIMIT } from './ModelTraceExplorerChatRenderer.utils';\nimport { ModelTraceExplorerToolCallMessage } from './ModelTraceExplorerToolCallMessage';\nimport { CodeSnippetRenderMode, type ModelTraceChatMessage } from '../ModelTrace.types';\nimport { ModelTraceExplorerCodeSnippetBody } from '../ModelTraceExplorerCodeSnippetBody';\n\nconst tryGetJsonContent = (content: string) => {\n  try {\n    return {\n      content: JSON.stringify(JSON.parse(content), null, 2),\n      isJson: true,\n    };\n  } catch (error) {\n    return {\n      content,\n      isJson: false,\n    };\n  }\n};\n\nfunction ModelTraceExplorerChatMessageContent({\n  content,\n  shouldDisplayCodeSnippet,\n}: {\n  content: string;\n  shouldDisplayCodeSnippet: boolean;\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  if (!content) {\n    return null;\n  }\n\n  if (shouldDisplayCodeSnippet) {\n    return (\n      <ModelTraceExplorerCodeSnippetBody\n        data={content}\n        searchFilter=\"\"\n        activeMatch={null}\n        containsActiveMatch={false}\n        renderMode={CodeSnippetRenderMode.JSON}\n      />\n    );\n  }\n\n  return (\n    <div\n      css={{\n        padding: theme.spacing.sm,\n        paddingTop: 0,\n        // genai markdown renderer uses default paragraph sizing which has\n        // a bottom margin that we can't get rid of. workaround by setting\n        // negative margin in a wrapper.\n        marginBottom: -theme.typography.fontSizeBase,\n      }}\n    >\n      <GenAIMarkdownRenderer>{content}</GenAIMarkdownRenderer>\n    </div>\n  );\n}\n\nexport function ModelTraceExplorerChatMessage({\n  message,\n  className,\n}: {\n  message: ModelTraceChatMessage;\n  className?: string;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const [expanded, setExpanded] = useState(false);\n  const { content, isJson } = tryGetJsonContent(message.content ?? '');\n\n  // tool call responses can be JSON, and in these cases\n  // it's more helpful to display the message as JSON\n  const shouldDisplayCodeSnippet = isJson && (message.role === 'tool' || message.role === 'function');\n  // if the content is JSON, truncation will be handled by the code\n  // snippet. otherwise, we need to truncate the content manually.\n  const isExpandable = !shouldDisplayCodeSnippet && content.length > CONTENT_TRUNCATION_LIMIT;\n\n  const displayedContent = isExpandable && !expanded ? `${content.slice(0, CONTENT_TRUNCATION_LIMIT)}...` : content;\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%',\n        borderRadius: theme.borders.borderRadiusSm,\n        border: `1px solid ${theme.colors.border}`,\n        backgroundColor: theme.colors.backgroundPrimary,\n        overflow: 'hidden',\n      }}\n      className={className}\n    >\n      <ModelTraceExplorerChatMessageHeader\n        isExpandable={isExpandable}\n        expanded={expanded}\n        setExpanded={setExpanded}\n        message={message}\n      />\n      <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n        {!isNil(message.tool_calls) &&\n          message.tool_calls.map((toolCall) => (\n            <ModelTraceExplorerToolCallMessage key={toolCall.id} toolCall={toolCall} />\n          ))}\n        <ModelTraceExplorerChatMessageContent\n          content={displayedContent}\n          shouldDisplayCodeSnippet={shouldDisplayCodeSnippet}\n        />\n      </div>\n      {isExpandable && (\n        <Button\n          componentId={\n            expanded\n              ? 'shared.model-trace-explorer.chat-message-see-less'\n              : 'shared.model-trace-explorer.chat-message-see-more'\n          }\n          icon={expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          type=\"tertiary\"\n          onClick={() => setExpanded(!expanded)}\n          css={{\n            display: 'flex',\n            width: '100%',\n            padding: theme.spacing.md,\n            borderRadius: '0px !important',\n          }}\n        >\n          {expanded ? (\n            <FormattedMessage\n              defaultMessage=\"See less\"\n              description=\"A button label in a message renderer that truncates long content when clicked.\"\n            />\n          ) : (\n            <FormattedMessage\n              defaultMessage=\"See more\"\n              description=\"A button label in a message renderer that expands truncated content when clicked.\"\n            />\n          )}\n        </Button>\n      )}\n    </div>\n  );\n}\n","import { has, isArray, isNil, isObject, isString } from 'lodash';\n\nimport type { ModelTraceChatMessage, ModelTraceContentParts } from '../ModelTrace.types';\nimport { prettyPrintChatMessage } from '../ModelTraceExplorer.utils';\n\nexport type AnthropicMessagesInput = {\n  messages: AnthropicMessageParam[];\n};\n\nexport type AnthropicMessagesOutput = {\n  id: string;\n  content: AnthropicContentBlock[];\n  role: 'assistant';\n  type: 'message';\n  // model: Model;\n  // stop_reason: StopReason | null;\n  // stop_sequence: string | null;\n  // usage: Usage;\n};\n\ntype AnthropicContentBlock = AnthropicTextBlock | AnthropicToolUseBlock;\n// | ThinkingBlock\n// | RedactedThinkingBlock\n// | ServerToolUseBlock\n// | WebSearchToolResultBlock;\n\ntype AnthropicMessageParam = {\n  content: string | AnthropicContentBlockParam[];\n  role: 'user' | 'assistant';\n};\n\ntype AnthropicContentBlockParam =\n  | AnthropicTextBlockParam\n  | AnthropicImageBlockParam\n  | AnthropicToolUseBlockParam\n  | AnthropicToolResultBlockParam;\n// | DocumentBlockParam\n// | ThinkingBlockParam\n// | RedactedThinkingBlockParam\n// | ServerToolUseBlockParam\n// | WebSearchToolResultBlockParam;\n\ntype AnthropicTextBlockParam = {\n  text: string;\n  type: 'text';\n};\n\ntype AnthropicTextBlock = {\n  text: string;\n  type: 'text';\n};\n\ntype AnthropicImageBlockParam = {\n  source: AnthropicBase64ImageSource | AnthropicURLImageSource;\n  type: 'image';\n};\n\ntype AnthropicBase64ImageSource = {\n  type: 'base64';\n  data: string;\n  media_type: 'image/jpeg' | 'image/png' | 'image/gif' | 'image/webp';\n};\n\ntype AnthropicURLImageSource = {\n  type: 'url';\n  url: string;\n};\n\ntype AnthropicToolUseBlockParam = {\n  id: string;\n  input: Record<string, any>;\n  name: string;\n  type: 'tool_use';\n};\n\ntype AnthropicToolUseBlock = {\n  id: string;\n  input: Record<string, any>;\n  name: string;\n  type: 'tool_use';\n};\n\ntype AnthropicToolResultBlockParam = {\n  content: string;\n  tool_use_id: string;\n  type: 'tool_result';\n};\n\nconst isAnthropicContentBlockParam = (obj: unknown): obj is AnthropicContentBlockParam => {\n  if (isNil(obj)) {\n    return false;\n  }\n\n  if (has(obj, 'type')) {\n    if (obj.type === 'text' && has(obj, 'text') && isString(obj.text)) {\n      return true;\n    }\n\n    if (obj.type === 'image' && has(obj, 'source') && has(obj.source, 'type')) {\n      if (\n        obj.source.type === 'base64' &&\n        has(obj.source, 'media_type') &&\n        isString(obj.source.media_type) &&\n        ['image/jpeg', 'image/png', 'image/gif', 'image/webp'].includes(obj.source.media_type) &&\n        has(obj.source, 'data') &&\n        isString(obj.source.data)\n      ) {\n        return true;\n      }\n\n      if (obj.source.type === 'url' && has(obj.source, 'url') && isString(obj.source.url)) {\n        return true;\n      }\n    }\n\n    if (obj.type === 'tool_use' && has(obj, 'id') && has(obj, 'name') && has(obj, 'input')) {\n      return isString(obj.id) && isString(obj.name) && isObject(obj.input);\n    }\n\n    if (obj.type === 'tool_result' && has(obj, 'tool_use_id') && has(obj, 'content')) {\n      return isString(obj.tool_use_id) && isString(obj.content);\n    }\n  }\n  return false;\n};\n\nconst isAnthropicMessageParam = (obj: unknown): obj is AnthropicMessageParam => {\n  if (!isObject(obj)) {\n    return false;\n  }\n\n  const hasRole = has(obj, 'role') && isString(obj.role) && ['user', 'assistant'].includes(obj.role);\n  const hasContent =\n    'content' in obj &&\n    (isString(obj.content) || (isArray(obj.content) && obj.content.every(isAnthropicContentBlockParam)));\n\n  return hasRole && hasContent;\n};\n\nconst normalizeAnthropicContentBlockParam = (item: AnthropicContentBlockParam): ModelTraceContentParts => {\n  switch (item.type) {\n    case 'text': {\n      return { type: 'text', text: item.text };\n    }\n    case 'image': {\n      switch (item.source.type) {\n        case 'base64': {\n          return {\n            type: 'image_url',\n            image_url: { url: `data:${item.source.media_type};base64,${item.source.data}` },\n          };\n        }\n        case 'url': {\n          return { type: 'image_url', image_url: { url: item.source.url } };\n        }\n      }\n    }\n  }\n  throw new Error(`Unsupported content block type: ${(item as any).type}`);\n};\n\nconst processAnthropicMessageContent = (\n  content: AnthropicContentBlockParam[],\n): {\n  messages: ModelTraceChatMessage[];\n  textParts: ModelTraceContentParts[];\n  toolCalls: any[];\n} => {\n  const messages: ModelTraceChatMessage[] = [];\n  const textParts: ModelTraceContentParts[] = [];\n  const toolCalls: any[] = [];\n\n  for (const item of content) {\n    if (item.type === 'text' || item.type === 'image') {\n      textParts.push(normalizeAnthropicContentBlockParam(item));\n    } else if (item.type === 'tool_use') {\n      toolCalls.push({\n        id: item.id,\n        function: {\n          name: item.name,\n          arguments: JSON.stringify(item.input),\n        },\n      });\n    } else if (item.type === 'tool_result') {\n      messages.push({\n        role: 'tool',\n        tool_call_id: item.tool_use_id,\n        content: item.content,\n      });\n    }\n  }\n\n  return { messages, textParts, toolCalls };\n};\n\nconst processAnthropicMessage = (message: AnthropicMessageParam): ModelTraceChatMessage[] => {\n  const messages: ModelTraceChatMessage[] = [];\n\n  if (typeof message.content === 'string') {\n    const chatMessage = prettyPrintChatMessage({\n      type: 'message',\n      content: message.content,\n      role: message.role,\n    });\n    if (chatMessage) messages.push(chatMessage);\n  } else {\n    const { messages: toolMessages, textParts, toolCalls } = processAnthropicMessageContent(message.content);\n    messages.push(...toolMessages);\n\n    if (textParts.length > 0 || toolCalls.length > 0) {\n      const chatMessage = prettyPrintChatMessage({\n        type: 'message',\n        content: textParts.length > 0 ? textParts : undefined,\n        role: message.role,\n        ...(toolCalls.length > 0 && { tool_calls: toolCalls }),\n      });\n      if (chatMessage) messages.push(chatMessage);\n    }\n  }\n\n  return messages;\n};\n\nexport const normalizeAnthropicChatInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (!isObject(obj)) {\n    return null;\n  }\n\n  if ('messages' in obj && isArray(obj.messages) && obj.messages.every(isAnthropicMessageParam)) {\n    const messages: ModelTraceChatMessage[] = [];\n\n    for (const message of obj.messages) {\n      messages.push(...processAnthropicMessage(message));\n    }\n\n    return messages;\n  }\n\n  return null;\n};\n\nexport const normalizeAnthropicChatOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (!isObject(obj)) {\n    return null;\n  }\n\n  if (has(obj, 'type') && obj.type === 'message' && isAnthropicMessageParam(obj)) {\n    return processAnthropicMessage(obj);\n  }\n\n  return null;\n};\n","import { compact, get, has, isArray, isNil, isObject, isString } from 'lodash';\n\nimport type { ModelTraceChatMessage } from '../ModelTrace.types';\nimport { prettyPrintChatMessage, prettyPrintToolCall } from '../ModelTraceExplorer.utils';\n\ninterface AutogenFunctionCall {\n  id: string;\n  name: string;\n  arguments: string;\n}\n\ninterface AutogenSystemMessage {\n  source: 'system';\n  content: string;\n}\n\ninterface AutogenUserMessage {\n  source: 'user';\n  content: string | any[];\n}\n\ninterface AutogenAssistantMessage {\n  source: 'assistant';\n  content: string | AutogenFunctionCall[];\n}\n\ninterface AutogenFunctionExecutionResultMessage {\n  source: 'function';\n  content: any;\n}\n\ntype AutogenMessage =\n  | AutogenSystemMessage\n  | AutogenUserMessage\n  | AutogenAssistantMessage\n  | AutogenFunctionExecutionResultMessage;\n\nconst isAutogenFunctionCall = (obj: unknown): obj is AutogenFunctionCall => {\n  return isObject(obj) && isString(get(obj, 'id')) && isString(get(obj, 'name')) && isString(get(obj, 'arguments'));\n};\n\nconst isAutogenMessage = (obj: unknown): obj is AutogenMessage => {\n  if (!isObject(obj)) {\n    return false;\n  }\n\n  // Handle messages with 'type' field (new format)\n  const messageType = get(obj, 'type');\n  if (messageType) {\n    if (messageType === 'SystemMessage') {\n      return isString(get(obj, 'content'));\n    }\n    if (messageType === 'UserMessage') {\n      return has(obj, 'content') && has(obj, 'source');\n    }\n    if (messageType === 'AssistantMessage') {\n      return has(obj, 'content') && has(obj, 'source');\n    }\n    if (messageType === 'FunctionMessage') {\n      return has(obj, 'content') && has(obj, 'source');\n    }\n  }\n\n  // Handle messages with 'source' field (old format)\n  if (has(obj, 'source') && ['system', 'user', 'assistant', 'function'].includes(get(obj, 'source'))) {\n    return has(obj, 'content');\n  }\n\n  return false;\n};\n\nconst convertAssistantMessageToChatMessage = (\n  content: string | AutogenFunctionCall[],\n): ModelTraceChatMessage | null => {\n  if (isString(content)) {\n    return prettyPrintChatMessage({ type: 'message', content, role: 'assistant' });\n  }\n\n  if (isArray(content) && content.every(isAutogenFunctionCall)) {\n    return {\n      role: 'assistant',\n      tool_calls: content.map((f) =>\n        prettyPrintToolCall({\n          id: f.id,\n          function: {\n            name: f.name,\n            arguments: f.arguments,\n          },\n        }),\n      ),\n    };\n  }\n\n  return null;\n};\n\nconst normalizeAutogenMessage = (message: any): ModelTraceChatMessage | null => {\n  // Handle messages with 'type' field (new format)\n  if (message.type === 'SystemMessage') {\n    return prettyPrintChatMessage({ type: 'message', content: message.content, role: 'system' });\n  }\n\n  if (message.type === 'UserMessage') {\n    if (isString(message.content)) {\n      return prettyPrintChatMessage({ type: 'message', content: message.content, role: 'user' });\n    }\n\n    if (isArray(message.content)) {\n      // Handle content that might be an array of text/image parts\n      const textParts = message.content\n        .filter((part: any) => isString(part) || (isObject(part) && (part as any).type === 'text'))\n        .map((part: any) => (isString(part) ? { type: 'text' as const, text: part } : part));\n\n      if (textParts.length > 0) {\n        return prettyPrintChatMessage({ type: 'message', content: textParts, role: 'user' });\n      }\n    }\n  }\n\n  if (message.type === 'AssistantMessage') {\n    return convertAssistantMessageToChatMessage(message.content);\n  }\n\n  if (message.type === 'FunctionMessage') {\n    // Function execution result messages are typically logged as user messages\n    return prettyPrintChatMessage({ type: 'message', content: JSON.stringify(message.content), role: 'user' });\n  }\n\n  // Handle messages with 'source' field (old format)\n  if (message.source === 'system') {\n    return prettyPrintChatMessage({ type: 'message', content: message.content, role: 'system' });\n  }\n\n  if (message.source === 'user') {\n    if (isString(message.content)) {\n      return prettyPrintChatMessage({ type: 'message', content: message.content, role: 'user' });\n    }\n\n    if (isArray(message.content)) {\n      // Handle content that might be an array of text/image parts\n      const textParts = message.content\n        .filter((part: any) => isString(part))\n        .map((part: any) => ({ type: 'text' as const, text: part }));\n\n      if (textParts.length > 0) {\n        return prettyPrintChatMessage({ type: 'message', content: textParts, role: 'user' });\n      }\n    }\n  }\n\n  if (message.source === 'assistant') {\n    return convertAssistantMessageToChatMessage(message.content);\n  }\n\n  if (message.source === 'function') {\n    // Function execution result messages are typically logged as user messages\n    return prettyPrintChatMessage({ type: 'message', content: JSON.stringify(message.content), role: 'user' });\n  }\n\n  return null;\n};\n\nexport const normalizeAutogenChatInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  // Handle case where input is directly an array of messages\n  if (isArray(obj) && obj.length > 0 && obj.every(isAutogenMessage)) {\n    return compact(obj.map(normalizeAutogenMessage));\n  }\n\n  // Handle case where input is wrapped in an object with 'messages' key\n  if (isObject(obj) && 'messages' in obj) {\n    const messages = (obj as any).messages;\n    if (isArray(messages) && messages.length > 0 && messages.every(isAutogenMessage)) {\n      return compact(messages.map(normalizeAutogenMessage));\n    }\n  }\n\n  return null;\n};\n\nexport const normalizeAutogenChatOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  // Handle case where output is directly an array of messages\n  if (isArray(obj) && obj.length > 0 && obj.every(isAutogenMessage)) {\n    return compact(obj.map(normalizeAutogenMessage));\n  }\n\n  // Handle case where output is wrapped in an object with 'messages' key\n  if (isObject(obj) && 'content' in obj) {\n    const message = prettyPrintChatMessage({ role: 'assistant', content: obj.content as string, type: 'message' });\n    return message ? [message] : null;\n  }\n\n  return null;\n};\n","import { compact, has, isArray, isNil, isObject, isString } from 'lodash';\n\nimport type { ModelTraceChatMessage, ModelTraceContentParts } from '../ModelTrace.types';\nimport { prettyPrintToolCall } from '../ModelTraceExplorer.utils';\n\ninterface BedrockToolUse {\n  toolUseId: string;\n  name: string;\n  input: string | Record<string, any>;\n}\n\ninterface BedrockToolResult {\n  toolUseId: string;\n  content: BedrockContentBlock[];\n}\n\ninterface BedrockContentBlock {\n  text?: string;\n  json?: any;\n  image?: {\n    source: {\n      bytes: string | Uint8Array;\n    };\n    format: string;\n  };\n  toolUse?: BedrockToolUse;\n  toolResult?: BedrockToolResult;\n}\n\ninterface BedrockMessage {\n  role: 'user' | 'assistant' | 'system';\n  content: BedrockContentBlock[];\n}\n\nconst parseBedrockContent = (content: BedrockContentBlock): ModelTraceContentParts | null => {\n  if (content.text) {\n    return { type: 'text', text: content.text };\n  }\n\n  if (content.json) {\n    return { type: 'text', text: JSON.stringify(content.json) };\n  }\n\n  if (content.image) {\n    const bytes = content.image.source.bytes;\n    const format = content.image.format;\n    let data: string;\n\n    if (typeof bytes === 'string') {\n      data = bytes;\n    } else {\n      // Convert Uint8Array to base64 string\n      const buffer = Buffer.from(bytes);\n      data = buffer.toString('base64');\n    }\n\n    const imageFormat = `image/${format}`;\n    return {\n      type: 'image_url',\n      image_url: { url: `data:${imageFormat};base64,${data}` },\n    };\n  }\n\n  // Unsupported content types (video, document) are ignored\n  return null;\n};\n\nconst convertBedrockMessageToChatMessage = (message: BedrockMessage): ModelTraceChatMessage => {\n  let role: 'user' | 'assistant' | 'system' | 'tool' = message.role;\n  const contents: ModelTraceContentParts[] = [];\n  const toolCalls: any[] = [];\n  let toolCallId: string | undefined;\n\n  for (const content of message.content) {\n    if (content.toolUse) {\n      const toolCall = content.toolUse;\n      const input = typeof toolCall.input === 'string' ? toolCall.input : JSON.stringify(toolCall.input);\n\n      toolCalls.push(\n        prettyPrintToolCall({\n          id: toolCall.toolUseId,\n          function: {\n            name: toolCall.name,\n            arguments: input,\n          },\n        }),\n      );\n    } else if (content.toolResult) {\n      toolCallId = content.toolResult.toolUseId;\n      role = 'tool';\n\n      for (const resultContent of content.toolResult.content) {\n        const parsedContent = parseBedrockContent(resultContent);\n        if (parsedContent) {\n          contents.push(parsedContent);\n        }\n      }\n    } else {\n      const parsedContent = parseBedrockContent(content);\n      if (parsedContent) {\n        contents.push(parsedContent);\n      }\n    }\n  }\n\n  // Convert content parts to string\n  let contentString = '';\n  if (contents.length > 0) {\n    contentString = contents\n      .map((part) => {\n        if (part.type === 'text') {\n          return part.text;\n        } else if (part.type === 'image_url') {\n          return `[Image: ${part.image_url.url}]`;\n        }\n        return '';\n      })\n      .filter((text) => text.length > 0)\n      .join(' ');\n  }\n\n  const chatMessage: ModelTraceChatMessage = {\n    role: role,\n    content: contentString,\n  };\n\n  if (toolCalls.length > 0) {\n    chatMessage.tool_calls = toolCalls;\n  }\n\n  if (toolCallId) {\n    chatMessage.tool_call_id = toolCallId;\n  }\n\n  return chatMessage;\n};\n\nconst isBedrockMessage = (obj: unknown): obj is BedrockMessage => {\n  if (!isObject(obj)) {\n    return false;\n  }\n\n  const hasRole = has(obj, 'role') && isString(obj.role) && ['user', 'assistant', 'system'].includes(obj.role);\n  const hasContent = has(obj, 'content') && isArray(obj.content);\n\n  return hasRole && hasContent;\n};\n\nexport const normalizeBedrockChatInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  // Handle case where input has 'messages' key\n  if (isObject(obj) && 'messages' in obj) {\n    const messages = (obj as any).messages;\n    if (isArray(messages) && messages.length > 0 && messages.every(isBedrockMessage)) {\n      return compact(messages.map(convertBedrockMessageToChatMessage));\n    }\n  }\n\n  return null;\n};\n\nexport const normalizeBedrockChatOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  // Handle case where output has 'output' -> 'message' structure\n  if (isObject(obj) && 'output' in obj) {\n    const output = (obj as any).output;\n    if (isObject(output) && 'message' in output) {\n      const message = output.message;\n      if (isBedrockMessage(message)) {\n        return [convertBedrockMessageToChatMessage(message)];\n      }\n    }\n  }\n\n  return null;\n};\n","import { compact, has, isArray, isObject, isString } from 'lodash';\n\nimport type { ModelTraceChatMessage } from '../ModelTrace.types';\nimport { prettyPrintChatMessage } from '../ModelTraceExplorer.utils';\n\nexport type GeminiChatInput = {\n  contents: string | GeminiContent[];\n};\n\nexport type GeminiChatOutput = {\n  candidates: GeminiCandidate[];\n  // propmtFeedback: GeminiPropmptFeedback;\n  // usageMetadata: GeminiUsageMetadata;\n  modelVersion: string;\n  responseId: string;\n};\n\ntype GeminiCandidate = {\n  content: GeminiContent;\n  finishReason:\n    | 'FINISH_REASON_UNSPECIFIED'\n    | 'STOP'\n    | 'MAX_TOKENS'\n    | 'SAFETY'\n    | 'RECITATION'\n    | 'LANGUAGE'\n    | 'OTHER'\n    | 'BLOCKLIST'\n    | 'PROHIBITED_CONTENT'\n    | 'SPII'\n    | 'MALFORMED_FUNCTION_CAL'\n    | 'IMAGE_SAFETY'\n    | 'UNEXPECTED_TOOL_CAL';\n  // safetyRatings: GeminiSafetyRating[]\n  // citationMetadata: GeminiCitationMetadata\n  // tokenCount: number\n  // groundingAttributions: GeminiGroundingAttribution[]\n  // groundingMetadata: GeminiGroundingMetadata\n  // avgLogprobs: number\n  // logprobsResult: GeminiLogprobsResult\n  // urlContextMetadata: GeminiUrlContextMetadata\n  // index: number\n};\n\ntype GeminiContent = {\n  role: 'user' | 'model';\n  parts: GeminiContentPart[];\n};\n\ntype GeminiContentPart = { text: string };\n// | { inlineData: GeminiBlob }\n// | { functionCall: GeminiFunctionCall }\n// | { functionResponse: GeminiFunctionResponse }\n// | { fileData: GeminiFileData }\n// | { executableCode: GeminiExecutableCode }\n// | { codeExecutionResult: GeminiCodeExecutionResult };\n\n// type GeminiBlob = {\n//   mimeType: string;\n//   data: string;\n// };\n\n// type GeminiFunctionCall = {\n//   id: string;\n//   name: string;\n//   args: Record<string, string>;\n// };\n\n// type GeminiFunctionResponse = {\n//   id: string;\n//   name: string;\n//   response: Record<string, string>;\n//   willContinue: boolean;\n//   scheduling: 'SCHEDULING_UNSPECIFIED' | 'SILENT' | 'WHEN_IDLE' | 'INTERRUPT';\n// };\n\n// type GeminiFileData = {\n//   mimeType: string;\n//   fileUri: string;\n// };\n\n// type GeminiExecutableCode = {\n//   language: 'LANGUAGE_UNSPECIFIED' | 'PYTHON';\n//   code: string;\n// };\n\n// type GeminiCodeExecutionResult = {\n//   outcome: 'OUTCOME_UNSPECIFIED' | 'OUTCOME_OK' | 'OUTCOME_FAILED' | 'OUTCOME_DEADLINE_EXCEEDED';\n//   output: string;\n// };\n\nconst isGeminiContentPart = (obj: unknown): obj is GeminiContentPart => {\n  return isObject(obj) && 'text' in obj && isString(obj.text);\n};\n\nconst isGeminiContent = (obj: unknown): obj is GeminiContent => {\n  return (\n    isObject(obj) &&\n    'role' in obj &&\n    isString(obj.role) &&\n    ['user', 'model'].includes(obj.role) &&\n    has(obj, 'parts') &&\n    Array.isArray(obj.parts) &&\n    obj.parts.every(isGeminiContentPart)\n  );\n};\n\nconst isGeminiCandidate = (obj: unknown): obj is GeminiCandidate => {\n  return isObject(obj) && 'content' in obj && isGeminiContent(obj.content);\n};\n\nexport const normalizeGeminiChatInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (!isObject(obj)) {\n    return null;\n  }\n\n  if ('contents' in obj) {\n    if (isString(obj.contents)) {\n      const message = prettyPrintChatMessage({ type: 'message', content: obj.contents, role: 'user' });\n      return message && [message];\n    }\n\n    if (isArray(obj.contents) && obj.contents.every(isGeminiContent)) {\n      return compact(\n        obj.contents.map((item) => {\n          const role = item.role === 'model' ? 'assistant' : item.role;\n          return prettyPrintChatMessage({\n            type: 'message',\n            content: item.parts.map((part) => ({ type: 'text', text: part.text })),\n            role,\n          });\n        }),\n      );\n    }\n  }\n\n  return null;\n};\n\nexport const normalizeGeminiChatOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (!isObject(obj)) {\n    return null;\n  }\n\n  if ('candidates' in obj && isArray(obj.candidates) && obj.candidates.every(isGeminiCandidate)) {\n    return compact(\n      obj.candidates\n        .flatMap((item) => item.content)\n        .map((item) => {\n          const role = item.role === 'model' ? 'assistant' : item.role;\n          return prettyPrintChatMessage({\n            type: 'message',\n            content: item.parts.map((part) => ({ type: 'text', text: part.text })),\n            role,\n          });\n        }),\n    );\n  }\n\n  return null;\n};\n","import { compact, get, has, isArray, isNil, isObject, isString } from 'lodash';\n\nimport type {\n  OpenAIResponsesInput,\n  OpenAIResponsesInputFile,\n  OpenAIResponsesInputImage,\n  OpenAIResponsesInputMessage,\n  OpenAIResponsesInputMessageRole,\n  OpenAIResponsesInputText,\n  OpenAIResponsesOutputItem,\n} from './openai.types';\nimport type { ModelTraceChatMessage } from '../ModelTrace.types';\nimport {\n  isModelTraceChatResponse,\n  isModelTraceChoices,\n  isRawModelTraceChatMessage,\n  prettyPrintChatMessage,\n  prettyPrintToolCall,\n} from '../ModelTraceExplorer.utils';\n\n// normalize the OpenAI chat input format (object with 'messages' or 'input' key)\nexport const normalizeOpenAIChatInput = (obj: any): ModelTraceChatMessage[] | null => {\n  if (!obj) {\n    return null;\n  }\n\n  const messages = obj.messages ?? obj.input;\n  if (!Array.isArray(messages) || messages.length === 0 || !messages.every(isRawModelTraceChatMessage)) {\n    return null;\n  }\n\n  return compact(messages.map(prettyPrintChatMessage));\n};\n\n// normalize the OpenAI chat response format (object with 'choices' key)\nexport const normalizeOpenAIChatResponse = (obj: any): ModelTraceChatMessage[] | null => {\n  if (isModelTraceChoices(obj)) {\n    return obj.map((choice) => ({\n      ...choice.message,\n      tool_calls: choice.message.tool_calls?.map(prettyPrintToolCall),\n    }));\n  }\n\n  if (!isModelTraceChatResponse(obj)) {\n    return null;\n  }\n\n  return obj.choices.map((choice) => ({\n    ...choice.message,\n    tool_calls: choice.message.tool_calls?.map(prettyPrintToolCall),\n  }));\n};\n\nconst isOpenAIResponsesInputMessage = (obj: unknown): obj is OpenAIResponsesInputMessage => {\n  if (has(obj, 'role') && has(obj, 'content') && ['user', 'assistant', 'system', 'developer'].includes(obj.role)) {\n    return (\n      isString(obj.content) ||\n      (isArray(obj.content) &&\n        obj.content.every(\n          (item: unknown) => has(item, 'type') && ['input_text', 'input_image', 'input_file'].includes(item.type),\n        ))\n    );\n  }\n\n  return false;\n};\n\nexport const isOpenAIResponsesInput = (obj: unknown): obj is OpenAIResponsesInput => {\n  return isString(obj) || isOpenAIResponsesInputMessage(obj);\n};\n\nexport const isOpenAIResponsesOutputItem = (obj: unknown): obj is OpenAIResponsesOutputItem => {\n  if (!isObject(obj)) {\n    return false;\n  }\n\n  if (get(obj, 'type') === 'message') {\n    return isRawModelTraceChatMessage(obj);\n  }\n\n  if (get(obj, 'type') === 'function_call') {\n    return isString(get(obj, 'call_id')) && isString(get(obj, 'name')) && isString(get(obj, 'arguments'));\n  }\n\n  if (get(obj, 'type') === 'function_call_output') {\n    return isString(get(obj, 'call_id')) && isString(get(obj, 'output'));\n  }\n\n  if (get(obj, 'type') === 'image_generation_call') {\n    const outputFormat = get(obj, 'output_format');\n    return isString(get(obj, 'result')) && isString(outputFormat) && ['png', 'jpeg', 'webp'].includes(outputFormat);\n  }\n\n  if (get(obj, 'type') === 'reasoning') {\n    return has(obj, 'id') && isArray(get(obj, 'summary'));\n  }\n\n  return false;\n};\n\nconst normalizeOpenAIResponsesInputItem = (\n  obj: OpenAIResponsesInputText | OpenAIResponsesInputFile | OpenAIResponsesInputImage,\n  role: OpenAIResponsesInputMessageRole,\n): ModelTraceChatMessage | null => {\n  const text = get(obj, 'text');\n  if (get(obj, 'type') === 'input_text' && isString(text)) {\n    return prettyPrintChatMessage({\n      type: 'message',\n      content: [{ type: 'text', text }],\n      role: role,\n    });\n  }\n\n  const imageUrl = get(obj, 'image_url');\n  if (get(obj, 'type') === 'input_image' && isString(imageUrl)) {\n    return prettyPrintChatMessage({\n      type: 'message',\n      content: [{ type: 'image_url', image_url: { url: imageUrl } }],\n      role: role,\n    });\n  }\n\n  // TODO: file input not supported yet\n  // if ('type' in obj && obj.type === 'input_file') {\n  //   return prettyPrintChatMessage({ type: 'message', content: obj.file_url, role: role });\n  // }\n\n  return null;\n};\n\nconst normalizeOpenAIResponsesInputMessage = (obj: OpenAIResponsesInputMessage): ModelTraceChatMessage[] | null => {\n  if (isString(obj.content)) {\n    const message = prettyPrintChatMessage({ type: 'message', content: obj.content, role: obj.role });\n    return message && [message];\n  } else {\n    return obj.content.map((item) => normalizeOpenAIResponsesInputItem(item, obj.role)).filter((item) => item !== null);\n  }\n};\n\nexport const normalizeOpenAIResponsesInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  const input: unknown = get(obj, 'input');\n\n  if (isString(input)) {\n    const message = prettyPrintChatMessage({ type: 'message', content: input, role: 'user' });\n    return message && [message];\n  }\n\n  if (isArray(input) && input.every(isOpenAIResponsesInputMessage)) {\n    return compact(input.flatMap(normalizeOpenAIResponsesInputMessage));\n  }\n\n  return null;\n};\n\nexport const normalizeOpenAIResponsesOutputItem = (obj: OpenAIResponsesOutputItem): ModelTraceChatMessage | null => {\n  if (obj.type === 'message') {\n    return prettyPrintChatMessage(obj);\n  }\n\n  if (obj.type === 'function_call') {\n    return {\n      role: 'assistant',\n      tool_calls: [\n        prettyPrintToolCall({\n          id: obj.call_id,\n          function: {\n            arguments: obj.arguments,\n            name: obj.name,\n          },\n        }),\n      ],\n    };\n  }\n\n  if (obj.type === 'function_call_output') {\n    return {\n      role: 'tool',\n      tool_call_id: obj.call_id,\n      content: obj.output,\n    };\n  }\n\n  if (obj.type === 'image_generation_call') {\n    return prettyPrintChatMessage({\n      type: 'message',\n      content: [{ type: 'image_url', image_url: { url: `data:image/${obj.output_format};base64,${obj.result}` } }],\n      role: 'tool',\n    });\n  }\n\n  if (obj.type === 'reasoning') {\n    // Skip reasoning entries as they don't translate to chat messages\n    return null;\n  }\n\n  return null;\n};\n\nexport const normalizeOpenAIResponsesOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  const output: unknown = get(obj, 'output');\n\n  // list of output items\n  if (isArray(output) && output.length > 0 && output.every(isOpenAIResponsesOutputItem)) {\n    return compact(output.map(normalizeOpenAIResponsesOutputItem).filter(Boolean));\n  }\n\n  // list of output chunks\n  if (\n    isArray(output) &&\n    output.length > 0 &&\n    output.every((chunk) => chunk.type === 'response.output_item.done' && isOpenAIResponsesOutputItem(chunk.item))\n  ) {\n    return compact(output.map((chunk) => normalizeOpenAIResponsesOutputItem(chunk.item)));\n  }\n\n  return null;\n};\n\n// New functions for OpenAI agent chat pattern\n\nconst isOpenAIAgentMessage = (obj: unknown): boolean => {\n  if (!isObject(obj)) {\n    return false;\n  }\n\n  // Check for regular message format (with optional id, status, type fields)\n  if (has(obj, 'role') && has(obj, 'content') && ['user', 'assistant', 'system', 'tool'].includes(obj.role)) {\n    return true;\n  }\n\n  // Check for function call format (with optional id, status fields)\n  if (get(obj, 'type') === 'function_call') {\n    return isString(get(obj, 'call_id')) && isString(get(obj, 'name')) && isString(get(obj, 'arguments'));\n  }\n\n  // Check for function call output format\n  if (get(obj, 'type') === 'function_call_output') {\n    return isString(get(obj, 'call_id')) && isString(get(obj, 'output'));\n  }\n\n  return false;\n};\n\nconst normalizeOpenAIAgentMessage = (obj: any): ModelTraceChatMessage | null => {\n  // Handle regular message format\n  if (has(obj, 'role') && has(obj, 'content')) {\n    // Handle content that might be an array with output_text objects\n    if (isArray(obj.content)) {\n      const textContent = obj.content\n        .filter((item: any) => item.type === 'output_text' && isString(item.text))\n        .map((item: any) => item.text)\n        .join(' ');\n\n      if (textContent) {\n        return prettyPrintChatMessage({\n          ...obj,\n          content: textContent,\n        });\n      }\n    }\n\n    // Fall back to regular prettyPrintChatMessage for string content\n    return prettyPrintChatMessage(obj);\n  }\n\n  // Handle function call format\n  if (get(obj, 'type') === 'function_call') {\n    const callId = get(obj, 'call_id');\n    const arguments_ = get(obj, 'arguments');\n    const name = get(obj, 'name');\n\n    if (isString(callId) && isString(arguments_) && isString(name)) {\n      return {\n        role: 'assistant',\n        tool_calls: [\n          prettyPrintToolCall({\n            id: callId,\n            function: {\n              arguments: arguments_,\n              name: name,\n            },\n          }),\n        ],\n      };\n    }\n  }\n\n  // Handle function call output format\n  if (get(obj, 'type') === 'function_call_output') {\n    const callId = get(obj, 'call_id');\n    const output = get(obj, 'output');\n\n    if (isString(callId) && isString(output)) {\n      return {\n        role: 'tool',\n        tool_call_id: callId,\n        content: output,\n      };\n    }\n  }\n\n  return null;\n};\n\nexport const normalizeOpenAIAgentInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  // Handle array of messages directly\n  if (isArray(obj) && obj.length > 0 && obj.every(isOpenAIAgentMessage)) {\n    return compact(obj.map(normalizeOpenAIAgentMessage));\n  }\n\n  return null;\n};\n\nexport const normalizeOpenAIAgentOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  // Handle array of messages directly\n  if (isArray(obj) && obj.length > 0 && obj.every(isOpenAIAgentMessage)) {\n    return compact(obj.map(normalizeOpenAIAgentMessage));\n  }\n\n  return null;\n};\n","import { compact, has, isNil, isString } from 'lodash';\n\nimport type { ModelTraceChatMessage, ModelTraceToolCall } from '../ModelTrace.types';\nimport { isModelTraceToolCall, prettyPrintToolCall } from '../ModelTraceExplorer.utils';\n\ntype LangchainContentPart = {\n  type: 'text' | 'image_url';\n  text?: string;\n  image_url?: {\n    url: string;\n  };\n};\n\n// it has other fields, but we only care about these for now\nexport type LangchainBaseMessage = {\n  content?: string | LangchainContentPart[];\n  type: 'human' | 'user' | 'assistant' | 'ai' | 'system' | 'tool' | 'function';\n  tool_calls?: LangchainToolCallMessage[];\n  tool_call_id?: string;\n  additional_kwargs?: {\n    // some langchain models have tool_calls specified in additional_kwargs in\n    // OpenAI format. this appears to be a bug, but we should still try to handle it\n    tool_calls?: ModelTraceToolCall[];\n  };\n};\n\nexport type LangchainToolCallMessage = {\n  name: string;\n  // an object with the arguments to the tool call.\n  // should be stringified before display.\n  args: any;\n  id: string;\n};\n\nexport type LangchainChatGeneration = {\n  message: LangchainBaseMessage;\n};\n\nexport const langchainMessageToModelTraceMessage = (message: LangchainBaseMessage): ModelTraceChatMessage | null => {\n  let role: ModelTraceChatMessage['role'];\n  switch (message.type) {\n    case 'user':\n    case 'human':\n      role = 'user';\n      break;\n    case 'assistant':\n    case 'ai':\n      role = 'assistant';\n      break;\n    case 'system':\n      role = 'system';\n      break;\n    case 'tool':\n      role = 'tool';\n      break;\n    case 'function':\n      role = 'function';\n      break;\n    default:\n      return null;\n  }\n\n  // Handle content that could be a string or an array of content parts\n  let content: string | undefined;\n  if (isString(message.content)) {\n    content = message.content;\n  } else if (Array.isArray(message.content)) {\n    // Convert array of content parts to string representation\n    const contentParts = message.content\n      .map((part: any) => {\n        if (isString(part)) {\n          return part;\n        } else if (part.type === 'text' && part.text) {\n          return part.text;\n        } else if (part.type === 'image_url' && part.image_url?.url) {\n          // Convert to markdown image format with spacing\n          return `![](${part.image_url.url})`;\n        }\n        return '';\n      })\n      .filter(Boolean);\n\n    // Join with double line breaks for better visual separation\n    content = contentParts.join('\\n\\n');\n  } else {\n    content = undefined;\n  }\n\n  const normalizedMessage: ModelTraceChatMessage = {\n    content,\n    role,\n  };\n\n  const toolCalls = message.tool_calls;\n  const toolCallsFromKwargs = message.additional_kwargs?.tool_calls;\n\n  // attempt to parse tool calls from the top-level field,\n  // otherwise fall back to the additional_kwargs field if it exists\n  if (\n    !isNil(toolCalls) &&\n    Array.isArray(toolCalls) &&\n    toolCalls.length > 0 &&\n    toolCalls.every(isLangchainToolCallMessage)\n  ) {\n    // compact for typing. the coercion should not fail since we\n    // check that the type is correct in the if condition above\n    normalizedMessage.tool_calls = compact(toolCalls.map(normalizeLangchainToolCall));\n  } else if (\n    !isNil(toolCallsFromKwargs) &&\n    Array.isArray(toolCallsFromKwargs) &&\n    toolCallsFromKwargs.length > 0 &&\n    toolCallsFromKwargs.every(isModelTraceToolCall)\n  ) {\n    normalizedMessage.tool_calls = toolCallsFromKwargs.map(prettyPrintToolCall);\n  }\n\n  if (!isNil(message.tool_call_id)) {\n    normalizedMessage.tool_call_id = message.tool_call_id;\n  }\n\n  return normalizedMessage;\n};\n\nexport const normalizeLangchainToolCall = (toolCall: LangchainToolCallMessage): ModelTraceToolCall | null => {\n  return {\n    id: toolCall.id,\n    function: {\n      arguments: JSON.stringify(toolCall.args, null, 2),\n      name: toolCall.name,\n    },\n  };\n};\n\nexport const isLangchainBaseMessage = (obj: any): obj is LangchainBaseMessage => {\n  if (!obj) {\n    return false;\n  }\n\n  // content can be undefined/null, string, or array of content parts\n  if (!isNil(obj.content) && !isString(obj.content) && !Array.isArray(obj.content)) {\n    return false;\n  }\n\n  // tool call validation is handled by the normalization function\n  return ['human', 'user', 'assistant', 'ai', 'system', 'tool', 'function'].includes(obj.type);\n};\n\nexport const isLangchainToolCallMessage = (obj: any): obj is LangchainToolCallMessage => {\n  return obj && isString(obj.name) && has(obj, 'args') && isString(obj.id);\n};\n\nexport const isLangchainChatGeneration = (obj: any): obj is LangchainChatGeneration => {\n  return obj && isLangchainBaseMessage(obj.message);\n};\n\n// normalize langchain chat input format\nexport const normalizeLangchainChatInput = (obj: any): ModelTraceChatMessage[] | null => {\n  // it could be a list of list of messages\n  if (\n    Array.isArray(obj) &&\n    obj.length === 1 &&\n    Array.isArray(obj[0]) &&\n    obj[0].length > 0 &&\n    obj[0].every(isLangchainBaseMessage)\n  ) {\n    const messages = obj[0].map(langchainMessageToModelTraceMessage);\n    // if we couldn't convert all the messages, then consider the input invalid\n    if (messages.some((message) => message === null)) {\n      return null;\n    }\n\n    return messages as ModelTraceChatMessage[];\n  }\n\n  // it could also be an object with the `messages` key\n  if (Array.isArray(obj?.messages) && obj.messages.length > 0 && obj.messages.every(isLangchainBaseMessage)) {\n    const messages = obj.messages.map(langchainMessageToModelTraceMessage);\n\n    if (messages.some((message: ModelTraceChatMessage[] | null) => message === null)) {\n      return null;\n    }\n\n    return messages as ModelTraceChatMessage[];\n  }\n\n  // it could also just be a plain array that is in the correct format\n  if (Array.isArray(obj) && obj.length > 0 && obj.every(isLangchainBaseMessage)) {\n    const messages = obj.map(langchainMessageToModelTraceMessage);\n\n    if (messages.some((message) => message === null)) {\n      return null;\n    }\n\n    return messages as ModelTraceChatMessage[];\n  }\n\n  return null;\n};\n\nconst isLangchainChatGenerations = (obj: any): obj is LangchainChatGeneration[][] => {\n  if (!Array.isArray(obj) || obj.length < 1) {\n    return false;\n  }\n\n  if (!Array.isArray(obj[0]) || obj[0].length < 1) {\n    return false;\n  }\n\n  // langchain chat generations are a list of lists of messages\n  return obj[0].every(isLangchainChatGeneration);\n};\n\nconst getMessagesFromLangchainChatGenerations = (\n  generations: LangchainChatGeneration[],\n): ModelTraceChatMessage[] | null => {\n  const messages = generations.map((generation: LangchainChatGeneration) =>\n    langchainMessageToModelTraceMessage(generation.message),\n  );\n\n  if (messages.some((message) => message === null)) {\n    return null;\n  }\n\n  return messages as ModelTraceChatMessage[];\n};\n\n// detect if an object is a langchain ChatResult, and normalize it to a list of messages\nexport const normalizeLangchainChatResult = (obj: any): ModelTraceChatMessage[] | null => {\n  if (isLangchainChatGenerations(obj)) {\n    return getMessagesFromLangchainChatGenerations(obj[0]);\n  }\n\n  if (\n    !Array.isArray(obj?.generations) ||\n    !(obj.generations.length > 0) ||\n    !obj.generations[0].every(isLangchainChatGeneration)\n  ) {\n    return null;\n  }\n\n  return getMessagesFromLangchainChatGenerations(obj.generations[0]);\n};\n","import { compact, get, isArray, isString } from 'lodash';\n\nimport type { ModelTraceChatMessage } from '../ModelTrace.types';\nimport { prettyPrintChatMessage } from '../ModelTraceExplorer.utils';\n\nexport type LlamaIndexChatResponse = {\n  message: LlamaIndexChatMessage;\n};\n\ntype LlamaIndexChatMessage = {\n  role: 'assistant' | 'system' | 'user';\n  blocks: LlamaIndexChatMessageBlock[];\n};\n\ntype LlamaIndexChatMessageBlock = {\n  block_type: 'text';\n  text: 'string';\n};\n\nexport type LlamaIndexChatInput = {\n  messages: LlamaIndexChatMessage[];\n};\n\nconst isLlamaIndexChatMessageBlock = (obj: unknown): obj is LlamaIndexChatMessageBlock => {\n  const text = get(obj, 'text');\n  return get(obj, 'block_type') === 'text' && isString(text);\n};\n\nconst isLlamaIndexChatMessage = (message: unknown): message is LlamaIndexChatMessage => {\n  const blocks: unknown = get(message, 'blocks');\n  const role: unknown = get(message, 'role');\n  return (\n    isString(role) &&\n    ['assistant', 'system', 'user'].includes(role) &&\n    isArray(blocks) &&\n    blocks.every(isLlamaIndexChatMessageBlock)\n  );\n};\n\nconst isLlamaIndexChatResponse = (obj: unknown): obj is LlamaIndexChatResponse => {\n  return isLlamaIndexChatMessage(get(obj, 'message'));\n};\n\nconst isLlamaIndexChatInput = (obj: unknown): obj is LlamaIndexChatInput => {\n  const messages: unknown = get(obj, 'messages');\n  return isArray(messages) && messages.every(isLlamaIndexChatMessage);\n};\n\nconst prettyPrintMessage = (message: LlamaIndexChatMessage) => {\n  return prettyPrintChatMessage({\n    role: message.role,\n    content: message.blocks.map((block) => ({ type: 'text', text: block.text })),\n  });\n};\n\nexport const normalizeLlamaIndexChatResponse = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (!isLlamaIndexChatResponse(obj)) {\n    return null;\n  }\n\n  const message = prettyPrintMessage(obj.message);\n  return message && [message];\n};\n\nexport const normalizeLlamaIndexChatInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (!isLlamaIndexChatInput(obj)) {\n    return null;\n  }\n\n  return compact(obj.messages.map(prettyPrintMessage));\n};\n","import { has, isArray, isString } from 'lodash';\n\nimport type { ModelTraceChatMessage } from '../ModelTrace.types';\nimport { prettyPrintChatMessage } from '../ModelTraceExplorer.utils';\n\nexport const normalizeDspyChatInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  // Handle DSPy format with messages array\n  if (has(obj, 'messages') && isArray((obj as any).messages)) {\n    const messages = (obj as any).messages;\n    return messages\n      .map((msg: any) =>\n        prettyPrintChatMessage({\n          type: 'message',\n          content: isString(msg.content) ? toMarkdownWithHardBreaks(msg.content) : msg.content,\n          role: msg.role,\n        }),\n      )\n      .filter(Boolean);\n  }\n\n  return null;\n};\n\nexport const normalizeDspyChatOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  // Handle DSPy format with array output\n  if (isArray(obj) && obj.length > 0 && obj.every(isString)) {\n    // Join all output strings into one assistant message\n    const content = toMarkdownWithHardBreaks(obj.join('\\n'));\n    const message = prettyPrintChatMessage({ type: 'message', content, role: 'assistant' });\n    return message && [message];\n  }\n\n  return null;\n};\n\n// Markdown treats single newlines as spaces. For DSPy prompts that are plain text\n// we convert single newlines into hard line breaks while preserving paragraphs.\n// Only the single line break will be updated, for example,\n// - \"foo\\nbar\" -> \"foo  \\nbar\" (two spaces inserted before \\n)\n// - \"foo\\n\\nbar\" -> \"foo\\n\\nbar\" (no change)\nconst toMarkdownWithHardBreaks = (text: string) =>\n  text.replace(/\\r\\n/g, '\\n').replace(/(^|[^\\n])\\n(?!\\n)/g, (_m, p1) => `${p1}  \\n`);\n"],"names":["_ref","name","styles","_ref2","BasicTable","children","_jsx","css","Table","scrollable","TableRenderer","node","header","rows","isValid","_childArray$","undefined","childArray","React","toArray","slice","flatMap","child","props","filter","c","useParsedTableComponents","VirtualizedTable","_ref3","theme","useDesignSystemTheme","parentRef","rowVirtualizer","useVirtual","size","length","overscan","virtualItems","totalSize","ref","_css","overflow","maxHeight","border","borderColor","colors","borderRadius","borders","borderRadiusMd","marginBottom","spacing","md","zIndex","_jsxs","position","height","width","borderBottom","map","virtualRow","rowIndex","index","rowElement","measureRef","top","start","VirtualizedTableRow","isHeader","some","tagName","TableRow","style","backgroundColor","backgroundPrimary","VirtualizedTableCell","TableHeader","componentId","paddingLeft","sm","color","textPrimary","TableCell","urlTransform","value","startsWith","defaultUrlTransform","GenAIMarkdownRenderer","components","useMemo","getMarkdownComponents","extensions","ReactMarkdown","remarkPlugins","RemarkPlugins","CodeMarkdownComponent","codeBlock","codeInline","codeProps","_node$position","_node$position2","language","_codeProps$className","match","exec","className","line","end","InlineCode","Typography","Text","code","CodeBlock","String","replace","CodeSnippet","actions","SnippetCopyAction","copyText","isDarkMode","isCodeSnippetLanguage","padding","boxSizing","display","flexDirection","showLineNumbers","remarkGfm","a","href","Link","id","disabled","_Fragment","openInNewTab","_props$extensions$cod","_props$extensions","_props$extensions$cod2","_props$extensions2","p","Paragraph","h1","Title","level","h2","h3","h4","h5","table","tr","th","td","multiline","thead","tbody","img","src","alt","languageString","fontFamily","fontSize","lineHeight","direction","textAlign","whiteSpace","wordSpacing","wordBreak","MozTabSize","OTabSize","tabSize","WebkitHyphens","MozHyphens","msHyphens","hyphens","background","margin","textShadow","comment","prolog","doctype","cdata","punctuation","namespace","Opacity","tag","operator","number","property","function","selector","boolean","string","entity","cursor","url","keyword","control","directive","unit","statement","regex","atrule","placeholder","variable","deleted","textDecoration","inserted","italic","fontStyle","important","fontWeight","bold","Outline","OutlineOffset","borderRightColor","useCopyController","text","copyTooltip","onCopy","intl","useIntl","copyMessage","formatMessage","defaultMessage","copiedMessage","clipboard","useClipboard","copiedTimerIdRef","useRef","copied","setCopied","useState","open","setOpen","useEffect","window","clearTimeout","current","actionIcon","CheckIcon","CopyIcon","tooltipMessage","copy","setTimeout","ariaLabel","tooltipOpen","handleTooltipOpenChange","wordWrap","attribute","builtin","char","class","constant","hexcode","symbol","ModelTraceExplorerHighlightedCodeSnippet","searchFilter","data","activeMatch","containsActiveMatch","scrollToActiveMatch","useCallback","scrollIntoView","block","inline","spans","getHighlightedSpanComponents","activeMatchBackgroundColor","ACTIVE_HIGHLIGHT_COLOR","inactiveMatchBackgroundColor","INACTIVE_HIGHLIGHT_COLOR","backgroundSecondary","typography","fontSizeSm","MAX_LINES_FOR_PREVIEW","MAX_CHARS_FOR_PREVIEW","ModelTraceExplorerCodeSnippetBody","renderMode","CodeSnippetRenderMode","JSON","initialExpanded","containsMatches","Boolean","isNil","toLowerCase","includes","isContentLong","setIsContentLong","expanded","setExpanded","snippetRef","dataToTruncate","parsedData","parse","isString","expandable","split","displayedData","join","scrollWidth","clientWidth","PreWithRef","preProps","isKeyMatch","xs","right","PreTag","lineProps","wrapLines","paddingBottom","paddingRight","textOverflow","lineHeightBase","Button","icon","ChevronUpIcon","ChevronDownIcon","type","onClick","FormattedMessage","ModelTraceExplorerIcon","ModelIconType","CONNECT","isInTooltip","hasException","isRootSpan","iconColor","iconMap","MODELS","ModelsIcon","DOCUMENT","FileDocumentIcon","ConnectIcon","CODE","CodeIcon","FUNCTION","FunctionIcon","NUMBERS","NumbersIcon","SEARCH","SearchIcon","SORT","SortUnsortedIcon","UNKNOWN","QuestionMarkIcon","WRENCH","WrenchIcon","AGENT","UserSparkleIcon","CHAIN","ChainIcon","USER","UserIcon","SYSTEM","GearIcon","SAVE","SaveIcon","actionDefaultIconDefault","tooltipColor","actionPrimaryIcon","textValidationSuccess","green500","green800","green100","blue500","turquoise","blue800","blue100","red500","red700","red800","red100","general","iconSize","alignItems","justifyContent","borderRadiusSm","tooltipBackgroundTooltip","svg","iconFontSize","flexShrink","actionDangerPrimaryBackgroundDefault","getRoleIcon","role","getRoleDisplayText","message","ModelTraceExplorerChatMessageHeader","isExpandable","hoverStyles","actionIconBackgroundHover","gap","ChevronRightIcon","tool_call_id","values","toolName","marginRight","toolCallId","Tooltip","content","marginLeft","CONTENT_TRUNCATION_LIMIT","ModelTraceExplorerToolCallMessage","toolCall","functionName","Tag","arguments","tryGetJsonContent","stringify","isJson","error","ModelTraceExplorerChatMessageContent","shouldDisplayCodeSnippet","paddingTop","fontSizeBase","ModelTraceExplorerChatMessage","_message$content","displayedContent","tool_calls","isAnthropicContentBlockParam","obj","has","source","media_type","isObject","input","tool_use_id","isAnthropicMessageParam","hasRole","hasContent","isArray","every","normalizeAnthropicContentBlockParam","item","image_url","Error","processAnthropicMessage","messages","chatMessage","prettyPrintChatMessage","push","toolMessages","textParts","toolCalls","processAnthropicMessageContent","normalizeAnthropicChatInput","normalizeAnthropicChatOutput","isAutogenFunctionCall","get","isAutogenMessage","messageType","convertAssistantMessageToChatMessage","f","prettyPrintToolCall","normalizeAutogenMessage","part","normalizeAutogenChatInput","compact","normalizeAutogenChatOutput","parseBedrockContent","json","image","bytes","format","Buffer","from","toString","convertBedrockMessageToChatMessage","contents","toolUse","toolUseId","toolResult","resultContent","parsedContent","contentString","isBedrockMessage","normalizeBedrockChatInput","normalizeBedrockChatOutput","output","isGeminiContentPart","isGeminiContent","Array","parts","isGeminiCandidate","normalizeGeminiChatInput","normalizeGeminiChatOutput","candidates","normalizeOpenAIChatInput","_obj$messages","isRawModelTraceChatMessage","normalizeOpenAIChatResponse","isModelTraceChoices","choice","_choice$message$tool_","isModelTraceChatResponse","choices","_choice$message$tool_2","isOpenAIResponsesInputMessage","isOpenAIResponsesOutputItem","outputFormat","normalizeOpenAIResponsesInputMessage","normalizeOpenAIResponsesInputItem","imageUrl","normalizeOpenAIResponsesInput","normalizeOpenAIResponsesOutputItem","call_id","output_format","result","normalizeOpenAIResponsesOutput","chunk","isOpenAIAgentMessage","normalizeOpenAIAgentMessage","textContent","callId","arguments_","normalizeOpenAIAgentInput","normalizeOpenAIAgentOutput","langchainMessageToModelTraceMessage","_message$additional_k","_part$image_url","normalizedMessage","toolCallsFromKwargs","additional_kwargs","isLangchainToolCallMessage","normalizeLangchainToolCall","isModelTraceToolCall","args","isLangchainBaseMessage","isLangchainChatGeneration","normalizeLangchainChatInput","getMessagesFromLangchainChatGenerations","generations","generation","normalizeLangchainChatResult","isLangchainChatGenerations","isLlamaIndexChatMessageBlock","isLlamaIndexChatMessage","blocks","prettyPrintMessage","normalizeLlamaIndexChatResponse","isLlamaIndexChatResponse","normalizeLlamaIndexChatInput","isLlamaIndexChatInput","normalizeDspyChatInput","msg","toMarkdownWithHardBreaks","normalizeDspyChatOutput","_m","p1"],"sourceRoot":""}