{"version":3,"file":"static/js/5260.afeafc30.chunk.js","mappings":"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","sources":["experiment-tracking/components/CompareRunBox.tsx","experiment-tracking/components/CompareRunUtil.ts","common/components/error-boundaries/SectionErrorBoundary.tsx","shared/building_blocks/PreviewBadge.tsx","experiment-tracking/components/CompareRunPlotContainer.tsx","common/components/PageContainer.tsx","experiment-tracking/components/CompareRunScatter.tsx","experiment-tracking/components/ParallelCoordinatesPlotView.tsx","experiment-tracking/components/ParallelCoordinatesPlotControls.tsx","experiment-tracking/components/ParallelCoordinatesPlotPanel.tsx","common/components/RequestStateWrapper.tsx","shared/building_blocks/PageHeader.tsx","experiment-tracking/components/LazyPlot.tsx","experiment-tracking/components/CompareRunContour.tsx","common/components/Spinner.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport {\n  Typography,\n  Row,\n  Col,\n  SimpleSelect,\n  SimpleSelectOptionGroup,\n  SimpleSelectOption,\n  FormUI,\n} from '@databricks/design-system';\nimport { LazyPlot } from './LazyPlot';\nimport type { RunInfoEntity } from '../types';\n\ntype Props = {\n  runUuids: string[];\n  runInfos: RunInfoEntity[];\n  metricLists: any[][];\n  paramLists: any[][];\n};\n\ntype Axis = {\n  key?: string;\n  isParam?: boolean;\n};\n\nconst paramOptionPrefix = 'param-';\nconst metricOptionPrefix = 'metric-';\n\n// Note: This component does not pass the value of the parent component to the child component.\n// Doing so will cause weird rendering issues with the label and updating of the value.\nconst Selector = ({\n  id,\n  onChange,\n  paramKeys,\n  metricKeys,\n}: {\n  id: string;\n  onChange: (axis: Axis) => void;\n  paramKeys: string[];\n  metricKeys: string[];\n}) => {\n  const intl = useIntl();\n  return (\n    <SimpleSelect\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_comparerunbox.tsx_46\"\n      id={id}\n      css={{ width: '100%', marginBottom: '16px' }}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Select parameter or metric',\n        description: 'Placeholder text for parameter/metric selector in box plot comparison in MLflow',\n      })}\n      onChange={({ target }) => {\n        const { value } = target;\n        const [_prefix, key] = value.split('-');\n        const isParam = value.startsWith(paramOptionPrefix);\n        onChange({ key, isParam });\n      }}\n    >\n      <SimpleSelectOptionGroup label=\"Parameters\">\n        {paramKeys.map((key) => (\n          <SimpleSelectOption key={key} value={paramOptionPrefix + key}>\n            {key}\n          </SimpleSelectOption>\n        ))}\n      </SimpleSelectOptionGroup>\n      <SimpleSelectOptionGroup label=\"Metrics\">\n        {metricKeys.map((key) => (\n          <SimpleSelectOption key={key} value={metricOptionPrefix + key}>\n            {key}\n          </SimpleSelectOption>\n        ))}\n      </SimpleSelectOptionGroup>\n    </SimpleSelect>\n  );\n};\n\nexport const CompareRunBox = ({ runInfos, metricLists, paramLists }: Props) => {\n  const [xAxis, setXAxis] = useState<Axis>({ key: undefined, isParam: undefined });\n  const [yAxis, setYAxis] = useState<Axis>({ key: undefined, isParam: undefined });\n\n  const paramKeys = Array.from(new Set(paramLists.flat().map(({ key }) => key))).sort();\n  const metricKeys = Array.from(new Set(metricLists.flat().map(({ key }) => key))).sort();\n\n  const getBoxPlotData = () => {\n    const data = {};\n    runInfos.forEach((_, index) => {\n      const params = paramLists[index];\n      const metrics = metricLists[index];\n      const x = (xAxis.isParam ? params : metrics).find(({ key }) => key === xAxis.key);\n      const y = (yAxis.isParam ? params : metrics).find(({ key }) => key === yAxis.key);\n      if (x === undefined || y === undefined) {\n        return;\n      }\n\n      if (x.value in data) {\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        data[x.value].push(y.value);\n      } else {\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        data[x.value] = [y.value];\n      }\n    });\n\n    return Object.entries(data).map(([key, values]) => ({\n      y: values,\n      type: 'box',\n      name: key,\n      jitter: 0.3,\n      pointpos: -1.5,\n      boxpoints: 'all',\n    }));\n  };\n\n  const renderPlot = () => {\n    if (!(xAxis.key && yAxis.key)) {\n      return (\n        <div\n          css={{\n            display: 'flex',\n            width: '100%',\n            height: '100%',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <Typography.Text size=\"xl\">\n            <FormattedMessage\n              defaultMessage=\"Select parameters/metrics to plot.\"\n              description=\"Text to show when x or y axis is not selected on box plot\"\n            />\n          </Typography.Text>\n        </div>\n      );\n    }\n\n    return (\n      <LazyPlot\n        css={{\n          width: '100%',\n          height: '100%',\n          minHeight: '35vw',\n        }}\n        data={getBoxPlotData()}\n        layout={{\n          margin: {\n            t: 30,\n          },\n          hovermode: 'closest',\n          xaxis: {\n            title: xAxis.key,\n          },\n          yaxis: {\n            title: yAxis.key,\n          },\n        }}\n        config={{\n          responsive: true,\n          displaylogo: false,\n          scrollZoom: true,\n          modeBarButtonsToRemove: [\n            'sendDataToCloud',\n            'select2d',\n            'lasso2d',\n            'resetScale2d',\n            'hoverClosestCartesian',\n            'hoverCompareCartesian',\n          ],\n        }}\n        useResizeHandler\n      />\n    );\n  };\n\n  return (\n    <Row>\n      <Col span={6}>\n        <div css={styles.borderSpacer}>\n          <div>\n            <FormUI.Label htmlFor=\"x-axis-selector\">\n              <FormattedMessage\n                defaultMessage=\"X-axis:\"\n                description=\"Label text for X-axis in box plot comparison in MLflow\"\n              />\n            </FormUI.Label>\n          </div>\n          <Selector id=\"x-axis-selector\" onChange={setXAxis} paramKeys={paramKeys} metricKeys={metricKeys} />\n\n          <div>\n            <FormUI.Label htmlFor=\"y-axis-selector\">\n              <FormattedMessage\n                defaultMessage=\"Y-axis:\"\n                description=\"Label text for Y-axis in box plot comparison in MLflow\"\n              />\n            </FormUI.Label>\n          </div>\n          <Selector id=\"y-axis-selector\" onChange={setYAxis} paramKeys={paramKeys} metricKeys={metricKeys} />\n        </div>\n      </Col>\n      <Col span={18}>{renderPlot()}</Col>\n    </Row>\n  );\n};\n\nconst styles = {\n  borderSpacer: (theme: any) => ({\n    paddingLeft: theme.spacing.xs,\n  }),\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class -- TODO(FEINF-4274)\nexport default class CompareRunUtil {\n  /**\n   * Find in a list of metrics/params a certain key\n   */\n  static findInList(data: any, key: any) {\n    let found = undefined;\n    data.forEach((value: any) => {\n      if (value.key === key) {\n        found = value;\n      }\n    });\n    return found;\n  }\n\n  /**\n   * Get all keys present in the data in ParamLists or MetricLists or Schema input and outputs lists\n   */\n  static getKeys(lists: any, numeric: any) {\n    const keys = {};\n    lists.forEach((list: any) =>\n      list.forEach((item: any) => {\n        if (!(item.key in keys)) {\n          // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n          keys[item.key] = true;\n        }\n        if (numeric && isNaN(parseFloat(item.value))) {\n          // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n          keys[item.key] = false;\n        }\n      }),\n    );\n    return (\n      Object.keys(keys)\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        .filter((k) => keys[k])\n        .sort()\n    );\n  }\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport Utils from '../../utils/Utils';\n\ntype Props = {\n  showServerError?: boolean;\n};\n\ntype State = any;\n\nexport class SectionErrorBoundary extends React.Component<Props, State> {\n  state = { error: null };\n\n  componentDidCatch(error: any, errorInfo: any) {\n    this.setState({ error });\n    // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n    console.error(error, errorInfo);\n  }\n\n  renderErrorMessage(error: any) {\n    return this.props.showServerError ? <div>Error message: {error.message}</div> : '';\n  }\n\n  render() {\n    const { children } = this.props;\n    const { error } = this.state;\n    if (error) {\n      return (\n        <div>\n          <p>\n            <i\n              data-testid=\"icon-fail\"\n              className=\"fa fa-exclamation-triangle mlflow-icon-fail\"\n              css={classNames.wrapper}\n            />\n            <span> Something went wrong with this section. </span>\n            <span>If this error persists, please report an issue </span>\n            {/* Reported during ESLint upgrade */}\n            {/* eslint-disable-next-line react/jsx-no-target-blank */}\n            <a href={Utils.getSupportPageUrl()} target=\"_blank\">\n              here\n            </a>\n            .{this.renderErrorMessage(error)}\n          </p>\n        </div>\n      );\n    }\n\n    return children;\n  }\n}\n\nconst classNames = {\n  wrapper: {\n    marginLeft: -2, // to align the failure icon with the collapsable section caret toggle\n  },\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Tag, useDesignSystemTheme } from '@databricks/design-system';\nexport const PreviewBadge = ({ className }: { className?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_shared_building_blocks_previewbadge.tsx_14\"\n      className={className}\n      css={{ marginLeft: theme.spacing.xs }}\n      color=\"turquoise\"\n    >\n      <FormattedMessage\n        defaultMessage=\"Experimental\"\n        description=\"Experimental badge shown for features which are experimental\"\n      />\n    </Tag>\n  );\n};\n","import type { Theme } from '@emotion/react';\n\ninterface CompareRunPlotContainerProps {\n  controls: React.ReactNode;\n}\n\nexport const CompareRunPlotContainer = (props: React.PropsWithChildren<CompareRunPlotContainerProps>) => (\n  <div css={styles.wrapper}>\n    <div css={styles.controls}>{props.controls}</div>\n    <div css={styles.plotWrapper}>{props.children}</div>\n  </div>\n);\n\nconst styles = {\n  plotWrapper: {\n    overflow: 'hidden',\n    width: '100%',\n    height: '100%',\n    minHeight: 450,\n  },\n  wrapper: {\n    display: 'grid',\n    gridTemplateColumns: 'minmax(300px, 1fr) 3fr',\n  },\n  controls: (theme: Theme) => ({\n    padding: `0 ${theme.spacing.xs}px`,\n  }),\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { PageWrapper, Spacer } from '@databricks/design-system';\n\ntype OwnProps = {\n  usesFullHeight?: boolean;\n  children?: React.ReactNode;\n};\n\n// @ts-expect-error TS(2565): Property 'defaultProps' is used before being assig... Remove this comment to see the full error message\ntype Props = OwnProps & typeof PageContainer.defaultProps;\n\nexport function PageContainer(props: Props) {\n  const { usesFullHeight, ...restProps } = props;\n  return (\n    // @ts-expect-error TS(2322): Type '{ height: string; display: string; flexDirec... Remove this comment to see the full error message\n    <PageWrapper css={usesFullHeight ? styles.useFullHeightLayout : styles.wrapper}>\n      {/* @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message */}\n      <Spacer css={styles.fixedSpacer} />\n      {usesFullHeight ? props.children : <div {...restProps} css={styles.container} />}\n    </PageWrapper>\n  );\n}\n\nPageContainer.defaultProps = {\n  usesFullHeight: false,\n};\n\nconst styles = {\n  useFullHeightLayout: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    '&:last-child': {\n      flexGrow: 1,\n    },\n  },\n  wrapper: { flex: 1 },\n  fixedSpacer: {\n    // Ensure spacer's fixed height regardless of flex\n    flexShrink: 0,\n  },\n  container: {\n    width: '100%',\n    flexGrow: 1,\n    paddingBottom: 24,\n  },\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { escape } from 'lodash';\nimport React, { Component } from 'react';\nimport { getParams, getRunInfo } from '../reducers/Reducers';\nimport { connect } from 'react-redux';\nimport { FormUI, SimpleSelect, SimpleSelectOption, SimpleSelectOptionGroup, Spacer } from '@databricks/design-system';\nimport Utils from '../../common/utils/Utils';\nimport { getLatestMetrics } from '../reducers/MetricReducer';\nimport CompareRunUtil from './CompareRunUtil';\nimport { FormattedMessage } from 'react-intl';\nimport { LazyPlot } from './LazyPlot';\nimport { CompareRunPlotContainer } from './CompareRunPlotContainer';\n\ntype CompareRunScatterImplProps = {\n  runUuids: string[];\n  runInfos: any[]; // TODO: PropTypes.instanceOf(RunInfo)\n  metricLists: any[][];\n  paramLists: any[][];\n  runDisplayNames: string[];\n};\n\ntype CompareRunScatterImplState = any;\n\nexport class CompareRunScatterImpl extends Component<CompareRunScatterImplProps, CompareRunScatterImplState> {\n  // Size limits for displaying keys and values in our plot axes and tooltips\n  static MAX_PLOT_KEY_LENGTH = 40;\n  static MAX_PLOT_VALUE_LENGTH = 60;\n\n  metricKeys: any;\n  paramKeys: any;\n\n  constructor(props: CompareRunScatterImplProps) {\n    super(props);\n\n    this.metricKeys = CompareRunUtil.getKeys(this.props.metricLists, false);\n    this.paramKeys = CompareRunUtil.getKeys(this.props.paramLists, false);\n\n    if (this.paramKeys.length + this.metricKeys.length < 2) {\n      this.state = { disabled: true };\n    } else {\n      this.state = {\n        disabled: false,\n        x:\n          this.paramKeys.length > 0\n            ? {\n                key: this.paramKeys[0],\n                isMetric: false,\n              }\n            : {\n                key: this.metricKeys[1],\n                isMetric: true,\n              },\n        y:\n          this.metricKeys.length > 0\n            ? {\n                key: this.metricKeys[0],\n                isMetric: true,\n              }\n            : {\n                key: this.paramKeys[1],\n                isMetric: false,\n              },\n      };\n    }\n  }\n\n  /**\n   * Get the value of the metric/param described by {key, isMetric}, in run i\n   */\n  getValue(i: any, { key, isMetric }: any) {\n    const value = CompareRunUtil.findInList((isMetric ? this.props.metricLists : this.props.paramLists)[i], key);\n    return value === undefined ? value : (value as any).value;\n  }\n\n  render() {\n    // @ts-expect-error TS(4111): Property 'disabled' comes from an index signature,... Remove this comment to see the full error message\n    if (this.state.disabled) {\n      return <div />;\n    }\n\n    const keyLength = CompareRunScatterImpl.MAX_PLOT_KEY_LENGTH;\n\n    const xs: any = [];\n    const ys: any = [];\n    const tooltips: any = [];\n\n    this.props.runInfos.forEach((_, index) => {\n      // @ts-expect-error TS(4111): Property 'x' comes from an index signature, so it ... Remove this comment to see the full error message\n      const x = this.getValue(index, this.state.x);\n      // @ts-expect-error TS(4111): Property 'y' comes from an index signature, so it ... Remove this comment to see the full error message\n      const y = this.getValue(index, this.state.y);\n      if (x === undefined || y === undefined) {\n        return;\n      }\n      xs.push(x);\n      ys.push(y);\n      tooltips.push(this.getPlotlyTooltip(index));\n    });\n\n    return (\n      <CompareRunPlotContainer\n        controls={\n          <>\n            <div>\n              <FormUI.Label htmlFor=\"x-axis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"X-axis:\"\n                  description=\"Label text for x-axis in scatter plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('x')}\n            </div>\n            <Spacer />\n            <div>\n              <FormUI.Label htmlFor=\"y-axis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"Y-axis:\"\n                  description=\"Label text for y-axis in scatter plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('y')}\n            </div>\n          </>\n        }\n      >\n        <LazyPlot\n          data={[\n            {\n              x: xs,\n              y: ys,\n              text: tooltips,\n              hoverinfo: 'text',\n              type: 'scattergl',\n              mode: 'markers',\n              marker: {\n                size: 10,\n                color: 'rgba(200, 50, 100, .75)',\n              },\n            },\n          ]}\n          layout={{\n            margin: {\n              t: 30,\n            },\n            hovermode: 'closest',\n            xaxis: {\n              title: escape(Utils.truncateString(this.state['x'].key, keyLength)),\n            },\n            yaxis: {\n              title: escape(Utils.truncateString(this.state['y'].key, keyLength)),\n            },\n          }}\n          css={styles.plot}\n          config={{\n            responsive: true,\n            displaylogo: false,\n            scrollZoom: true,\n            modeBarButtonsToRemove: [\n              'sendDataToCloud',\n              'select2d',\n              'lasso2d',\n              'resetScale2d',\n              'hoverClosestCartesian',\n              'hoverCompareCartesian',\n            ],\n          }}\n          useResizeHandler\n        />\n      </CompareRunPlotContainer>\n    );\n  }\n\n  renderSelect(axis: any) {\n    return (\n      <SimpleSelect\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_comparerunscatter.tsx_182\"\n        css={styles.select}\n        id={axis + '-axis-selector'}\n        onChange={({ target }) => {\n          const { value } = target;\n          const [prefix, ...keyParts] = value.split('-');\n          const key = keyParts.join('-');\n          const isMetric = prefix === 'metric';\n          this.setState({ [axis]: { isMetric, key } });\n        }}\n        value={(this.state[axis].isMetric ? 'metric-' : 'param-') + this.state[axis].key}\n      >\n        <SimpleSelectOptionGroup label=\"Parameter\">\n          {this.paramKeys.map((p: any) => (\n            <SimpleSelectOption key={'param-' + p} value={'param-' + p}>\n              {p}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n        <SimpleSelectOptionGroup label=\"Metric\">\n          {this.metricKeys.map((m: any) => (\n            <SimpleSelectOption key={'metric-' + m} value={'metric-' + m}>\n              {m}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n      </SimpleSelect>\n    );\n  }\n\n  getPlotlyTooltip(index: any) {\n    const keyLength = CompareRunScatterImpl.MAX_PLOT_KEY_LENGTH;\n    const valueLength = CompareRunScatterImpl.MAX_PLOT_VALUE_LENGTH;\n    const runName = this.props.runDisplayNames[index];\n    let result = `<b>${escape(runName)}</b><br>`;\n    const paramList = this.props.paramLists[index];\n    paramList.forEach((p) => {\n      result +=\n        escape(Utils.truncateString(p.key, keyLength)) +\n        ': ' +\n        escape(Utils.truncateString(p.value, valueLength)) +\n        '<br>';\n    });\n    const metricList = this.props.metricLists[index];\n    if (metricList.length > 0) {\n      result += paramList.length > 0 ? '<br>' : '';\n      metricList.forEach((m) => {\n        result += escape(Utils.truncateString(m.key, keyLength)) + ': ' + Utils.formatMetric(m.value) + '<br>';\n      });\n    }\n    return result;\n  }\n}\n\nconst styles = {\n  select: {\n    width: '100%',\n  },\n  plot: {\n    width: '100%',\n  },\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const runInfos: any = [];\n  const metricLists: any = [];\n  const paramLists: any = [];\n  const { runUuids } = ownProps;\n  runUuids.forEach((runUuid: any) => {\n    runInfos.push(getRunInfo(runUuid, state));\n    metricLists.push(Object.values(getLatestMetrics(runUuid, state)));\n    paramLists.push(Object.values(getParams(runUuid, state)));\n  });\n  return { runInfos, metricLists, paramLists };\n};\n\nexport const CompareRunScatter = connect(mapStateToProps)(CompareRunScatterImpl);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { findLast, invert, isEqual, max, min, range, sortBy, uniq } from 'lodash';\nimport { LazyPlot } from './LazyPlot';\n\nconst AXIS_LABEL_CLS = '.pcp-plot .parcoords .y-axis .axis-heading .axis-title';\nexport const UNKNOWN_TERM = 'unknown';\n\ntype ParallelCoordinatesPlotViewProps = {\n  runUuids: string[];\n  paramKeys: string[];\n  metricKeys: string[];\n  paramDimensions: any[];\n  metricDimensions: any[];\n};\n\ntype ParallelCoordinatesPlotViewState = any;\n\nexport class ParallelCoordinatesPlotView extends React.Component<\n  ParallelCoordinatesPlotViewProps,\n  ParallelCoordinatesPlotViewState\n> {\n  state = {\n    // Current sequence of all axes, both parameters and metrics.\n    sequence: [...this.props.paramKeys, ...this.props.metricKeys],\n  };\n\n  static getDerivedStateFromProps(props: any, state: any) {\n    const keysFromProps = [...props.paramKeys, ...props.metricKeys];\n    const keysFromState = state.sequence;\n    if (!isEqual(sortBy(keysFromProps), sortBy(keysFromState))) {\n      return { sequence: keysFromProps };\n    }\n    return null;\n  }\n\n  getData() {\n    const { sequence } = this.state;\n    const { paramDimensions, metricDimensions, metricKeys } = this.props;\n    const lastMetricKey = this.findLastKeyFromState(metricKeys);\n    const lastMetricDimension = this.props.metricDimensions.find((d) => d.label === lastMetricKey);\n    const colorScaleConfigs = ParallelCoordinatesPlotView.getColorScaleConfigsForDimension(lastMetricDimension);\n    // This make sure axis order consistency across renders.\n    const orderedDimensions = ParallelCoordinatesPlotView.getDimensionsOrderedBySequence(\n      [...paramDimensions, ...metricDimensions],\n      sequence,\n    );\n    return [\n      {\n        type: 'parcoords',\n        line: { ...colorScaleConfigs },\n        dimensions: orderedDimensions,\n      },\n    ];\n  }\n\n  static getDimensionsOrderedBySequence(dimensions: any, sequence: any) {\n    return sortBy(dimensions, [(dimension) => sequence.indexOf(dimension.label)]);\n  }\n\n  static getLabelElementsFromDom = () => Array.from(document.querySelectorAll(AXIS_LABEL_CLS));\n\n  findLastKeyFromState(keys: any) {\n    const { sequence } = this.state;\n    const keySet = new Set(keys);\n    return findLast(sequence, (key) => keySet.has(key));\n  }\n\n  static getColorScaleConfigsForDimension(dimension: any) {\n    if (!dimension) return null;\n    const cmin = min(dimension.values);\n    const cmax = max(dimension.values);\n    return {\n      showscale: true,\n      colorscale: 'Jet',\n      cmin,\n      cmax,\n      color: dimension.values,\n    };\n  }\n\n  // Update styles(green & bold) for metric axes.\n  // Note(Zangr) 2019-6-25 this is needed because there is no per axis label setting available. This\n  // needs to be called every time chart updates. More information about currently available label\n  // setting here: https://plot.ly/javascript/reference/#parcoords-labelfont\n  updateMetricAxisLabelStyle = () => {\n    /* eslint-disable no-param-reassign */\n    const metricsKeySet = new Set(this.props.metricKeys);\n    // TODO(Zangr) 2019-06-20 This assumes name uniqueness across params & metrics. Find a way to\n    // make it more deterministic. Ex. Add add different data attributes to indicate axis kind.\n    ParallelCoordinatesPlotView.getLabelElementsFromDom()\n      .filter((el) => metricsKeySet.has(el.innerHTML))\n      .forEach((el) => {\n        (el as any).style.fill = 'green';\n        (el as any).style.fontWeight = 'bold';\n      });\n  };\n\n  maybeUpdateStateForColorScale = (currentSequenceFromPlotly: any) => {\n    const rightmostMetricKeyFromState = this.findLastKeyFromState(this.props.metricKeys);\n    const metricsKeySet = new Set(this.props.metricKeys);\n    const rightmostMetricKeyFromPlotly = findLast(currentSequenceFromPlotly, (key) => metricsKeySet.has(key));\n    // Currently we always render color scale based on the rightmost metric axis, so if that changes\n    // we need to setState with the new axes sequence to trigger a rerender.\n    if (rightmostMetricKeyFromState !== rightmostMetricKeyFromPlotly) {\n      this.setState({ sequence: currentSequenceFromPlotly });\n    }\n  };\n\n  handlePlotUpdate = ({ data: [{ dimensions }] }: any) => {\n    this.updateMetricAxisLabelStyle();\n    this.maybeUpdateStateForColorScale(dimensions.map((d: any) => d.label));\n  };\n\n  render() {\n    return (\n      <LazyPlot\n        layout={{ autosize: true, margin: { t: 50 } }}\n        useResizeHandler\n        css={styles.plot}\n        data={this.getData()}\n        onUpdate={this.handlePlotUpdate}\n        className=\"pcp-plot\"\n        config={{ displayModeBar: false }}\n      />\n    );\n  }\n}\n\nexport const generateAttributesForCategoricalDimension = (labels: any) => {\n  // Create a lookup from label to its own alphabetical sorted order.\n  // Ex. ['A', 'B', 'C'] => { 'A': '0', 'B': '1', 'C': '2' }\n  const sortedUniqLabels = uniq(labels).sort();\n\n  // We always want the UNKNOWN_TERM to be at the top\n  // of the chart which is end of the sorted label array\n  // Ex. ['A', 'UNKNOWN_TERM', 'B'] => { 'A': '0', 'B': '1', 'UNKNOWN_TERM': '2' }\n  let addUnknownTerm = false;\n  const filteredSortedUniqLabels = sortedUniqLabels.filter((label) => {\n    if (label === UNKNOWN_TERM) addUnknownTerm = true;\n    return label !== UNKNOWN_TERM;\n  });\n  if (addUnknownTerm) {\n    filteredSortedUniqLabels.push(UNKNOWN_TERM);\n  }\n  const labelToIndexStr = invert(filteredSortedUniqLabels);\n  const attributes = {};\n\n  // Values are assigned to their alphabetical sorted index number\n  (attributes as any).values = labels.map((label: any) => Number(labelToIndexStr[label]));\n\n  // Default to alphabetical order for categorical axis here. Ex. [0, 1, 2, 3 ...]\n  (attributes as any).tickvals = range(filteredSortedUniqLabels.length);\n\n  // Default to alphabetical order for categorical axis here. Ex. ['A', 'B', 'C', 'D' ...]\n  (attributes as any).ticktext = filteredSortedUniqLabels.map((sortedUniqLabel) =>\n    (sortedUniqLabel as any).substring(0, 10),\n  );\n\n  return attributes;\n};\n\n/**\n * Infer the type of data in a run. If all the values are numbers or castable to numbers, then\n * treat it as a number column.\n */\nexport const inferType = (key: any, runUuids: any, entryByRunUuid: any) => {\n  for (let i = 0; i < runUuids.length; i++) {\n    if (entryByRunUuid[runUuids[i]][key]) {\n      const { value } = entryByRunUuid[runUuids[i]][key];\n      if (typeof value === 'string' && isNaN(Number(value)) && value !== 'NaN') {\n        return 'string';\n      }\n    }\n  }\n  return 'number';\n};\n\nexport const createDimension = (key: any, runUuids: any, entryByRunUuid: any) => {\n  let attributes = {};\n  const dataType = inferType(key, runUuids, entryByRunUuid);\n  if (dataType === 'string') {\n    attributes = generateAttributesForCategoricalDimension(\n      runUuids.map((runUuid: any) =>\n        entryByRunUuid[runUuid][key] ? entryByRunUuid[runUuid][key].value : UNKNOWN_TERM,\n      ),\n    );\n  } else {\n    let maxValue = Number.MIN_SAFE_INTEGER;\n    const values = runUuids.map((runUuid: any) => {\n      if (entryByRunUuid[runUuid][key]) {\n        const { value } = entryByRunUuid[runUuid][key];\n        const numericValue = Number(value);\n        if (maxValue < numericValue) maxValue = numericValue;\n        return numericValue;\n      }\n      return UNKNOWN_TERM;\n    });\n\n    // For Numerical values, we take the max value of all the attribute\n    // values and 0.01 to it so it is always at top of the graph.\n    (attributes as any).values = values.map((value: any) => {\n      if (value === UNKNOWN_TERM) return maxValue + 0.01;\n      return value;\n    });\n\n    // For some reason, Plotly tries to plot these values with SI prefixes by default\n    // Explicitly set to 5 fixed digits float here\n    (attributes as any).tickformat = '.5f';\n  }\n  return {\n    label: key,\n    ...attributes,\n  };\n};\n\nconst styles = {\n  plot: {\n    width: '100%',\n  },\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { runUuids, paramKeys, metricKeys } = ownProps;\n  const { latestMetricsByRunUuid, paramsByRunUuid } = state.entities;\n  const paramDimensions = paramKeys.map((paramKey: any) => createDimension(paramKey, runUuids, paramsByRunUuid));\n  const metricDimensions = metricKeys.map((metricKey: any) =>\n    createDimension(metricKey, runUuids, latestMetricsByRunUuid),\n  );\n  return { paramDimensions, metricDimensions };\n};\n\nexport default connect(mapStateToProps)(ParallelCoordinatesPlotView);\n","import { Button, LegacySelect } from '@databricks/design-system';\nimport { type Theme } from '@emotion/react';\nimport { FormattedMessage } from 'react-intl';\n\ntype Props = {\n  paramKeys: string[];\n  metricKeys: string[];\n  selectedParamKeys: string[];\n  selectedMetricKeys: string[];\n  handleParamsSelectChange: (paramValues: string[]) => void;\n  handleMetricsSelectChange: (metricValues: string[]) => void;\n  onClearAllSelect: () => void;\n};\n\nexport function ParallelCoordinatesPlotControls({\n  paramKeys,\n  metricKeys,\n  selectedParamKeys,\n  selectedMetricKeys,\n  handleParamsSelectChange,\n  handleMetricsSelectChange,\n  onClearAllSelect,\n}: Props) {\n  return (\n    <div css={styles.wrapper}>\n      <div>\n        <FormattedMessage\n          defaultMessage=\"Parameters:\"\n          description=\"Label text for parameters in parallel coordinates plot in MLflow\"\n        />\n      </div>\n      <LegacySelect\n        mode=\"multiple\"\n        css={styles.select}\n        placeholder={\n          <FormattedMessage\n            defaultMessage=\"Please select parameters\"\n            description=\"Placeholder text for parameters in parallel coordinates plot in MLflow\"\n          />\n        }\n        value={selectedParamKeys}\n        onChange={handleParamsSelectChange}\n      >\n        {paramKeys.map((key) => (\n          <LegacySelect.Option value={key} key={key}>\n            {key}\n          </LegacySelect.Option>\n        ))}\n      </LegacySelect>\n      <div style={{ marginTop: 20 }}>\n        <FormattedMessage\n          defaultMessage=\"Metrics:\"\n          description=\"Label text for metrics in parallel coordinates plot in MLflow\"\n        />\n      </div>\n      <LegacySelect\n        mode=\"multiple\"\n        css={styles.select}\n        placeholder={\n          <FormattedMessage\n            defaultMessage=\"Please select metrics\"\n            description=\"Placeholder text for metrics in parallel coordinates plot in MLflow\"\n          />\n        }\n        value={selectedMetricKeys}\n        onChange={handleMetricsSelectChange}\n      >\n        {metricKeys.map((key) => (\n          <LegacySelect.Option value={key} key={key}>\n            {key}\n          </LegacySelect.Option>\n        ))}\n      </LegacySelect>\n      <div style={{ marginTop: 20 }}>\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_parallelcoordinatesplotcontrols.tsx_84\"\n          data-testid=\"clear-button\"\n          onClick={onClearAllSelect}\n        >\n          <FormattedMessage\n            defaultMessage=\"Clear All\"\n            description=\"String for the clear button to clear any selected parameters and metrics\"\n          />\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  wrapper: (theme: Theme) => ({\n    padding: `0 ${theme.spacing.xs}px`,\n  }),\n  select: { width: '100%' },\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ParallelCoordinatesPlotView from './ParallelCoordinatesPlotView';\nimport { ParallelCoordinatesPlotControls } from './ParallelCoordinatesPlotControls';\nimport {\n  getAllParamKeysByRunUuids,\n  getAllMetricKeysByRunUuids,\n  getSharedMetricKeysByRunUuids,\n  getRunInfo,\n} from '../reducers/Reducers';\nimport { isEmpty } from 'lodash';\nimport { CompareRunPlotContainer } from './CompareRunPlotContainer';\nimport { FormattedMessage } from 'react-intl';\nimport { Typography } from '@databricks/design-system';\n\ntype ParallelCoordinatesPlotPanelProps = {\n  runUuids: string[];\n  allParamKeys: string[];\n  allMetricKeys: string[];\n  sharedMetricKeys: string[];\n  diffParamKeys: string[];\n};\n\ntype ParallelCoordinatesPlotPanelState = any;\n\nexport class ParallelCoordinatesPlotPanel extends React.Component<\n  ParallelCoordinatesPlotPanelProps,\n  ParallelCoordinatesPlotPanelState\n> {\n  state = {\n    // Default to select differing parameters. Sort alphabetically (to match\n    // highlighted params in param table), then cap at first 3\n    selectedParamKeys: this.props.diffParamKeys.sort().slice(0, 3),\n    // Default to select the first metric key.\n    // Note that there will be no color scaling if no metric is selected.\n    selectedMetricKeys: this.props.sharedMetricKeys.slice(0, 1),\n  };\n\n  handleParamsSelectChange = (paramValues: any) => {\n    this.setState({ selectedParamKeys: paramValues });\n  };\n\n  handleMetricsSelectChange = (metricValues: any) => {\n    this.setState({ selectedMetricKeys: metricValues });\n  };\n\n  onClearAllSelect = () => {\n    this.setState({ selectedParamKeys: [], selectedMetricKeys: [] });\n  };\n\n  render() {\n    const { runUuids, allParamKeys, allMetricKeys } = this.props;\n    const { selectedParamKeys, selectedMetricKeys } = this.state;\n    return (\n      <CompareRunPlotContainer\n        controls={\n          <ParallelCoordinatesPlotControls\n            paramKeys={allParamKeys}\n            metricKeys={allMetricKeys}\n            selectedParamKeys={selectedParamKeys}\n            selectedMetricKeys={selectedMetricKeys}\n            handleMetricsSelectChange={this.handleMetricsSelectChange}\n            handleParamsSelectChange={this.handleParamsSelectChange}\n            onClearAllSelect={this.onClearAllSelect}\n          />\n        }\n      >\n        {!isEmpty(selectedParamKeys) || !isEmpty(selectedMetricKeys) ? (\n          <ParallelCoordinatesPlotView\n            runUuids={runUuids}\n            paramKeys={selectedParamKeys}\n            metricKeys={selectedMetricKeys}\n          />\n        ) : (\n          // @ts-expect-error TS(2322): Type '(theme: any) => { padding: any; textAlign: s... Remove this comment to see the full error message\n          <div css={styles.noValuesSelected} data-testid=\"no-values-selected\">\n            <Typography.Title level={2}>\n              <FormattedMessage\n                defaultMessage=\"Nothing to compare!\"\n                // eslint-disable-next-line max-len\n                description=\"Header displayed in the metrics and params compare plot when no values are selected\"\n              />\n            </Typography.Title>\n            <FormattedMessage\n              defaultMessage=\"Please select parameters and/or metrics to display the comparison.\"\n              // eslint-disable-next-line max-len\n              description=\"Explanation displayed in the metrics and params compare plot when no values are selected\"\n            />\n          </div>\n        )}\n      </CompareRunPlotContainer>\n    );\n  }\n}\n\nexport const getDiffParams = (allParamKeys: any, runUuids: any, paramsByRunUuid: any) => {\n  const diffParamKeys: any = [];\n  allParamKeys.forEach((param: any) => {\n    // collect all values for this param\n    const paramVals = runUuids.map(\n      (runUuid: any) => paramsByRunUuid[runUuid][param] && paramsByRunUuid[runUuid][param].value,\n    );\n    if (!paramVals.every((x: any, i: any, arr: any) => x === arr[0])) diffParamKeys.push(param);\n  });\n  return diffParamKeys;\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { runUuids: allRunUuids } = ownProps;\n\n  // Filter out runUuids that do not have corresponding runInfos\n  const runUuids = (allRunUuids ?? []).filter((uuid: string) => getRunInfo(uuid, state));\n  const allParamKeys = getAllParamKeysByRunUuids(runUuids, state);\n  const allMetricKeys = getAllMetricKeysByRunUuids(runUuids, state);\n  const sharedMetricKeys = getSharedMetricKeysByRunUuids(runUuids, state);\n  const { paramsByRunUuid } = state.entities;\n  const diffParamKeys = getDiffParams(allParamKeys, runUuids, paramsByRunUuid);\n\n  return {\n    allParamKeys,\n    allMetricKeys,\n    sharedMetricKeys,\n    diffParamKeys,\n  };\n};\n\nconst styles = {\n  noValuesSelected: (theme: any) => ({\n    padding: theme.spacing.md,\n    textAlign: 'center',\n  }),\n};\n\n// @ts-expect-error TS(2345): Argument of type 'typeof ParallelCoordinatesPlotPa... Remove this comment to see the full error message\nexport default connect(mapStateToProps)(ParallelCoordinatesPlotPanel);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getApis } from '../../experiment-tracking/reducers/Reducers';\nimport { Spinner } from './Spinner';\nimport { ErrorCodes } from '../constants';\nimport type { ErrorWrapper } from '../utils/ErrorWrapper';\nimport type { ReduxState } from '../../redux-types';\n\nexport const DEFAULT_ERROR_MESSAGE = 'A request error occurred.';\n\ntype RequestStateWrapperProps = {\n  children?: React.ReactNode;\n  customSpinner?: React.ReactNode;\n  shouldOptimisticallyRender?: boolean;\n  requests: any[];\n  requestIds?: string[];\n  requestIdsWith404sToIgnore?: string[];\n  description?: any; // TODO: PropTypes.oneOf(Object.values(LoadingDescription))\n  permissionDeniedView?: React.ReactNode;\n  suppressErrorThrow?: boolean;\n  customRequestErrorHandlerFn?: (\n    failedRequests: {\n      id: string;\n      active?: boolean;\n      error: Error | ErrorWrapper;\n    }[],\n  ) => void;\n};\n\ntype RequestStateWrapperState = any;\n\nexport class RequestStateWrapper extends Component<RequestStateWrapperProps, RequestStateWrapperState> {\n  static defaultProps = {\n    requests: [],\n    requestIdsWith404sToIgnore: [],\n    shouldOptimisticallyRender: false,\n  };\n\n  state = {\n    shouldRender: false,\n    shouldRenderError: false,\n  };\n\n  static getErrorRequests(requests: any, requestIdsWith404sToIgnore: any) {\n    return requests.filter((r: any) => {\n      if (r.error !== undefined) {\n        return !(\n          requestIdsWith404sToIgnore &&\n          requestIdsWith404sToIgnore.includes(r.id) &&\n          r.error.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST\n        );\n      }\n      return false;\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps: any) {\n    const shouldRender = nextProps.requests.length\n      ? nextProps.requests.every((r: any) => r && r.active === false)\n      : false;\n\n    const requestErrors = RequestStateWrapper.getErrorRequests(\n      nextProps.requests,\n      nextProps.requestIdsWith404sToIgnore,\n    );\n\n    return {\n      shouldRender,\n      shouldRenderError: requestErrors.length > 0,\n      requestErrors,\n    };\n  }\n\n  getRenderedContent() {\n    const { children, requests, customSpinner, permissionDeniedView, suppressErrorThrow, customRequestErrorHandlerFn } =\n      this.props;\n    // @ts-expect-error TS(2339): Property 'requestErrors' does not exist on type '{... Remove this comment to see the full error message\n    const { shouldRender, shouldRenderError, requestErrors } = this.state;\n    const permissionDeniedErrors = requestErrors.filter((failedRequest: any) => {\n      return failedRequest.error.getErrorCode() === ErrorCodes.PERMISSION_DENIED;\n    });\n\n    if (typeof children === 'function') {\n      return children(!shouldRender, shouldRenderError, requests, requestErrors);\n    } else if (shouldRender || shouldRenderError || this.props.shouldOptimisticallyRender) {\n      if (permissionDeniedErrors.length > 0 && permissionDeniedView) {\n        return permissionDeniedView;\n      }\n      if (shouldRenderError && !suppressErrorThrow) {\n        customRequestErrorHandlerFn ? customRequestErrorHandlerFn(requestErrors) : triggerError(requestErrors);\n      }\n\n      return children;\n    }\n\n    return customSpinner || <Spinner />;\n  }\n\n  render() {\n    return this.getRenderedContent();\n  }\n}\n\nexport const triggerError = (requests: any) => {\n  // This triggers the OOPS error boundary.\n  // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n  console.error('ERROR', requests);\n  throw Error(`${DEFAULT_ERROR_MESSAGE}: ${requests.error}`);\n};\n\nconst mapStateToProps = (state: ReduxState, ownProps: Omit<RequestStateWrapperProps, 'requests'>) => ({\n  requests: getApis(ownProps.requestIds, state),\n});\n\nexport default connect(mapStateToProps)(RequestStateWrapper);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport {\n  Breadcrumb,\n  Button,\n  Spacer,\n  Dropdown,\n  Menu,\n  Header,\n  OverflowIcon,\n  useDesignSystemTheme,\n  type HeaderProps,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { PreviewBadge } from './PreviewBadge';\n\ntype OverflowMenuProps = {\n  menu?: {\n    id: string;\n    itemName: React.ReactNode;\n    onClick?: (...args: any[]) => any;\n    href?: string;\n  }[];\n};\n\nexport function OverflowMenu({ menu }: OverflowMenuProps) {\n  const overflowMenu = (\n    <Menu>\n      {/* @ts-expect-error TS(2532): Object is possibly 'undefined'. */}\n      {menu.map(({ id, itemName, onClick, href, ...otherProps }) => (\n        // @ts-expect-error TS(2769): No overload matches this call.\n        <Menu.Item key={id} onClick={onClick} href={href} data-testid={id} {...otherProps}>\n          {itemName}\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n\n  // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n  return menu.length > 0 ? (\n    <Dropdown overlay={overflowMenu} trigger={['click']} placement=\"bottomLeft\" arrow>\n      <Button\n        componentId=\"codegen_mlflow_app_src_shared_building_blocks_pageheader.tsx_54\"\n        icon={<OverflowIcon />}\n        data-testid=\"overflow-menu-trigger\"\n        aria-label=\"Open header dropdown menu\"\n      />\n    </Dropdown>\n  ) : null;\n}\n\ntype PageHeaderProps = Pick<HeaderProps, 'dangerouslyAppendEmotionCSS'> & {\n  title: React.ReactNode;\n  breadcrumbs?: React.ReactNode[];\n  preview?: boolean;\n  feedbackOrigin?: string;\n  infoPopover?: React.ReactNode;\n  children?: React.ReactNode;\n  spacerSize?: 'xs' | 'sm' | 'md' | 'lg';\n  hideSpacer?: boolean;\n  titleAddOns?: React.ReactNode | React.ReactNode[];\n};\n\n/**\n * A page header that includes:\n *   - title,\n *   - optional breadcrumb content,\n *   - optional preview mark,\n *   - optional feedback origin: shows the \"Send feedback\" button when not empty, and\n *   - optional info popover, safe to have link inside.\n */\nexport function PageHeader(props: PageHeaderProps) {\n  const {\n    title, // required\n    breadcrumbs = [],\n    titleAddOns = [],\n    preview,\n    children,\n    spacerSize,\n    hideSpacer = false,\n    dangerouslyAppendEmotionCSS,\n  } = props;\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  return (\n    <>\n      <Header\n        breadcrumbs={\n          breadcrumbs.length > 0 && (\n            <Breadcrumb includeTrailingCaret>\n              {breadcrumbs.map((b, i) => (\n                <Breadcrumb.Item key={i}>{b}</Breadcrumb.Item>\n              ))}\n            </Breadcrumb>\n          )\n        }\n        buttons={children}\n        title={title}\n        // prettier-ignore\n        titleAddOns={\n          <>\n            {preview && <PreviewBadge css={{ marginLeft: 0 }} />}\n            {titleAddOns}\n          </>\n        }\n        dangerouslyAppendEmotionCSS={dangerouslyAppendEmotionCSS}\n      />\n      <Spacer\n        // @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message\n        css={{\n          // Ensure spacer's fixed height\n          flexShrink: 0,\n          ...(hideSpacer ? { display: 'none' } : {}),\n        }}\n        size={spacerSize}\n      />\n    </>\n  );\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { LegacySkeleton } from '@databricks/design-system';\nimport { SectionErrorBoundary } from '../../common/components/error-boundaries/SectionErrorBoundary';\n\nconst Plot = React.lazy(() => import('react-plotly.js'));\n\nexport const LazyPlot = ({ fallback, ...props }: any) => (\n  <SectionErrorBoundary>\n    <React.Suspense fallback={fallback ?? <LegacySkeleton active />}>\n      <Plot {...props} />\n    </React.Suspense>\n  </SectionErrorBoundary>\n);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { escape } from 'lodash';\nimport React, { Component } from 'react';\nimport {\n  Switch,\n  Spacer,\n  SimpleSelect,\n  SimpleSelectOptionGroup,\n  SimpleSelectOption,\n  FormUI,\n} from '@databricks/design-system';\nimport { getParams, getRunInfo } from '../reducers/Reducers';\nimport { connect } from 'react-redux';\nimport Utils from '../../common/utils/Utils';\nimport { getLatestMetrics } from '../reducers/MetricReducer';\nimport CompareRunUtil from './CompareRunUtil';\nimport { FormattedMessage } from 'react-intl';\nimport { LazyPlot } from './LazyPlot';\nimport { CompareRunPlotContainer } from './CompareRunPlotContainer';\n\ntype CompareRunContourProps = {\n  runInfos: any[]; // TODO: PropTypes.instanceOf(RunInfo)\n  metricLists: any[][];\n  paramLists: any[][];\n  runDisplayNames: string[];\n};\n\ntype CompareRunContourState = any;\n\nexport class CompareRunContour extends Component<CompareRunContourProps, CompareRunContourState> {\n  // Size limits for displaying keys and values in our plot axes and tooltips\n  static MAX_PLOT_KEY_LENGTH = 40;\n  static MAX_PLOT_VALUE_LENGTH = 60;\n\n  metricKeys: any;\n  paramKeys: any;\n\n  constructor(props: CompareRunContourProps) {\n    super(props);\n\n    this.metricKeys = CompareRunUtil.getKeys(this.props.metricLists, true);\n    this.paramKeys = CompareRunUtil.getKeys(this.props.paramLists, true);\n\n    if (this.paramKeys.length + this.metricKeys.length < 3) {\n      this.state = { disabled: true };\n    } else {\n      const common = { disabled: false, reverseColor: false };\n      if (this.metricKeys.length === 0) {\n        this.state = {\n          ...common,\n          xaxis: { key: this.paramKeys[0], isMetric: false },\n          yaxis: { key: this.paramKeys[1], isMetric: false },\n          zaxis: { key: this.paramKeys[2], isMetric: false },\n        };\n      } else if (this.paramKeys.length === 0) {\n        this.state = {\n          ...common,\n          xaxis: { key: this.metricKeys[0], isMetric: true },\n          yaxis: { key: this.metricKeys[1], isMetric: true },\n          zaxis: { key: this.metricKeys[2], isMetric: true },\n        };\n      } else if (this.paramKeys.length === 1) {\n        this.state = {\n          ...common,\n          xaxis: { key: this.paramKeys[0], isMetric: false },\n          yaxis: { key: this.metricKeys[0], isMetric: true },\n          zaxis: { key: this.metricKeys[1], isMetric: true },\n        };\n      } else {\n        this.state = {\n          ...common,\n          xaxis: { key: this.paramKeys[0], isMetric: false },\n          yaxis: { key: this.paramKeys[1], isMetric: false },\n          zaxis: { key: this.metricKeys[0], isMetric: true },\n        };\n      }\n    }\n  }\n\n  /**\n   * Get the value of the metric/param described by {key, isMetric}, in run i\n   */\n  getValue(i: any, { key, isMetric }: any) {\n    const value = CompareRunUtil.findInList((isMetric ? this.props.metricLists : this.props.paramLists)[i], key);\n    return value === undefined ? value : (value as any).value;\n  }\n\n  getColorscale() {\n    /*\n     * contour plot has an option named \"reversescale\" which\n     * reverses the color mapping if True, but it doesn't work properly now.\n     *\n     * https://github.com/plotly/plotly.js/issues/4430\n     *\n     * This function is a temporary workaround for the issue.\n     */\n    const colorscale = [\n      [0, 'rgb(5,10,172)'],\n      [0.35, 'rgb(40,60,190)'],\n      [0.5, 'rgb(70,100,245)'],\n      [0.6, 'rgb(90,120,245)'],\n      [0.7, 'rgb(106,137,247)'],\n      [1, 'rgb(220,220,220)'],\n    ];\n\n    // @ts-expect-error TS(4111): Property 'reverseColor' comes from an index signat... Remove this comment to see the full error message\n    if (this.state.reverseColor) {\n      return colorscale;\n    } else {\n      // reverse only RGB values\n      return colorscale.map(([val], index) => [val, colorscale[colorscale.length - 1 - index][1]]);\n    }\n  }\n\n  render() {\n    // @ts-expect-error TS(4111): Property 'disabled' comes from an index signature,... Remove this comment to see the full error message\n    if (this.state.disabled) {\n      return (\n        <div>\n          <FormattedMessage\n            defaultMessage=\"Contour plots can only be rendered when comparing a group of runs\n              with three or more unique metrics or params. Log more metrics or params to your\n              runs to visualize them using the contour plot.\"\n            description=\"Text explanation when contour plot is disabled in comparison pages\n              in MLflow\"\n          />\n        </div>\n      );\n    }\n\n    const keyLength = CompareRunContour.MAX_PLOT_KEY_LENGTH;\n\n    const xs: any = [];\n    const ys: any = [];\n    const zs: any = [];\n    const tooltips: any = [];\n\n    this.props.runInfos.forEach((_, index) => {\n      // @ts-expect-error TS(4111): Property 'xaxis' comes from an index signature, so... Remove this comment to see the full error message\n      const x = this.getValue(index, this.state.xaxis);\n      // @ts-expect-error TS(4111): Property 'yaxis' comes from an index signature, so... Remove this comment to see the full error message\n      const y = this.getValue(index, this.state.yaxis);\n      // @ts-expect-error TS(4111): Property 'zaxis' comes from an index signature, so... Remove this comment to see the full error message\n      const z = this.getValue(index, this.state.zaxis);\n      if (x === undefined || y === undefined || z === undefined) {\n        return;\n      }\n      xs.push(parseFloat(x));\n      ys.push(parseFloat(y));\n      zs.push(parseFloat(z));\n      tooltips.push(this.getPlotlyTooltip(index));\n    });\n\n    const maybeRenderPlot = () => {\n      const invalidAxes = [];\n      if (new Set(xs).size < 2) {\n        invalidAxes.push('X');\n      }\n      if (new Set(ys).size < 2) {\n        invalidAxes.push('Y');\n      }\n      if (invalidAxes.length > 0) {\n        const messageHead =\n          invalidAxes.length > 1 ? `The ${invalidAxes.join(' and ')} axes don't` : `The ${invalidAxes[0]} axis doesn't`;\n        return (\n          <div\n            css={styles.noDataMessage}\n          >{`${messageHead} have enough unique data points to render the contour plot.`}</div>\n        );\n      }\n\n      return (\n        <LazyPlot\n          css={styles.plot}\n          data={[\n            // contour plot\n            {\n              z: zs,\n              x: xs,\n              y: ys,\n              type: 'contour',\n              hoverinfo: 'none',\n              colorscale: this.getColorscale(),\n              connectgaps: true,\n              contours: {\n                coloring: 'heatmap',\n              },\n            },\n            // scatter plot\n            {\n              x: xs,\n              y: ys,\n              text: tooltips,\n              hoverinfo: 'text',\n              type: 'scattergl',\n              mode: 'markers',\n              marker: {\n                size: 10,\n                color: 'rgba(200, 50, 100, .75)',\n              },\n            },\n          ]}\n          layout={{\n            margin: {\n              t: 30,\n            },\n            hovermode: 'closest',\n            xaxis: {\n              title: escape(Utils.truncateString(this.state['xaxis'].key, keyLength)),\n              range: [Math.min(...xs), Math.max(...xs)],\n            },\n            yaxis: {\n              title: escape(Utils.truncateString(this.state['yaxis'].key, keyLength)),\n              range: [Math.min(...ys), Math.max(...ys)],\n            },\n          }}\n          config={{\n            responsive: true,\n            displaylogo: false,\n            scrollZoom: true,\n            modeBarButtonsToRemove: [\n              'sendDataToCloud',\n              'select2d',\n              'lasso2d',\n              'resetScale2d',\n              'hoverClosestCartesian',\n              'hoverCompareCartesian',\n            ],\n          }}\n          useResizeHandler\n        />\n      );\n    };\n\n    return (\n      <CompareRunPlotContainer\n        controls={\n          <>\n            <div>\n              <FormUI.Label htmlFor=\"xaxis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"X-axis:\"\n                  description=\"Label text for x-axis in contour plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('xaxis')}\n            </div>\n            <Spacer />\n            <div>\n              <FormUI.Label htmlFor=\"yaxis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"Y-axis:\"\n                  description=\"Label text for y-axis in contour plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('yaxis')}\n            </div>\n            <Spacer />\n            <div>\n              <FormUI.Label htmlFor=\"zaxis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"Z-axis:\"\n                  description=\"Label text for z-axis in contour plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('zaxis')}\n            </div>\n            <Spacer />\n            <div className=\"inline-control\">\n              <FormattedMessage\n                defaultMessage=\"Reverse color:\"\n                description=\"Label text for reverse color toggle in contour plot comparison\n                      in MLflow\"\n              />{' '}\n              <Switch\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_compareruncontour.tsx_282\"\n                className=\"show-point-toggle\"\n                // @ts-expect-error TS(4111): Property 'reverseColor' comes from an index signat... Remove this comment to see the full error message\n                checked={this.state.reverseColor}\n                onChange={(checked) => this.setState({ reverseColor: checked })}\n              />\n            </div>\n          </>\n        }\n      >\n        {maybeRenderPlot()}\n      </CompareRunPlotContainer>\n    );\n  }\n\n  renderSelect(axis: string) {\n    return (\n      <SimpleSelect\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_compareruncontour.tsx_299\"\n        css={{ width: '100%' }}\n        id={axis + '-selector'}\n        onChange={({ target }) => {\n          const { value } = target;\n          const [prefix, ...keyParts] = value.split('-');\n          const key = keyParts.join('-');\n          const isMetric = prefix === 'metric';\n          this.setState({ [axis]: { isMetric, key } });\n        }}\n        value={(this.state[axis].isMetric ? 'metric-' : 'param-') + this.state[axis].key}\n      >\n        <SimpleSelectOptionGroup label=\"Parameter\">\n          {this.paramKeys.map((p: any) => (\n            <SimpleSelectOption key={'param-' + p} value={'param-' + p}>\n              {p}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n        <SimpleSelectOptionGroup label=\"Metric\">\n          {this.metricKeys.map((m: any) => (\n            <SimpleSelectOption key={'metric-' + m} value={'metric-' + m}>\n              {m}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n      </SimpleSelect>\n    );\n  }\n\n  getPlotlyTooltip(index: any) {\n    const keyLength = CompareRunContour.MAX_PLOT_KEY_LENGTH;\n    const valueLength = CompareRunContour.MAX_PLOT_VALUE_LENGTH;\n    const runName = this.props.runDisplayNames[index];\n    let result = `<b>${escape(runName)}</b><br>`;\n    const paramList = this.props.paramLists[index];\n    paramList.forEach((p) => {\n      result +=\n        escape(Utils.truncateString(p.key, keyLength)) +\n        ': ' +\n        escape(Utils.truncateString(p.value, valueLength)) +\n        '<br>';\n    });\n    const metricList = this.props.metricLists[index];\n    if (metricList.length > 0) {\n      result += paramList.length > 0 ? '<br>' : '';\n      metricList.forEach((m) => {\n        result += escape(Utils.truncateString(m.key, keyLength)) + ': ' + Utils.formatMetric(m.value) + '<br>';\n      });\n    }\n    return result;\n  }\n}\n\nconst styles = {\n  plot: {\n    width: '100%',\n  },\n  noDataMessage: (theme: any) => ({\n    padding: theme.spacing.sm,\n    display: 'flex',\n    justifyContent: 'center',\n  }),\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const runInfos: any = [];\n  const metricLists: any = [];\n  const paramLists: any = [];\n  const { runUuids } = ownProps;\n  runUuids.forEach((runUuid: any) => {\n    runInfos.push(getRunInfo(runUuid, state));\n    metricLists.push(Object.values(getLatestMetrics(runUuid, state)));\n    paramLists.push(Object.values(getParams(runUuid, state)));\n  });\n  return { runInfos, metricLists, paramLists };\n};\n\nexport default connect(mapStateToProps)(CompareRunContour);\n","import spinner from '../static/mlflow-spinner.png';\nimport type { Interpolation, Theme } from '@emotion/react';\nimport { keyframes } from '@emotion/react';\n\ntype Props = {\n  showImmediately?: boolean;\n};\n\nexport function Spinner({ showImmediately }: Props) {\n  return (\n    <div css={(theme) => styles.spinner(theme, showImmediately)}>\n      <img alt=\"Page loading...\" src={spinner} />\n    </div>\n  );\n}\n\nconst styles = {\n  spinner: (theme: Theme, immediate?: boolean): Interpolation<Theme> => ({\n    width: 100,\n    marginTop: 100,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n\n    img: {\n      position: 'absolute',\n      opacity: 0,\n      top: '50%',\n      left: '50%',\n      width: theme.general.heightBase * 2,\n      height: theme.general.heightBase * 2,\n      marginTop: -theme.general.heightBase,\n      marginLeft: -theme.general.heightBase,\n      animation: `${keyframes`\n          0% {\n            opacity: 1;\n          }\n          100% {\n            opacity: 1;\n            -webkit-transform: rotate(360deg);\n                transform: rotate(360deg);\n            }\n          `} 3s linear infinite`,\n      animationDelay: immediate ? '0s' : '0.5s',\n    },\n  }),\n};\n"],"names":["paramOptionPrefix","_ref","name","styles","Selector","id","onChange","paramKeys","metricKeys","intl","useIntl","_jsxs","SimpleSelect","componentId","css","placeholder","formatMessage","defaultMessage","target","value","_prefix","key","split","isParam","startsWith","children","_jsx","SimpleSelectOptionGroup","label","map","SimpleSelectOption","_ref2","_ref3","CompareRunBox","runInfos","metricLists","paramLists","xAxis","setXAxis","useState","undefined","yAxis","setYAxis","Array","from","Set","flat","sort","getBoxPlotData","data","forEach","_","index","params","metrics","x","find","y","push","Object","entries","values","type","jitter","pointpos","boxpoints","Row","Col","span","borderSpacer","FormUI","Label","htmlFor","FormattedMessage","LazyPlot","layout","margin","t","hovermode","xaxis","title","yaxis","config","responsive","displaylogo","scrollZoom","modeBarButtonsToRemove","useResizeHandler","Typography","Text","size","theme","paddingLeft","spacing","xs","CompareRunUtil","findInList","found","getKeys","lists","numeric","keys","list","item","isNaN","parseFloat","filter","k","SectionErrorBoundary","React","constructor","args","state","error","componentDidCatch","errorInfo","this","setState","console","renderErrorMessage","props","showServerError","message","render","className","classNames","wrapper","href","Utils","getSupportPageUrl","marginLeft","PreviewBadge","useDesignSystemTheme","Tag","_css","color","CompareRunPlotContainer","controls","plotWrapper","overflow","width","height","minHeight","display","gridTemplateColumns","padding","PageContainer","usesFullHeight","restProps","PageWrapper","useFullHeightLayout","Spacer","fixedSpacer","container","defaultProps","flexDirection","flexGrow","flex","flexShrink","paddingBottom","CompareRunScatterImpl","Component","super","length","disabled","isMetric","getValue","i","keyLength","MAX_PLOT_KEY_LENGTH","ys","tooltips","getPlotlyTooltip","_Fragment","renderSelect","text","hoverinfo","mode","marker","escape","truncateString","plot","axis","select","prefix","keyParts","join","p","m","valueLength","MAX_PLOT_VALUE_LENGTH","runName","runDisplayNames","result","paramList","metricList","formatMetric","CompareRunScatter","connect","mapStateToProps","ownProps","runUuids","runUuid","getRunInfo","getLatestMetrics","getParams","UNKNOWN_TERM","ParallelCoordinatesPlotView","sequence","updateMetricAxisLabelStyle","metricsKeySet","getLabelElementsFromDom","el","has","innerHTML","style","fill","fontWeight","maybeUpdateStateForColorScale","currentSequenceFromPlotly","rightmostMetricKeyFromState","findLastKeyFromState","findLast","handlePlotUpdate","dimensions","d","getDerivedStateFromProps","keysFromProps","keysFromState","isEqual","sortBy","getData","paramDimensions","metricDimensions","lastMetricKey","lastMetricDimension","line","getColorScaleConfigsForDimension","getDimensionsOrderedBySequence","dimension","indexOf","keySet","showscale","colorscale","cmin","min","cmax","max","autosize","onUpdate","displayModeBar","document","querySelectorAll","createDimension","entryByRunUuid","attributes","dataType","inferType","Number","labels","sortedUniqLabels","uniq","addUnknownTerm","filteredSortedUniqLabels","labelToIndexStr","invert","tickvals","range","ticktext","sortedUniqLabel","substring","generateAttributesForCategoricalDimension","maxValue","MIN_SAFE_INTEGER","numericValue","tickformat","latestMetricsByRunUuid","paramsByRunUuid","entities","paramKey","metricKey","ParallelCoordinatesPlotControls","selectedParamKeys","selectedMetricKeys","handleParamsSelectChange","handleMetricsSelectChange","onClearAllSelect","LegacySelect","Option","marginTop","Button","onClick","ParallelCoordinatesPlotPanel","diffParamKeys","slice","sharedMetricKeys","paramValues","metricValues","allParamKeys","allMetricKeys","isEmpty","noValuesSelected","Title","level","md","textAlign","allRunUuids","uuid","getAllParamKeysByRunUuids","getAllMetricKeysByRunUuids","getSharedMetricKeysByRunUuids","getDiffParams","param","every","arr","RequestStateWrapper","shouldRender","shouldRenderError","getErrorRequests","requests","requestIdsWith404sToIgnore","r","includes","getErrorCode","ErrorCodes","RESOURCE_DOES_NOT_EXIST","nextProps","active","requestErrors","getRenderedContent","customSpinner","permissionDeniedView","suppressErrorThrow","customRequestErrorHandlerFn","permissionDeniedErrors","failedRequest","PERMISSION_DENIED","shouldOptimisticallyRender","triggerError","Spinner","Error","getApis","requestIds","OverflowMenu","menu","overflowMenu","Menu","itemName","otherProps","Item","Dropdown","overlay","trigger","placement","arrow","icon","OverflowIcon","PageHeader","breadcrumbs","titleAddOns","preview","spacerSize","hideSpacer","dangerouslyAppendEmotionCSS","Header","Breadcrumb","includeTrailingCaret","b","buttons","Plot","fallback","LegacySkeleton","CompareRunContour","common","reverseColor","zaxis","getColorscale","val","zs","z","Switch","checked","maybeRenderPlot","invalidAxes","messageHead","noDataMessage","connectgaps","contours","coloring","Math","sm","justifyContent","showImmediately","spinner","alt","src","immediate","marginRight","img","position","opacity","top","left","general","heightBase","animation","keyframes","animationDelay"],"sourceRoot":""}