{"version":3,"file":"static/js/5998.f8078b44.chunk.js","mappings":"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","sources":["common/components/TagSelectDropdown.tsx","common/hooks/useEditKeyValueTagsModal.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorer.utils.tsx","shared/web-shared/model-trace-explorer/ModelTrace.types.ts","common/components/KeyValueTagFullViewModal.tsx","common/components/KeyValueTag.tsx"],"sourcesContent":["import { sortedIndexOf } from 'lodash';\nimport React, { useMemo, useRef, useState } from 'react';\nimport type { Control } from 'react-hook-form';\nimport { useController } from 'react-hook-form';\nimport { useIntl } from 'react-intl';\n\nimport { PlusIcon, LegacySelect, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../types';\n\n/**\n * Will show an extra row at the bottom of the dropdown menu to create a new tag when\n * The user has typed something in the search input\n * and either\n * 1. The search input is not an exact match for an existing tag name\n * 2. There are no tags available based on search input\n */\n\nfunction DropdownMenu(menu: React.ReactElement, allAvailableTags: string[]) {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const searchValue = menu.props.searchValue.toLowerCase();\n\n  const resolvedMenu = useMemo(() => {\n    if (!searchValue) return menu;\n\n    const doesTagExists = sortedIndexOf(allAvailableTags, searchValue) >= 0;\n    if (doesTagExists) return menu;\n\n    const isValidTagKey = /^[^,.:/=\\-\\s]+$/.test(searchValue);\n\n    // Overriding the menu to add a new option at the top\n    return React.cloneElement(menu, {\n      flattenOptions: [\n        {\n          data: {\n            value: searchValue,\n            disabled: !isValidTagKey,\n            style: {\n              color: isValidTagKey ? theme.colors.actionTertiaryTextDefault : theme.colors.actionDisabledText,\n            },\n            children: (\n              <LegacyTooltip\n                title={\n                  isValidTagKey\n                    ? undefined\n                    : intl.formatMessage({\n                        defaultMessage: ', . : / - = and blank spaces are not allowed',\n                        description:\n                          'Key-value tag editor modal > Tag dropdown Manage Modal > Invalid characters error',\n                      })\n                }\n                placement=\"right\"\n              >\n                <span css={{ display: 'block' }}>\n                  <PlusIcon css={{ marginRight: theme.spacing.sm }} />\n                  {intl.formatMessage(\n                    {\n                      defaultMessage: 'Add tag \"{tagKey}\"',\n                      description: 'Key-value tag editor modal > Tag dropdown Manage Modal > Add new tag button',\n                    },\n                    {\n                      tagKey: searchValue,\n                    },\n                  )}\n                </span>\n              </LegacyTooltip>\n            ),\n          },\n          key: searchValue,\n          groupOption: false,\n        },\n        ...menu.props.flattenOptions,\n      ],\n    });\n  }, [allAvailableTags, menu, searchValue, intl, theme]);\n\n  return resolvedMenu;\n}\n\nfunction getDropdownMenu(allAvailableTags: string[]) {\n  return (menu: React.ReactElement) => DropdownMenu(menu, allAvailableTags);\n}\n\n/**\n * Used in tag edit feature, allows selecting existing / adding new tag value\n */\nexport function TagKeySelectDropdown({\n  allAvailableTags,\n  control,\n  onKeyChangeCallback,\n}: {\n  allAvailableTags: string[];\n  control: Control<KeyValueEntity>;\n  onKeyChangeCallback?: (key?: string) => void;\n}) {\n  const intl = useIntl();\n  const [isOpen, setIsOpen] = useState(false);\n  const selectRef = useRef<{ blur: () => void; focus: () => void }>(null);\n\n  const { field, fieldState } = useController({\n    control: control,\n    name: 'key',\n    rules: {\n      required: {\n        message: intl.formatMessage({\n          defaultMessage: 'A tag key is required',\n          description: 'Key-value tag editor modal > Tag dropdown > Tag key required error message',\n        }),\n        value: true,\n      },\n    },\n  });\n\n  const handleDropdownVisibleChange = (visible: boolean) => {\n    setIsOpen(visible);\n  };\n\n  const handleClear = () => {\n    field.onChange(undefined);\n    onKeyChangeCallback?.(undefined);\n  };\n\n  const handleSelect = (key: string) => {\n    field.onChange(key);\n    onKeyChangeCallback?.(key);\n  };\n\n  return (\n    <LegacySelect\n      allowClear\n      ref={selectRef}\n      dangerouslySetAntdProps={{\n        showSearch: true,\n        dropdownRender: getDropdownMenu(allAvailableTags),\n      }}\n      css={{ width: '100%' }}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Type a key',\n        description: 'Key-value tag editor modal > Tag dropdown > Tag input placeholder',\n      })}\n      value={field.value}\n      defaultValue={field.value}\n      open={isOpen}\n      onDropdownVisibleChange={handleDropdownVisibleChange}\n      filterOption={(input, option) => option?.value.toLowerCase().includes(input.toLowerCase())}\n      onSelect={handleSelect}\n      onClear={handleClear}\n      validationState={fieldState.error ? 'error' : undefined}\n    >\n      {allAvailableTags.map((tag) => (\n        <LegacySelect.Option value={tag} key={tag}>\n          {tag}\n        </LegacySelect.Option>\n      ))}\n    </LegacySelect>\n  );\n}\n","import { isEqual, sortBy } from 'lodash';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport { truncate } from 'lodash';\n\nimport {\n  Button,\n  FormUI,\n  Modal,\n  PlusIcon,\n  Popover,\n  RHFControlledComponents,\n  RestoreAntDDefaultClsPrefix,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Typography } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../types';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { TagKeySelectDropdown } from '../components/TagSelectDropdown';\nimport { KeyValueTag } from '../components/KeyValueTag';\nimport { ErrorWrapper } from '../utils/ErrorWrapper';\n\nfunction getTagsMap(tags: KeyValueEntity[]) {\n  return new Map(tags.map((tag) => [tag.key, tag]));\n}\n\n/**\n * Provides methods to initialize and display modal used to add and remove tags from any compatible entity\n */\nexport const useEditKeyValueTagsModal = <T extends { tags?: KeyValueEntity[] }>({\n  onSuccess,\n  saveTagsHandler,\n  allAvailableTags,\n  valueRequired = false,\n  title,\n}: {\n  onSuccess?: () => void;\n  saveTagsHandler: (editedEntity: T, existingTags: KeyValueEntity[], newTags: KeyValueEntity[]) => Promise<any>;\n  allAvailableTags?: string[];\n  valueRequired?: boolean;\n  title?: React.ReactNode;\n}) => {\n  const editedEntityRef = useRef<T>();\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const { theme } = useDesignSystemTheme();\n\n  const [initialTags, setInitialTags] = useState<Map<string, KeyValueEntity>>(new Map());\n  const [finalTags, setFinalTags] = useState<Map<string, KeyValueEntity>>(new Map());\n\n  const [showModal, setShowModal] = useState(false);\n\n  const form = useForm<KeyValueEntity>({\n    defaultValues: {\n      key: undefined,\n      value: '',\n    },\n  });\n\n  const hideModal = () => setShowModal(false);\n\n  /**\n   * Function used to invoke the modal and start editing tags of the particular model version\n   */\n  const showEditTagsModal = useCallback(\n    (editedEntity: T) => {\n      editedEntityRef.current = editedEntity;\n      setInitialTags(getTagsMap(editedEntity.tags || []));\n      setFinalTags(getTagsMap(editedEntity.tags || []));\n      form.reset();\n\n      setShowModal(true);\n    },\n    [form],\n  );\n\n  const saveTags = async () => {\n    if (!editedEntityRef.current) {\n      return;\n    }\n    setErrorMessage('');\n    setIsLoading(true);\n    saveTagsHandler(editedEntityRef.current, Array.from(initialTags.values()), Array.from(finalTags.values()))\n      .then(() => {\n        hideModal();\n        onSuccess?.();\n        setIsLoading(false);\n      })\n      .catch((e: ErrorWrapper | Error) => {\n        setIsLoading(false);\n        setErrorMessage(e instanceof ErrorWrapper ? e.getUserVisibleError()?.message : e.message);\n      });\n  };\n\n  const intl = useIntl();\n  const formValues = form.watch();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const hasNewValues = useMemo(\n    () => !isEqual(sortBy(Array.from(initialTags.values()), 'key'), sortBy(Array.from(finalTags.values()), 'key')),\n    [initialTags, finalTags],\n  );\n  const isDirty = formValues.key || formValues.value;\n  const showPopoverMessage = hasNewValues && isDirty;\n\n  const onKeyChangeCallback = (key: string | undefined) => {\n    const tag = key ? finalTags.get(key) : undefined;\n    /**\n     * If a tag value exists for provided key, set the value to the existing tag value\n     */\n    form.setValue('value', tag?.value ?? '');\n  };\n\n  const handleTagDelete = ({ key }: KeyValueEntity) => {\n    setFinalTags((currentFinalTags) => {\n      currentFinalTags.delete(key);\n      return new Map(currentFinalTags);\n    });\n  };\n\n  const onSubmit = () => {\n    // Do not accept form if no value provided while it's required\n    if (valueRequired && !formValues.value.trim()) {\n      return;\n    }\n\n    // Add new tag to existing tags leaving only one tag per key value\n    const newEntries = new Map(finalTags);\n    newEntries.set(formValues.key, formValues);\n\n    setFinalTags(newEntries);\n    form.reset();\n  };\n\n  const EditTagsModal = (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_135\"\n      destroyOnClose\n      visible={showModal}\n      title={\n        title ?? (\n          <FormattedMessage\n            defaultMessage=\"Add/Edit tags\"\n            description=\"Key-value tag editor modal > Title of the update tags modal\"\n          />\n        )\n      }\n      onCancel={hideModal}\n      footer={\n        <RestoreAntDDefaultClsPrefix>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_147\"\n            dangerouslyUseFocusPseudoClass\n            onClick={hideModal}\n            /**\n             * Hack: The footer will remove the margin to the save tags button\n             * if the button if wrapped on another component.\n             */\n            css={{ marginRight: !hasNewValues ? theme.spacing.sm : 0 }}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Cancel',\n              description: 'Key-value tag editor modal > Manage Tag cancel button',\n            })}\n          </Button>\n          {showPopoverMessage ? (\n            <UnsavedTagPopoverTrigger formValues={formValues} isLoading={isLoading} onSaveTask={saveTags} />\n          ) : (\n            <LegacyTooltip\n              title={\n                !hasNewValues\n                  ? intl.formatMessage({\n                      defaultMessage: 'Please add or remove one or more tags before saving',\n                      description: 'Key-value tag editor modal > Tag disabled message',\n                    })\n                  : undefined\n              }\n            >\n              <Button\n                componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_174\"\n                dangerouslyUseFocusPseudoClass\n                disabled={!hasNewValues}\n                loading={isLoading}\n                type=\"primary\"\n                onClick={saveTags}\n              >\n                {intl.formatMessage({\n                  defaultMessage: 'Save tags',\n                  description: 'Key-value tag editor modal > Manage Tag save button',\n                })}\n              </Button>\n            </LegacyTooltip>\n          )}\n        </RestoreAntDDefaultClsPrefix>\n      }\n    >\n      <form\n        onSubmit={form.handleSubmit(onSubmit)}\n        css={{ display: 'flex', alignItems: 'flex-end', gap: theme.spacing.md }}\n      >\n        <div css={{ minWidth: 0, display: 'flex', gap: theme.spacing.md, flex: 1 }}>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"key\">\n              {intl.formatMessage({\n                defaultMessage: 'Key',\n                description: 'Key-value tag editor modal > Key input label',\n              })}\n            </FormUI.Label>\n            <TagKeySelectDropdown\n              allAvailableTags={allAvailableTags || []}\n              control={form.control}\n              onKeyChangeCallback={onKeyChangeCallback}\n            />\n          </div>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"value\">\n              {valueRequired\n                ? intl.formatMessage({\n                    defaultMessage: 'Value',\n                    description: 'Key-value tag editor modal > Value input label (required)',\n                  })\n                : intl.formatMessage({\n                    defaultMessage: 'Value (optional)',\n                    description: 'Key-value tag editor modal > Value input label',\n                  })}\n            </FormUI.Label>\n            <RHFControlledComponents.Input\n              componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_223\"\n              name=\"value\"\n              control={form.control}\n              aria-label={\n                valueRequired\n                  ? intl.formatMessage({\n                      defaultMessage: 'Value',\n                      description: 'Key-value tag editor modal > Value input label (required)',\n                    })\n                  : intl.formatMessage({\n                      defaultMessage: 'Value (optional)',\n                      description: 'Key-value tag editor modal > Value input label',\n                    })\n              }\n              placeholder={intl.formatMessage({\n                defaultMessage: 'Type a value',\n                description: 'Key-value tag editor modal > Value input placeholder',\n              })}\n            />\n          </div>\n        </div>\n        <LegacyTooltip\n          title={intl.formatMessage({\n            defaultMessage: 'Add tag',\n            description: 'Key-value tag editor modal > Add tag button',\n          })}\n        >\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_248\"\n            htmlType=\"submit\"\n            aria-label={intl.formatMessage({\n              defaultMessage: 'Add tag',\n              description: 'Key-value tag editor modal > Add tag button',\n            })}\n          >\n            <PlusIcon />\n          </Button>\n        </LegacyTooltip>\n      </form>\n      {errorMessage && <FormUI.Message type=\"error\" message={errorMessage} />}\n      <div\n        css={{\n          display: 'flex',\n          rowGap: theme.spacing.xs,\n          flexWrap: 'wrap',\n          marginTop: theme.spacing.sm,\n        }}\n      >\n        {Array.from(finalTags.values()).map((tag) => (\n          <KeyValueTag isClosable tag={tag} onClose={() => handleTagDelete(tag)} key={tag.key} />\n        ))}\n      </div>\n    </Modal>\n  );\n\n  return { EditTagsModal, showEditTagsModal, isLoading };\n};\n\nfunction UnsavedTagPopoverTrigger({\n  isLoading,\n  formValues,\n  onSaveTask,\n}: {\n  isLoading: boolean;\n  formValues: any;\n  onSaveTask: () => void;\n}) {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const tagKeyDisplay = `${truncate(formValues.key, { length: 20 }) || '_'}`;\n  const tagValueDisplay = formValues.value ? `:${truncate(formValues.value, { length: 20 })}` : '';\n  const fullTagDisplay = `${tagKeyDisplay}${tagValueDisplay}`;\n\n  const shownText = intl.formatMessage(\n    {\n      defaultMessage: 'Are you sure you want to save and close without adding \"{tag}\"',\n      description: 'Key-value tag editor modal > Unsaved tag message',\n    },\n    {\n      tag: fullTagDisplay,\n    },\n  );\n  return (\n    <Popover.Root componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_309\">\n      <Popover.Trigger asChild>\n        <Button\n          componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_306\"\n          dangerouslyUseFocusPseudoClass\n          loading={isLoading}\n          type=\"primary\"\n        >\n          {intl.formatMessage({\n            defaultMessage: 'Save tags',\n            description: 'Key-value tag editor modal > Manage Tag save button',\n          })}\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content align=\"end\" aria-label={shownText}>\n        <Typography.Paragraph css={{ maxWidth: 400 }}>{shownText}</Typography.Paragraph>\n        <Popover.Close asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_316\"\n            onClick={onSaveTask}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Yes, save and close',\n              description: 'Key-value tag editor modal > Unsaved tag message > Yes, save and close button',\n            })}\n          </Button>\n        </Popover.Close>\n        <Popover.Close asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_324\"\n            type=\"primary\"\n            css={{ marginLeft: theme.spacing.sm }}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Cancel',\n              description: 'Key-value tag editor modal > Unsaved tag message > cancel button',\n            })}\n          </Button>\n        </Popover.Close>\n        <Popover.Arrow />\n      </Popover.Content>\n    </Popover.Root>\n  );\n}\n","import {\n  isNil,\n  omitBy,\n  mapValues,\n  isArray,\n  isString,\n  isNumber,\n  isBoolean,\n  escapeRegExp,\n  map,\n  every,\n  has,\n  compact,\n  keyBy,\n} from 'lodash';\n\nimport { ModelSpanType, ModelIconType, MLFLOW_TRACE_SCHEMA_VERSION_KEY } from './ModelTrace.types';\nimport type {\n  SearchMatch,\n  ModelTrace,\n  ModelTraceSpan,\n  ModelTraceSpanNode,\n  ModelTraceChatMessage,\n  ModelTraceChatResponse,\n  ModelTraceChatInput,\n  ModelTraceToolCall,\n  ModelTraceChatTool,\n  ModelTraceChatToolParamProperty,\n  RawModelTraceChatMessage,\n  ModelTraceContentType,\n  SpanFilterState,\n  ModelTraceSpanV3,\n  ModelTraceSpanV2,\n  ModelTraceInfoV3,\n  Assessment,\n  RetrieverDocument,\n  ModelTraceEvent,\n} from './ModelTrace.types';\nimport { ModelTraceExplorerIcon } from './ModelTraceExplorerIcon';\nimport {\n  normalizeAnthropicChatInput,\n  normalizeAnthropicChatOutput,\n  normalizeAutogenChatInput,\n  normalizeAutogenChatOutput,\n  normalizeBedrockChatInput,\n  normalizeBedrockChatOutput,\n  normalizeGeminiChatInput,\n  normalizeGeminiChatOutput,\n  normalizeOpenAIChatInput,\n  normalizeOpenAIChatResponse,\n  normalizeOpenAIResponsesInput,\n  normalizeOpenAIResponsesOutput,\n  normalizeOpenAIAgentInput,\n  normalizeOpenAIAgentOutput,\n  normalizeLangchainChatInput,\n  normalizeLangchainChatResult,\n  normalizeLlamaIndexChatInput,\n  normalizeLlamaIndexChatResponse,\n  normalizeDspyChatInput,\n  normalizeDspyChatOutput,\n} from './chat-utils';\n\nexport const FETCH_TRACE_INFO_QUERY_KEY = 'model-trace-info-v3';\n\nexport const displayErrorNotification = (errorMessage: string) => {\n  // TODO: display error notification in OSS\n  return;\n};\n\nexport function getIconTypeForSpan(spanType: ModelSpanType | string): ModelIconType {\n  switch (spanType) {\n    case ModelSpanType.LLM:\n      return ModelIconType.MODELS;\n    case ModelSpanType.CHAIN:\n      return ModelIconType.CHAIN;\n    case ModelSpanType.AGENT:\n      return ModelIconType.AGENT;\n    case ModelSpanType.TOOL:\n      return ModelIconType.WRENCH;\n    case ModelSpanType.CHAT_MODEL:\n      return ModelIconType.MODELS;\n    case ModelSpanType.RETRIEVER:\n      return ModelIconType.SEARCH;\n    case ModelSpanType.PARSER:\n      return ModelIconType.CODE;\n    case ModelSpanType.EMBEDDING:\n      return ModelIconType.NUMBERS;\n    case ModelSpanType.RERANKER:\n      return ModelIconType.SORT;\n    case ModelSpanType.MEMORY:\n      return ModelIconType.SAVE;\n    case ModelSpanType.FUNCTION:\n      return ModelIconType.FUNCTION;\n    case ModelSpanType.UNKNOWN:\n      return ModelIconType.UNKNOWN;\n    default:\n      return ModelIconType.FUNCTION;\n  }\n}\n\nexport function getDisplayNameForSpanType(spanType: ModelSpanType | string): string {\n  switch (spanType) {\n    case ModelSpanType.LLM:\n      return 'LLM';\n    case ModelSpanType.CHAIN:\n      return 'Chain';\n    case ModelSpanType.AGENT:\n      return 'Agent';\n    case ModelSpanType.TOOL:\n      return 'Tool';\n    case ModelSpanType.CHAT_MODEL:\n      return 'Chat model';\n    case ModelSpanType.RETRIEVER:\n      return 'Retriever';\n    case ModelSpanType.PARSER:\n      return 'Parser';\n    case ModelSpanType.EMBEDDING:\n      return 'Embedding';\n    case ModelSpanType.RERANKER:\n      return 'Reranker';\n    case ModelSpanType.MEMORY:\n      return 'Memory';\n    case ModelSpanType.FUNCTION:\n      return 'Function';\n    case ModelSpanType.UNKNOWN:\n      return 'Unknown';\n    default:\n      return spanType;\n  }\n}\n\nexport function tryDeserializeAttribute(value: string): any {\n  try {\n    return JSON.parse(value);\n  } catch (e) {\n    return value;\n  }\n}\n\nexport const getMatchesFromEvent = (span: ModelTraceSpanNode, searchFilter: string): SearchMatch[] => {\n  const events = span.events;\n  if (!events) {\n    return [];\n  }\n\n  const matches: SearchMatch[] = [];\n  events.forEach((event, index) => {\n    const attributes = event.attributes;\n\n    if (!attributes) {\n      return;\n    }\n\n    Object.keys(attributes).forEach((attribute) => {\n      const isKeyMatch = attribute.toLowerCase().includes(searchFilter);\n      const key = getEventAttributeKey(event.name, index, attribute);\n\n      if (isKeyMatch) {\n        matches.push({\n          span,\n          section: 'events',\n          key,\n          isKeyMatch: true,\n          matchIndex: 0,\n        });\n      }\n\n      // event values can be arbitrary JSON\n      const value = JSON.stringify(attributes[attribute]).toLowerCase();\n      const numValueMatches = value.split(searchFilter).length - 1;\n      for (let i = 0; i < numValueMatches; i++) {\n        matches.push({\n          span,\n          section: 'events',\n          key,\n          isKeyMatch: false,\n          matchIndex: i,\n        });\n      }\n    });\n  });\n\n  return matches;\n};\n\n/**\n * This function extracts all the matches from a span based on the search filter,\n * and appends some necessary metadata that is necessary for the jump-to-search\n * function.\n */\nexport const getMatchesFromSpan = (span: ModelTraceSpanNode, searchFilter: string): SearchMatch[] => {\n  // if search filter is empty, don't generate matches\n  // because there will be nothing to highlight anyway\n  if (!searchFilter) {\n    return [];\n  }\n\n  const matches: SearchMatch[] = [];\n\n  const sections = {\n    inputs: span?.inputs,\n    outputs: span?.outputs,\n    attributes: span?.attributes,\n    events: span?.events,\n  };\n\n  map(sections, (section: any, label: 'inputs' | 'outputs' | 'attributes' | 'events') => {\n    if (label === 'events') {\n      matches.push(...getMatchesFromEvent(span, searchFilter));\n      return;\n    }\n\n    const sectionList = createListFromObject(section);\n    sectionList.forEach((item) => {\n      // NOTE: this ignores the fact that there might be multiple matches in a key\n      // for example, if the key is \"aaaaa\", and the search filter is \"a\". However,\n      // implementing support for this case would make the code needlessly complex.\n      // If we receive feedback that this is a problem, we can revisit this.\n      const isKeyMatch = item.key.toLowerCase().includes(searchFilter);\n      if (isKeyMatch) {\n        matches.push({\n          span: span,\n          section: label,\n          key: item.key,\n          isKeyMatch: true,\n          matchIndex: 0,\n        });\n      }\n\n      const numValueMatches = item.value.toLowerCase().split(searchFilter).length - 1;\n      for (let i = 0; i < numValueMatches; i++) {\n        matches.push({\n          span: span,\n          section: label,\n          key: item.key,\n          isKeyMatch: false,\n          matchIndex: i,\n        });\n      }\n    });\n  });\n  return matches;\n};\n\nexport function searchTree(\n  rootNode: ModelTraceSpanNode,\n  searchFilter: string,\n  spanFilterState: SpanFilterState,\n): {\n  filteredTreeNodes: ModelTraceSpanNode[];\n  matches: SearchMatch[];\n} {\n  const searchFilterLowercased = searchFilter.toLowerCase().trim();\n  const allSpanTypesSelected = Object.values(spanFilterState.spanTypeDisplayState).every(\n    (shouldDisplay) => shouldDisplay,\n  );\n  // if there is no search filter and all span types\n  // are selected, then we don't have to do any filtering.\n  if (searchFilterLowercased === '' && allSpanTypesSelected) {\n    return {\n      filteredTreeNodes: [rootNode],\n      matches: [],\n    };\n  }\n\n  const children = rootNode.children ?? [];\n  const filteredChildren: ModelTraceSpanNode[] = [];\n  const matches: SearchMatch[] = [];\n  children.forEach((child) => {\n    const { filteredTreeNodes: childNodes, matches: childMatches } = searchTree(\n      child,\n      searchFilterLowercased,\n      spanFilterState,\n    );\n\n    filteredChildren.push(...childNodes);\n    matches.push(...childMatches);\n  });\n\n  const spanName = ((rootNode.title as string) ?? '').toLowerCase();\n  const spanMatches = getMatchesFromSpan(rootNode, searchFilterLowercased);\n\n  // check if the span passes the text and type filters\n  const nodeMatchesSearch = spanMatches.length > 0 || spanName.includes(searchFilterLowercased);\n  const spanTypeIsDisplayed = rootNode.type ? spanFilterState.spanTypeDisplayState[rootNode.type] : true;\n  const nodePassesSpanFilters = nodeMatchesSearch && spanTypeIsDisplayed;\n\n  const hasMatchingChild = filteredChildren.length > 0;\n  const hasException = getSpanExceptionCount(rootNode) > 0;\n\n  const nodeShouldBeDisplayed =\n    nodePassesSpanFilters ||\n    // the `showParents` and `showExceptions` flags override the\n    // search filters, so we always show the node if they pass\n    (spanFilterState.showParents && hasMatchingChild) ||\n    (spanFilterState.showExceptions && hasException);\n\n  if (nodeShouldBeDisplayed) {\n    return {\n      filteredTreeNodes: [{ ...rootNode, children: filteredChildren }],\n      matches: spanMatches.concat(matches),\n    };\n  }\n\n  // otherwise cut the span out of the tree by returning the children directly\n  return {\n    filteredTreeNodes: filteredChildren,\n    matches,\n  };\n}\n\nexport function searchTreeBySpanId(\n  rootNode: ModelTraceSpanNode | null,\n  selectedSpanId?: string,\n): ModelTraceSpanNode | undefined {\n  if (isNil(selectedSpanId) || isNil(rootNode)) {\n    return undefined;\n  }\n\n  if (rootNode.key === selectedSpanId) {\n    return rootNode;\n  }\n\n  const children = rootNode.children ?? [];\n  for (const child of children) {\n    const matchedNode = searchTreeBySpanId(child, selectedSpanId);\n    if (matchedNode) {\n      return matchedNode;\n    }\n  }\n\n  return undefined;\n}\n\nconst getChatMessagesFromSpan = (\n  messagesAttributeValue: any,\n  inputs: any,\n  outputs: any,\n  messageFormat?: string,\n): ModelTraceChatMessage[] | undefined => {\n  // if the `mlflow.chat.messages` attribute is provided\n  // and in the correct format, return it as-is\n  // we allow content type to be content part list for the `mlflow.chat.messages` attribute\n  if (Array.isArray(messagesAttributeValue) && messagesAttributeValue.every(isRawModelTraceChatMessage)) {\n    return compact(messagesAttributeValue.map(prettyPrintChatMessage));\n  }\n\n  // otherwise, attempt to parse messages from inputs and outputs\n  // this is to support rich rendering for older versions of MLflow\n  // before the `mlflow.chat.messages` attribute was introduced\n  const messagesFromInputs = normalizeConversation(inputs, messageFormat) ?? [];\n  const messagesFromOutputs = normalizeConversation(outputs, messageFormat) ?? [];\n  // when either input or output is not chat messages, we do not set the chat message fiels.\n  if (messagesFromInputs.length === 0 || messagesFromOutputs.length === 0) {\n    return undefined;\n  }\n\n  return messagesFromInputs.concat(messagesFromOutputs);\n};\n\nconst getChatToolsFromSpan = (toolsAttributeValue: any, inputs: any): ModelTraceChatTool[] | undefined => {\n  // if the `mlflow.chat.tools` attribute is provided\n  // and in the correct format, return it as-is\n  if (Array.isArray(toolsAttributeValue) && toolsAttributeValue.every(isModelTraceChatTool)) {\n    return toolsAttributeValue;\n  }\n\n  // otherwise, attempt to parse tools from inputs\n  // TODO: support langchain format for tool inputs\n  if (Array.isArray(inputs?.tools) && inputs?.tools?.every(isModelTraceChatTool)) {\n    return inputs.tools;\n  }\n\n  return undefined;\n};\n\nexport const normalizeNewSpanData = (\n  span: ModelTraceSpan,\n  rootStartTime: number,\n  rootEndTime: number,\n  children: ModelTraceSpanNode[],\n  assessmentMap: Record<string, Assessment[]>,\n  traceId: string,\n): ModelTraceSpanNode => {\n  const spanType = tryDeserializeAttribute(span.attributes?.['mlflow.spanType']);\n  const inputs = tryDeserializeAttribute(span.attributes?.['mlflow.spanInputs']);\n  const outputs = tryDeserializeAttribute(span.attributes?.['mlflow.spanOutputs']);\n  const parentId = getModelTraceSpanParentId(span);\n  const spanId = getModelTraceSpanId(span);\n\n  const assessments = assessmentMap[spanId] ?? [];\n  if (!parentId) {\n    // assessments that are not associated with a specific\n    // span should be displayed at the root.\n    assessments.push(...(assessmentMap[''] ?? []));\n  }\n\n  // data that powers the \"chat\" tab\n  const messagesAttributeValue = tryDeserializeAttribute(span.attributes?.['mlflow.chat.messages']);\n  const messageFormat = tryDeserializeAttribute(span.attributes?.['mlflow.message.format']);\n  const chatMessages = getChatMessagesFromSpan(messagesAttributeValue, inputs, outputs, messageFormat);\n  const chatTools = getChatToolsFromSpan(tryDeserializeAttribute(span.attributes?.['mlflow.chat.tools']), inputs);\n\n  // remove other private mlflow attributes\n  const attributes = mapValues(\n    omitBy(span.attributes, (_, key) => key.startsWith('mlflow.')),\n    (value) => tryDeserializeAttribute(value),\n  );\n  const events = span.events;\n  const start = (Number(getModelTraceSpanStartTime(span)) - rootStartTime) / 1000;\n  const end = (Number(getModelTraceSpanEndTime(span) ?? rootEndTime) - rootStartTime) / 1000;\n\n  return {\n    title: span.name,\n    icon: (\n      <ModelTraceExplorerIcon\n        type={getIconTypeForSpan(spanType)}\n        hasException={getSpanExceptionCount(span) > 0}\n        isRootSpan={!parentId}\n      />\n    ),\n    type: spanType,\n    key: spanId,\n    start,\n    end,\n    children,\n    inputs,\n    outputs,\n    attributes,\n    events,\n    chatMessages,\n    chatTools,\n    parentId,\n    assessments,\n    traceId,\n  };\n};\n\nconst base64ToHex = (base64: string): string => {\n  const binaryString = atob(base64);\n  const binaryLen = binaryString.length;\n  let hex = '';\n  for (let i = 0; i < binaryLen; i++) {\n    const charCode = binaryString.charCodeAt(i);\n    hex += charCode.toString(16).padStart(2, '0');\n  }\n  return hex;\n};\n\n// mlflow span ids are meant to be interpreted as hex strings\nexport const decodeSpanId = (spanId: string | null | undefined, isV3Span: boolean): string => {\n  if (!spanId) {\n    return '';\n  }\n\n  if (isV3Span) {\n    // v3 span ids are base64 encoded\n    try {\n      return base64ToHex(spanId);\n    } catch (e) {\n      // if base64 decoding fails, just return the original spanId\n      return spanId;\n    }\n  }\n\n  // old V2 span ids (pre-March 2025) are in hex with a 0x prefix\n  if (spanId.startsWith('0x')) {\n    return spanId.slice(2);\n  }\n\n  // new V2 span ids have the prefix stripped\n  return spanId;\n};\n\nexport function isV3ModelTraceInfo(info: ModelTrace['info']): info is ModelTraceInfoV3 {\n  return 'trace_metadata' in info;\n}\n\nexport function isV3ModelTraceSpan(span: ModelTraceSpan): span is ModelTraceSpanV3 {\n  return 'start_time_unix_nano' in span;\n}\n\nexport function isV2ModelTraceSpan(span: ModelTraceSpan): span is ModelTraceSpanV2 {\n  return 'parent_id' in span;\n}\n\nexport function getModelTraceSpanId(span: ModelTraceSpan): string {\n  return isV3ModelTraceSpan(span)\n    ? decodeSpanId(span.span_id ?? '', true)\n    : decodeSpanId(span.context?.span_id ?? '', false);\n}\n\nexport function getModelTraceSpanParentId(span: ModelTraceSpan): string {\n  return isV3ModelTraceSpan(span)\n    ? decodeSpanId(span.parent_span_id ?? '', true)\n    : decodeSpanId(span.parent_id ?? '', false);\n}\n\nexport function getModelTraceSpanStartTime(span: ModelTraceSpan): number {\n  return isV3ModelTraceSpan(span) ? Number(span.start_time_unix_nano) : Number(span.start_time);\n}\n\nexport function getModelTraceSpanEndTime(span: ModelTraceSpan): number {\n  return isV3ModelTraceSpan(span) ? Number(span.end_time_unix_nano) : Number(span.end_time);\n}\n\nexport function getModelTraceId(trace: ModelTrace): string {\n  return isV3ModelTraceInfo(trace.info) ? trace.info.trace_id : trace.info.request_id ?? '';\n}\n\n// get the size of the trace in bytes, or null if the size is not available\nexport function getModelTraceSize(trace: ModelTrace): number | null {\n  if (!isV3ModelTraceInfo(trace.info)) {\n    return null;\n  }\n\n  const size = Number(trace.info?.trace_metadata?.['mlflow.trace.sizeBytes']);\n  return !isNil(size) && !isNaN(size) ? size : null;\n}\n\nexport function parseModelTraceToTree(trace: ModelTrace): ModelTraceSpanNode | null {\n  const traceId = getModelTraceId(trace);\n  const spans = trace.trace_data?.spans ?? trace.data.spans;\n  const spanMap: { [span_id: string]: ModelTraceSpan } = {};\n  const relationMap: { [span_id: string]: string[] } = {};\n\n  spans.forEach((span) => {\n    const spanId = getModelTraceSpanId(span);\n    spanMap[spanId] = span;\n    relationMap[spanId] = [];\n  });\n\n  spans.forEach((span) => {\n    const spanId = getModelTraceSpanId(span);\n    const parentId = getModelTraceSpanParentId(span);\n    if (parentId) {\n      if (!relationMap[parentId]) {\n        throw new Error('Tree structure is malformed!');\n      }\n      relationMap[parentId].push(spanId);\n    }\n  });\n\n  const rootSpan = spans.find((span) => !getModelTraceSpanParentId(span));\n  if (isNil(rootSpan)) {\n    return null;\n  }\n\n  const rootSpanId = getModelTraceSpanId(rootSpan);\n  function getSpanNodeFromData(span_id: string): ModelTraceSpanNode {\n    const span = spanMap[span_id];\n    // above we return if rootSpan is null, but for some\n    // reason typescript thinks it's still nullable here.\n    const rootStart = Number(getModelTraceSpanStartTime(rootSpan as ModelTraceSpan));\n    const rootEnd = Number(getModelTraceSpanEndTime(rootSpan as ModelTraceSpan));\n    const children = relationMap[span_id].map(getSpanNodeFromData);\n    const assessmentMap = getAssessmentMap(trace.info);\n\n    // not using `isV2Span` here because for legacy reasons,\n    // V1 and V2 are rolled into in the same type. \"parent_id\" is\n    // the way we distinguish between the two.\n    if (isV3ModelTraceSpan(span) || 'parent_id' in span) {\n      // reusing the same function for v2 and v3 as the changes are small\n      return normalizeNewSpanData(span, rootStart, rootEnd, children, assessmentMap, traceId);\n    }\n\n    // v1 spans\n    const spanType = span.span_type ?? ModelSpanType.UNKNOWN;\n    return {\n      title: span.name,\n      icon: <ModelTraceExplorerIcon type={getIconTypeForSpan(spanType)} />,\n      type: spanType as ModelSpanType,\n      key: span.context.span_id,\n      start: Number(span.start_time) - rootStart,\n      // default to the end of the root span if the span has no end time.\n      // this can happen if an exception was thrown in the span.\n      end: Number(span.end_time ?? rootEnd) - rootStart,\n      children: children,\n      inputs: span.inputs,\n      outputs: span.outputs,\n      attributes: span.attributes,\n      events: span.events,\n      parentId: span.parent_id ?? span.parent_span_id,\n      assessments: [],\n      traceId,\n    };\n  }\n\n  return getSpanNodeFromData(rootSpanId);\n}\n\n// returns a map of { [span_id: string] : Assessment[] }\nexport const getAssessmentMap = (traceInfo: ModelTrace['info']): Record<string, Assessment[]> => {\n  let assessments: Assessment[] = [];\n  if (isV3ModelTraceInfo(traceInfo)) {\n    assessments = traceInfo.assessments ?? [];\n  } else {\n    assessments = getAssessmentsFromTags(traceInfo.tags);\n  }\n\n  // hydrate the assessments with the overridden assessment objects\n  const assessmentsById = keyBy(assessments, 'assessment_id');\n  Object.values(assessmentsById).forEach((assessment) => {\n    if (assessment.overrides) {\n      const overriddenAssessment = assessmentsById[assessment.overrides];\n      assessment.overriddenAssessment = overriddenAssessment;\n    }\n  });\n\n  assessments = Object.values(assessmentsById);\n\n  // construct the map by reducing over the assessments\n  const assessmentMap = assessments.reduce((acc: Record<string, Assessment[]>, assessment: Assessment) => {\n    const spanId = assessment.span_id ?? '';\n    if (!acc[spanId]) {\n      acc[spanId] = [];\n    }\n    acc[spanId].push(assessment);\n    return acc;\n  }, {});\n\n  // sort the assessments by last_update_time\n  Object.keys(assessmentMap).forEach((spanId) => {\n    assessmentMap[spanId].sort(\n      (a, b) => new Date(b.last_update_time).getTime() - new Date(a.last_update_time).getTime(),\n    );\n  });\n\n  return assessmentMap;\n};\n\n// parses assessments out from the trace tags\nconst getAssessmentsFromTags = (tags: ModelTrace['info']['tags']): Assessment[] => {\n  if (!tags) {\n    return [];\n  }\n\n  const tagList = Array.isArray(tags) ? tags : Object.entries(tags).map(([key, value]) => ({ key, value }));\n\n  return tagList.filter(({ key }) => key.startsWith('mlflow.assessment.')).map(({ value }) => JSON.parse(value));\n};\n\n// this function attempts to extract the trace version from\n// a given source (either request_metadata or tags)\nexport function findTraceVersionByKey(\n  source: { [key: string]: string } | { key: string; value: string }[] | undefined,\n): string | undefined {\n  if (!source) {\n    return undefined;\n  }\n\n  if (isArray(source)) {\n    return source.find((tag) => tag.key === MLFLOW_TRACE_SCHEMA_VERSION_KEY)?.value;\n  }\n\n  return source[MLFLOW_TRACE_SCHEMA_VERSION_KEY];\n}\n\n// this function determines whether an object is a ModelTrace by asserting\n// that the object has the `data` and `info` fields, and that the\n// trace info contains the `mlflow.trace_schema.version` key\nexport const isModelTrace = (trace: any): trace is ModelTrace => {\n  const traceInfo = trace?.info;\n  const traceData = trace?.data;\n  if (!traceInfo || !traceData || !traceData?.spans) {\n    return false;\n  }\n\n  // request_metadata is for V2 traces, trace_metadata is for V3 traces\n  const metadata = traceInfo?.request_metadata ?? traceInfo?.trace_metadata;\n  if (metadata && findTraceVersionByKey(metadata)) {\n    return true;\n  }\n\n  const tags = traceInfo?.tags;\n  if (tags && findTraceVersionByKey(tags)) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const createListFromObject = (\n  obj: { [key: string]: any } | string[] | string | boolean | number | undefined,\n) => {\n  if (isNil(obj)) {\n    return [];\n  }\n\n  if (Array.isArray(obj) || isString(obj) || isNumber(obj) || isBoolean(obj)) {\n    return [{ key: '', value: JSON.stringify(obj, null, 2) }];\n  }\n\n  return Object.entries(obj).map(([key, value]) => {\n    return { key, value: JSON.stringify(value, null, 2) };\n  });\n};\n\nexport const getHighlightedSpanComponents = ({\n  searchFilter,\n  data,\n  activeMatchBackgroundColor,\n  inactiveMatchBackgroundColor,\n  containsActiveMatch,\n  activeMatch,\n  scrollToActiveMatch,\n}: {\n  searchFilter: string;\n  data: string;\n  activeMatchBackgroundColor: string;\n  inactiveMatchBackgroundColor: string;\n  containsActiveMatch: boolean;\n  activeMatch: SearchMatch;\n  scrollToActiveMatch: (node: HTMLSpanElement) => void;\n}) => {\n  // splitting by regex retains the matches in the array,\n  // which makes it easier to handle stuff like preserving\n  // the original case of the match.\n  const regex = new RegExp(`(${escapeRegExp(searchFilter.trim())})`, 'gi');\n  const parts = data.split(regex);\n  const spans: React.ReactNode[] = [];\n  let matchIndex = 0;\n\n  for (let i = 0; i < parts.length; i++) {\n    if (parts[i].toLowerCase().includes(searchFilter.toLowerCase().trim())) {\n      const isActiveMatch = containsActiveMatch && activeMatch.matchIndex === matchIndex;\n      const backgroundColor = isActiveMatch ? activeMatchBackgroundColor : inactiveMatchBackgroundColor;\n      const span = (\n        <span ref={isActiveMatch ? scrollToActiveMatch : null} key={i} css={{ backgroundColor, scrollMarginTop: 50 }}>\n          {parts[i]}\n        </span>\n      );\n      matchIndex++;\n      spans.push(span);\n    } else {\n      spans.push(parts[i]);\n    }\n  }\n\n  return spans;\n};\n\nexport const isRetrieverDocument = (document: any): document is RetrieverDocument => {\n  return has(document, 'page_content');\n};\n\nexport const isRenderableRetrieverSpan = (span: ModelTraceSpanNode): boolean => {\n  return (\n    span.type === ModelSpanType.RETRIEVER &&\n    Array.isArray(span.outputs) &&\n    span.outputs.length > 0 &&\n    every(span.outputs, isRetrieverDocument)\n  );\n};\n\nexport const getEventAttributeKey = (name: string, index: number, attribute: string): string => {\n  return `${name}-${index}-${attribute}`;\n};\n\nexport const getSpanExceptionEvents = (span: ModelTraceSpanNode | ModelTraceSpan): ModelTraceEvent[] => {\n  return (span.events ?? []).filter((event) => event.name === 'exception');\n};\n\nexport const getSpanExceptionCount = (span: ModelTraceSpanNode | ModelTraceSpan): number => {\n  return getSpanExceptionEvents(span).length;\n};\n\nexport const isModelTraceChatToolParamProperty = (obj: any): obj is ModelTraceChatToolParamProperty => {\n  if (isNil(obj)) {\n    return false;\n  }\n\n  if (!isNil(obj.type) && !isString(obj.type)) {\n    return false;\n  }\n\n  if (!isNil(obj.description) && !isString(obj.description)) {\n    return false;\n  }\n\n  if (!isNil(obj.enum) && !Array.isArray(obj.enum)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isModelTraceChatTool = (obj: any): obj is ModelTraceChatTool => {\n  if (isNil(obj) || obj.type !== 'function' || !has(obj, 'function.name')) {\n    return false;\n  }\n\n  // conditional validation for the `parameters` field\n  const parameters = obj.function?.parameters;\n  if (!isNil(parameters)) {\n    // if `required` is present, it must be a list of strings\n    const required = parameters.required;\n    if (!isNil(required) && (!Array.isArray(required) || !required.every(isString))) {\n      return false;\n    }\n\n    const properties = parameters.properties;\n    if (!isNil(properties) && !Object.values(properties).every(isModelTraceChatToolParamProperty)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport const isModelTraceToolCall = (obj: any): obj is ModelTraceToolCall => {\n  return obj && isString(obj.id) && isString(obj.function?.arguments) && isString(obj.function?.name);\n};\n\nconst isContentPart = (part: any) => {\n  switch (part.type) {\n    case 'text':\n    case 'input_text':\n    case 'output_text':\n      return isString(part.text);\n    case 'image_url':\n      const { image_url } = part;\n      if (isNil(image_url)) {\n        return false;\n      }\n      return isString(image_url.url) && (isNil(image_url.detail) || ['auto', 'low', 'high'].includes(image_url.detail));\n    case 'input_audio':\n      const { input_audio } = part;\n      if (isNil(input_audio)) {\n        return false;\n      }\n      return isString(input_audio.data) && (isNil(input_audio.format) || ['wav', 'mp3'].includes(input_audio.format));\n    default:\n      return false;\n  }\n};\n\nconst isContentType = (content: any) => {\n  if (isNil(content) || isString(content)) {\n    return true;\n  }\n\n  if (isArray(content)) {\n    return content.every((part) => isContentPart(part));\n  }\n\n  return false;\n};\n\nexport const isModelTraceChatMessage = (message: any): message is ModelTraceChatMessage => {\n  if (!isRawModelTraceChatMessage(message)) {\n    return false;\n  }\n\n  return isNil(message.content) || isString(message.content);\n};\n\nexport const isRawModelTraceChatMessage = (message: any): message is RawModelTraceChatMessage => {\n  if (!message) {\n    return false;\n  }\n\n  if (message.tool_calls) {\n    if (!Array.isArray(message.tool_calls)) {\n      return false;\n    }\n\n    if (!message.tool_calls.every(isModelTraceToolCall)) {\n      return false;\n    }\n  }\n\n  if (message.type === 'reasoning') {\n    return true;\n  }\n\n  // verify if the message content is a valid content type or not\n  if (!isContentType(message.content)) {\n    return false;\n  }\n\n  return (\n    message.role === 'user' || message.role === 'assistant' || message.role === 'system' || message.role === 'tool'\n  );\n};\n\nexport const isModelTraceChatInput = (obj: any): obj is ModelTraceChatInput => {\n  return (\n    obj && Array.isArray(obj.messages) && obj.messages.length > 0 && obj.messages.every(isRawModelTraceChatMessage)\n  );\n};\n\nexport const isModelTraceChoices = (obj: any): obj is ModelTraceChatResponse['choices'] => {\n  return (\n    Array.isArray(obj) &&\n    obj.length > 0 &&\n    obj.every((choice: any) => has(choice, 'message') && isModelTraceChatMessage(choice.message))\n  );\n};\n\nexport const isModelTraceChatResponse = (obj: any): obj is ModelTraceChatResponse => {\n  return obj && isModelTraceChoices(obj.choices);\n};\n\n/**\n * Attempt to normalize a conversation, return null in case the format is unrecognized\n *\n * Supported formats:\n *   1. Langchain chat inputs\n *   2. Langchain chat results\n *   3. OpenAI ChatCompletions inputs\n *   4. OpenAI ChatCompletions responses\n *   5. OpenAI Responses inputs\n *   6. OpenAI Responses output\n *   7. LlamaIndex chat responses\n *   8. DSPy chat inputs\n *   8. DSPy chat outputs\n *   9. Gemini inputs\n *  10. Gemini outputs\n *  11. Anthropic inputs\n *  12. Anthropic outputs\n *  13. OpenAI Agent inputs\n *  14. OpenAI Agent outputs\n *  15. Autogen inputs\n *  16. Autogen outputs\n *  17. Bedrock inputs\n *  18. Bedrock outputs\n */\nexport const normalizeConversation = (input: any, messageFormat?: string): ModelTraceChatMessage[] | null => {\n  // wrap in try/catch to avoid crashing the UI. we're doing a lot of type coercion\n  // and formatting, and it's possible that we miss some edge cases. in case of an error,\n  // simply return null to signify that the input is not a chat input.\n  try {\n    // if the input is already in the correct format, return it\n    if (Array.isArray(input) && input.length > 0 && input.every(isRawModelTraceChatMessage)) {\n      return compact(input.map(prettyPrintChatMessage));\n    }\n\n    switch (messageFormat) {\n      case 'langchain':\n        const langchainMessages = normalizeLangchainChatInput(input) ?? normalizeLangchainChatResult(input);\n        if (langchainMessages) return langchainMessages;\n        break;\n      case 'llamaindex':\n        const llamaIndexMessages = normalizeLlamaIndexChatInput(input) ?? normalizeLlamaIndexChatResponse(input);\n        if (llamaIndexMessages) return llamaIndexMessages;\n        break;\n      case 'openai':\n        const openAIMessages =\n          normalizeOpenAIChatInput(input) ??\n          normalizeOpenAIChatResponse(input) ??\n          normalizeOpenAIResponsesOutput(input) ??\n          normalizeOpenAIResponsesInput(input);\n        if (openAIMessages) return openAIMessages;\n        break;\n      case 'dspy':\n        const dspyMessages = normalizeDspyChatInput(input) ?? normalizeDspyChatOutput(input);\n        if (dspyMessages) return dspyMessages;\n        break;\n      case 'gemini':\n        const geminiMessages = normalizeGeminiChatInput(input) ?? normalizeGeminiChatOutput(input);\n        if (geminiMessages) return geminiMessages;\n        break;\n      case 'anthropic':\n        const anthropicMessages = normalizeAnthropicChatInput(input) ?? normalizeAnthropicChatOutput(input);\n        if (anthropicMessages) return anthropicMessages;\n        break;\n      case 'openai-agent':\n        const openAIAgentMessages = normalizeOpenAIAgentInput(input) ?? normalizeOpenAIAgentOutput(input);\n        if (openAIAgentMessages) return openAIAgentMessages;\n        break;\n      case 'autogen':\n        const autogenMessages = normalizeAutogenChatInput(input) ?? normalizeAutogenChatOutput(input);\n        if (autogenMessages) return autogenMessages;\n        break;\n      case 'bedrock':\n        const bedrockMessages = normalizeBedrockChatInput(input) ?? normalizeBedrockChatOutput(input);\n        if (bedrockMessages) return bedrockMessages;\n        break;\n      default:\n        // Fallback to OpenAI chat format\n        const chatMessages = normalizeOpenAIChatInput(input) ?? normalizeOpenAIChatResponse(input);\n        if (chatMessages) return chatMessages;\n        break;\n    }\n    return null;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const prettyPrintToolCall = (toolCall: ModelTraceToolCall): ModelTraceToolCall => {\n  // add some spacing to the arguments for better readability\n  let args = toolCall.function?.arguments;\n  try {\n    args = JSON.stringify(JSON.parse(args), null, 2);\n  } catch (e) {\n    // use original args\n  }\n  return {\n    id: toolCall.id,\n    function: {\n      arguments: args,\n      name: toolCall.function.name,\n    },\n  };\n};\n\nconst formatChatContent = (content?: ModelTraceContentType | null): string | undefined | null => {\n  if (isNil(content) || isString(content)) {\n    return content;\n  }\n\n  const contentParts = content\n    // eslint-disable-next-line array-callback-return\n    .map((part) => {\n      switch (part.type) {\n        case 'text':\n        case 'input_text':\n        case 'output_text':\n          return part.text;\n        case 'image_url':\n          const url = part?.image_url?.url;\n          return url ? `![](${url})` : '[image]';\n        case 'input_audio':\n          // raw encoded audio content is not displayed in the UI\n          return '[audio]';\n      }\n    })\n    .filter((part) => part !== undefined);\n\n  // Join with double line breaks for better visual separation\n  return contentParts.join('\\n\\n');\n};\n\nexport const prettyPrintChatMessage = (message: RawModelTraceChatMessage): ModelTraceChatMessage | null => {\n  // TODO: support rich rendering of reasoning messages\n  // for now, just return null and compact it away in the caller\n  // this is because we want to still render the rest of the message\n  // outputs.\n  if (message.type === 'reasoning') {\n    return null;\n  }\n\n  return {\n    ...message,\n    content: formatChatContent(message.content),\n    tool_calls: message.tool_calls?.map(prettyPrintToolCall),\n  };\n};\n\nexport const getDefaultActiveTab = (\n  selectedNode: ModelTraceSpanNode | undefined,\n): 'chat' | 'content' | 'attributes' | 'events' => {\n  if (isNil(selectedNode)) {\n    return 'content';\n  }\n\n  if (selectedNode.chatMessages) {\n    return 'chat';\n  }\n\n  const hasInputsOrOutputs = !isNil(selectedNode.inputs) || !isNil(selectedNode.outputs);\n  if (hasInputsOrOutputs) {\n    return 'content';\n  }\n\n  return 'attributes';\n};\n","import type { TimelineTreeNode } from './timeline-tree';\n\nexport const MLFLOW_TRACE_SCHEMA_VERSION_KEY = 'mlflow.trace_schema.version';\n\n// column name for mlflow trace data in inference tables\nexport const INFERENCE_TABLE_RESPONSE_COLUMN_KEY = 'response';\nexport const INFERENCE_TABLE_TRACE_COLUMN_KEY = 'trace';\n\nexport type ModelTraceExplorerRenderMode = 'default' | 'json';\n\nexport enum ModelSpanType {\n  LLM = 'LLM',\n  CHAIN = 'CHAIN',\n  AGENT = 'AGENT',\n  TOOL = 'TOOL',\n  FUNCTION = 'FUNCTION',\n  CHAT_MODEL = 'CHAT_MODEL',\n  RETRIEVER = 'RETRIEVER',\n  PARSER = 'PARSER',\n  EMBEDDING = 'EMBEDDING',\n  RERANKER = 'RERANKER',\n  MEMORY = 'MEMORY',\n  UNKNOWN = 'UNKNOWN',\n}\n\nexport enum ModelIconType {\n  MODELS = 'models',\n  DOCUMENT = 'document',\n  CONNECT = 'connect',\n  SEARCH = 'search',\n  SORT = 'sort',\n  UNKNOWN = 'unknown',\n  FUNCTION = 'function',\n  CODE = 'code',\n  NUMBERS = 'numbers',\n  WRENCH = 'wrench',\n  AGENT = 'agent',\n  CHAIN = 'chain',\n  USER = 'user',\n  SYSTEM = 'system',\n  SAVE = 'save',\n}\n\n/**\n * Represents a single model trace span.\n * Based on https://github.com/mlflow/mlflow/blob/tracing/mlflow/entities/span.py\n *\n * TODO: clean up all deprecated fields after PrPr customers swap over to\n *       the latest version of mlflow tracing\n */\nexport type ModelTraceSpanV2 = {\n  context: {\n    span_id: string;\n    trace_id: string;\n  };\n  name: string;\n  /* deprecated, renamed to `parent_id` */\n  parent_span_id?: string | null;\n  parent_id?: string | null;\n  /* deprecated, contained in attributes['mlflow.spanType'] */\n  span_type?: ModelSpanType | string;\n  /* deprecated, migrated to `status_code` and `status_message` */\n  status?: ModelTraceStatus;\n  status_code?: string;\n  status_message?: string | null;\n  start_time: number;\n  end_time: number;\n  /* deprecated, contained in attributes['mlflow.spanInputs'] */\n  inputs?: any;\n  /* deprecated, contained in attributes['mlflow.spanOutputs'] */\n  outputs?: any;\n  attributes?: Record<string, any>;\n  events?: ModelTraceEvent[];\n  /* metadata for ui usage logging */\n  type?: ModelSpanType;\n};\n\nexport type ModelTraceSpanV3 = {\n  trace_id: string;\n  span_id: string;\n  // can be empty\n  trace_state: string;\n  // can be empty or null\n  parent_span_id: string | null;\n  name: string;\n  start_time_unix_nano: string;\n  end_time_unix_nano: string;\n  status: {\n    code: ModelSpanStatusCode;\n    message?: string;\n  };\n  attributes: Record<string, any>;\n  events?: ModelTraceEvent[];\n  /* metadata for ui usage logging */\n  type?: ModelSpanType;\n};\n\nexport type ModelTraceSpan = ModelTraceSpanV2 | ModelTraceSpanV3;\n\nexport type ModelTraceEvent = {\n  name: string;\n  /* deprecated as of v3, migrated to `time_unix_nano` */\n  timestamp?: number;\n  time_unix_nano?: number;\n  attributes?: Record<string, any>;\n};\n\nexport type ModelTraceData = {\n  spans: ModelTraceSpan[];\n};\n\n/**\n * Represents a single model trace object.\n * Based on https://github.com/mlflow/mlflow/blob/8e44d102e9568d09d9dc376136d13a5a5d1ab46f/mlflow/tracing/types/model.py#L11\n */\nexport type ModelTrace = {\n  /* deprecated, renamed to `data` */\n  trace_data?: ModelTraceData;\n  /* deprecated, renamed to `info` */\n  trace_info?: ModelTraceInfo;\n  data: ModelTraceData;\n  info: ModelTraceInfoV3 | ModelTraceInfo | NotebookModelTraceInfo;\n};\n\n/**\n * Represents the trace data saved in an inference table.\n * https://github.com/databricks/universe/blob/fb8a572602161aa6387ac32593aa24a91518cc32/rag/serving/python/databricks/rag/unpacking/schemas.py#L133-L141\n */\nexport type ModelTraceInferenceTableData = {\n  app_version_id: string;\n  start_timestamp: string;\n  end_timestamp: string;\n  is_truncated: boolean;\n  [MLFLOW_TRACE_SCHEMA_VERSION_KEY]: number;\n  spans: (Omit<ModelTraceSpan, 'attributes'> & {\n    attributes: string;\n  })[];\n};\n\nexport type ModelTraceInfo = {\n  request_id?: string;\n  experiment_id?: string;\n  timestamp_ms?: number;\n  execution_time_ms?: number;\n  status?: ModelTraceStatus['description'];\n  attributes?: Record<string, any>;\n  request_metadata?: { key: string; value: string }[];\n  tags?: { key: string; value: string }[];\n};\n\n// tags and request_metadata in the notebook view\n// (i.e. displayed directly from the python client)\n// are stored as an object rather than an array.\nexport type NotebookModelTraceInfo = Omit<ModelTraceInfo, 'tags' | 'request_metadata'> & {\n  tags?: { [key: string]: string };\n  request_metadata?: { [key: string]: string };\n};\n\nexport type ModelTraceLocationMlflowExperiment = {\n  type: 'MLFLOW_EXPERIMENT';\n  mlflow_experiment: {\n    experiment_id: string;\n  };\n};\n\nexport type ModelTraceLocationInferenceTable = {\n  type: 'INFERENCE_TABLE';\n  inference_table: {\n    full_table_name: string;\n  };\n};\n\nexport type ModelTraceLocation = ModelTraceLocationMlflowExperiment | ModelTraceLocationInferenceTable;\n\nexport type ModelTraceInfoV3 = {\n  trace_id: string;\n  client_request_id?: string;\n  trace_location: ModelTraceLocation;\n  request_preview?: string;\n  response_preview?: string;\n  // timestamp in a format like \"2025-02-19T09:52:23.140Z\"\n  request_time: string;\n  // formatted duration string like \"32.4s\"\n  execution_duration: string;\n  state: ModelTraceState;\n  trace_metadata: {\n    [key: string]: string;\n  };\n  assessments: Assessment[];\n  tags: {\n    [key: string]: string;\n  };\n};\n\nexport type ModelTraceState = 'STATE_UNSPECIFIED' | 'OK' | 'ERROR' | 'IN_PROGRESS';\n\nexport type ModelSpanStatusCode = 'STATUS_CODE_UNSET' | 'STATUS_CODE_OK' | 'STATUS_CODE_ERROR';\n\nexport type ModelTraceStatusUnset = {\n  description: 'UNSET';\n  status_code: 0;\n};\n\nexport type ModelTraceStatusOk = {\n  description: 'OK';\n  status_code: 1;\n};\n\nexport type ModelTraceStatusError = {\n  description: 'ERROR';\n  status_code: 2;\n};\n\nexport type ModelTraceStatusInProgress = {\n  description: 'IN_PROGRESS';\n  status_code: 3;\n};\n\nexport enum ModelTraceSpanType {\n  LLM = 'LLM',\n  CHAIN = 'CHAIN',\n  AGENT = 'AGENT',\n  TOOL = 'TOOL',\n  CHAT_MODEL = 'CHAT_MODEL',\n  RETRIEVER = 'RETRIEVER',\n  PARSER = 'PARSER',\n  EMBEDDING = 'EMBEDDING',\n  RERANKER = 'RERANKER',\n  MEMORY = 'MEMORY',\n  UNKNOWN = 'UNKNOWN',\n}\n\nexport type ModelTraceStatus =\n  | ModelTraceStatusUnset\n  | ModelTraceStatusOk\n  | ModelTraceStatusError\n  | ModelTraceStatusInProgress;\n\n/**\n * Represents a single node in the model trace tree.\n */\nexport interface ModelTraceSpanNode extends TimelineTreeNode, Pick<ModelTraceSpan, 'attributes' | 'type' | 'events'> {\n  assessments: Assessment[];\n  inputs?: any;\n  outputs?: any;\n  children?: ModelTraceSpanNode[];\n  chatMessages?: ModelTraceChatMessage[];\n  chatTools?: ModelTraceChatTool[];\n  parentId?: string | null;\n  traceId: string;\n}\n\nexport type ModelTraceExplorerTab = 'chat' | 'content' | 'attributes' | 'events';\n\nexport type SearchMatch = {\n  span: ModelTraceSpanNode;\n  section: 'inputs' | 'outputs' | 'attributes' | 'events';\n  key: string;\n  isKeyMatch: boolean;\n  matchIndex: number;\n};\n\nexport type SpanFilterState = {\n  // always show parents regardless of filter state\n  showParents: boolean;\n  // always show exceptions regardless of filter state\n  showExceptions: boolean;\n  // record of span_type: whether to show it\n  spanTypeDisplayState: Record<string, boolean>;\n};\n\nexport interface RetrieverDocument {\n  metadata: {\n    doc_uri: string;\n    chunk_id: string;\n    [key: string]: any;\n  };\n  page_content: string;\n  [key: string]: any;\n}\n\nexport enum CodeSnippetRenderMode {\n  JSON = 'json',\n  TEXT = 'text',\n  MARKDOWN = 'markdown',\n  PYTHON = 'python',\n}\n\ntype ModelTraceTextContentPart = {\n  type: 'text' | 'input_text' | 'output_text';\n  text: string;\n};\n\ntype ModelTraceImageUrl = {\n  url: string;\n  detail?: 'auto' | 'low' | 'high';\n};\n\ntype ModelTraceImageContentPart = {\n  type: 'image_url';\n  image_url: ModelTraceImageUrl;\n};\n\ntype ModelTraceInputAudio = {\n  data: string;\n  format: 'wav' | 'mp3';\n};\n\ntype ModelTraceAudioContentPart = {\n  type: 'input_audio';\n  input_audio: ModelTraceInputAudio;\n};\n\nexport type ModelTraceContentParts =\n  | ModelTraceTextContentPart\n  | ModelTraceImageContentPart\n  | ModelTraceAudioContentPart;\n\nexport type ModelTraceContentType = string | ModelTraceContentParts[];\n\n// We treat content as string in the tracing UI.\nexport type ModelTraceChatMessage = {\n  role: 'system' | 'user' | 'assistant' | 'tool' | 'function' | 'developer';\n  name?: string;\n  content?: string | null;\n  tool_calls?: ModelTraceToolCall[];\n  tool_call_id?: string;\n};\n\n// The actual chat message schema of mlflow contains string, null and content part list.\nexport type RawModelTraceChatMessage = Omit<ModelTraceChatMessage, 'content'> & {\n  // there are other types, but we don't support them yet\n  type?: 'message' | 'reasoning';\n  content?: ModelTraceContentType | null;\n};\n\nexport type ModelTraceChatToolParamProperty = {\n  type?: string;\n  description?: string;\n  enum?: string[];\n};\n\nexport type ModelTraceChatTool = {\n  type: 'function';\n  function: {\n    name: string;\n    description?: string;\n    parameters?: {\n      properties: {\n        [key: string]: ModelTraceChatToolParamProperty;\n      };\n      required?: string[];\n    };\n  };\n};\n\nexport type ModelTraceToolCall = {\n  id: string;\n  function: {\n    arguments: string;\n    name: string;\n  };\n};\n\n// aligned to the OpenAI format\nexport type ModelTraceChatResponse = {\n  choices: {\n    message: ModelTraceChatMessage;\n  }[];\n};\n\nexport type ModelTraceChatInput = {\n  messages: RawModelTraceChatMessage[];\n};\n\nexport type AssessmentSourceType = 'SOURCE_TYPE_UNSPECIFIED' | 'HUMAN' | 'LLM_JUDGE' | 'CODE';\n\nexport interface AssessmentSource {\n  source_type: AssessmentSourceType;\n  // Identifier for the source. For example:\n  // - For a human source -> user name\n  // - For an LLM judge -> the judge source (databricks or custom)\n  // - For a code judge -> the function name\n  source_id: string;\n}\n\nexport interface AssessmentError {\n  error_code: string;\n  error_message?: string;\n  stack_trace?: string;\n}\n\nexport type AssessmentValue = string | number | boolean | null | string[];\n\nexport interface Feedback {\n  // can be null / undefined if error is present\n  value?: AssessmentValue;\n  error?: AssessmentError;\n}\n\nexport interface ExpectationValue {\n  value: AssessmentValue;\n}\n\nexport interface ExpectationSerializedValue {\n  serialized_value: {\n    value: string;\n    serialization_format: string;\n  };\n}\n\nexport type Expectation = ExpectationValue | ExpectationSerializedValue;\n\n// should be aligned with `mlflow/api/proto/service.proto`\nexport interface AssessmentBase {\n  assessment_id: string;\n  assessment_name: string;\n  trace_id: string;\n  source: AssessmentSource;\n  span_id?: string;\n\n  // the time fields are in the form of a string timestamp\n  // e.g. \"2025-04-18T04:01:20.159Z\"\n  create_time: string;\n  last_update_time: string;\n\n  rationale?: string;\n  metadata?: Record<string, string>;\n\n  // if false, the assessment is not valid and should not be displayed\n  // undefined and true should be considered valid.\n  valid?: boolean;\n\n  // the assessment_id of the assessment that this assessment overrides\n  overrides?: string;\n\n  // UI only field to store the overridden assessment object for easier display\n  overriddenAssessment?: Assessment;\n}\n\nexport interface FeedbackAssessment extends AssessmentBase {\n  feedback: Feedback;\n}\n\nexport interface ExpectationAssessment extends AssessmentBase {\n  expectation: Expectation;\n}\n\nexport type Assessment = FeedbackAssessment | ExpectationAssessment;\n","import React from 'react';\nimport { Modal, Typography, CopyIcon, useDesignSystemTheme } from '@databricks/design-system';\nconst { Paragraph } = Typography;\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\n\nexport interface KeyValueTagFullViewModalProps {\n  tagKey: string;\n  tagValue: string;\n  setIsKeyValueTagFullViewModalVisible: React.Dispatch<React.SetStateAction<boolean>>;\n  isKeyValueTagFullViewModalVisible: boolean;\n}\n\nexport const KeyValueTagFullViewModal = React.memo((props: KeyValueTagFullViewModalProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_components_keyvaluetagfullviewmodal.tsx_17\"\n      title={'Tag: ' + props.tagKey}\n      visible={props.isKeyValueTagFullViewModalVisible}\n      onCancel={() => props.setIsKeyValueTagFullViewModalVisible(false)}\n    >\n      <div css={{ display: 'flex' }}>\n        <Paragraph css={{ flexGrow: 1 }}>\n          <pre\n            css={{\n              backgroundColor: theme.colors.backgroundPrimary,\n              marginTop: theme.spacing.sm,\n              whiteSpace: 'pre-wrap',\n              wordBreak: 'break-all',\n            }}\n          >\n            {props.tagValue}\n          </pre>\n        </Paragraph>\n        <div\n          css={{\n            marginTop: theme.spacing.sm,\n          }}\n        >\n          <CopyButton copyText={props.tagValue} showLabel={false} icon={<CopyIcon />} aria-label=\"Copy\" />\n        </div>\n      </div>\n    </Modal>\n  );\n});\n","import { Tag, LegacyTooltip, Typography } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../types';\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { KeyValueTagFullViewModal } from './KeyValueTagFullViewModal';\nimport type { Interpolation, Theme } from '@emotion/react';\n\n/**\n * An arbitrary number that is used to determine if a tag is too\n * long and should be truncated. We want to avoid short keys or values\n * in a long tag to be truncated\n * */\nconst TRUNCATE_ON_CHARS_LENGTH = 30;\n\nfunction getTruncatedStyles(shouldTruncate = true): Interpolation<Theme> {\n  return shouldTruncate\n    ? {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        textWrap: 'nowrap',\n        whiteSpace: 'nowrap' as const,\n      }\n    : { whiteSpace: 'nowrap' as const };\n}\n\n/**\n * A <Tag /> wrapper used for displaying key-value entity\n */\nexport const KeyValueTag = ({\n  isClosable = false,\n  onClose,\n  tag,\n  enableFullViewModal = false,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n  maxWidth = 300,\n  className,\n}: {\n  isClosable?: boolean;\n  onClose?: () => void;\n  tag: KeyValueEntity;\n  enableFullViewModal?: boolean;\n  charLimit?: number;\n  maxWidth?: number;\n  className?: string;\n}) => {\n  const intl = useIntl();\n\n  const [isKeyValueTagFullViewModalVisible, setIsKeyValueTagFullViewModalVisible] = useState(false);\n\n  const { shouldTruncateKey, shouldTruncateValue } = getKeyAndValueComplexTruncation(tag, charLimit);\n  const allowFullViewModal = enableFullViewModal && (shouldTruncateKey || shouldTruncateValue);\n\n  const fullViewModalLabel = intl.formatMessage({\n    defaultMessage: 'Click to see more',\n    description: 'Run page > Overview > Tags cell > Tag',\n  });\n\n  return (\n    <div>\n      <Tag\n        componentId=\"codegen_mlflow_app_src_common_components_keyvaluetag.tsx_60\"\n        closable={isClosable}\n        onClose={onClose}\n        title={tag.key}\n        className={className}\n      >\n        <LegacyTooltip title={allowFullViewModal ? fullViewModalLabel : ''}>\n          <span\n            css={{ maxWidth, display: 'inline-flex' }}\n            onClick={() => (allowFullViewModal ? setIsKeyValueTagFullViewModalVisible(true) : undefined)}\n          >\n            <Typography.Text bold title={tag.key} css={getTruncatedStyles(shouldTruncateKey)}>\n              {tag.key}\n            </Typography.Text>\n            {tag.value && (\n              <Typography.Text title={tag.value} css={getTruncatedStyles(shouldTruncateValue)}>\n                : {tag.value}\n              </Typography.Text>\n            )}\n          </span>\n        </LegacyTooltip>\n      </Tag>\n      <div>\n        {isKeyValueTagFullViewModalVisible && (\n          <KeyValueTagFullViewModal\n            tagKey={tag.key}\n            tagValue={tag.value}\n            isKeyValueTagFullViewModalVisible={isKeyValueTagFullViewModalVisible}\n            setIsKeyValueTagFullViewModalVisible={setIsKeyValueTagFullViewModalVisible}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport function getKeyAndValueComplexTruncation(\n  tag: KeyValueEntity,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n): { shouldTruncateKey: boolean; shouldTruncateValue: boolean } {\n  const { key, value } = tag;\n  const fullLength = key.length + value.length;\n  const isKeyLonger = key.length > value.length;\n  const shorterLength = isKeyLonger ? value.length : key.length;\n\n  // No need to truncate if tag is short enough\n  if (fullLength <= charLimit) return { shouldTruncateKey: false, shouldTruncateValue: false };\n  // If the shorter string is too long, truncate both key and value.\n  if (shorterLength > charLimit / 2) return { shouldTruncateKey: true, shouldTruncateValue: true };\n\n  // Otherwise truncate the longer string\n  return {\n    shouldTruncateKey: isKeyLonger,\n    shouldTruncateValue: !isKeyLonger,\n  };\n}\n"],"names":["_ref","name","styles","getDropdownMenu","allAvailableTags","menu","intl","useIntl","theme","useDesignSystemTheme","searchValue","props","toLowerCase","useMemo","sortedIndexOf","isValidTagKey","test","React","flattenOptions","data","value","disabled","style","color","colors","actionTertiaryTextDefault","actionDisabledText","children","_jsx","LegacyTooltip","title","undefined","formatMessage","id","defaultMessage","placement","_jsxs","css","PlusIcon","_css","marginRight","spacing","sm","tagKey","key","groupOption","DropdownMenu","_ref2","TagKeySelectDropdown","control","onKeyChangeCallback","isOpen","setIsOpen","useState","selectRef","useRef","field","fieldState","useController","rules","required","message","LegacySelect","allowClear","ref","dangerouslySetAntdProps","showSearch","dropdownRender","placeholder","defaultValue","open","onDropdownVisibleChange","visible","filterOption","input","option","includes","onSelect","onChange","onClear","handleClear","validationState","error","map","tag","Option","getTagsMap","tags","Map","useEditKeyValueTagsModal","onSuccess","saveTagsHandler","valueRequired","editedEntityRef","errorMessage","setErrorMessage","initialTags","setInitialTags","finalTags","setFinalTags","showModal","setShowModal","form","useForm","defaultValues","hideModal","showEditTagsModal","useCallback","editedEntity","current","reset","saveTags","async","setIsLoading","Array","from","values","then","catch","e","_e$getUserVisibleErro","ErrorWrapper","getUserVisibleError","formValues","watch","isLoading","hasNewValues","isEqual","sortBy","isDirty","showPopoverMessage","EditTagsModal","Modal","componentId","destroyOnClose","FormattedMessage","onCancel","footer","RestoreAntDDefaultClsPrefix","Button","dangerouslyUseFocusPseudoClass","onClick","UnsavedTagPopoverTrigger","onSaveTask","loading","type","onSubmit","handleSubmit","trim","newEntries","set","display","alignItems","gap","md","minWidth","flex","FormUI","Label","htmlFor","_tag$value","get","setValue","RHFControlledComponents","Input","htmlType","Message","rowGap","xs","flexWrap","marginTop","KeyValueTag","isClosable","onClose","handleTagDelete","currentFinalTags","delete","_ref3","fullTagDisplay","truncate","length","shownText","Popover","Root","Trigger","asChild","Content","align","Typography","Paragraph","Close","marginLeft","Arrow","FETCH_TRACE_INFO_QUERY_KEY","displayErrorNotification","getIconTypeForSpan","spanType","ModelSpanType","LLM","ModelIconType","MODELS","CHAIN","AGENT","TOOL","WRENCH","CHAT_MODEL","RETRIEVER","SEARCH","PARSER","CODE","EMBEDDING","NUMBERS","RERANKER","SORT","MEMORY","SAVE","FUNCTION","UNKNOWN","getDisplayNameForSpanType","tryDeserializeAttribute","JSON","parse","getMatchesFromSpan","span","searchFilter","matches","sections","inputs","outputs","attributes","events","section","label","push","getMatchesFromEvent","forEach","event","index","Object","keys","attribute","isKeyMatch","getEventAttributeKey","matchIndex","numValueMatches","stringify","split","i","createListFromObject","item","searchTree","rootNode","spanFilterState","_rootNode$children","searchFilterLowercased","allSpanTypesSelected","spanTypeDisplayState","every","shouldDisplay","filteredTreeNodes","filteredChildren","child","childNodes","childMatches","spanName","spanMatches","nodeMatchesSearch","spanTypeIsDisplayed","nodePassesSpanFilters","hasMatchingChild","hasException","getSpanExceptionCount","showParents","showExceptions","concat","searchTreeBySpanId","selectedSpanId","_rootNode$children2","isNil","matchedNode","normalizeNewSpanData","rootStartTime","rootEndTime","assessmentMap","traceId","_span$attributes","_span$attributes2","_span$attributes3","_assessmentMap$spanId","_span$attributes4","_span$attributes5","_span$attributes6","_getModelTraceSpanEnd","parentId","getModelTraceSpanParentId","spanId","getModelTraceSpanId","assessments","_assessmentMap$","chatMessages","getChatMessagesFromSpan","messagesAttributeValue","messageFormat","_normalizeConversatio","_normalizeConversatio2","isArray","isRawModelTraceChatMessage","compact","prettyPrintChatMessage","messagesFromInputs","normalizeConversation","messagesFromOutputs","chatTools","getChatToolsFromSpan","toolsAttributeValue","_inputs$tools","isModelTraceChatTool","tools","mapValues","omitBy","_","startsWith","start","Number","getModelTraceSpanStartTime","end","getModelTraceSpanEndTime","icon","ModelTraceExplorerIcon","isRootSpan","decodeSpanId","isV3Span","base64","binaryString","atob","binaryLen","hex","charCodeAt","toString","padStart","base64ToHex","slice","isV3ModelTraceInfo","info","isV3ModelTraceSpan","_span$span_id","_span$context$span_id","_span$context","span_id","context","_span$parent_span_id","_span$parent_id","parent_span_id","parent_id","start_time_unix_nano","start_time","end_time_unix_nano","end_time","getModelTraceId","trace","_trace$info$request_i","trace_id","request_id","getModelTraceSize","_trace$info","_trace$info$trace_met","size","trace_metadata","isNaN","parseModelTraceToTree","_trace$trace_data$spa","_trace$trace_data","spans","trace_data","spanMap","relationMap","Error","rootSpan","find","getSpanNodeFromData","_span$span_type","_span$end_time","_span$parent_id2","rootStart","rootEnd","getAssessmentMap","span_type","traceInfo","_traceInfo$assessment","getAssessmentsFromTags","assessmentsById","keyBy","assessment","overrides","overriddenAssessment","reduce","acc","_assessment$span_id","sort","a","b","Date","last_update_time","getTime","entries","filter","obj","isString","isNumber","isBoolean","getHighlightedSpanComponents","activeMatchBackgroundColor","inactiveMatchBackgroundColor","containsActiveMatch","activeMatch","scrollToActiveMatch","regex","RegExp","escapeRegExp","parts","isActiveMatch","backgroundColor","scrollMarginTop","isRetrieverDocument","document","has","isRenderableRetrieverSpan","getSpanExceptionEvents","_span$events","isModelTraceChatToolParamProperty","description","enum","_obj$function","parameters","function","properties","isModelTraceToolCall","_obj$function2","_obj$function3","arguments","isContentType","content","part","text","image_url","url","detail","input_audio","format","isContentPart","tool_calls","role","isModelTraceChoices","choice","isModelTraceChatResponse","choices","_normalizeLangchainCh","_normalizeLlamaIndexC","_normalizeOpenAIChatI","_normalizeDspyChatInp","_normalizeGeminiChatI","_normalizeAnthropicCh","_normalizeOpenAIAgent","_normalizeAutogenChat","_normalizeBedrockChat","_normalizeOpenAIChatI2","langchainMessages","normalizeLangchainChatInput","normalizeLangchainChatResult","llamaIndexMessages","normalizeLlamaIndexChatInput","normalizeLlamaIndexChatResponse","openAIMessages","normalizeOpenAIChatInput","normalizeOpenAIChatResponse","normalizeOpenAIResponsesOutput","normalizeOpenAIResponsesInput","dspyMessages","normalizeDspyChatInput","normalizeDspyChatOutput","geminiMessages","normalizeGeminiChatInput","normalizeGeminiChatOutput","anthropicMessages","normalizeAnthropicChatInput","normalizeAnthropicChatOutput","openAIAgentMessages","normalizeOpenAIAgentInput","normalizeOpenAIAgentOutput","autogenMessages","normalizeAutogenChatInput","normalizeAutogenChatOutput","bedrockMessages","normalizeBedrockChatInput","normalizeBedrockChatOutput","prettyPrintToolCall","toolCall","_toolCall$function","args","formatChatContent","_part$image_url","join","_message$tool_calls","getDefaultActiveTab","selectedNode","ModelTraceSpanType","CodeSnippetRenderMode","KeyValueTagFullViewModal","isKeyValueTagFullViewModalVisible","setIsKeyValueTagFullViewModalVisible","backgroundPrimary","whiteSpace","wordBreak","tagValue","CopyButton","copyText","showLabel","CopyIcon","getTruncatedStyles","shouldTruncate","overflow","textOverflow","textWrap","enableFullViewModal","charLimit","maxWidth","className","shouldTruncateKey","shouldTruncateValue","fullLength","isKeyLonger","shorterLength","getKeyAndValueComplexTruncation","allowFullViewModal","fullViewModalLabel","Tag","closable","Text","bold"],"sourceRoot":""}