{"version":3,"file":"static/js/3270.169c6599.chunk.js","mappings":"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","sources":["shared/web-shared/hooks/useResizableMaxWidth.ts","experiment-tracking/components/experiment-page/components/header/ExperimentViewHeaderCompare.tsx","experiment-tracking/components/modals/RestoreRunModal.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunModals.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsControlsActionsAddNewTagModal.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsControlsActionsSelectTags.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsControlsActions.tsx","experiment-tracking/components/evaluation-artifacts-compare/CreateNotebookRunModal.tsx","experiment-tracking/utils/LLMGatewayUtils.ts","experiment-tracking/sdk/ModelGatewayService.ts","experiment-tracking/components/evaluation-artifacts-compare/hooks/usePromptEvaluationParameters.tsx","experiment-tracking/components/evaluation-artifacts-compare/EvaluationCreatePromptParameters.tsx","experiment-tracking/components/evaluation-artifacts-compare/hooks/usePromptEvaluationPromptTemplateValue.ts","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationCreateRunPromptTemplateErrors.tsx","experiment-tracking/components/evaluation-artifacts-compare/utils/PromptExamples.ts","experiment-tracking/components/evaluation-artifacts-compare/EvaluationCreatePromptRunModalExamples.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationCreatePromptRunOutput.tsx","experiment-tracking/actions/ModelGatewayActions.ts","experiment-tracking/actions/PromptEngineeringActions.ts","experiment-tracking/components/evaluation-artifacts-compare/utils/PromptEngineeringErrorUtils.ts","experiment-tracking/components/evaluation-artifacts-compare/EvaluationCreatePromptRunModal.tsx","experiment-tracking/components/evaluation-artifacts-compare/hooks/usePromptEvaluationInputValues.tsx","experiment-tracking/components/experiment-page/hooks/useCreateNewRun.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsControlsFilters.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsColumnSelector.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsGroupBySelector.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsSortSelectorV2.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsControls.tsx","experiment-tracking/components/experiment-page/hooks/useRunSortOptions.ts","experiment-tracking/components/experiment-page/models/ExperimentPageViewState.ts","experiment-tracking/components/experiment-page/hooks/useFetchedRunsNotification.tsx","experiment-tracking/components/evaluation-artifacts-compare/hooks/useEvaluateAllRows.tsx","experiment-tracking/components/evaluation-artifacts-compare/contexts/PromptEngineeringContext.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationRunHeaderModelIndicator.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationRunHeaderDatasetIndicator.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationTableHeader.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationRunHeaderCellRenderer.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationCellEvaluateButton.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationTextCellRenderer.tsx","experiment-tracking/components/evaluation-artifacts-compare/EvaluationArtifactCompare.utils.ts","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationGroupByHeaderCellRenderer.tsx","experiment-tracking/components/evaluation-artifacts-compare/hooks/useEvaluationAddNewInputsModal.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationTableActionsColumnRenderer.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationTableActionsCellRenderer.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationImageCellRenderer.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationArtifactCompareTable.tsx","experiment-tracking/components/evaluation-artifacts-compare/hooks/useEvaluationArtifactTableData.ts","experiment-tracking/components/evaluation-artifacts-compare/hooks/useEvaluationArtifactViewState.tsx","common/hooks/useBrowserKeyShortcutListener.ts","experiment-tracking/components/evaluation-artifacts-compare/hooks/useEvaluationArtifactWriteBack.tsx","experiment-tracking/components/evaluation-artifacts-compare/EvaluationArtifactViewEmptyState.tsx","experiment-tracking/components/evaluation-artifacts-compare/EvaluationArtifactCompareView.tsx","experiment-tracking/components/evaluation-artifacts-compare/hooks/useEvaluationArtifactTables.ts","experiment-tracking/components/evaluation-artifacts-compare/hooks/useEvaluationArtifactColumns.ts","experiment-tracking/components/runs-compare/RunsCompare.tsx","experiment-tracking/components/experiment-page/components/ExperimentViewRunsRequestError.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRuns.tsx","experiment-tracking/components/experiment-page/hooks/useLoggedModelsForExperimentRunsTable.tsx","experiment-tracking/components/experiment-page/hooks/useLoggedModelsForExperimentRunsTableV2.tsx","experiment-tracking/components/experiment-page/utils/persistSearchFacets.ts","experiment-tracking/components/experiment-page/hooks/usePersistExperimentPageViewState.tsx","experiment-tracking/components/experiment-page/utils/experimentRuns.selector.ts","experiment-tracking/components/experiment-page/hooks/useExperimentRunsAutoRefresh.tsx","experiment-tracking/components/experiment-page/hooks/useExperimentRuns.tsx","experiment-tracking/components/experiment-page/hooks/useSharedExperimentViewState.ts","experiment-tracking/components/experiment-page/hooks/useInitializeUIState.ts","experiment-tracking/components/experiment-page/utils/expandedRunsViewStateInitializer.ts","experiment-tracking/components/experiment-page/components/ExperimentViewNotFound.tsx","experiment-tracking/components/experiment-page/components/ExperimentViewNoPermissionsError.tsx","common/components/ErrorViewV2.tsx","experiment-tracking/components/experiment-page/ExperimentView.tsx","experiment-tracking/components/experiment-page/hooks/useExperiments.ts","experiment-tracking/components/experiment-page/hooks/useFetchExperiments.ts","common/utils/useElementHeight.ts","experiment-tracking/components/experiment-page/contexts/GetExperimentsContext.tsx"],"sourcesContent":["import type { MutableRefObject } from 'react';\nimport { useCallback, useLayoutEffect, useRef, useState } from 'react';\n\nexport function useResizableMaxWidth(minWidth: number) {\n  const ref: MutableRefObject<HTMLDivElement | null> = useRef<HTMLDivElement>(null);\n  const [containerWidth, setContainerWidth] = useState<number | undefined>(undefined);\n\n  const updateWidth = useCallback(() => {\n    if (ref.current) {\n      setContainerWidth(ref.current.clientWidth);\n    }\n  }, []);\n\n  useLayoutEffect(() => {\n    updateWidth();\n    window.addEventListener('resize', updateWidth);\n    return () => window.removeEventListener('resize', updateWidth);\n  }, [updateWidth]);\n\n  const refCallback = useCallback(\n    (node: HTMLDivElement) => {\n      ref.current = node;\n      updateWidth();\n    },\n    [updateWidth],\n  );\n\n  const resizableMaxWidth = containerWidth === undefined ? undefined : containerWidth - minWidth;\n  return { resizableMaxWidth, ref: refCallback };\n}\n","import React, { useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { PageHeader } from '../../../../../shared/building_blocks/PageHeader';\nimport { ExperimentViewHeaderShareButton } from './ExperimentViewHeaderShareButton';\nimport type { ExperimentEntity } from '../../../../types';\nimport { Link } from '@mlflow/mlflow/src/common/utils/RoutingUtils';\nimport Routes from '@mlflow/mlflow/src/experiment-tracking/routes';\n\n/**\n * Header for experiment compare page. Displays title and breadcrumbs.\n */\nexport const ExperimentViewHeaderCompare = React.memo(({ experiments }: { experiments: ExperimentEntity[] }) => {\n  const pageTitle = useMemo(\n    () => (\n      <FormattedMessage\n        defaultMessage=\"Displaying Runs from {numExperiments} Experiments\"\n        description=\"Message shown when displaying runs from multiple experiments\"\n        values={{\n          numExperiments: experiments.length,\n        }}\n      />\n    ),\n    [experiments.length],\n  );\n\n  const breadcrumbs = useMemo(\n    () => [\n      <Link\n        key={Routes.experimentsObservatoryRoute}\n        to={Routes.experimentsObservatoryRoute}\n        data-testid=\"experiment-observatory-link\"\n      >\n        <FormattedMessage\n          defaultMessage=\"Experiments\"\n          description=\"Breadcrumb nav item to link to the list of experiments page\"\n        />\n      </Link>,\n    ],\n    [],\n  );\n\n  return (\n    <PageHeader title={pageTitle} breadcrumbs={breadcrumbs}>\n      <ExperimentViewHeaderShareButton />\n    </PageHeader>\n  );\n});\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { ConfirmModal } from './ConfirmModal';\nimport { connect } from 'react-redux';\nimport { openErrorModal, restoreRunApi } from '../../actions';\nimport Utils from '../../../common/utils/Utils';\n\ntype Props = {\n  isOpen: boolean;\n  onClose: (...args: any[]) => any;\n  selectedRunIds: string[];\n  openErrorModal: (...args: any[]) => any;\n  restoreRunApi: (...args: any[]) => any;\n  onSuccess?: () => void;\n};\n\nexport class RestoreRunModalImpl extends Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const restorePromises: any = [];\n    this.props.selectedRunIds.forEach((runId) => {\n      restorePromises.push(this.props.restoreRunApi(runId));\n    });\n    return Promise.all(restorePromises)\n      .catch((e) => {\n        let errorMessage = 'While restoring an experiment run, an error occurred.';\n        if (e.textJson && e.textJson.error_code === 'RESOURCE_LIMIT_EXCEEDED') {\n          errorMessage = errorMessage + ' ' + e.textJson.message;\n        }\n        this.props.openErrorModal(errorMessage);\n      })\n      .then(() => {\n        this.props.onSuccess?.();\n      });\n  }\n\n  render() {\n    const number = this.props.selectedRunIds.length;\n    return (\n      <ConfirmModal\n        isOpen={this.props.isOpen}\n        onClose={this.props.onClose}\n        handleSubmit={this.handleSubmit}\n        title={`Restore Experiment ${Utils.pluralize('Run', number)}`}\n        helpText={`${number} experiment ${Utils.pluralize('run', number)} will be restored.`}\n        confirmButtonText=\"Restore\"\n      />\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  restoreRunApi,\n  openErrorModal,\n};\n\nexport default connect(null, mapDispatchToProps)(RestoreRunModalImpl);\n","import { useCallback } from 'react';\nimport DeleteRunModal from '../../../modals/DeleteRunModal';\nimport { RenameRunModal } from '../../../modals/RenameRunModal';\nimport RestoreRunModal from '../../../modals/RestoreRunModal';\n\nexport interface ExperimentViewModalsProps {\n  showDeleteRunModal: boolean;\n  showRestoreRunModal: boolean;\n  showRenameRunModal: boolean;\n  runsSelected: Record<string, boolean>;\n  onCloseDeleteRunModal: () => void;\n  onCloseRestoreRunModal: () => void;\n  onCloseRenameRunModal: () => void;\n  renamedRunName: string;\n  refreshRuns: () => void;\n}\n\n/**\n * A component that contains modals required for the run\n * management, i.e. delete and restore actions.\n */\nexport const ExperimentViewRunModals = ({\n  showDeleteRunModal,\n  showRestoreRunModal,\n  showRenameRunModal,\n  runsSelected,\n  onCloseDeleteRunModal,\n  onCloseRestoreRunModal,\n  onCloseRenameRunModal,\n  renamedRunName,\n  refreshRuns,\n}: ExperimentViewModalsProps) => {\n  const selectedRunIds = Object.entries(runsSelected)\n    .filter(([, selected]) => selected)\n    .map(([key]) => key);\n\n  return (\n    <>\n      <DeleteRunModal\n        isOpen={showDeleteRunModal}\n        onClose={onCloseDeleteRunModal}\n        selectedRunIds={selectedRunIds}\n        onSuccess={() => {\n          refreshRuns();\n        }}\n      />\n      <RestoreRunModal\n        isOpen={showRestoreRunModal}\n        onClose={onCloseRestoreRunModal}\n        selectedRunIds={selectedRunIds}\n        onSuccess={() => {\n          refreshRuns();\n        }}\n      />\n      <RenameRunModal\n        runUuid={selectedRunIds[0]}\n        onClose={onCloseRenameRunModal}\n        runName={renamedRunName}\n        isOpen={showRenameRunModal}\n        onSuccess={() => {\n          refreshRuns();\n        }}\n      />\n    </>\n  );\n};\n","import { FormUI, Input, Modal, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport type { KeyValueEntity } from '../../../../../common/types';\nimport { useState } from 'react';\n\nexport const ExperimentViewRunsControlsActionsAddNewTagModal = ({\n  isOpen,\n  setIsOpen,\n  selectedRunsExistingTagKeys,\n  addNewTag,\n}: {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  selectedRunsExistingTagKeys: string[];\n  addNewTag: (tag: KeyValueEntity) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [tagKey, setTagKey] = useState<string>('');\n  const [tagValue, setTagValue] = useState<string>('');\n\n  const isTagKeyAllowedChars = tagKey === '' || /^[^,.:/=\\-\\s]+$/.test(tagKey);\n  const isTagKeyDuplicate = selectedRunsExistingTagKeys.includes(tagKey);\n  const isTagKeyValid = isTagKeyAllowedChars && !isTagKeyDuplicate;\n  const isTagNonEmptyAndTagKeyValid = tagKey.length > 0 && tagValue.length > 0 && isTagKeyValid;\n\n  const onConfirmTag = () => {\n    if (isTagNonEmptyAndTagKeyValid) {\n      addNewTag({ key: tagKey, value: tagValue });\n      setIsOpen(false);\n      setTagKey('');\n      setTagValue('');\n    }\n  };\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsactionsaddnewtagmodal.tsx_34\"\n      title={<FormattedMessage defaultMessage=\"Add New Tag\" description=\"Add new key-value tag modal > Modal title\" />}\n      visible={isOpen}\n      onCancel={() => setIsOpen(false)}\n      onOk={onConfirmTag}\n      okText={<FormattedMessage defaultMessage=\"Add\" description=\"Add new key-value tag modal > Add button text\" />}\n      cancelText={\n        <FormattedMessage defaultMessage=\"Cancel\" description=\"Add new key-value tag modal > Cancel button text\" />\n      }\n      okButtonProps={{ disabled: !isTagNonEmptyAndTagKeyValid }}\n    >\n      <form css={{ display: 'flex', alignItems: 'flex-end', gap: theme.spacing.md }}>\n        <div css={{ display: 'flex', gap: theme.spacing.md, flex: 1 }}>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"key\">\n              <FormattedMessage defaultMessage=\"Key\" description=\"Add new key-value tag modal > Key input label\" />\n            </FormUI.Label>\n            <Input\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsactionsaddnewtagmodal.tsx_51\"\n              value={tagKey}\n              onChange={(e) => setTagKey(e.target.value)}\n              validationState={isTagKeyValid ? undefined : 'warning'}\n              data-testid=\"add-new-tag-key-input\"\n            />\n            {!isTagKeyAllowedChars && (\n              <FormUI.Hint>\n                <FormattedMessage\n                  defaultMessage=\", . : / - = and blank spaces are not allowed\"\n                  description=\"Add new key-value tag modal > Invalid characters error\"\n                />\n              </FormUI.Hint>\n            )}\n            {isTagKeyDuplicate && (\n              <FormUI.Hint>\n                <FormattedMessage\n                  defaultMessage=\"Tag key already exists on one or more of the selected runs. Please choose a different key.\"\n                  description=\"Add new key-value tag modal > Duplicate tag key error\"\n                />\n              </FormUI.Hint>\n            )}\n          </div>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"value\">\n              <FormattedMessage defaultMessage=\"Value\" description=\"Add new key-value tag modal > Value input label\" />\n            </FormUI.Label>\n            <Input\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsactionsaddnewtagmodal.tsx_78\"\n              value={tagValue}\n              onChange={(e) => setTagValue(e.target.value)}\n              data-testid=\"add-new-tag-value-input\"\n            />\n          </div>\n        </div>\n      </form>\n    </Modal>\n  );\n};\n","import {\n  Button,\n  DialogCombobox,\n  DialogComboboxTrigger,\n  DialogComboboxContent,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListCheckboxItem,\n  DialogComboboxFooter,\n  PlusIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useState } from 'react';\nimport { isUserFacingTag } from '@mlflow/mlflow/src/common/utils/TagUtils';\nimport { setRunTagsBulkApi } from '@mlflow/mlflow/src/experiment-tracking/actions';\nimport type { RunInfoEntity } from '../../../../types';\nimport type { KeyValueEntity } from '../../../../../common/types';\nimport { useDispatch } from 'react-redux';\nimport type { ThunkDispatch } from '@mlflow/mlflow/src/redux-types';\nimport { ExperimentViewRunsControlsActionsAddNewTagModal } from './ExperimentViewRunsControlsActionsAddNewTagModal';\nimport { uniq } from 'lodash';\nimport { FormattedMessage } from 'react-intl';\nimport Utils from '@mlflow/mlflow/src/common/utils/Utils';\nimport { ErrorWrapper } from '@mlflow/mlflow/src/common/utils/ErrorWrapper';\n\nconst convertTagToString = (tag: KeyValueEntity) => {\n  return `${tag.key}: ${tag.value}`;\n};\nconst convertStringToTag = (tagString: string) => {\n  const sep = ': ';\n  const [key, ...splits] = tagString.split(sep);\n  return { key, value: splits.join(sep) };\n};\n\nconst getRunsTagsSelection = (\n  runInfos: RunInfoEntity[],\n  runsSelected: Record<string, boolean>,\n  tagsList: Record<string, KeyValueEntity>[],\n) => {\n  const selectedRunsTagArray: string[][] = runInfos.flatMap((run, idx) => {\n    if (runsSelected[run.runUuid]) {\n      const tags = tagsList[idx];\n      return [\n        Object.keys(tags)\n          .filter(isUserFacingTag)\n          .map((tagKey) => convertTagToString(tags[tagKey])),\n      ];\n    }\n    return [];\n  });\n\n  const allRunsTags: string[] = tagsList.flatMap((tags) => {\n    return Object.keys(tags)\n      .filter(isUserFacingTag)\n      .map((tagKey) => convertTagToString(tags[tagKey]));\n  });\n\n  const selectedRunsAllSelectedTags: string[] = allRunsTags.filter((tag) =>\n    selectedRunsTagArray.every((selectedTags) => selectedTags.includes(tag)),\n  );\n  const selectedRunsAllNotSelectedTags: string[] = allRunsTags.filter((tag) =>\n    selectedRunsTagArray.every((selectedTags) => !selectedTags.includes(tag)),\n  );\n  const selectedRunsIndeterminateTags: string[] = allRunsTags.filter(\n    (tag) =>\n      !selectedRunsAllSelectedTags.includes(tag) &&\n      selectedRunsTagArray.some((selectedTags) => selectedTags.includes(tag)),\n  );\n\n  return {\n    allSelectedTags: selectedRunsAllSelectedTags,\n    allNotSelectedTags: selectedRunsAllNotSelectedTags,\n    indeterminateTags: selectedRunsIndeterminateTags,\n    allTags: allRunsTags,\n  };\n};\n\nexport const ExperimentViewRunsControlsActionsSelectTags = ({\n  runInfos,\n  runsSelected,\n  tagsList,\n  refreshRuns,\n}: {\n  runInfos: RunInfoEntity[];\n  runsSelected: Record<string, boolean>;\n  tagsList: Record<string, KeyValueEntity>[];\n  refreshRuns: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [selectedTags, setSelectedTags] = useState<Record<string, boolean | undefined>>({});\n  const [isAddNewTagModalOpen, setIsAddNewTagModalOpen] = useState(false);\n  const [isMultiSelectOpen, setIsMultiSelectOpen] = useState(false);\n  const [isSavingTagsLoading, setIsSavingTagsLoading] = useState(false);\n\n  const { allSelectedTags, allNotSelectedTags, indeterminateTags, allTags } = getRunsTagsSelection(\n    runInfos,\n    runsSelected,\n    tagsList,\n  );\n\n  const openDropdown = (newTag?: KeyValueEntity) => {\n    setSelectedTags(() => {\n      const selectedValues: Record<string, boolean | undefined> = { ...selectedTags };\n      allTags.forEach((tag) => {\n        if (allSelectedTags.includes(tag)) {\n          selectedValues[tag] = true;\n        } else if (allNotSelectedTags.includes(tag)) {\n          selectedValues[tag] = false;\n        } else if (indeterminateTags.includes(tag)) {\n          selectedValues[tag] = undefined;\n        }\n      });\n      if (newTag !== undefined) {\n        selectedValues[convertTagToString(newTag)] = true;\n      }\n      return selectedValues;\n    });\n    setIsMultiSelectOpen(true);\n  };\n\n  const handleChange = (updatedTagString: string) => {\n    setSelectedTags((selectedTags) => ({\n      ...selectedTags,\n      [updatedTagString]: !selectedTags[updatedTagString],\n    }));\n  };\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const saveTags = () => {\n    setIsSavingTagsLoading(true);\n    const selectedRunIdxs = runInfos.flatMap((runInfo, idx) => (runsSelected[runInfo.runUuid] ? [idx] : []));\n    selectedRunIdxs.forEach((idx) => {\n      const runUuid = runInfos[idx].runUuid;\n      // Get all non-system tags for the selected run\n      const existingKeys = Object.values(tagsList[idx]).filter((tag) => isUserFacingTag(tag.key));\n      // Get all new tags that are explicitly selected. If its indeterminate, and the key is in existingKeys, then it should stay\n      const newKeys = Object.keys(selectedTags)\n        .filter((tag) => {\n          if (selectedTags[tag] === undefined) {\n            return existingKeys.map((tag) => convertTagToString(tag)).includes(tag);\n          } else {\n            return selectedTags[tag];\n          }\n        })\n        .map((tagString) => convertStringToTag(tagString));\n      dispatch(setRunTagsBulkApi(runUuid, existingKeys, newKeys))\n        .then(() => {\n          refreshRuns();\n        })\n        .catch((e) => {\n          const message = e instanceof ErrorWrapper ? e.getMessageField() : e.message;\n          Utils.displayGlobalErrorNotification(message);\n        })\n        .finally(() => {\n          setIsSavingTagsLoading(false);\n          setIsMultiSelectOpen(false);\n        });\n    });\n  };\n\n  const addNewTag = (tag: KeyValueEntity) => {\n    openDropdown(tag);\n  };\n\n  const addNewTagModal = () => {\n    setIsAddNewTagModalOpen(true);\n    setIsMultiSelectOpen(false);\n  };\n\n  return (\n    <>\n      <DialogCombobox\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsactionsselecttags.tsx_162\"\n        open={isMultiSelectOpen}\n        label=\"Add tags\"\n        id=\"runs-tag-multiselect\"\n        multiSelect\n      >\n        <DialogComboboxTrigger\n          onClick={() => {\n            if (isMultiSelectOpen) {\n              setIsMultiSelectOpen(false);\n            } else {\n              // Open the dropdown and render tag selections.\n              openDropdown();\n            }\n          }}\n          data-testid=\"runs-tag-multiselect-trigger\"\n        />\n        <DialogComboboxContent matchTriggerWidth>\n          <DialogComboboxOptionList>\n            {Object.keys(selectedTags).map((tagString) => {\n              const isIndeterminate = selectedTags[tagString] === undefined;\n              return (\n                <DialogComboboxOptionListCheckboxItem\n                  key={tagString}\n                  value={tagString}\n                  onChange={handleChange}\n                  checked={selectedTags[tagString]}\n                  indeterminate={isIndeterminate}\n                />\n              );\n            })}\n          </DialogComboboxOptionList>\n          <DialogComboboxFooter>\n            <div css={{ display: 'flex', justifyContent: 'flex-end', gap: theme.spacing.sm }}>\n              <Button\n                componentId=\"mlflow.experiment_page.runs.add_new_tag\"\n                onClick={addNewTagModal}\n                icon={<PlusIcon />}\n                data-testid=\"runs-add-new-tag-button\"\n              >\n                <FormattedMessage\n                  defaultMessage=\"Add new tag\"\n                  description=\"Experiment tracking > experiment page > runs > add new tag button\"\n                />\n              </Button>\n              <Button\n                type=\"primary\"\n                componentId=\"mlflow.experiment_page.runs.add_tags\"\n                onClick={saveTags}\n                disabled={Object.keys(selectedTags).length === 0}\n                loading={isSavingTagsLoading}\n              >\n                <FormattedMessage\n                  defaultMessage=\"Save\"\n                  description=\"Experiment tracking > experiment page > runs > save tags button\"\n                />\n              </Button>\n            </div>\n          </DialogComboboxFooter>\n        </DialogComboboxContent>\n      </DialogCombobox>\n      <ExperimentViewRunsControlsActionsAddNewTagModal\n        isOpen={isAddNewTagModalOpen}\n        setIsOpen={setIsAddNewTagModalOpen}\n        selectedRunsExistingTagKeys={uniq(\n          allSelectedTags.concat(indeterminateTags).map((tag) => convertStringToTag(tag).key),\n        )}\n        addNewTag={addNewTag}\n      />\n    </>\n  );\n};\n","import { Button } from '@databricks/design-system';\nimport type { Theme } from '@emotion/react';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useNavigate } from '../../../../../common/utils/RoutingUtils';\nimport { LegacyTooltip } from '@databricks/design-system';\nimport { LIFECYCLE_FILTER } from '../../../../constants';\nimport Routes from '../../../../routes';\nimport type { ExperimentPageViewState } from '../../models/ExperimentPageViewState';\nimport type { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { ExperimentViewRunModals } from './ExperimentViewRunModals';\nimport type { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport type { RunInfoEntity } from '../../../../types';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentViewRunsControlsActionsSelectTags } from './ExperimentViewRunsControlsActionsSelectTags';\n\nexport type ExperimentViewRunsControlsActionsProps = {\n  viewState: ExperimentPageViewState;\n  searchFacetsState: ExperimentPageSearchFacetsState;\n  runsData: ExperimentRunsSelectorResult;\n  refreshRuns: () => void;\n};\n\nconst CompareRunsButtonWrapper: React.FC<React.PropsWithChildren<unknown>> = ({ children }) => <>{children}</>;\n\nexport const ExperimentViewRunsControlsActions = React.memo(\n  ({ viewState, runsData, searchFacetsState, refreshRuns }: ExperimentViewRunsControlsActionsProps) => {\n    const { runsSelected } = viewState;\n    const { runInfos, tagsList } = runsData;\n    const { lifecycleFilter } = searchFacetsState;\n\n    const navigate = useNavigate();\n    const { theme } = useDesignSystemTheme();\n\n    const [showDeleteRunModal, setShowDeleteRunModal] = useState(false);\n    const [showRestoreRunModal, setShowRestoreRunModal] = useState(false);\n    const [showRenameRunModal, setShowRenameRunModal] = useState(false);\n    const [renamedRunName, setRenamedRunName] = useState('');\n\n    const renameButtonClicked = useCallback(() => {\n      const runsSelectedList = Object.keys(runsSelected);\n      const selectedRun = runInfos.find((info) => info.runUuid === runsSelectedList[0]);\n      if (selectedRun) {\n        setRenamedRunName(selectedRun.runName);\n        setShowRenameRunModal(true);\n      }\n    }, [runInfos, runsSelected]);\n\n    const compareButtonClicked = useCallback(() => {\n      const runsSelectedList = Object.keys(runsSelected);\n      const experimentIds = runInfos\n        .filter(({ runUuid }: RunInfoEntity) => runsSelectedList.includes(runUuid))\n        .map(({ experimentId }: any) => experimentId);\n\n      navigate(Routes.getCompareRunPageRoute(runsSelectedList, [...new Set(experimentIds)].sort()));\n    }, [navigate, runInfos, runsSelected]);\n\n    const onDeleteRun = useCallback(() => setShowDeleteRunModal(true), []);\n    const onRestoreRun = useCallback(() => setShowRestoreRunModal(true), []);\n    const onCloseDeleteRunModal = useCallback(() => setShowDeleteRunModal(false), []);\n    const onCloseRestoreRunModal = useCallback(() => setShowRestoreRunModal(false), []);\n    const onCloseRenameRunModal = useCallback(() => setShowRenameRunModal(false), []);\n\n    const selectedRunsCount = Object.values(viewState.runsSelected).filter(Boolean).length;\n    const canRestoreRuns = selectedRunsCount > 0;\n    const canRenameRuns = selectedRunsCount === 1;\n    const canCompareRuns = selectedRunsCount > 1;\n    const showActionButtons = canCompareRuns || canRenameRuns || canRestoreRuns;\n\n    return (\n      <>\n        <div css={styles.controlBar}>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsactions.tsx_110\"\n            data-testid=\"run-rename-button\"\n            onClick={renameButtonClicked}\n            disabled={!canRenameRuns}\n          >\n            <FormattedMessage\n              defaultMessage=\"Rename\"\n              description=\"Label for the rename run button above the experiment runs table\"\n            />\n          </Button>\n          {lifecycleFilter === LIFECYCLE_FILTER.ACTIVE ? (\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsactions.tsx_117\"\n              data-testid=\"runs-delete-button\"\n              disabled={!canRestoreRuns}\n              onClick={onDeleteRun}\n              danger\n            >\n              <FormattedMessage\n                defaultMessage=\"Delete\"\n                // eslint-disable-next-line max-len\n                description=\"String for the delete button to delete a particular experiment run\"\n              />\n            </Button>\n          ) : null}\n          {lifecycleFilter === LIFECYCLE_FILTER.DELETED ? (\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsactions.tsx_126\"\n              data-testid=\"runs-restore-button\"\n              disabled={!canRestoreRuns}\n              onClick={onRestoreRun}\n            >\n              <FormattedMessage\n                defaultMessage=\"Restore\"\n                // eslint-disable-next-line max-len\n                description=\"String for the restore button to undo the experiments that were deleted\"\n              />\n            </Button>\n          ) : null}\n          <div css={styles.buttonSeparator} />\n          <CompareRunsButtonWrapper>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsactions.tsx_136\"\n              data-testid=\"runs-compare-button\"\n              disabled={!canCompareRuns}\n              onClick={compareButtonClicked}\n            >\n              <FormattedMessage\n                defaultMessage=\"Compare\"\n                // eslint-disable-next-line max-len\n                description=\"String for the compare button to compare experiment runs to find an ideal model\"\n              />\n            </Button>\n          </CompareRunsButtonWrapper>\n\n          <div css={styles.buttonSeparator} />\n          <ExperimentViewRunsControlsActionsSelectTags\n            runsSelected={runsSelected}\n            runInfos={runInfos}\n            tagsList={tagsList}\n            refreshRuns={refreshRuns}\n          />\n        </div>\n        <ExperimentViewRunModals\n          runsSelected={runsSelected}\n          onCloseRenameRunModal={onCloseRenameRunModal}\n          onCloseDeleteRunModal={onCloseDeleteRunModal}\n          onCloseRestoreRunModal={onCloseRestoreRunModal}\n          showDeleteRunModal={showDeleteRunModal}\n          showRestoreRunModal={showRestoreRunModal}\n          showRenameRunModal={showRenameRunModal}\n          renamedRunName={renamedRunName}\n          refreshRuns={refreshRuns}\n        />\n      </>\n    );\n  },\n);\n\nconst styles = {\n  buttonSeparator: (theme: Theme) => ({\n    borderLeft: `1px solid ${theme.colors.border}`,\n    marginLeft: theme.spacing.xs,\n    marginRight: theme.spacing.xs,\n    height: '100%',\n  }),\n  controlBar: (theme: Theme) => ({\n    display: 'flex',\n    gap: theme.spacing.sm,\n    alignItems: 'center',\n  }),\n};\n","import {\n  Button,\n  CopyIcon,\n  Input,\n  Modal,\n  LegacyTabPane,\n  LegacyTabs,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { CopyButton } from '../../../shared/building_blocks/CopyButton';\n\ntype Props = {\n  isOpen: boolean;\n  closeModal: () => void;\n  experimentId: string;\n};\n\nconst SNIPPET_LINE_HEIGHT = 18;\n\nexport const CreateNotebookRunModal = ({ isOpen, closeModal, experimentId }: Props): JSX.Element => {\n  const { theme } = useDesignSystemTheme();\n\n  const codeSnippetTheme = theme.isDarkMode ? 'duotoneDark' : 'light';\n\n  const classical_ml_text = `\nimport mlflow\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.ensemble import RandomForestRegressor\n\n# set the experiment id\nmlflow.set_experiment(experiment_id=\"${experimentId}\")\n\nmlflow.autolog()\ndb = load_diabetes()\n\nX_train, X_test, y_train, y_test = train_test_split(db.data, db.target)\n\n# Create and train models.\nrf = RandomForestRegressor(n_estimators=100, max_depth=6, max_features=3)\nrf.fit(X_train, y_train)\n\n# Use the model to make predictions on the test dataset.\npredictions = rf.predict(X_test)\n`.trimStart();\n\n  const llm_text = `\nimport mlflow\nimport openai\nimport os\nimport pandas as pd\n\n# you must set the OPENAI_API_KEY environment variable\nassert (\n  \"OPENAI_API_KEY\" in os.environ\n), \"Please set the OPENAI_API_KEY environment variable.\"\n\n# set the experiment id\nmlflow.set_experiment(experiment_id=\"${experimentId}\")\n\nsystem_prompt = (\n  \"The following is a conversation with an AI assistant.\"\n  + \"The assistant is helpful and very friendly.\"\n)\n\n# start a run\nmlflow.start_run()\nmlflow.log_param(\"system_prompt\", system_prompt)\n\n# Create a question answering model using prompt engineering\n# with OpenAI. Log the model to MLflow Tracking\nlogged_model = mlflow.openai.log_model(\n    model=\"gpt-4o-mini\",\n    task=openai.chat.completions,\n    artifact_path=\"model\",\n    messages=[\n        {\"role\": \"system\", \"content\": system_prompt},\n        {\"role\": \"user\", \"content\": \"{question}\"},\n    ],\n)\n\n# Evaluate the model on some example questions\nquestions = pd.DataFrame(\n    {\n        \"question\": [\n            \"How do you create a run with MLflow?\",\n            \"How do you log a model with MLflow?\",\n            \"What is the capital of France?\",\n        ]\n    }\n)\nmlflow.evaluate(\n    model=logged_model.model_uri,\n    model_type=\"question-answering\",\n    data=questions,\n)\nmlflow.end_run()\n`.trimStart();\n\n  const codeSnippetMessage = () => {\n    return 'Run this code snippet in a notebook or locally, to create an experiment run';\n  };\n\n  // Calculate stable height for the code snippet UI area, based on the line count of the shortest one\n  const snippetHeight =\n    (Math.min(...[classical_ml_text, llm_text].map((text) => text.split('\\n').length)) + 1) * SNIPPET_LINE_HEIGHT;\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_createnotebookrunmodal.tsx_111\"\n      visible={isOpen}\n      onCancel={closeModal}\n      onOk={closeModal}\n      footer={\n        <div css={{ display: 'flex', gap: theme.spacing.sm, justifyContent: 'flex-end' }}>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_createnotebookrunmodal.tsx_117\"\n            onClick={closeModal}\n            type=\"primary\"\n          >\n            <FormattedMessage\n              defaultMessage=\"Okay\"\n              description=\"Experiment page > new notebook run modal > okay button label\"\n            />\n          </Button>\n        </div>\n      }\n      title={\n        <div>\n          <Typography.Title level={2} css={{ marginTop: theme.spacing.sm, marginBottom: theme.spacing.xs }}>\n            <FormattedMessage\n              defaultMessage=\"New run using notebook\"\n              description=\"Experiment page > new notebook run modal > modal title\"\n            />\n          </Typography.Title>\n          <Typography.Hint css={{ marginTop: 0, fontWeight: 'normal' }}>{codeSnippetMessage()}</Typography.Hint>\n        </div>\n      }\n    >\n      <LegacyTabs>\n        <LegacyTabPane\n          tab={<FormattedMessage defaultMessage=\"Classical ML\" description=\"Example text snippet for classical ML\" />}\n          key=\"classical-ml\"\n        >\n          <CodeSnippet\n            style={{ padding: '5px', height: snippetHeight }}\n            language=\"python\"\n            theme={codeSnippetTheme}\n            actions={\n              <div\n                style={{\n                  marginTop: theme.spacing.sm,\n                  marginRight: theme.spacing.md,\n                }}\n              >\n                <CopyButton copyText={classical_ml_text} showLabel={false} icon={<CopyIcon />} />\n              </div>\n            }\n          >\n            {classical_ml_text}\n          </CodeSnippet>\n        </LegacyTabPane>\n        <LegacyTabPane\n          tab={<FormattedMessage defaultMessage=\"LLM\" description=\"Example text snippet for LLM\" />}\n          key=\"llm\"\n        >\n          <CodeSnippet\n            style={{ padding: '5px', height: snippetHeight }}\n            language=\"python\"\n            theme={codeSnippetTheme}\n            actions={\n              <div\n                style={{\n                  marginTop: theme.spacing.sm,\n                  marginRight: theme.spacing.md,\n                }}\n              >\n                <CopyButton copyText={llm_text} showLabel={false} icon={<CopyIcon />} />\n              </div>\n            }\n          >\n            {llm_text}\n          </CodeSnippet>\n        </LegacyTabPane>\n      </LegacyTabs>\n    </Modal>\n  );\n};\n\nconst styles = {\n  formItem: { marginBottom: 16 },\n};\n","import { ErrorWrapper } from '../../common/utils/ErrorWrapper';\nimport { ModelGatewayRouteTask } from '../sdk/MlflowEnums';\nimport type {\n  EndpointModelChatResponseType,\n  EndpointModelCompletionsResponseType,\n  EndpointModelGatewayResponseType,\n  ModelGatewayChatResponseType,\n  ModelGatewayCompletionsResponseType,\n  ModelGatewayResponseType,\n  ModelGatewayRoute,\n} from '../sdk/ModelGatewayService';\n\nexport class GatewayErrorWrapper extends ErrorWrapper {\n  getGatewayErrorMessage() {\n    return this.textJson?.error?.message || this.textJson?.message || this.textJson?.toString() || this.text;\n  }\n}\nexport const parseEndpointEvaluationResponse = (\n  response: EndpointModelGatewayResponseType,\n  task: ModelGatewayRouteTask,\n) => {\n  // We're supporting completions and chat responses for the time being\n  if (task === ModelGatewayRouteTask.LLM_V1_COMPLETIONS) {\n    const completionsResponse = response as EndpointModelCompletionsResponseType;\n    const text = completionsResponse.choices?.[0]?.text;\n    const { usage } = completionsResponse;\n    if (text && usage) {\n      return {\n        text,\n        metadata: {\n          total_tokens: usage.total_tokens,\n          output_tokens: usage.completion_tokens,\n          input_tokens: usage.prompt_tokens,\n        },\n      };\n    }\n  }\n  if (task === ModelGatewayRouteTask.LLM_V1_CHAT) {\n    const chatResponse = response as EndpointModelChatResponseType;\n    const text = chatResponse.choices?.[0]?.message?.content;\n    const { usage } = chatResponse;\n    if (text && usage) {\n      return {\n        text,\n        metadata: {\n          total_tokens: usage.total_tokens,\n          output_tokens: usage.completion_tokens,\n          input_tokens: usage.prompt_tokens,\n        },\n      };\n    }\n  }\n  // Should not happen since we shouldn't call other route types for now\n  throw new Error(`Unrecognizable AI gateway response metadata \"${response.usage}\"!`);\n};\n","import invariant from 'invariant';\nimport { getJson } from '../../common/utils/FetchUtils';\nimport { MlflowService } from './MlflowService';\nimport { ModelGatewayRouteTask } from './MlflowEnums';\nimport { GatewayErrorWrapper } from '../utils/LLMGatewayUtils';\nimport { fetchEndpoint, HTTPMethods } from '../../common/utils/FetchUtils';\nimport { parseEndpointEvaluationResponse } from '../utils/LLMGatewayUtils';\nconst DATABRICKS_API_CLIENT_PROMPTLAB = 'PromptLab';\n\nexport interface ModelGatewayQueryPayload {\n  inputText: string;\n  parameters: {\n    temperature?: number;\n    max_tokens?: number;\n    stop?: string[];\n  };\n}\n\nexport interface ModelGatewayResponseMetadata<T extends ModelGatewayRouteTask> {\n  mode: string;\n  route_type: T;\n  total_tokens: number;\n  output_tokens: number;\n  input_tokens: number;\n}\n\nexport interface ModelGatewayCompletionsResponseType {\n  candidates: {\n    text: string;\n    metadata: {\n      finish_reason: string;\n    };\n  }[];\n\n  metadata: ModelGatewayResponseMetadata<ModelGatewayRouteTask.LLM_V1_COMPLETIONS>;\n}\n\nexport interface ModelGatewayChatResponseType {\n  candidates: {\n    message: { role: string; content: string };\n    metadata: {\n      finish_reason: string;\n    };\n  }[];\n\n  metadata: ModelGatewayResponseMetadata<ModelGatewayRouteTask.LLM_V1_CHAT>;\n}\n\nexport type ModelGatewayResponseType = ModelGatewayCompletionsResponseType | ModelGatewayChatResponseType;\n\nexport interface EndpointModelCompletionsResponseType {\n  choices: {\n    text: string;\n    finish_reason: string;\n  }[];\n\n  usage: {\n    completion_tokens: number;\n    prompt_tokens: number;\n    total_tokens: number;\n  };\n}\n\nexport interface EndpointModelChatResponseType {\n  choices: {\n    message: {\n      role: string;\n      content: string;\n    };\n    finish_reason: string;\n  }[];\n\n  usage: {\n    completion_tokens: number;\n    prompt_tokens: number;\n    total_tokens: number;\n  };\n}\n\nexport type EndpointModelGatewayResponseType = EndpointModelCompletionsResponseType | EndpointModelChatResponseType;\n\nexport interface ModelGatewayModelInfo {\n  /**\n   * \"Original\" name of the model (e.g. \"gpt-4o-mini\")\n   */\n  name: string;\n  /**\n   * Name of the model provider (e.g. \"OpenAI\")\n   */\n  provider: string;\n}\n\n/**\n * Response object for routes. Does not include model credentials.\n */\nexport interface ModelGatewayRouteLegacy {\n  /**\n   * User-defined name of the model route\n   */\n  name: string;\n  /**\n   * Type of route (e.g., embedding, text generation, etc.)\n   */\n  route_type: ModelGatewayRouteTask;\n  /**\n   * Underlying ML model that can be accessed via this route. Could add other types of resources in the future.\n   */\n  model: ModelGatewayModelInfo;\n}\n\nexport interface MlflowDeploymentsEndpoint {\n  name: string;\n  endpoint_type: ModelGatewayRouteTask;\n  endpoint_url: string;\n  model: ModelGatewayModelInfo;\n}\n\nexport type ModelGatewayRouteType = 'mlflow_deployment_endpoint';\n\nexport interface ModelGatewayRoute {\n  type: ModelGatewayRouteType;\n  /**\n   * Key of the route, the type is always prefix\n   */\n  key: `${ModelGatewayRouteType}:${string}`;\n\n  name: string;\n  /**\n   * Type of route (e.g., embedding, text generation, etc.)\n   */\n  task: ModelGatewayRouteTask;\n  /**\n   * MLflow deployments URL of the endpoint\n   */\n  mlflowDeployment?: MlflowDeploymentsEndpoint;\n}\n\nexport interface SearchMlflowDeploymentsModelRoutesResponse {\n  endpoints: MlflowDeploymentsEndpoint[];\n}\n\nconst gatewayErrorHandler = ({\n  reject,\n  response,\n  err,\n}: {\n  reject: (reason?: any) => void;\n  response: Response;\n  err: Error;\n}) => {\n  if (response) {\n    response.text().then((text: any) => reject(new GatewayErrorWrapper(text, response.status)));\n  } else if (err) {\n    reject(new GatewayErrorWrapper(err, 500));\n  }\n};\n\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class -- TODO(FEINF-4274)\nexport class ModelGatewayService {\n  static createEvaluationTextPayload(inputText: string, task: ModelGatewayRouteTask) {\n    switch (task) {\n      case ModelGatewayRouteTask.LLM_V1_COMPLETIONS: {\n        return { prompt: inputText };\n      }\n      case ModelGatewayRouteTask.LLM_V1_CHAT: {\n        return { messages: [{ content: inputText, role: 'user' }] };\n      }\n      case ModelGatewayRouteTask.LLM_V1_EMBEDDINGS: {\n        // Should never happen\n        throw new Error(`Unsupported served LLM model task \"${task}\"!`);\n      }\n      default:\n        throw new Error(`Unknown served LLM model task \"${task}\"!`);\n    }\n  }\n\n  static queryMLflowDeploymentEndpointRoute = async (\n    route: ModelGatewayRoute,\n    data: ModelGatewayQueryPayload,\n  ): Promise<any> => {\n    invariant(route.mlflowDeployment, 'Trying to call a MLflow deployment route without a deployment_url');\n    const { inputText } = data;\n    const textPayload = ModelGatewayService.createEvaluationTextPayload(inputText, route.task);\n    const processed_data = {\n      ...textPayload,\n      ...data.parameters,\n    };\n\n    return MlflowService.gatewayProxyPost({\n      gateway_path: route.mlflowDeployment.endpoint_url.substring(1),\n      json_data: processed_data,\n    }) as Promise<ModelGatewayResponseType>;\n  };\n\n  static queryModelGatewayRoute = async (route: ModelGatewayRoute, payload: ModelGatewayQueryPayload) => {\n    if (route.type === 'mlflow_deployment_endpoint') {\n      invariant(route.mlflowDeployment, 'Trying to call a serving endpoint route without an endpoint');\n      const result = await this.queryMLflowDeploymentEndpointRoute(route, payload);\n      return parseEndpointEvaluationResponse(result, route.task);\n    }\n\n    throw new Error('Unknown route type');\n  };\n}\n","import { useCallback, useState } from 'react';\nimport type { MessageDescriptor } from 'react-intl';\nimport { defineMessage } from 'react-intl';\n\n// Hardcoded model parameter definitions\nconst parameterDefinitions: {\n  name: 'temperature' | 'max_tokens' | 'stop';\n  type: 'slider' | 'input' | 'list';\n  string: MessageDescriptor;\n  helpString: MessageDescriptor;\n  max?: number;\n  min?: number;\n  step?: number;\n}[] = [\n  {\n    type: 'slider',\n    name: 'temperature',\n    string: defineMessage({\n      defaultMessage: 'Temperature',\n      description: 'Experiment page > prompt lab > temperature parameter label',\n    }),\n    helpString: defineMessage({\n      defaultMessage: 'Increase or decrease the confidence level of the language model.',\n      description: 'Experiment page > prompt lab > temperature parameter help text',\n    }),\n    max: 1,\n    min: 0,\n    step: 0.01,\n  },\n  {\n    type: 'input',\n    name: 'max_tokens',\n    string: defineMessage({\n      defaultMessage: 'Max tokens',\n      description: 'Experiment page > prompt lab > max tokens parameter label',\n    }),\n    helpString: defineMessage({\n      defaultMessage: 'Maximum number of language tokens returned from evaluation.',\n      description: 'Experiment page > prompt lab > max tokens parameter help text',\n    }),\n    max: 64 * 1024,\n    min: 1,\n    step: 1,\n  },\n  {\n    type: 'list',\n    name: 'stop',\n    string: defineMessage({\n      defaultMessage: 'Stop Sequences',\n      description: 'Experiment page > prompt lab > stop parameter label',\n    }),\n    helpString: defineMessage({\n      defaultMessage: 'Specify sequences that signal the model to stop generating text.',\n      description: 'Experiment page > prompt lab > stop parameter help text',\n    }),\n  },\n];\n\n// TODO: Fetch better values for default parameters\nconst DEFAULT_PARAMETER_VALUES = {\n  temperature: 0.01,\n  max_tokens: 100,\n};\n\nexport const usePromptEvaluationParameters = () => {\n  const [parameters, updateParameters] = useState<{\n    temperature: number;\n    max_tokens: number;\n    stop?: string[] | undefined;\n  }>(DEFAULT_PARAMETER_VALUES);\n\n  const updateParameter = useCallback((name: string, value: number | string[]) => {\n    updateParameters((currentParameters) => ({ ...currentParameters, [name]: value }));\n  }, []);\n\n  return {\n    parameterDefinitions,\n    parameters,\n    updateParameter,\n  };\n};\n","import { FormUI, InfoSmallIcon, Input, LegacyTooltip, useDesignSystemTheme, Tag } from '@databricks/design-system';\nimport { usePromptEvaluationParameters } from './hooks/usePromptEvaluationParameters';\nimport { FormattedMessage } from 'react-intl';\nimport { LineSmoothSlider } from '../LineSmoothSlider';\nimport { isArray, uniq } from 'lodash';\nimport { useState } from 'react';\n\nconst EvaluationCreateParameterListControl = ({\n  parameterValue,\n  updateParameter,\n  disabled,\n}: {\n  parameterValue: number | string[] | undefined;\n  updateParameter: (value: number | string[]) => void;\n  disabled?: boolean;\n}) => {\n  const [draftValue, setDraftValue] = useState<string>('');\n  const { theme } = useDesignSystemTheme();\n\n  if (!isArray(parameterValue)) {\n    return null;\n  }\n\n  return (\n    <>\n      <div css={{ marginTop: theme.spacing.xs, marginBottom: theme.spacing.sm }}>\n        {parameterValue.map((stop, index) => (\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptparameters.tsx_28\"\n            key={index}\n            closable\n            onClose={() => {\n              updateParameter(parameterValue.filter((s) => s !== stop));\n            }}\n          >\n            {stop}\n          </Tag>\n        ))}\n      </div>\n      <Input\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptparameters.tsx_39\"\n        allowClear\n        css={{ width: '100%' }}\n        disabled={disabled}\n        onChange={(e) => setDraftValue(e.target.value)}\n        value={draftValue}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter' && draftValue.trim()) {\n            updateParameter(uniq([...parameterValue, draftValue]));\n            setDraftValue('');\n          }\n        }}\n      />\n    </>\n  );\n};\n\nexport const EvaluationCreatePromptParameters = ({\n  disabled = false,\n  parameters,\n  updateParameter,\n}: {\n  disabled?: boolean;\n  parameters: {\n    temperature: number;\n    max_tokens: number;\n    stop?: string[] | undefined;\n  };\n  updateParameter: (name: string, value: number | string[]) => void;\n}) => {\n  const { parameterDefinitions } = usePromptEvaluationParameters();\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div css={{ marginBottom: theme.spacing.lg }}>\n      <FormUI.Label css={{ marginBottom: theme.spacing.md }}>\n        <FormattedMessage\n          defaultMessage=\"Model parameters\"\n          description=\"Experiment page > new run modal > served LLM model parameters label\"\n        />\n      </FormUI.Label>\n      {parameterDefinitions.map((parameterDef) => (\n        <div key={parameterDef.name} css={{ marginBottom: theme.spacing.md }}>\n          <>\n            <FormUI.Label htmlFor={parameterDef.name} css={{ span: { fontWeight: 'normal' } }}>\n              <FormattedMessage {...parameterDef.string} />\n              <LegacyTooltip title={<FormattedMessage {...parameterDef.helpString} />} placement=\"right\">\n                <InfoSmallIcon\n                  css={{\n                    marginLeft: theme.spacing.sm,\n                    verticalAlign: 'text-top',\n                    color: theme.colors.textSecondary,\n                  }}\n                />\n              </LegacyTooltip>\n            </FormUI.Label>\n            <FormUI.Hint />\n            {parameterDef.name === 'temperature' && (\n              <LineSmoothSlider\n                data-testid={parameterDef.name}\n                disabled={disabled}\n                max={parameterDef.max}\n                min={parameterDef.min}\n                step={parameterDef.step}\n                value={parameters[parameterDef.name] || 0}\n                onChange={(value) => updateParameter(parameterDef.name, value)}\n              />\n            )}\n            {parameterDef.type === 'input' && (\n              <Input\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptparameters.tsx_107\"\n                data-testid={parameterDef.name}\n                type=\"number\"\n                disabled={disabled}\n                max={parameterDef.max}\n                min={parameterDef.min}\n                step={parameterDef.step}\n                value={parameters[parameterDef.name] || 0}\n                onChange={(e) => updateParameter(parameterDef.name, parseInt(e.target.value, 10))}\n              />\n            )}\n            {parameterDef.type === 'list' && (\n              <EvaluationCreateParameterListControl\n                parameterValue={parameters[parameterDef.name] ?? []}\n                disabled={disabled}\n                updateParameter={(value) => updateParameter(parameterDef.name, value)}\n              />\n            )}\n          </>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React, { useCallback, useRef, useState } from 'react';\n\nimport type { TextAreaRef } from '@databricks/design-system';\nimport {\n  DEFAULT_PROMPTLAB_NEW_TEMPLATE_VALUE,\n  extractPromptInputVariables,\n} from '../../prompt-engineering/PromptEngineering.utils';\nimport { max } from 'lodash';\n\nconst newVariableStartSegment = ' {{ ';\nconst newVariableEndSegment = ' }}';\nconst newDefaultVariableName = 'new_variable';\n\nconst getNewVariableName = (alreadyExistingVariableNames: string[] = []) => {\n  if (!alreadyExistingVariableNames.includes(newDefaultVariableName)) {\n    return newDefaultVariableName;\n  }\n\n  const maximumVariableNameIndex =\n    max(alreadyExistingVariableNames.map((name) => parseInt(name.match(/new_variable_(\\d+)/)?.[1] || '1', 10))) || 1;\n\n  return `${newDefaultVariableName}_${maximumVariableNameIndex + 1}`;\n};\n\n/**\n * Keeps track of the current prompt value and exports method for adding + autoselecting new variables\n */\nexport const usePromptEvaluationPromptTemplateValue = () => {\n  const [promptTemplate, updatePromptTemplate] = useState(DEFAULT_PROMPTLAB_NEW_TEMPLATE_VALUE);\n\n  const promptTemplateRef = useRef<HTMLTextAreaElement>();\n\n  const handleAddVariableToTemplate = useCallback(() => {\n    updatePromptTemplate((template) => {\n      const newVariableName = getNewVariableName(extractPromptInputVariables(template));\n      const newValue = `${template}${newVariableStartSegment}${newVariableName}${newVariableEndSegment}`;\n\n      // Wait until the next execution frame\n      requestAnimationFrame(() => {\n        const textAreaElement = promptTemplateRef.current;\n        if (!textAreaElement) {\n          return;\n        }\n        // Focus the element and set the newly added variable name\n        textAreaElement.focus();\n        textAreaElement.setSelectionRange(\n          newValue.length - newVariableName.length - newVariableEndSegment.length,\n          newValue.length - newVariableEndSegment.length,\n        );\n      });\n      return newValue;\n    });\n  }, [updatePromptTemplate]);\n\n  const savePromptTemplateInputRef = useCallback((ref: TextAreaRef) => {\n    promptTemplateRef.current = ref?.resizableTextArea?.textArea;\n  }, []);\n\n  return {\n    savePromptTemplateInputRef,\n    handleAddVariableToTemplate,\n    promptTemplate,\n    updatePromptTemplate,\n  };\n};\n","import { Typography } from '@databricks/design-system';\nimport type { getPromptInputVariableNameViolations } from '../../prompt-engineering/PromptEngineering.utils';\nimport { FormattedMessage, defineMessage, useIntl } from 'react-intl';\n\nconst whitespaceViolationMessage = defineMessage({\n  defaultMessage: 'The following variable names contain spaces which is disallowed: {invalidNames}',\n  description: 'Experiment page > new run modal > variable name validation > including spaces error',\n});\n\nexport const EvaluationCreateRunPromptTemplateErrors = ({\n  violations,\n}: {\n  violations: ReturnType<typeof getPromptInputVariableNameViolations>;\n}) => {\n  const { namesWithSpaces } = violations;\n  const { formatMessage } = useIntl();\n  return (\n    <>\n      {namesWithSpaces.length > 0 && (\n        <Typography.Text\n          color=\"warning\"\n          size=\"sm\"\n          aria-label={formatMessage(whitespaceViolationMessage, {\n            invalidNames: namesWithSpaces.join(', '),\n          })}\n        >\n          <FormattedMessage\n            {...whitespaceViolationMessage}\n            values={{\n              invalidNames: (\n                <>\n                  {namesWithSpaces.map((nameWithSpace) => (\n                    <code key={nameWithSpace}>{nameWithSpace}</code>\n                  ))}\n                </>\n              ),\n            }}\n          />\n        </Typography.Text>\n      )}\n    </>\n  );\n};\n","export const PROMPT_TEMPLATE_EXAMPLES = [\n  {\n    prompt: [\n      'You are a marketing consultant for a technology company. Develop a marketing strategy report for {{ company_name }} aiming to {{ company_goal }}',\n    ],\n    variables: [\n      {\n        name: 'company_name',\n        value: 'XYZ Company',\n      },\n      {\n        name: 'company_goal',\n        value: 'Increase top-line revenue',\n      },\n    ],\n  },\n  {\n    prompt: [\n      'You are a helpful and friendly customer support chatbot. Answer the users question \"{{ user_question }}\" clearly, based on the following documentation: {{ documentation }}',\n    ],\n    variables: [\n      {\n        name: 'user_question',\n        value: 'Is MLflow open source?',\n      },\n      {\n        name: 'documentation',\n        value: 'MLflow is an open source platform for managing the end-to-end machine learning lifecycle.',\n      },\n    ],\n  },\n  {\n    prompt: [\n      'Summarize the given text \"{{ text }}\" into a concise and coherent summary, capturing the main ideas and key points. Make sure that the summary does not exceed {{ word_count }} words.',\n    ],\n    variables: [\n      {\n        name: 'text',\n        value:\n          'Although C. septempunctata larvae and adults mainly eat aphids, they also feed on Thysanoptera, Aleyrodidae, on the larvae of Psyllidae and Cicadellidae, and on eggs and larvae of some beetles and butterflies. There are one or two generations per year. Adults overwinter in ground litter in parks, gardens and forest edges and under tree bark and rocks. C. septempunctata has a broad ecological range, generally living wherever there are aphids for it to eat. This includes, amongst other biotopes, meadows, fields, Pontic–Caspian steppe, parkland, gardens, Western European broadleaf forests and mixed forests. In the United Kingdom, there are fears that the seven-spot ladybird is being outcompeted for food by the harlequin ladybird. An adult seven-spot ladybird may reach a body length of 7.6–12.7 mm (0.3–0.5 in). Their distinctive spots and conspicuous colours warn of their toxicity, making them unappealing to predators. The species can secrete a fluid from joints in their legs which gives them a foul taste. A threatened ladybird may both play dead and secrete the unappetising substance to protect itself. The seven-spot ladybird synthesizes the toxic alkaloids, N-oxide coccinelline and its free base precoccinelline; depending on sex and diet, the spot size and coloration can provide some indication of how toxic the individual insect is to potential predators.',\n      },\n      {\n        name: 'word_count',\n        value: '75',\n      },\n    ],\n  },\n  {\n    prompt: [\n      'Generate a list of ten titles for my book. The book is about {{ topic }}. Each title should be between {{ word_range }} words long.',\n      '### Examples of great titles ###',\n      '{{ examples }}',\n    ],\n    variables: [\n      {\n        name: 'topic',\n        value:\n          'my journey as an adventurer who has lived an unconventional life, meeting many different personalities and finally finding peace in gardening.',\n      },\n      {\n        name: 'word_range',\n        value: 'two to five',\n      },\n      {\n        name: 'examples',\n        value: '\"Long walk to freedom\", \"Wishful drinking\", \"I know why the caged bird sings\"',\n      },\n    ],\n  },\n  {\n    prompt: [\n      'Generate a SQL query from a user’s question, using the information from the table.',\n      'Question: {{ user_question }}',\n      'Table Information: {{ table_information }}',\n    ],\n    variables: [\n      {\n        name: 'user_question',\n        value: 'Which product generated the most sales this month?',\n      },\n      {\n        name: 'table_information',\n        value:\n          'CREATE TABLE Sales (SaleID INT PRIMARY KEY, ProductID INT, SaleDate DATE, CustomerID INT, QuantitySold INT, UnitPrice DECIMAL(10, 2));',\n      },\n    ],\n  },\n];\n","import {\n  ArrowLeftIcon,\n  Button,\n  Modal,\n  Spacer,\n  Input,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { PROMPT_TEMPLATE_EXAMPLES } from '@mlflow/mlflow/src/experiment-tracking/components/evaluation-artifacts-compare/utils/PromptExamples';\n\nconst { TextArea } = Input;\ntype Props = {\n  isOpen: boolean;\n  closeExamples: () => void;\n  closeModal: () => void;\n  updatePromptTemplate: (prompt: string) => void;\n  updateInputVariableValue: (name: string, value: string) => void;\n};\n\nexport const EvaluationCreatePromptRunModalExamples = ({\n  isOpen,\n  closeExamples,\n  closeModal,\n  updatePromptTemplate,\n  updateInputVariableValue,\n}: Props): JSX.Element => {\n  const { theme } = useDesignSystemTheme();\n\n  const tryPromptTemplate = (promptTemplate: { prompt: string[]; variables: { name: string; value: string }[] }) => {\n    updatePromptTemplate(promptTemplate.prompt.join('\\n'));\n    promptTemplate.variables.forEach(({ name, value }) => {\n      updateInputVariableValue(name, value);\n    });\n    closeExamples();\n  };\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptrunmodalexamples.tsx_42\"\n      verticalSizing=\"maxed_out\"\n      visible={isOpen}\n      onCancel={closeModal}\n      title={\n        <div>\n          <Typography.Title level={2} css={{ marginTop: theme.spacing.sm, marginBottom: theme.spacing.xs }}>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptrunmodalexamples.tsx_48\"\n              css={{ marginRight: theme.spacing.sm, marginBottom: theme.spacing.sm }}\n              icon={<ArrowLeftIcon />}\n              onClick={closeExamples}\n            />\n            <FormattedMessage\n              defaultMessage=\"Prompt template examples\"\n              description=\"Experiment page > new run modal > prompt examples > modal title\"\n            />\n          </Typography.Title>\n        </div>\n      }\n      dangerouslySetAntdProps={{ width: 1200 }}\n    >\n      {PROMPT_TEMPLATE_EXAMPLES.map((promptTemplate) => (\n        <div\n          key={promptTemplate.prompt.join('\\n')}\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.md,\n          }}\n        >\n          <div\n            css={{\n              boxSizing: 'border-box',\n              border: `1px solid ${theme.colors.actionDefaultBorderDefault}`,\n              borderRadius: theme.legacyBorders.borderRadiusMd,\n              background: theme.colors.backgroundPrimary,\n              padding: theme.spacing.md,\n              margin: 0,\n              overflow: 'hidden',\n              display: 'flex',\n              flexDirection: 'column',\n              gap: `${theme.spacing.xs}px`,\n            }}\n          >\n            <Typography.Title level={4}>\n              <FormattedMessage\n                defaultMessage=\"Prompt Template\"\n                description=\"Experiment page > new run modal > prompt examples > prompt template title\"\n              />\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptrunmodalexamples.tsx_90\"\n                type=\"tertiary\"\n                size=\"small\"\n                style={{ float: 'right' }}\n                onClick={() => tryPromptTemplate(promptTemplate)}\n              >\n                <FormattedMessage\n                  defaultMessage=\"Try this template\"\n                  description=\"Experiment page > new run modal > prompt examples > try template button\"\n                />\n              </Button>\n            </Typography.Title>\n            {promptTemplate.prompt.map((line) => (\n              <Typography.Paragraph key={line}>{line}</Typography.Paragraph>\n            ))}\n            <div\n              css={{\n                marginTop: theme.spacing.xs,\n                marginBottom: theme.spacing.xs,\n                borderTop: `1px solid ${theme.colors.border}`,\n                opacity: 0.5,\n              }}\n            />\n            {promptTemplate.variables.map(({ name, value }) => (\n              <div key={name}>\n                <Typography.Title level={4}>{name}</Typography.Title>\n                <Typography.Paragraph>{value}</Typography.Paragraph>\n              </div>\n            ))}\n          </div>\n          <Spacer />\n        </div>\n      ))}\n    </Modal>\n  );\n};\n","import {\n  Alert,\n  Button,\n  FormUI,\n  Input,\n  PlayIcon,\n  StopIcon,\n  TableSkeleton,\n  LegacyTooltip,\n  Typography,\n  WarningIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport {\n  PROMPTLAB_METADATA_COLUMN_LATENCY,\n  PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS,\n} from '../../prompt-engineering/PromptEngineering.utils';\nimport { useMemo } from 'react';\nimport { type ModelGatewayResponseType } from '../../../sdk/ModelGatewayService';\n\nconst { TextArea } = Input;\n\ninterface EvaluationCreatePromptRunOutputProps {\n  evaluationMetadata: Partial<ModelGatewayResponseType['metadata']>;\n  isEvaluating?: boolean;\n  isOutputDirty?: boolean;\n  evaluationOutput: string;\n  evaluationError: string | null;\n  evaluateButtonTooltip: string | null;\n  onEvaluateClick?: () => void;\n  onCancelClick?: () => void;\n  disabled?: boolean;\n}\n\n/**\n * Part of EvaluationCreatePromptRunModal, houses evaluate/cancel buttons\n * and evaluation output with the metadata\n */\nexport const EvaluationCreatePromptRunOutput = ({\n  evaluationMetadata,\n  isEvaluating,\n  isOutputDirty,\n  evaluationOutput,\n  evaluationError,\n  evaluateButtonTooltip,\n  disabled,\n  onEvaluateClick,\n  onCancelClick,\n}: EvaluationCreatePromptRunOutputProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  const metadataOutput = useMemo(() => {\n    if (!evaluationMetadata) {\n      return null;\n    }\n    if (isEvaluating) {\n      return null;\n    }\n    return (\n      <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n        {PROMPTLAB_METADATA_COLUMN_LATENCY in evaluationMetadata && (\n          <Typography.Hint size=\"sm\">\n            {Math.round(Number(evaluationMetadata[PROMPTLAB_METADATA_COLUMN_LATENCY]))} ms\n            {'MLFLOW_total_tokens' in evaluationMetadata ? ',' : ''}\n          </Typography.Hint>\n        )}\n        {PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS in evaluationMetadata && (\n          <Typography.Hint size=\"sm\">\n            <FormattedMessage\n              defaultMessage=\"{totalTokens} total tokens\"\n              description=\"Experiment page > artifact compare view > results table > total number of evaluated tokens\"\n              values={{ totalTokens: evaluationMetadata[PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS] }}\n            />\n          </Typography.Hint>\n        )}\n      </div>\n    );\n  }, [evaluationMetadata, isEvaluating, theme]);\n\n  return (\n    <>\n      <div css={{ marginBottom: theme.spacing.md }}>\n        <LegacyTooltip title={evaluateButtonTooltip}>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationcreatepromptrunoutput.tsx_85\"\n            data-testid=\"button-evaluate\"\n            icon={<PlayIcon />}\n            onClick={onEvaluateClick}\n            disabled={disabled}\n            loading={isEvaluating}\n          >\n            <FormattedMessage\n              defaultMessage=\"Evaluate\"\n              description='Experiment page > new run modal > \"evaluate\" button label'\n            />\n          </Button>\n        </LegacyTooltip>\n        {isEvaluating && (\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationcreatepromptrunoutput.tsx_99\"\n            data-testid=\"button-cancel\"\n            icon={<StopIcon />}\n            onClick={onCancelClick}\n            css={{ marginLeft: theme.spacing.sm }}\n          >\n            <FormattedMessage\n              defaultMessage=\"Cancel\"\n              description='Experiment page > new run modal > \"cancel\" button label'\n            />\n          </Button>\n        )}\n      </div>\n      <FormUI.Label>\n        <FormattedMessage\n          defaultMessage=\"Output\"\n          description=\"Experiment page > new run modal > evaluation output field label\"\n        />\n        {isOutputDirty && (\n          <LegacyTooltip\n            title={\n              <FormattedMessage\n                defaultMessage=\"Model, input data or prompt have changed since last evaluation of the output\"\n                description=\"Experiment page > new run modal > dirty output (out of sync with new data)\"\n              />\n            }\n          >\n            <WarningIcon css={{ marginLeft: theme.spacing.xs }} />\n          </LegacyTooltip>\n        )}\n      </FormUI.Label>\n      <FormUI.Hint>\n        <FormattedMessage\n          defaultMessage=\"This is the output generated by the LLM using the prompt template and input values defined above.\"\n          description=\"Experiment page > new run modal > evaluation output field hint\"\n        />\n      </FormUI.Hint>\n      {!evaluationError && isEvaluating && (\n        <div css={{ marginTop: theme.spacing.sm }}>\n          <TableSkeleton lines={5} />\n        </div>\n      )}\n      {!isEvaluating && (\n        <TextArea\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationcreatepromptrunoutput.tsx_144\"\n          rows={5}\n          css={{ cursor: 'default' }}\n          data-testid=\"prompt-output\"\n          value={evaluationOutput}\n          readOnly\n        />\n      )}\n      {!isEvaluating && evaluationError && <FormUI.Message message={evaluationError} type=\"error\" />}\n      <div css={{ marginTop: theme.spacing.sm }}>{metadataOutput}</div>\n    </>\n  );\n};\n","import { MlflowService } from '@mlflow/mlflow/src/experiment-tracking/sdk/MlflowService';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport type { AsyncAction } from '../../redux-types';\nimport type {\n  ModelGatewayQueryPayload,\n  ModelGatewayRouteLegacy,\n  SearchMlflowDeploymentsModelRoutesResponse,\n} from '../sdk/ModelGatewayService';\nimport { ModelGatewayRoute, ModelGatewayService } from '../sdk/ModelGatewayService';\n\nconst SEARCH_MLFLOW_DEPLOYMENTS_MODEL_ROUTES = 'SEARCH_MLFLOW_DEPLOYMENTS_MODEL_ROUTES';\n\nexport interface SearchMlflowDeploymentsModelRoutesAction\n  extends AsyncAction<SearchMlflowDeploymentsModelRoutesResponse> {\n  type: 'SEARCH_MLFLOW_DEPLOYMENTS_MODEL_ROUTES';\n}\n\nexport const searchMlflowDeploymentsRoutesApi = (filter?: string): SearchMlflowDeploymentsModelRoutesAction => ({\n  type: SEARCH_MLFLOW_DEPLOYMENTS_MODEL_ROUTES,\n  payload: MlflowService.gatewayProxyGet({\n    gateway_path: 'api/2.0/endpoints/',\n  }) as Promise<SearchMlflowDeploymentsModelRoutesResponse>,\n  meta: { id: getUUID() },\n});\n","import { cloneDeep, fromPairs } from 'lodash';\nimport type { Action } from 'redux';\nimport Utils from '../../common/utils/Utils';\nimport type { AsyncAction, ReduxState, ThunkDispatch } from '../../redux-types';\nimport { uploadArtifactApi } from '../actions';\nimport type { RunRowType } from '../components/experiment-page/utils/experimentPage.row-types';\nimport { MLFLOW_PROMPT_ENGINEERING_ARTIFACT_NAME } from '../constants';\nimport type { RawEvaluationArtifact } from '../sdk/EvaluationArtifactService';\nimport { parseEvaluationTableArtifact } from '../sdk/EvaluationArtifactService';\nimport type { ModelGatewayQueryPayload, ModelGatewayRouteType, ModelGatewayRoute } from '../sdk/ModelGatewayService';\nimport { ModelGatewayService } from '../sdk/ModelGatewayService';\nimport type { EvaluationArtifactTable } from '../types';\nimport { searchMlflowDeploymentsRoutesApi } from './ModelGatewayActions';\nimport {\n  PROMPTLAB_METADATA_COLUMN_LATENCY,\n  PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS,\n} from '../components/prompt-engineering/PromptEngineering.utils';\n\nconst EVALUATE_PROMPT_TABLE_VALUE = 'EVALUATE_PROMPT_TABLE_VALUE';\nexport interface EvaluatePromptTableValueAction\n  extends AsyncAction<\n    { metadata: any; text: string },\n    {\n      inputValues: Record<string, string>;\n      run: RunRowType;\n      compiledPrompt: string;\n      rowKey: string;\n      startTime: number;\n      gatewayRoute: ModelGatewayRoute;\n    }\n  > {\n  type: 'EVALUATE_PROMPT_TABLE_VALUE';\n}\nconst evaluatePromptTableValueUnified =\n  ({\n    routeName,\n    routeType,\n    compiledPrompt,\n    inputValues,\n    parameters,\n    outputColumn,\n    rowKey,\n    run,\n  }: {\n    routeName: string;\n    routeType: ModelGatewayRouteType;\n    compiledPrompt: string;\n    inputValues: Record<string, string>;\n    parameters: ModelGatewayQueryPayload['parameters'];\n    outputColumn: string;\n    rowKey: string;\n    run: RunRowType;\n  }) =>\n  async (dispatch: ThunkDispatch, getState: () => ReduxState) => {\n    // Check if model gateway routes have been fetched. If not, fetch them first.\n    const { modelGateway } = getState();\n    if (!modelGateway.modelGatewayRoutesLoading.loading && Object.keys(modelGateway.modelGatewayRoutes).length === 0) {\n      await dispatch(searchAllPromptLabAvailableEndpoints());\n    }\n    // If the gateway is not present in the store, it means that it was deleted\n    // recently. Display relevant error in this scenario.\n    const gatewayRoute = getState().modelGateway.modelGatewayRoutes[`${routeType}:${routeName}`];\n    if (!gatewayRoute) {\n      const errorMessage = `MLflow deployment endpoint ${routeName} does not exist anymore!`;\n      Utils.logErrorAndNotifyUser(errorMessage);\n      throw new Error(errorMessage);\n    }\n    const modelGatewayRequestPayload: ModelGatewayQueryPayload = {\n      inputText: compiledPrompt,\n      parameters,\n    };\n\n    const action = {\n      type: EVALUATE_PROMPT_TABLE_VALUE,\n      payload: ModelGatewayService.queryModelGatewayRoute(gatewayRoute, modelGatewayRequestPayload),\n      meta: {\n        inputValues,\n        run,\n        compiledPrompt,\n        rowKey,\n        startTime: performance.now(),\n      },\n    };\n    return dispatch(action);\n  };\n\nconst DISCARD_PENDING_EVALUATION_DATA = 'DISCARD_PENDING_EVALUATION_DATA';\nexport type DiscardPendingEvaluationDataAction = Action<'DISCARD_PENDING_EVALUATION_DATA'>;\nexport const discardPendingEvaluationData = () => ({\n  type: DISCARD_PENDING_EVALUATION_DATA,\n});\n\nexport const WRITE_BACK_EVALUATION_ARTIFACTS = 'WRITE_BACK_EVALUATION_ARTIFACTS';\n\nexport interface WriteBackEvaluationArtifactsAction\n  extends AsyncAction<\n    { runUuid: string; newEvaluationTable: EvaluationArtifactTable }[],\n    { runUuidsToUpdate: string[]; artifactPath: string }\n  > {\n  type: 'WRITE_BACK_EVALUATION_ARTIFACTS';\n}\n\nexport const writeBackEvaluationArtifactsAction = () => async (dispatch: ThunkDispatch, getState: () => ReduxState) => {\n  const { evaluationPendingDataByRunUuid, evaluationArtifactsByRunUuid } = getState().evaluationData;\n  const runUuidsToUpdate = Object.keys(evaluationPendingDataByRunUuid);\n  const originalRunArtifacts = fromPairs(\n    Object.entries(evaluationArtifactsByRunUuid)\n      .filter(\n        ([runUuid, artifactTableRecords]) =>\n          runUuidsToUpdate.includes(runUuid) && artifactTableRecords[MLFLOW_PROMPT_ENGINEERING_ARTIFACT_NAME],\n      )\n      .map(([runUuid, artifactTableRecords]) => [\n        runUuid,\n        artifactTableRecords[MLFLOW_PROMPT_ENGINEERING_ARTIFACT_NAME],\n      ]),\n  );\n\n  const updatedArtifactFiles = runUuidsToUpdate.map((runUuid) => {\n    const originalTableRecord = originalRunArtifacts[runUuid];\n\n    if (!originalTableRecord) {\n      throw new Error(`Cannot find existing prompt engineering artifact for run ${runUuid}`);\n    }\n\n    const transformedEntries = evaluationPendingDataByRunUuid[runUuid].map(\n      ({ entryData, evaluationTime, totalTokens }) => {\n        return originalTableRecord.columns.map((columnName) => {\n          if (columnName === PROMPTLAB_METADATA_COLUMN_LATENCY) {\n            return evaluationTime.toString();\n          } else if (columnName === PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS && totalTokens) {\n            return totalTokens.toString();\n          } else {\n            return entryData[columnName] || '';\n          }\n        });\n      },\n    );\n\n    const updatedArtifactFile = cloneDeep(originalRunArtifacts[runUuid].rawArtifactFile) as RawEvaluationArtifact;\n    updatedArtifactFile?.data.unshift(...transformedEntries);\n\n    return { runUuid, updatedArtifactFile };\n  });\n\n  const promises = updatedArtifactFiles.map(({ runUuid, updatedArtifactFile }) =>\n    dispatch(uploadArtifactApi(runUuid, MLFLOW_PROMPT_ENGINEERING_ARTIFACT_NAME, updatedArtifactFile)).then(() => {\n      const newEvaluationTable = parseEvaluationTableArtifact(\n        MLFLOW_PROMPT_ENGINEERING_ARTIFACT_NAME,\n        updatedArtifactFile,\n      );\n      return { runUuid, newEvaluationTable };\n    }),\n  );\n\n  return dispatch({\n    type: 'WRITE_BACK_EVALUATION_ARTIFACTS',\n    payload: Promise.all(promises),\n    meta: { runUuidsToUpdate, artifactPath: MLFLOW_PROMPT_ENGINEERING_ARTIFACT_NAME },\n  });\n};\nconst EVALUATE_ADD_INPUT_VALUES = 'EVALUATE_ADD_INPUT_VALUES';\nexport interface EvaluateAddInputValues extends Action<'EVALUATE_ADD_INPUT_VALUES'> {\n  payload: Record<string, string>;\n}\nexport const evaluateAddInputValues = (inputValues: Record<string, string>) => ({\n  type: EVALUATE_ADD_INPUT_VALUES,\n  payload: inputValues,\n  meta: {},\n});\n\nexport const evaluatePromptTableValue = ({\n  routeName,\n  routeType,\n  compiledPrompt,\n  inputValues,\n  parameters,\n  outputColumn,\n  rowKey,\n  run,\n}: {\n  routeName: string;\n  routeType: ModelGatewayRouteType;\n  compiledPrompt: string;\n  inputValues: Record<string, string>;\n  parameters: ModelGatewayQueryPayload['parameters'];\n  outputColumn: string;\n  rowKey: string;\n  run: RunRowType;\n}) => {\n  const evaluateParams = {\n    routeName,\n    compiledPrompt,\n    inputValues,\n    parameters,\n    outputColumn,\n    rowKey,\n    run,\n  };\n\n  return evaluatePromptTableValueUnified({\n    ...evaluateParams,\n    routeType,\n  });\n};\n\nexport const searchAllPromptLabAvailableEndpoints = () => async (dispatch: ThunkDispatch) => {\n  return dispatch(searchMlflowDeploymentsRoutesApi());\n};\n","import { ErrorWrapper } from '../../../../common/utils/ErrorWrapper';\nimport { GatewayErrorWrapper } from '../../../utils/LLMGatewayUtils';\n\n/**\n * Due to multiple invocation methods, there are multiple error types that can be thrown.\n * This function extracts the proper error message from the error object.\n */\nexport const getPromptEngineeringErrorMessage = (e: GatewayErrorWrapper | ErrorWrapper | Error) => {\n  const errorMessage =\n    e instanceof GatewayErrorWrapper\n      ? e.getGatewayErrorMessage()\n      : e instanceof ErrorWrapper\n      ? e.getMessageField()\n      : e.message;\n\n  return errorMessage;\n};\n","import {\n  Button,\n  DialogCombobox,\n  DialogComboboxContent,\n  DialogComboboxHintRow,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListSearch,\n  DialogComboboxOptionListSelectItem,\n  DialogComboboxTrigger,\n  FormUI,\n  InfoSmallIcon,\n  Input,\n  Modal,\n  PlusIcon,\n  Spinner,\n  LegacyTooltip,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { sortBy, compact } from 'lodash';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Utils from '../../../common/utils/Utils';\nimport type { ThunkDispatch } from '../../../redux-types';\nimport { createPromptLabRunApi } from '../../actions';\nimport type { ModelGatewayReduxState } from '../../reducers/ModelGatewayReducer';\nimport type { ModelGatewayResponseType } from '../../sdk/ModelGatewayService';\nimport { ModelGatewayService } from '../../sdk/ModelGatewayService';\nimport { ModelGatewayRouteTask } from '../../sdk/MlflowEnums';\nimport { generateRandomRunName, getDuplicatedRunName } from '../../utils/RunNameUtils';\nimport { useExperimentIds } from '../experiment-page/hooks/useExperimentIds';\nimport {\n  compilePromptInputText,\n  extractEvaluationPrerequisitesForRun,\n  extractRequiredInputParamsForRun,\n} from '../prompt-engineering/PromptEngineering.utils';\nimport { EvaluationCreatePromptParameters } from './EvaluationCreatePromptParameters';\nimport { usePromptEvaluationInputValues } from './hooks/usePromptEvaluationInputValues';\nimport { usePromptEvaluationParameters } from './hooks/usePromptEvaluationParameters';\nimport { usePromptEvaluationPromptTemplateValue } from './hooks/usePromptEvaluationPromptTemplateValue';\nimport { EvaluationCreateRunPromptTemplateErrors } from './components/EvaluationCreateRunPromptTemplateErrors';\nimport type { RunRowType } from '../experiment-page/utils/experimentPage.row-types';\nimport { EvaluationCreatePromptRunModalExamples } from './EvaluationCreatePromptRunModalExamples';\nimport { EvaluationCreatePromptRunOutput } from './components/EvaluationCreatePromptRunOutput';\nimport { useExperimentPageViewMode } from '../experiment-page/hooks/useExperimentPageViewMode';\nimport { searchAllPromptLabAvailableEndpoints } from '../../actions/PromptEngineeringActions';\nimport { getPromptEngineeringErrorMessage } from './utils/PromptEngineeringErrorUtils';\n\nconst { TextArea } = Input;\ntype Props = {\n  isOpen: boolean;\n  closeModal: () => void;\n  runBeingDuplicated: RunRowType | null;\n  visibleRuns?: RunRowType[];\n  refreshRuns: (() => Promise<never[]>) | (() => Promise<any> | null) | (() => void);\n};\n\nexport const EvaluationCreatePromptRunModal = ({\n  isOpen,\n  closeModal,\n  runBeingDuplicated,\n  visibleRuns = [],\n  refreshRuns,\n}: Props): JSX.Element => {\n  const [experimentId] = useExperimentIds();\n  const { theme } = useDesignSystemTheme();\n  const { parameters, updateParameter } = usePromptEvaluationParameters();\n  const [, setViewMode] = useExperimentPageViewMode();\n\n  const [selectedModel, updateSelectedModel] = useState('');\n  const [newRunName, setNewRunName] = useState('');\n  const [isCreatingRun, setIsCreatingRun] = useState(false);\n  const [isEvaluating, setIsEvaluating] = useState(false);\n  const [lastEvaluationError, setLastEvaluationError] = useState<string | null>(null);\n  const [evaluationOutput, setEvaluationOutput] = useState('');\n  const [evaluationMetadata, setEvaluationMetadata] = useState<Partial<ModelGatewayResponseType['metadata']>>({});\n  const [outputDirty, setOutputDirty] = useState(false);\n  const [isViewExamplesModalOpen, setViewExamplesModalOpen] = useState(false);\n  const cancelTokenRef = useRef<string | null>(null);\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  useEffect(() => {\n    dispatch(searchAllPromptLabAvailableEndpoints()).catch((e) => {\n      Utils.logErrorAndNotifyUser(e?.message || e);\n    });\n  }, [dispatch]);\n\n  const intl = useIntl();\n\n  const {\n    updateInputVariables,\n    inputVariables,\n    inputVariableValues,\n    updateInputVariableValue,\n    inputVariableNameViolations,\n    clearInputVariableValues,\n  } = usePromptEvaluationInputValues();\n\n  const { handleAddVariableToTemplate, savePromptTemplateInputRef, promptTemplate, updatePromptTemplate } =\n    usePromptEvaluationPromptTemplateValue();\n\n  useEffect(() => {\n    if (isOpen && !runBeingDuplicated) {\n      setNewRunName(generateRandomRunName());\n    }\n  }, [isOpen, runBeingDuplicated]);\n\n  useEffect(() => {\n    updateInputVariables(promptTemplate);\n  }, [promptTemplate, updateInputVariables]);\n\n  /**\n   * If a run duplication is detected, pre-fill the values\n   */\n  useEffect(() => {\n    if (runBeingDuplicated) {\n      const {\n        promptTemplate: duplicatedPromptTemplate,\n        routeName: duplicatedRouteName,\n        parameters: duplicatedParameters,\n      } = extractEvaluationPrerequisitesForRun(runBeingDuplicated);\n\n      extractRequiredInputParamsForRun(runBeingDuplicated);\n      if (duplicatedPromptTemplate) {\n        updatePromptTemplate(duplicatedPromptTemplate);\n      }\n      if (duplicatedParameters.temperature) {\n        updateParameter('temperature', duplicatedParameters.temperature);\n      }\n      if (duplicatedParameters.max_tokens) {\n        updateParameter('max_tokens', duplicatedParameters.max_tokens);\n      }\n      if (duplicatedRouteName) {\n        updateSelectedModel(duplicatedRouteName);\n      }\n      setEvaluationOutput('');\n      setOutputDirty(false);\n      const duplicatedRunName = getDuplicatedRunName(\n        runBeingDuplicated.runName,\n        compact(visibleRuns.map(({ runName }) => runName)),\n      );\n      setNewRunName(duplicatedRunName);\n      clearInputVariableValues();\n    }\n  }, [runBeingDuplicated, clearInputVariableValues, updateParameter, updatePromptTemplate, visibleRuns]);\n\n  const modelRoutesUnified = useSelector(\n    ({ modelGateway }: { modelGateway: ModelGatewayReduxState }) => modelGateway.modelGatewayRoutes,\n  );\n\n  // In the next version, routes are already filtered\n  const supportedModelRouteListUnified = useMemo(\n    () => sortBy(Object.values(modelRoutesUnified), 'name'),\n    // .filter(\n    //   (x) => x.name.includes('ann-chat') || x.name.includes('bedrock-ai21labs'),\n    // )\n    [modelRoutesUnified],\n  );\n\n  // Determines if model gateway routes are being loaded\n  const modelRoutesLoading = useSelector(\n    ({ modelGateway }: { modelGateway: ModelGatewayReduxState }) => modelGateway.modelGatewayRoutesLoading.loading,\n  );\n  useEffect(() => {\n    if (evaluationOutput) {\n      setOutputDirty(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inputVariableValues, promptTemplate, parameters, selectedModel]);\n\n  const onHandleSubmit = () => {\n    setIsCreatingRun(true);\n    const modelRouteName = modelRoutesUnified[selectedModel]?.name;\n    const modelParameters = { ...parameters, route_type: modelRoutesUnified[selectedModel]?.type };\n\n    const modelInput = compilePromptInputText(promptTemplate, inputVariableValues);\n    dispatch(\n      createPromptLabRunApi({\n        experimentId,\n        promptTemplate,\n        modelInput,\n        modelParameters,\n        modelRouteName,\n        promptParameters: inputVariableValues,\n        modelOutput: evaluationOutput,\n        runName: newRunName,\n        modelOutputParameters: evaluationMetadata,\n      }),\n    )\n      .then(() => {\n        refreshRuns();\n        closeModal();\n        setIsCreatingRun(false);\n        setViewMode('ARTIFACT');\n      })\n      .catch((e) => {\n        Utils.logErrorAndNotifyUser(e?.message || e);\n        // NB: Not using .finally() due to issues with promise implementation in the Jest\n        setIsCreatingRun(false);\n      });\n  };\n\n  const handleEvaluate = useCallback(() => {\n    const modelRoute = modelRoutesUnified[selectedModel];\n    const cancelToken = Math.random().toString(36);\n    cancelTokenRef.current = cancelToken;\n    if (!modelRoute) {\n      // Should never happen if the model is selected\n      throw new Error('No model route found!');\n    }\n    setLastEvaluationError(null);\n    setIsEvaluating(true);\n    const inputText = compilePromptInputText(promptTemplate, inputVariableValues);\n    const startTime = performance.now();\n    ModelGatewayService.queryModelGatewayRoute(modelRoute, {\n      inputText,\n      parameters,\n    })\n      .then((value) => {\n        if (cancelTokenRef.current === cancelToken) {\n          const { text, metadata } = value;\n\n          // TODO: Consider calculating actual model call latency on the backend side\n          const latency = performance.now() - startTime;\n\n          setEvaluationOutput(text);\n          const metadataWithEvaluationTime = { ...metadata, latency };\n\n          // Prefix the metadata keys with \"MLFLOW_\"\n          const prefixedMetadata = Object.entries(metadataWithEvaluationTime).reduce(\n            (acc, [metadata_key, metadata_value]) => ({\n              ...acc,\n              [`MLFLOW_${metadata_key}`]: metadata_value,\n            }),\n            {},\n          );\n\n          setEvaluationMetadata(prefixedMetadata);\n          setOutputDirty(false);\n          setIsEvaluating(false);\n          // NB: Not using .finally() due to issues with promise implementation in the Jest\n          if (cancelTokenRef.current === cancelToken) {\n            cancelTokenRef.current = null;\n          }\n        }\n      })\n      .catch((e) => {\n        const errorMessage = getPromptEngineeringErrorMessage(e);\n        const wrappedMessage = intl.formatMessage(\n          {\n            defaultMessage: 'MLflow deployment returned the following error: \"{errorMessage}\"',\n            description: 'Experiment page > MLflow deployment error message',\n          },\n          {\n            errorMessage,\n          },\n        );\n        // We treat is as a user error and we're not logging the error upstream\n        Utils.displayGlobalErrorNotification(wrappedMessage);\n        setIsEvaluating(false);\n        setLastEvaluationError(wrappedMessage);\n        // NB: Not using .finally() due to issues with promise implementation in the Jest\n        if (cancelTokenRef.current === cancelToken) {\n          cancelTokenRef.current = null;\n        }\n      });\n  }, [inputVariableValues, modelRoutesUnified, parameters, promptTemplate, selectedModel, intl]);\n\n  // create a handleCancel function to terminate the evaluation if it is in progress\n  const handleCancel = useCallback(() => {\n    if (cancelTokenRef.current) {\n      setIsEvaluating(false);\n      cancelTokenRef.current = null;\n    }\n  }, [setIsEvaluating]);\n\n  const selectModelLabel = intl.formatMessage({\n    defaultMessage: 'Served LLM model',\n    description: 'Experiment page > new run modal > served LLM model endpoint label',\n  });\n  const selectModelPlaceholder = intl.formatMessage({\n    defaultMessage: 'Select LLM model endpoint',\n    description: 'Experiment page > new run modal > served LLM model endpoint placeholder',\n  });\n\n  const promptTemplateProvided = promptTemplate.trim().length > 0;\n  const allInputValuesProvided = useMemo(\n    () => inputVariables.every((variable) => inputVariableValues[variable]?.trim()),\n    [inputVariables, inputVariableValues],\n  );\n\n  const runNameProvided = newRunName.trim().length > 0;\n\n  // We can evaluate if we have selected model, prompt template and all input values.\n  // It should be possible to evaluate without input variables for the purpose of playing around.\n  const evaluateButtonEnabled = selectedModel && promptTemplateProvided && allInputValuesProvided;\n\n  // We can log the run if we have: selected model, prompt template, all input values,\n  // output that is present and up-to-date. Also, in order to log the run, we should have at least\n  // one input variable defined (otherwise prompt engineering won't make sense).\n  const createRunButtonEnabled = Boolean(\n    selectedModel &&\n      promptTemplateProvided &&\n      allInputValuesProvided &&\n      evaluationOutput &&\n      !outputDirty &&\n      inputVariables.length > 0 &&\n      runNameProvided &&\n      !lastEvaluationError,\n  );\n\n  // Let's prepare a proper tooltip content for every scenario\n  const createRunButtonTooltip = useMemo(() => {\n    if (!selectedModel) {\n      return intl.formatMessage({\n        defaultMessage: 'You need to select a served model endpoint using dropdown first',\n        description: 'Experiment page > new run modal > invalid state - no model endpoint selected',\n      });\n    }\n    if (!promptTemplateProvided) {\n      return intl.formatMessage({\n        defaultMessage: 'You need to provide a prompt template',\n        description: 'Experiment page > new run modal > invalid state - no prompt template provided',\n      });\n    }\n    if (!allInputValuesProvided) {\n      return intl.formatMessage({\n        defaultMessage: 'You need to provide values for all defined inputs',\n        description: 'Experiment page > new run modal > invalid state - no prompt inputs provided',\n      });\n    }\n    if (!evaluationOutput) {\n      return intl.formatMessage({\n        defaultMessage: 'You need to evaluate the resulting output first',\n        description: 'Experiment page > new run modal > invalid state - result not evaluated',\n      });\n    }\n    if (outputDirty) {\n      return intl.formatMessage({\n        defaultMessage: 'Input data or prompt template have changed since last evaluation of the output',\n        description: 'Experiment page > new run modal > dirty output (out of sync with new data)',\n      });\n    }\n    if (inputVariables.length === 0) {\n      return intl.formatMessage({\n        defaultMessage: 'You need to define at least one input variable',\n        description: 'Experiment page > new run modal > invalid state - no input variables defined',\n      });\n    }\n    if (!runNameProvided) {\n      return intl.formatMessage({\n        defaultMessage: 'Please provide run name',\n        description: 'Experiment page > new run modal > invalid state - no run name provided',\n      });\n    }\n    return null;\n  }, [\n    allInputValuesProvided,\n    inputVariables.length,\n    intl,\n    outputDirty,\n    evaluationOutput,\n    promptTemplateProvided,\n    selectedModel,\n    runNameProvided,\n  ]);\n\n  // Let's prepare a proper tooltip content for every scenario\n  const evaluateButtonTooltip = useMemo(() => {\n    if (!selectedModel) {\n      return intl.formatMessage({\n        defaultMessage: 'You need to select a served model endpoint using dropdown first',\n        description: 'Experiment page > new run modal > invalid state - no model endpoint selected',\n      });\n    }\n    if (!promptTemplateProvided) {\n      return intl.formatMessage({\n        defaultMessage: 'You need to provide a prompt template',\n        description: 'Experiment page > new run modal > invalid state - no prompt template provided',\n      });\n    }\n    if (!allInputValuesProvided) {\n      return intl.formatMessage({\n        defaultMessage: 'You need to provide values for all defined inputs',\n        description: 'Experiment page > new run modal > invalid state - no prompt inputs provided',\n      });\n    }\n    return null;\n  }, [allInputValuesProvided, intl, promptTemplateProvided, selectedModel]);\n\n  if (isOpen && isViewExamplesModalOpen) {\n    return (\n      <EvaluationCreatePromptRunModalExamples\n        isOpen={isOpen && isViewExamplesModalOpen}\n        closeExamples={() => setViewExamplesModalOpen(false)}\n        closeModal={closeModal}\n        updatePromptTemplate={updatePromptTemplate}\n        updateInputVariableValue={updateInputVariableValue}\n      />\n    );\n  }\n\n  const formatVisibleRouteName = (selectedRouteName: string) => {\n    if (selectedRouteName.includes(':')) {\n      return selectedRouteName.split(':')[1];\n    }\n    return selectedRouteName;\n  };\n\n  const getRouteOptionList = () => {\n    return supportedModelRouteListUnified.map((modelRoute) => (\n      <DialogComboboxOptionListSelectItem\n        value={modelRoute.key}\n        key={modelRoute.key}\n        onChange={(value) => {\n          updateSelectedModel(value);\n        }}\n        checked={selectedModel === modelRoute.key}\n      >\n        {modelRoute.name}\n        {modelRoute.mlflowDeployment && (\n          <DialogComboboxHintRow>{modelRoute.mlflowDeployment.model.name}</DialogComboboxHintRow>\n        )}\n      </DialogComboboxOptionListSelectItem>\n    ));\n  };\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptrunmodal.tsx_541\"\n      verticalSizing=\"maxed_out\"\n      visible={isOpen}\n      onCancel={closeModal}\n      onOk={closeModal}\n      footer={\n        <div css={{ display: 'flex', gap: theme.spacing.sm, justifyContent: 'flex-end' }}>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptrunmodal.tsx_589\"\n            onClick={closeModal}\n          >\n            <FormattedMessage\n              defaultMessage=\"Cancel\"\n              description=\"Experiment page > new run modal > cancel button label\"\n            />\n          </Button>\n          <LegacyTooltip title={createRunButtonTooltip}>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptrunmodal.tsx_596\"\n              onClick={onHandleSubmit}\n              data-testid=\"button-create-run\"\n              type=\"primary\"\n              disabled={!createRunButtonEnabled}\n            >\n              <FormattedMessage\n                defaultMessage=\"Create run\"\n                description='Experiment page > new run modal > \"Create run\" confirm button label'\n              />\n            </Button>\n          </LegacyTooltip>\n        </div>\n      }\n      title={\n        <div>\n          <Typography.Title level={2} css={{ marginTop: theme.spacing.sm, marginBottom: theme.spacing.xs }}>\n            <FormattedMessage defaultMessage=\"New run\" description=\"Experiment page > new run modal > modal title\" />\n          </Typography.Title>\n          <Typography.Hint css={{ marginTop: 0, fontWeight: 'normal' }}>\n            Create a new run using a large-language model by giving it a prompt template and model parameters\n          </Typography.Hint>\n        </div>\n      }\n      dangerouslySetAntdProps={{ width: 1200 }}\n    >\n      <div\n        css={{\n          display: 'grid',\n          gridTemplateColumns: '300px 1fr',\n          gap: 48,\n        }}\n      >\n        <div>\n          <FormUI.Label htmlFor=\"selected_model\" css={{ marginBottom: theme.spacing.sm }}>\n            {selectModelLabel}\n          </FormUI.Label>\n          <div css={{ marginBottom: theme.spacing.lg, display: 'flex', alignItems: 'center' }}>\n            <DialogCombobox\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptrunmodal.tsx_597\"\n              label={selectModelLabel}\n              modal={false}\n              value={selectedModel ? [formatVisibleRouteName(selectedModel)] : undefined}\n            >\n              <DialogComboboxTrigger\n                id=\"selected_model\"\n                css={{ width: '100%' }}\n                allowClear={false}\n                placeholder={selectModelPlaceholder}\n                withInlineLabel={false}\n              />\n              <DialogComboboxContent loading={modelRoutesLoading} maxHeight={400} matchTriggerWidth>\n                {!modelRoutesLoading && (\n                  <DialogComboboxOptionList>\n                    <DialogComboboxOptionListSearch autoFocus>{getRouteOptionList()}</DialogComboboxOptionListSearch>\n                  </DialogComboboxOptionList>\n                )}\n              </DialogComboboxContent>\n            </DialogCombobox>\n          </div>\n          {selectedModel && (\n            <EvaluationCreatePromptParameters parameters={parameters} updateParameter={updateParameter} />\n          )}\n          <div css={styles.formItem}>\n            <>\n              <FormUI.Label htmlFor=\"new_run_name\">\n                <FormattedMessage\n                  defaultMessage=\"New run name\"\n                  description=\"Experiment page > new run modal > run name input label\"\n                />\n                {!newRunName.trim() && (\n                  <FormUI.Message\n                    type=\"error\"\n                    message={intl.formatMessage({\n                      defaultMessage: 'Please provide run name',\n                      description: 'Experiment page > new run modal > invalid state - no run name provided',\n                    })}\n                  />\n                )}\n              </FormUI.Label>\n              <Input\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptrunmodal.tsx_638\"\n                id=\"new_run_name\"\n                data-testid=\"run-name-input\"\n                required\n                value={newRunName}\n                onChange={(e) => setNewRunName(e.target.value)}\n              />\n            </>\n          </div>\n        </div>\n        <div>\n          <div css={styles.formItem}>\n            <>\n              <div css={{ display: 'flex', justifyContent: 'space-between' }}>\n                <FormUI.Label htmlFor=\"prompt_template\">\n                  <FormattedMessage\n                    defaultMessage=\"Prompt Template\"\n                    description=\"Experiment page > new run modal > prompt template input label\"\n                  />\n                </FormUI.Label>\n                <Button\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptrunmodal.tsx_695\"\n                  onClick={() => setViewExamplesModalOpen(true)}\n                  style={{ marginLeft: 'auto' }}\n                  size=\"small\"\n                >\n                  <FormattedMessage\n                    defaultMessage=\"View Examples\"\n                    description=\"Experiment page > new run modal > prompt examples button\"\n                  />\n                </Button>\n              </div>\n              <FormUI.Hint>\n                <FormattedMessage\n                  defaultMessage={`Give instructions to the model. Use '{{ }}' or the \"Add new variable\" button to add variables to your prompt.`}\n                  description=\"Experiment page > new run modal > prompt template input hint\"\n                />\n              </FormUI.Hint>\n            </>\n\n            <TextArea\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptrunmodal.tsx_678\"\n              id=\"prompt_template\"\n              autoSize={{ minRows: 3 }}\n              data-testid=\"prompt-template-input\"\n              value={promptTemplate}\n              onChange={(e) => updatePromptTemplate(e.target.value)}\n              ref={savePromptTemplateInputRef}\n            />\n            <EvaluationCreateRunPromptTemplateErrors violations={inputVariableNameViolations} />\n          </div>\n          {inputVariables.map((inputVariable) => (\n            <div css={styles.formItem} key={inputVariable}>\n              <>\n                <FormUI.Label htmlFor={inputVariable}>\n                  <span>{inputVariable}</span>\n                </FormUI.Label>\n                <TextArea\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptrunmodal.tsx_694\"\n                  id={inputVariable}\n                  autoSize\n                  value={inputVariableValues[inputVariable] ? inputVariableValues[inputVariable] : ''}\n                  onChange={(e) => updateInputVariableValue(inputVariable, e.target.value)}\n                />\n              </>\n            </div>\n          ))}\n          <div css={{ marginBottom: 2 * theme.spacing.md }}>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptrunmodal.tsx_736\"\n              icon={<PlusIcon />}\n              onClick={handleAddVariableToTemplate}\n            >\n              <FormattedMessage\n                defaultMessage=\"Add new variable\"\n                description='Experiment page > new run modal > \"add new variable\" button label'\n              />\n            </Button>\n          </div>\n          <EvaluationCreatePromptRunOutput\n            evaluateButtonTooltip={evaluateButtonTooltip}\n            evaluationMetadata={evaluationMetadata}\n            evaluationOutput={evaluationOutput}\n            disabled={!evaluateButtonEnabled}\n            isEvaluating={isEvaluating}\n            isOutputDirty={outputDirty}\n            onCancelClick={handleCancel}\n            onEvaluateClick={handleEvaluate}\n            evaluationError={lastEvaluationError}\n          />\n        </div>\n      </div>\n      {isCreatingRun && (\n        // Scrim overlay\n        <div\n          css={{\n            inset: 0,\n            backgroundColor: theme.colors.overlayOverlay,\n            position: 'absolute',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            zIndex: 1,\n          }}\n        >\n          <Spinner />\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nconst styles = {\n  formItem: { marginBottom: 16 },\n};\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { debounce, fromPairs, isEqual } from 'lodash';\nimport {\n  DEFAULT_PROMPTLAB_INPUT_VALUES,\n  extractPromptInputVariables,\n  getPromptInputVariableNameViolations,\n} from '../../prompt-engineering/PromptEngineering.utils';\n\nexport const usePromptEvaluationInputValues = () => {\n  const [inputVariables, updateInputVariablesDirect] = useState<string[]>(extractPromptInputVariables(''));\n\n  const [inputVariableNameViolations, setInputVariableNameViolations] = useState<\n    ReturnType<typeof getPromptInputVariableNameViolations>\n  >({ namesWithSpaces: [] });\n\n  const [inputVariableValues, updateInputVariableValues] =\n    useState<Record<string, string>>(DEFAULT_PROMPTLAB_INPUT_VALUES);\n\n  const clearInputVariableValues = useCallback(() => updateInputVariableValues({}), []);\n\n  const updateInputVariables = useMemo(\n    () =>\n      // Prevent calculating new input variable set on every keystroke of a template,\n      // let's debounce it by 250ms\n      debounce((promptTemplate: string) => {\n        updateInputVariablesDirect((currentInputVariables) => {\n          const newInputVariables = extractPromptInputVariables(promptTemplate);\n          if (!isEqual(newInputVariables, currentInputVariables)) {\n            return newInputVariables;\n          }\n          return currentInputVariables;\n        });\n        setInputVariableNameViolations(getPromptInputVariableNameViolations(promptTemplate));\n      }, 250),\n    [],\n  );\n\n  const updateInputVariableValue = useCallback((name: string, value: string) => {\n    updateInputVariableValues((values) => ({ ...values, [name]: value }));\n  }, []);\n\n  // Sanitize the variable dictionary so only actually used variables\n  // will be returned (discard leftovers from previous prompt templates)\n  const sanitizedInputVariableValues = useMemo(\n    () => fromPairs(Object.entries(inputVariableValues).filter(([key]) => inputVariables.includes(key))),\n    [inputVariableValues, inputVariables],\n  );\n\n  return {\n    updateInputVariables,\n    inputVariables,\n    inputVariableValues: sanitizedInputVariableValues,\n    updateInputVariableValue,\n    inputVariableNameViolations,\n    clearInputVariableValues,\n  };\n};\n","import React, { useCallback, useContext, useMemo, useState } from 'react';\nimport type { RunRowType } from '../utils/experimentPage.row-types';\nimport { EvaluationCreatePromptRunModal } from '../../evaluation-artifacts-compare/EvaluationCreatePromptRunModal';\nimport { shouldEnablePromptLab } from '../../../../common/utils/FeatureUtils';\n\nconst CreateNewRunContext = React.createContext<{\n  createNewRun: (runToDuplicate?: RunRowType) => void;\n}>({\n  createNewRun: () => {},\n});\n\n/**\n * A thin context wrapper dedicated to invoke \"create run\" modal in various areas of the experiment runs page UI\n */\nexport const CreateNewRunContextProvider = ({\n  children,\n  visibleRuns,\n  refreshRuns,\n}: {\n  children: React.ReactNode;\n  visibleRuns: RunRowType[];\n  refreshRuns: (() => Promise<never[]>) | (() => Promise<any> | null) | (() => void);\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [runBeingDuplicated, setRunBeingDuplicated] = useState<RunRowType | null>(null);\n\n  const contextValue = useMemo(\n    () => ({\n      createNewRun: (runToDuplicate?: RunRowType) => {\n        setIsOpen(true);\n        setRunBeingDuplicated(runToDuplicate || null);\n      },\n    }),\n    [],\n  );\n\n  return (\n    <CreateNewRunContext.Provider value={contextValue}>\n      {children}\n      {shouldEnablePromptLab() && (\n        <EvaluationCreatePromptRunModal\n          visibleRuns={visibleRuns}\n          isOpen={isOpen}\n          closeModal={() => setIsOpen(false)}\n          runBeingDuplicated={runBeingDuplicated}\n          refreshRuns={refreshRuns}\n        />\n      )}\n    </CreateNewRunContext.Provider>\n  );\n};\n\nexport const useCreateNewRun = () => useContext(CreateNewRunContext);\n","import {\n  Button,\n  Tag,\n  DialogCombobox,\n  DialogComboboxContent,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListCheckboxItem,\n  DialogComboboxOptionListSelectItem,\n  DialogComboboxOptionListSearch,\n  DialogComboboxTrigger,\n  DownloadIcon,\n  ClipboardIcon,\n  FullscreenExitIcon,\n  FullscreenIcon,\n  OverflowIcon,\n  PlusIcon,\n  SidebarIcon,\n  LegacyTooltip,\n  useDesignSystemTheme,\n  DropdownMenu,\n  ToggleButton,\n  SegmentedControlGroup,\n  SegmentedControlButton,\n  ListIcon,\n  Tooltip,\n  ChartLineIcon,\n  TableIcon,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\n\nimport { shouldEnablePromptLab } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport React, { useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { ToggleIconButton } from '../../../../../common/components/ToggleIconButton';\nimport type { ErrorWrapper } from '../../../../../common/utils/ErrorWrapper';\nimport { LIFECYCLE_FILTER } from '../../../../constants';\nimport type { UpdateExperimentViewStateFn } from '../../../../types';\nimport { useExperimentIds } from '../../hooks/useExperimentIds';\nimport type { ExperimentPageViewState } from '../../models/ExperimentPageViewState';\nimport { getStartTimeColumnDisplayName } from '../../utils/experimentPage.common-utils';\nimport type { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { RunsSearchAutoComplete } from './RunsSearchAutoComplete';\nimport type { ExperimentStoreEntities, DatasetSummary, ExperimentViewRunsCompareMode } from '../../../../types';\nimport { datasetSummariesEqual } from '../../../../utils/DatasetUtils';\nimport { CreateNotebookRunModal } from '@mlflow/mlflow/src/experiment-tracking/components/evaluation-artifacts-compare/CreateNotebookRunModal';\nimport { PreviewBadge } from '@mlflow/mlflow/src/shared/building_blocks/PreviewBadge';\nimport { useCreateNewRun } from '../../hooks/useCreateNewRun';\nimport { useExperimentPageViewMode } from '../../hooks/useExperimentPageViewMode';\nimport { useUpdateExperimentPageSearchFacets } from '../../hooks/useExperimentPageSearchFacets';\nimport type { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { createExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { useUpdateExperimentViewUIState } from '../../contexts/ExperimentPageUIStateContext';\n\nexport type ExperimentViewRunsControlsFiltersProps = {\n  searchFacetsState: ExperimentPageSearchFacetsState;\n  experimentId: string;\n  viewState: ExperimentPageViewState;\n  updateViewState: UpdateExperimentViewStateFn;\n  runsData: ExperimentRunsSelectorResult;\n  onDownloadCsv: () => void;\n  requestError: ErrorWrapper | Error | null;\n  additionalControls?: React.ReactNode;\n  refreshRuns: () => void;\n  viewMaximized: boolean;\n  autoRefreshEnabled?: boolean;\n  hideEmptyCharts?: boolean;\n  areRunsGrouped?: boolean;\n};\n\nexport const ExperimentViewRunsControlsFilters = React.memo(\n  ({\n    searchFacetsState,\n    experimentId,\n    runsData,\n    viewState,\n    updateViewState,\n    onDownloadCsv,\n    requestError,\n    additionalControls,\n    refreshRuns,\n    viewMaximized,\n    autoRefreshEnabled = false,\n    hideEmptyCharts = false,\n    areRunsGrouped = false,\n  }: ExperimentViewRunsControlsFiltersProps) => {\n    const setUrlSearchFacets = useUpdateExperimentPageSearchFacets();\n\n    const [pageViewMode, setViewModeInURL] = useExperimentPageViewMode();\n    const updateUIState = useUpdateExperimentViewUIState();\n\n    const isComparingExperiments = useExperimentIds().length > 1;\n    const { startTime, lifecycleFilter, datasetsFilter, searchFilter } = searchFacetsState;\n\n    // Use modernized view mode value getter if flag is set\n    const compareRunsMode = pageViewMode;\n\n    const intl = useIntl();\n    const { createNewRun } = useCreateNewRun();\n    const [isCreateRunWithNotebookModalOpen, setCreateRunWithNotebookModalOpenValue] = useState(false);\n    const { theme } = useDesignSystemTheme();\n\n    // List of labels for \"start time\" filter\n    const startTimeColumnLabels: Record<string, string> = useMemo(() => getStartTimeColumnDisplayName(intl), [intl]);\n\n    const currentLifecycleFilterValue =\n      lifecycleFilter === LIFECYCLE_FILTER.ACTIVE\n        ? intl.formatMessage({\n            defaultMessage: 'Active',\n            description: 'Linked model dropdown option to show active experiment runs',\n          })\n        : intl.formatMessage({\n            defaultMessage: 'Deleted',\n            description: 'Linked model dropdown option to show deleted experiment runs',\n          });\n\n    const currentStartTimeFilterLabel = intl.formatMessage({\n      defaultMessage: 'Time created',\n      description: 'Label for the start time select dropdown for experiment runs view',\n    });\n\n    // Show preview sidebar only on table view and artifact view\n    const displaySidebarToggleButton = compareRunsMode === undefined || compareRunsMode === 'ARTIFACT';\n\n    const datasetSummaries: DatasetSummary[] = useSelector(\n      (state: { entities: ExperimentStoreEntities }) => state.entities.datasetsByExperimentId[experimentId],\n    );\n\n    const updateDatasetsFilter = (summary: DatasetSummary) => {\n      const newDatasetsFilter = datasetsFilter.some((item) => datasetSummariesEqual(item, summary))\n        ? datasetsFilter.filter((item) => !datasetSummariesEqual(item, summary))\n        : [...datasetsFilter, summary];\n\n      setUrlSearchFacets({\n        datasetsFilter: newDatasetsFilter,\n      });\n    };\n\n    const hasDatasets = datasetSummaries !== undefined;\n\n    const searchFilterChange = (newSearchFilter: string) => {\n      setUrlSearchFacets({ searchFilter: newSearchFilter });\n    };\n\n    return (\n      <div\n        css={{\n          display: 'flex',\n          gap: theme.spacing.sm,\n          justifyContent: 'space-between',\n          [theme.responsive.mediaQueries.xs]: {\n            flexDirection: 'column',\n          },\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            gap: theme.spacing.sm,\n            alignItems: 'center',\n            flexWrap: 'wrap' as const,\n          }}\n        >\n          <SegmentedControlGroup\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsfilters.tsx_184\"\n            name=\"runs-view-mode\"\n            value={pageViewMode}\n            onChange={({ target }) => {\n              const { value } = target;\n              const newValue = value as ExperimentViewRunsCompareMode;\n\n              if (pageViewMode === newValue) {\n                return;\n              }\n\n              setViewModeInURL(newValue);\n            }}\n          >\n            <SegmentedControlButton\n              value=\"TABLE\"\n              icon={\n                <Tooltip\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsfilters.tsx_201\"\n                  content={intl.formatMessage({\n                    defaultMessage: 'Table view',\n                    description: 'Experiment page > control bar > table view toggle button tooltip',\n                  })}\n                >\n                  <ListIcon />\n                </Tooltip>\n              }\n            />\n            <SegmentedControlButton\n              value=\"CHART\"\n              icon={\n                <Tooltip\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsfilters.tsx_211\"\n                  content={intl.formatMessage({\n                    defaultMessage: 'Chart view',\n                    description: 'Experiment page > control bar > chart view toggle button tooltip',\n                  })}\n                >\n                  <ChartLineIcon />\n                </Tooltip>\n              }\n            />\n            <SegmentedControlButton\n              value=\"ARTIFACT\"\n              disabled={areRunsGrouped}\n              icon={\n                <Tooltip\n                  componentId=\"mlflow.experiment_page.mode.artifact\"\n                  content={\n                    areRunsGrouped\n                      ? intl.formatMessage({\n                          defaultMessage: 'Unavailable when runs are grouped',\n                          description: 'Experiment page > view mode switch > evaluation mode disabled tooltip',\n                        })\n                      : intl.formatMessage({\n                          defaultMessage: 'Artifact evaluation',\n                          description:\n                            'A tooltip for the view mode switcher in the experiment view, corresponding to artifact evaluation view',\n                        })\n                  }\n                >\n                  <TableIcon />\n                </Tooltip>\n              }\n            />\n          </SegmentedControlGroup>\n\n          <RunsSearchAutoComplete\n            runsData={runsData}\n            searchFilter={searchFilter}\n            onSearchFilterChange={searchFilterChange}\n            onClear={() => {\n              setUrlSearchFacets(createExperimentPageSearchFacetsState());\n            }}\n            requestError={requestError}\n          />\n\n          <DialogCombobox\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsfilters.tsx_217\"\n            label={currentStartTimeFilterLabel}\n            value={startTime !== 'ALL' ? [startTimeColumnLabels[startTime]] : []}\n          >\n            <DialogComboboxTrigger\n              allowClear={startTime !== 'ALL'}\n              onClear={() => {\n                setUrlSearchFacets({ startTime: 'ALL' });\n              }}\n              data-testid=\"start-time-select-dropdown\"\n            />\n            <DialogComboboxContent>\n              <DialogComboboxOptionList>\n                {Object.keys(startTimeColumnLabels).map((startTimeKey) => (\n                  <DialogComboboxOptionListSelectItem\n                    key={startTimeKey}\n                    checked={startTimeKey === startTime}\n                    title={startTimeColumnLabels[startTimeKey]}\n                    data-testid={`start-time-select-${startTimeKey}`}\n                    value={startTimeKey}\n                    onChange={() => {\n                      setUrlSearchFacets({ startTime: startTimeKey });\n                    }}\n                  >\n                    {startTimeColumnLabels[startTimeKey]}\n                  </DialogComboboxOptionListSelectItem>\n                ))}\n              </DialogComboboxOptionList>\n            </DialogComboboxContent>\n          </DialogCombobox>\n\n          <DialogCombobox\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsfilters.tsx_248\"\n            label={intl.formatMessage({\n              defaultMessage: 'State',\n              description: 'Filtering label to filter experiments based on state of active or deleted',\n            })}\n            value={[currentLifecycleFilterValue]}\n          >\n            <DialogComboboxTrigger allowClear={false} data-testid=\"lifecycle-filter\" />\n            <DialogComboboxContent>\n              <DialogComboboxOptionList>\n                <DialogComboboxOptionListSelectItem\n                  checked={lifecycleFilter === LIFECYCLE_FILTER.ACTIVE}\n                  key={LIFECYCLE_FILTER.ACTIVE}\n                  data-testid=\"active-runs-menu-item\"\n                  value={LIFECYCLE_FILTER.ACTIVE}\n                  onChange={() => {\n                    setUrlSearchFacets({ lifecycleFilter: LIFECYCLE_FILTER.ACTIVE });\n                  }}\n                >\n                  <FormattedMessage\n                    defaultMessage=\"Active\"\n                    description=\"Linked model dropdown option to show active experiment runs\"\n                  />\n                </DialogComboboxOptionListSelectItem>\n                <DialogComboboxOptionListSelectItem\n                  checked={lifecycleFilter === LIFECYCLE_FILTER.DELETED}\n                  key={LIFECYCLE_FILTER.DELETED}\n                  data-testid=\"deleted-runs-menu-item\"\n                  value={LIFECYCLE_FILTER.DELETED}\n                  onChange={() => {\n                    setUrlSearchFacets({ lifecycleFilter: LIFECYCLE_FILTER.DELETED });\n                  }}\n                >\n                  <FormattedMessage\n                    defaultMessage=\"Deleted\"\n                    description=\"Linked model dropdown option to show deleted experiment runs\"\n                  />\n                </DialogComboboxOptionListSelectItem>\n              </DialogComboboxOptionList>\n            </DialogComboboxContent>\n          </DialogCombobox>\n          <DialogCombobox\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsfilters.tsx_289\"\n            label={intl.formatMessage({\n              defaultMessage: 'Datasets',\n              description: 'Filtering label to filter runs based on datasets used',\n            })}\n            value={datasetsFilter.map((datasetSummary) => datasetSummary.name)}\n            multiSelect\n          >\n            <LegacyTooltip\n              title={\n                !hasDatasets && (\n                  <FormattedMessage\n                    defaultMessage=\"No datasets were recorded for this experiment's runs.\"\n                    description=\"Message to indicate that no datasets were recorded for this experiment's runs.\"\n                  />\n                )\n              }\n            >\n              <DialogComboboxTrigger\n                allowClear\n                onClear={() => setUrlSearchFacets({ datasetsFilter: [] })}\n                data-testid=\"datasets-select-dropdown\"\n                showTagAfterValueCount={1}\n                disabled={!hasDatasets}\n              />\n              {hasDatasets && (\n                <DialogComboboxContent maxHeight={600}>\n                  <DialogComboboxOptionList>\n                    <DialogComboboxOptionListSearch>\n                      {datasetSummaries.map((summary: DatasetSummary) => (\n                        <DialogComboboxOptionListCheckboxItem\n                          key={summary.name + summary.digest + summary.context}\n                          checked={datasetsFilter.some((item) => datasetSummariesEqual(item, summary))}\n                          title={summary.name}\n                          data-testid={`dataset-dropdown-${summary.name}`}\n                          value={summary.name}\n                          onChange={() => updateDatasetsFilter(summary)}\n                        >\n                          {summary.name} ({summary.digest}){' '}\n                          {summary.context && (\n                            <Tag\n                              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsfilters.tsx_329\"\n                              css={{ textTransform: 'capitalize', marginRight: theme.spacing.xs }}\n                            >\n                              {summary.context}\n                            </Tag>\n                          )}\n                        </DialogComboboxOptionListCheckboxItem>\n                      ))}\n                    </DialogComboboxOptionListSearch>\n                  </DialogComboboxOptionList>\n                </DialogComboboxContent>\n              )}\n            </LegacyTooltip>\n          </DialogCombobox>\n          {additionalControls}\n        </div>\n        <div\n          css={{\n            display: 'flex',\n            gap: theme.spacing.sm,\n            alignItems: 'flex-start',\n          }}\n        >\n          <DropdownMenu.Root modal={false}>\n            <DropdownMenu.Trigger asChild>\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsfilters.tsx_338\"\n                icon={<OverflowIcon />}\n                aria-label={intl.formatMessage({\n                  defaultMessage: 'More options',\n                  description: 'Experiment page > control bar > more options button accessible label',\n                })}\n              />\n            </DropdownMenu.Trigger>\n            <DropdownMenu.Content>\n              <DropdownMenu.Item\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsfilters.tsx_362\"\n                className=\"csv-button\"\n                onClick={onDownloadCsv}\n              >\n                <DropdownMenu.IconWrapper>\n                  <DownloadIcon />\n                </DropdownMenu.IconWrapper>\n                {`Download ${runsData.runInfos.length} runs`}\n              </DropdownMenu.Item>\n              <DropdownMenu.Separator />\n              <DropdownMenu.CheckboxItem\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsfilters.tsx_382\"\n                checked={hideEmptyCharts}\n                onClick={() =>\n                  updateUIState((state) => ({\n                    ...state,\n                    hideEmptyCharts: !state.hideEmptyCharts,\n                  }))\n                }\n              >\n                <DropdownMenu.ItemIndicator />\n                <FormattedMessage\n                  defaultMessage=\"Hide charts with no data\"\n                  description=\"Experiment page > control bar > label for a checkbox toggle button that hides chart cards with no corresponding data\"\n                />\n              </DropdownMenu.CheckboxItem>\n\n              <DropdownMenu.Separator />\n              <DropdownMenu.CheckboxItem\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsfilters.tsx_402\"\n                checked={autoRefreshEnabled}\n                onClick={() =>\n                  updateUIState((state) => ({\n                    ...state,\n                    autoRefreshEnabled: !state.autoRefreshEnabled,\n                  }))\n                }\n              >\n                <DropdownMenu.ItemIndicator />\n                <FormattedMessage\n                  defaultMessage=\"Auto-refresh\"\n                  description=\"String for the auto-refresh button that refreshes the runs list automatically\"\n                />\n              </DropdownMenu.CheckboxItem>\n            </DropdownMenu.Content>\n          </DropdownMenu.Root>\n\n          <CreateNotebookRunModal\n            isOpen={isCreateRunWithNotebookModalOpen}\n            closeModal={() => setCreateRunWithNotebookModalOpenValue(false)}\n            experimentId={experimentId}\n          />\n\n          {displaySidebarToggleButton && (\n            <LegacyTooltip\n              title={intl.formatMessage({\n                defaultMessage: 'Toggle the preview sidepane',\n                description: 'Experiment page > control bar > expanded view toggle button tooltip',\n              })}\n              useAsLabel\n            >\n              <ToggleIconButton\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsfilters.tsx_403\"\n                pressed={viewState.previewPaneVisible}\n                icon={<SidebarIcon />}\n                onClick={() => updateViewState({ previewPaneVisible: !viewState.previewPaneVisible })}\n              />\n            </LegacyTooltip>\n          )}\n          {/* TODO: Add tooltip to guide users to this button */}\n          {!isComparingExperiments && (\n            <DropdownMenu.Root>\n              <DropdownMenu.Trigger asChild>\n                <Button\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsfilters.tsx_415\"\n                  icon={<PlusIcon />}\n                >\n                  <FormattedMessage\n                    defaultMessage=\"New run\"\n                    description=\"Button used to pop up a modal to create a new run\"\n                  />\n                </Button>\n              </DropdownMenu.Trigger>\n              <DropdownMenu.Content>\n                {shouldEnablePromptLab() && (\n                  <DropdownMenu.Item\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsfilters.tsx_461\"\n                    onSelect={() => createNewRun()}\n                  >\n                    {' '}\n                    <FormattedMessage\n                      defaultMessage=\"using Prompt Engineering\"\n                      description=\"String for creating a new run with prompt engineering modal\"\n                    />\n                    <PreviewBadge />\n                  </DropdownMenu.Item>\n                )}\n                <DropdownMenu.Item\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsfilters.tsx_469\"\n                  onSelect={() => setCreateRunWithNotebookModalOpenValue(true)}\n                >\n                  {' '}\n                  <FormattedMessage\n                    defaultMessage=\"using Notebook\"\n                    description=\"String for creating a new run from a notebook\"\n                  />\n                </DropdownMenu.Item>\n              </DropdownMenu.Content>\n            </DropdownMenu.Root>\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n","import {\n  Button,\n  ChevronDownIcon,\n  ColumnsIcon,\n  Dropdown,\n  Input,\n  SearchIcon,\n  Tree,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Utils from '../../../../../common/utils/Utils';\nimport { ATTRIBUTE_COLUMN_LABELS, COLUMN_TYPES } from '../../../../constants';\nimport { useUpdateExperimentViewUIState } from '../../contexts/ExperimentPageUIStateContext';\nimport { useExperimentIds } from '../../hooks/useExperimentIds';\nimport type { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport {\n  extractCanonicalSortKey,\n  isCanonicalSortKeyOfType,\n  makeCanonicalSortKey,\n} from '../../utils/experimentPage.common-utils';\nimport type { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { customMetricBehaviorDefs } from '../../utils/customMetricBehaviorUtils';\n\n/**\n * We need to recreate antd's tree check callback signature since it's not importable\n */\ntype AntdTreeCheckCallback = { node: { key: string | number; checked: boolean } };\n\n/**\n * Function localizing antd tree inside a DOM element. Used to focusing by keyboard.\n */\nconst locateAntdTree = (parent: HTMLElement | null): HTMLElement | null =>\n  parent?.querySelector('[role=\"tree\"] input') || null;\n\nconst GROUP_KEY = 'GROUP';\n\nconst GROUP_KEY_ATTRIBUTES = makeCanonicalSortKey(GROUP_KEY, COLUMN_TYPES.ATTRIBUTES);\nconst GROUP_KEY_PARAMS = makeCanonicalSortKey(GROUP_KEY, COLUMN_TYPES.PARAMS);\nconst GROUP_KEY_METRICS = makeCanonicalSortKey(GROUP_KEY, COLUMN_TYPES.METRICS);\nconst GROUP_KEY_TAGS = makeCanonicalSortKey(GROUP_KEY, COLUMN_TYPES.TAGS);\n\n/**\n * Returns all usable attribute columns basing on view mode and enabled flagged features\n */\nconst getAttributeColumns = (isComparing: boolean) => {\n  const result = [\n    ATTRIBUTE_COLUMN_LABELS.USER,\n    ATTRIBUTE_COLUMN_LABELS.SOURCE,\n    ATTRIBUTE_COLUMN_LABELS.VERSION,\n    ATTRIBUTE_COLUMN_LABELS.MODELS,\n    ATTRIBUTE_COLUMN_LABELS.DESCRIPTION,\n  ];\n\n  if (isComparing) {\n    result.unshift(ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME);\n  }\n\n  result.unshift(ATTRIBUTE_COLUMN_LABELS.DATASET);\n\n  return result;\n};\n\n/**\n * Function filters list of string by a given query string.\n */\nconst findMatching = (values: string[], filterQuery: string) =>\n  values.filter((v) => v.toLowerCase().includes(filterQuery.toLowerCase()));\n\n/**\n * Function dissects given string and wraps the\n * searched query with <strong>...</strong> if found. Used for highlighting search.\n */\nconst createHighlightedNode = (value: string, filterQuery: string) => {\n  if (!filterQuery) {\n    return value;\n  }\n  const index = value.toLowerCase().indexOf(filterQuery.toLowerCase());\n  const beforeStr = value.substring(0, index);\n  const matchStr = value.substring(index, index + filterQuery.length);\n  const afterStr = value.substring(index + filterQuery.length);\n\n  return index > -1 ? (\n    <span>\n      {beforeStr}\n      <strong>{matchStr}</strong>\n      {afterStr}\n    </span>\n  ) : (\n    value\n  );\n};\nexport interface ExperimentViewRunsColumnSelectorProps {\n  runsData: ExperimentRunsSelectorResult;\n  columnSelectorVisible: boolean;\n  onChangeColumnSelectorVisible: (value: boolean) => void;\n  selectedColumns: string[];\n}\n\n/**\n * A component displaying the searchable column list - implementation.\n */\nexport const ExperimentViewRunsColumnSelector = React.memo(\n  ({\n    runsData,\n    columnSelectorVisible,\n    onChangeColumnSelectorVisible,\n    selectedColumns,\n  }: ExperimentViewRunsColumnSelectorProps) => {\n    const updateUIState = useUpdateExperimentViewUIState();\n    const experimentIds = useExperimentIds();\n    const [filter, setFilter] = useState('');\n    const { theme } = useDesignSystemTheme();\n\n    const searchInputRef = useRef<any>(null);\n    const scrollableContainerRef = useRef<HTMLDivElement>(null);\n    const buttonRef = useRef<HTMLButtonElement>(null);\n\n    // Extract all attribute columns\n    const attributeColumnNames = useMemo(() => getAttributeColumns(experimentIds.length > 1), [experimentIds.length]);\n\n    const setCheckedColumns = useCallback(\n      (updateFn: (existingCheckedColumns: string[]) => string[]) =>\n        updateUIState((facets: ExperimentPageUIState) => {\n          const newColumns = updateFn(facets.selectedColumns);\n          const uniqueNewColumns = Array.from(new Set(newColumns));\n          return { ...facets, selectedColumns: uniqueNewColumns };\n        }),\n      [updateUIState],\n    );\n\n    // Extract unique list of tags\n    const tagsKeyList = useMemo(() => Utils.getVisibleTagKeyList(runsData.tagsList), [runsData]);\n\n    // Extract canonical key names for attributes, params, metrics and tags.\n    const canonicalKeyNames = useMemo(\n      () => ({\n        [COLUMN_TYPES.ATTRIBUTES]: attributeColumnNames.map((key) =>\n          makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, key),\n        ),\n        [COLUMN_TYPES.PARAMS]: runsData.paramKeyList.map((key) => makeCanonicalSortKey(COLUMN_TYPES.PARAMS, key)),\n        [COLUMN_TYPES.METRICS]: runsData.metricKeyList.map((key) => makeCanonicalSortKey(COLUMN_TYPES.METRICS, key)),\n        [COLUMN_TYPES.TAGS]: tagsKeyList.map((key) => makeCanonicalSortKey(COLUMN_TYPES.TAGS, key)),\n      }),\n      [runsData, attributeColumnNames, tagsKeyList],\n    );\n\n    // This memoized value holds the tree structure generated from\n    // attributes, params, metrics and tags. Displays only filtered values.\n    const treeData = useMemo(() => {\n      const result = [];\n\n      const filteredAttributes = findMatching(attributeColumnNames, filter);\n      const filteredParams = findMatching(runsData.paramKeyList, filter);\n      const filteredMetrics = findMatching(runsData.metricKeyList, filter);\n      const filteredTags = findMatching(tagsKeyList, filter);\n\n      if (filteredAttributes.length) {\n        result.push({\n          key: GROUP_KEY_ATTRIBUTES,\n          title: `Attributes`,\n          children: filteredAttributes.map((attributeKey) => ({\n            key: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, attributeKey),\n            title: createHighlightedNode(attributeKey, filter),\n          })),\n        });\n      }\n      if (filteredMetrics.length) {\n        result.push({\n          key: GROUP_KEY_METRICS,\n          title: `Metrics (${filteredMetrics.length})`,\n          children: filteredMetrics.map((metricKey) => {\n            const customColumnDef = customMetricBehaviorDefs[metricKey];\n            return {\n              key: makeCanonicalSortKey(COLUMN_TYPES.METRICS, metricKey),\n              title: createHighlightedNode(customColumnDef?.displayName ?? metricKey, filter),\n            };\n          }),\n        });\n      }\n      if (filteredParams.length) {\n        result.push({\n          key: GROUP_KEY_PARAMS,\n          title: `Parameters (${filteredParams.length})`,\n          children: filteredParams.map((paramKey) => ({\n            key: makeCanonicalSortKey(COLUMN_TYPES.PARAMS, paramKey),\n            title: createHighlightedNode(paramKey, filter),\n          })),\n        });\n      }\n      if (filteredTags.length) {\n        result.push({\n          key: GROUP_KEY_TAGS,\n          title: `Tags (${filteredTags.length})`,\n          children: filteredTags.map((tagKey) => ({\n            key: makeCanonicalSortKey(COLUMN_TYPES.TAGS, tagKey),\n            title: tagKey,\n          })),\n        });\n      }\n\n      return result;\n    }, [attributeColumnNames, filter, runsData, tagsKeyList]);\n\n    // This callback toggles entire group of keys\n    const toggleGroup = useCallback(\n      (isChecked: boolean, keyList: string[]) => {\n        if (!isChecked) {\n          setCheckedColumns((checked) => [...checked, ...keyList]);\n        } else {\n          setCheckedColumns((checked) => checked.filter((k) => !keyList.includes(k)));\n        }\n      },\n      [setCheckedColumns],\n    );\n\n    // This callback is intended to select/deselect a single key\n    const toggleSingleKey = useCallback(\n      (key: string, isChecked: boolean) => {\n        if (!isChecked) {\n          setCheckedColumns((checked) => [...checked, key]);\n        } else {\n          setCheckedColumns((checked) => checked.filter((k) => k !== key));\n        }\n      },\n      [setCheckedColumns],\n    );\n\n    useEffect(() => {\n      if (columnSelectorVisible) {\n        setFilter('');\n\n        // Let's wait for the next execution frame, then:\n        // - restore the dropdown menu scroll position\n        // - focus the search input\n        // - bring the dropdown into the viewport using scrollIntoView()\n        requestAnimationFrame(() => {\n          scrollableContainerRef?.current?.scrollTo(0, 0);\n          searchInputRef.current?.focus({ preventScroll: true });\n\n          if (buttonRef.current) {\n            buttonRef.current.scrollIntoView({ block: 'nearest', behavior: 'smooth' });\n          }\n        });\n      }\n    }, [columnSelectorVisible]);\n\n    const onCheck = useCallback(\n      // We need to recreate antd's tree check callback signature\n      (_: any, { node: { key, checked } }: AntdTreeCheckCallback) => {\n        if (isCanonicalSortKeyOfType(key.toString(), GROUP_KEY)) {\n          const columnType = extractCanonicalSortKey(key.toString(), GROUP_KEY);\n          const canonicalKeysForGroup = canonicalKeyNames[columnType];\n          if (canonicalKeysForGroup) {\n            toggleGroup(checked, findMatching(canonicalKeysForGroup, filter));\n          }\n        } else {\n          toggleSingleKey(key.toString(), checked);\n        }\n      },\n      [canonicalKeyNames, toggleGroup, toggleSingleKey, filter],\n    );\n\n    // This callback moves focus to tree element if down arrow has been pressed\n    // when inside search input area.\n    const searchInputKeyDown = useCallback<React.KeyboardEventHandler<HTMLInputElement>>((e) => {\n      if (e.key === 'ArrowDown') {\n        const treeElement = locateAntdTree(scrollableContainerRef.current);\n\n        if (treeElement) {\n          treeElement.focus();\n        }\n      }\n    }, []);\n\n    // A JSX block containing the dropdown\n    const dropdownContent = (\n      <div\n        css={{\n          backgroundColor: theme.colors.backgroundPrimary,\n          width: 400,\n          border: `1px solid`,\n          borderColor: theme.colors.border,\n          [theme.responsive.mediaQueries.xs]: {\n            width: '100vw',\n          },\n        }}\n        onKeyDown={(e) => {\n          // Since we're controlling the visibility of the dropdown,\n          // we need to handle the escape key to close it.\n          if (e.key === 'Escape') {\n            onChangeColumnSelectorVisible(false);\n            buttonRef.current?.focus();\n          }\n        }}\n      >\n        <div css={(theme) => ({ padding: theme.spacing.md })}>\n          <Input\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscolumnselector.tsx_300\"\n            value={filter}\n            prefix={<SearchIcon />}\n            placeholder=\"Search columns\"\n            allowClear\n            ref={searchInputRef}\n            onChange={(e) => {\n              setFilter(e.target.value);\n            }}\n            onKeyDown={searchInputKeyDown}\n          />\n        </div>\n        <div\n          ref={scrollableContainerRef}\n          css={{\n            // Maximum height of 15 elements times 32 pixels as defined in\n            // design-system/src/design-system/Tree/Tree.tsx\n            maxHeight: 15 * 32,\n            overflowY: 'scroll',\n            overflowX: 'hidden',\n            paddingBottom: theme.spacing.md,\n            'span[title]': {\n              whiteSpace: 'nowrap',\n              textOverflow: 'ellipsis',\n              overflow: 'hidden',\n            },\n            [theme.responsive.mediaQueries.xs]: {\n              maxHeight: 'calc(100vh - 100px)',\n            },\n          }}\n        >\n          <Tree\n            data-testid=\"column-selector-tree\"\n            mode=\"checkable\"\n            dangerouslySetAntdProps={{\n              checkedKeys: selectedColumns,\n              onCheck,\n            }}\n            defaultExpandedKeys={[GROUP_KEY_ATTRIBUTES, GROUP_KEY_PARAMS, GROUP_KEY_METRICS, GROUP_KEY_TAGS]}\n            treeData={treeData}\n          />\n        </div>\n      </div>\n    );\n\n    return (\n      <Dropdown\n        overlay={dropdownContent}\n        placement=\"bottomLeft\"\n        trigger={['click']}\n        visible={columnSelectorVisible}\n        onVisibleChange={onChangeColumnSelectorVisible}\n      >\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscolumnselector.tsx_315\"\n          ref={buttonRef}\n          style={{ display: 'flex', alignItems: 'center' }}\n          data-testid=\"column-selection-dropdown\"\n          icon={<ColumnsIcon />}\n        >\n          <FormattedMessage\n            defaultMessage=\"Columns\"\n            description=\"Dropdown text to display columns names that could to be rendered for the experiment runs table\"\n          />{' '}\n          <ChevronDownIcon />\n        </Button>\n      </Dropdown>\n    );\n  },\n);\n","import { useIntl, defineMessages, FormattedMessage } from 'react-intl';\nimport {\n  Button,\n  ChevronDownIcon,\n  DropdownMenu,\n  GearIcon,\n  Input,\n  ListBorderIcon,\n  SearchIcon,\n  Spinner,\n  Tag,\n  LegacyTooltip,\n  XCircleFillIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { compact, isEmpty, isString, keys, uniq, values } from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { MLFLOW_INTERNAL_PREFIX } from '../../../../../common/utils/TagUtils';\nimport type { RunsGroupByConfig } from '../../utils/experimentPage.group-row-utils';\nimport { createRunsGroupByKey, isGroupedBy, normalizeRunsGroupByKey } from '../../utils/experimentPage.group-row-utils';\nimport type { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { RunGroupingAggregateFunction, RunGroupingMode } from '../../utils/experimentPage.row-types';\nimport { shouldEnableToggleIndividualRunsInGroups } from '../../../../../common/utils/FeatureUtils';\n\nexport interface ExperimentViewRunsGroupBySelectorProps {\n  runsData: ExperimentRunsSelectorResult;\n  groupBy: RunsGroupByConfig | null | string;\n  onChange: (newGroupByConfig: RunsGroupByConfig | null) => void;\n  useGroupedValuesInCharts?: boolean;\n  onUseGroupedValuesInChartsChange: (newValue: boolean) => void;\n}\n\nconst messages = defineMessages({\n  minimum: {\n    defaultMessage: 'Minimum',\n    description: 'Experiment page > group by runs control > minimum aggregate function',\n  },\n  maximum: {\n    defaultMessage: 'Maximum',\n    description: 'Experiment page > group by runs control > maximum aggregate function',\n  },\n  average: {\n    defaultMessage: 'Average',\n    description: 'Experiment page > group by runs control > average aggregate function',\n  },\n  attributes: {\n    defaultMessage: 'Attributes',\n    description: 'Experiment page > group by runs control > attributes section label',\n  },\n  tags: {\n    defaultMessage: 'Tags',\n    description: 'Experiment page > group by runs control > tags section label',\n  },\n  params: {\n    defaultMessage: 'Params',\n    description: 'Experiment page > group by runs control > params section label',\n  },\n  dataset: {\n    defaultMessage: 'Dataset',\n    description: 'Experiment page > group by runs control > group by dataset',\n  },\n  noParams: {\n    defaultMessage: 'No params',\n    description: 'Experiment page > group by runs control > no params to group by',\n  },\n  noTags: {\n    defaultMessage: 'No tags',\n    description: 'Experiment page > group by runs control > no tags to group by',\n  },\n  aggregationTooltip: {\n    defaultMessage: 'Aggregation: {value}',\n    description: 'Experiment page > group by runs control > current aggregation function tooltip',\n  },\n  noResults: {\n    defaultMessage: 'No results',\n    description: 'Experiment page > group by runs control > no results after filtering by search query',\n  },\n});\n\nconst GroupBySelectorBody = ({\n  runsData,\n  onChange,\n  groupBy,\n  useGroupedValuesInCharts,\n  onUseGroupedValuesInChartsChange,\n}: {\n  groupBy: RunsGroupByConfig;\n  useGroupedValuesInCharts?: boolean;\n  onChange: (newGroupBy: RunsGroupByConfig | null) => void;\n  onUseGroupedValuesInChartsChange: (newValue: boolean) => void;\n  runsData: ExperimentRunsSelectorResult;\n}) => {\n  const intl = useIntl();\n  const attributeElementRef = useRef<HTMLDivElement>(null);\n  const tagElementRef = useRef<HTMLDivElement>(null);\n  const paramElementRef = useRef<HTMLDivElement>(null);\n  const inputElementRef = useRef<any>(null);\n\n  const minimumLabel = intl.formatMessage(messages.minimum);\n  const maximumLabel = intl.formatMessage(messages.maximum);\n  const averageLabel = intl.formatMessage(messages.average);\n  const datasetLabel = intl.formatMessage(messages.dataset);\n\n  const tagNames = useMemo(\n    () =>\n      uniq(\n        values(runsData.tagsList).flatMap((runTags) =>\n          keys(runTags).filter((tagKey) => !tagKey.startsWith(MLFLOW_INTERNAL_PREFIX)),\n        ),\n      ),\n    [runsData.tagsList],\n  );\n  const { aggregateFunction = RunGroupingAggregateFunction.Average, groupByKeys = [] } = groupBy || {};\n\n  const currentAggregateFunctionLabel = {\n    min: minimumLabel,\n    max: maximumLabel,\n    average: averageLabel,\n  }[aggregateFunction];\n\n  const { theme } = useDesignSystemTheme();\n  const [filter, setFilter] = useState('');\n\n  // Autofocus won't work everywhere so let's focus input everytime the dropdown is opened\n  useEffect(() => {\n    requestAnimationFrame(() => {\n      inputElementRef.current.focus();\n    });\n  }, []);\n\n  const filteredTagNames = tagNames.filter((tag) => tag.toLowerCase().includes(filter.toLowerCase()));\n  const filteredParamNames = runsData.paramKeyList.filter((param) =>\n    param.toLowerCase().includes(filter.toLowerCase()),\n  );\n  const containsDatasets = useMemo(() => !isEmpty(compact(runsData.datasetsList)), [runsData.datasetsList]);\n  const attributesMatchFilter = containsDatasets && datasetLabel.toLowerCase().includes(filter.toLowerCase());\n\n  const hasAnyResults = filteredTagNames.length > 0 || filteredParamNames.length > 0 || attributesMatchFilter;\n\n  const groupByToggle = useCallback(\n    (mode: RunGroupingMode, groupByData: string, checked: boolean) => {\n      if (checked) {\n        // Scenario #1: user selected new grouping key\n        const newGroupByKeys = [...groupByKeys];\n\n        // If the key is already present, we should not add it again\n        if (!newGroupByKeys.some((key) => key.mode === mode && key.groupByData === groupByData)) {\n          newGroupByKeys.push({ mode, groupByData });\n        }\n\n        onChange({\n          aggregateFunction,\n          groupByKeys: newGroupByKeys,\n        });\n      } else {\n        // Scenario #2: user deselected a grouping key\n        const newGroupByKeys = groupByKeys.filter((key) => !(key.mode === mode && key.groupByData === groupByData));\n\n        // If no keys are left, we should reset the group by and set it to null\n        if (!newGroupByKeys.length) {\n          onChange(null);\n          return;\n        }\n        onChange({\n          aggregateFunction,\n          groupByKeys: newGroupByKeys,\n        });\n      }\n    },\n    [aggregateFunction, groupByKeys, onChange],\n  );\n\n  const aggregateFunctionChanged = (aggregateFunctionString: string) => {\n    if (values<string>(RunGroupingAggregateFunction).includes(aggregateFunctionString)) {\n      const newFunction = aggregateFunctionString as RunGroupingAggregateFunction;\n      const newGroupBy: RunsGroupByConfig = { ...groupBy, aggregateFunction: newFunction };\n      onChange(newGroupBy);\n    }\n  };\n\n  return (\n    <>\n      <div css={{ display: 'flex', gap: theme.spacing.xs, padding: theme.spacing.sm }}>\n        <Input\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsgroupbyselector.tsx_191\"\n          value={filter}\n          onChange={(e) => setFilter(e.target.value)}\n          prefix={<SearchIcon />}\n          placeholder=\"Search\"\n          autoFocus\n          ref={inputElementRef}\n          onKeyDown={(e) => {\n            if (e.key === 'ArrowDown' || e.key === 'Tab') {\n              const firstItem = attributeElementRef.current || tagElementRef.current || paramElementRef.current;\n              firstItem?.focus();\n              return;\n            }\n            if (e.key !== 'Escape') {\n              e.stopPropagation();\n            }\n          }}\n        />\n        <DropdownMenu.Root>\n          <LegacyTooltip\n            placement=\"right\"\n            title={\n              <FormattedMessage\n                {...messages.aggregationTooltip}\n                values={{\n                  value: currentAggregateFunctionLabel || aggregateFunction,\n                }}\n              />\n            }\n          >\n            <DropdownMenu.Trigger asChild>\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsgroupbyselector.tsx_168\"\n                icon={<GearIcon />}\n                css={{ minWidth: 32 }}\n                aria-label=\"Change aggregation function\"\n              />\n            </DropdownMenu.Trigger>\n          </LegacyTooltip>\n          <DropdownMenu.Content align=\"start\" side=\"right\">\n            {shouldEnableToggleIndividualRunsInGroups() && (\n              <>\n                <DropdownMenu.CheckboxItem\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsgroupbyselector.tsx_233\"\n                  disabled={!groupByKeys.length}\n                  checked={useGroupedValuesInCharts}\n                  onCheckedChange={onUseGroupedValuesInChartsChange}\n                >\n                  <DropdownMenu.ItemIndicator />\n                  Use grouping from the runs table in charts\n                </DropdownMenu.CheckboxItem>\n                <DropdownMenu.Separator />\n              </>\n            )}\n            <DropdownMenu.RadioGroup\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsgroupbyselector.tsx_244\"\n              value={aggregateFunction}\n              onValueChange={aggregateFunctionChanged}\n            >\n              <DropdownMenu.RadioItem\n                disabled={!groupByKeys.length}\n                value={RunGroupingAggregateFunction.Min}\n                key={RunGroupingAggregateFunction.Min}\n              >\n                <DropdownMenu.ItemIndicator />\n                {minimumLabel}\n              </DropdownMenu.RadioItem>\n              <DropdownMenu.RadioItem\n                disabled={!groupByKeys.length}\n                value={RunGroupingAggregateFunction.Max}\n                key={RunGroupingAggregateFunction.Max}\n              >\n                <DropdownMenu.ItemIndicator />\n                {maximumLabel}\n              </DropdownMenu.RadioItem>\n              <DropdownMenu.RadioItem\n                disabled={!groupByKeys.length}\n                value={RunGroupingAggregateFunction.Average}\n                key={RunGroupingAggregateFunction.Average}\n              >\n                <DropdownMenu.ItemIndicator />\n                {averageLabel}\n              </DropdownMenu.RadioItem>\n            </DropdownMenu.RadioGroup>\n          </DropdownMenu.Content>\n        </DropdownMenu.Root>\n      </div>\n      <DropdownMenu.Group css={{ maxHeight: 400, overflowY: 'scroll' }}>\n        {attributesMatchFilter && (\n          <>\n            <DropdownMenu.Label>\n              <FormattedMessage {...messages.attributes} />\n            </DropdownMenu.Label>\n            {datasetLabel.toLowerCase().includes(filter.toLowerCase()) && (\n              <DropdownMenu.CheckboxItem\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsgroupbyselector.tsx_280\"\n                checked={isGroupedBy(groupBy, RunGroupingMode.Dataset, 'dataset')}\n                key={createRunsGroupByKey(RunGroupingMode.Dataset, 'dataset', aggregateFunction)}\n                ref={attributeElementRef}\n                onCheckedChange={(checked) => groupByToggle(RunGroupingMode.Dataset, 'dataset', checked)}\n              >\n                <DropdownMenu.ItemIndicator />\n                {datasetLabel}\n              </DropdownMenu.CheckboxItem>\n            )}\n            <DropdownMenu.Separator />\n          </>\n        )}\n        {filteredTagNames.length > 0 && (\n          <>\n            <DropdownMenu.Label>\n              <FormattedMessage {...messages.tags} />\n            </DropdownMenu.Label>\n\n            {filteredTagNames.map((tagName, index) => {\n              const groupByKey = createRunsGroupByKey(RunGroupingMode.Tag, tagName, aggregateFunction);\n              return (\n                <DropdownMenu.CheckboxItem\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsgroupbyselector.tsx_302\"\n                  checked={isGroupedBy(groupBy, RunGroupingMode.Tag, tagName)}\n                  key={groupByKey}\n                  ref={index === 0 ? tagElementRef : undefined}\n                  onCheckedChange={(checked) => groupByToggle(RunGroupingMode.Tag, tagName, checked)}\n                >\n                  <DropdownMenu.ItemIndicator />\n                  {tagName}\n                </DropdownMenu.CheckboxItem>\n              );\n            })}\n            {!tagNames.length && (\n              <DropdownMenu.Item\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsgroupbyselector.tsx_314\"\n                disabled\n              >\n                <DropdownMenu.ItemIndicator /> <FormattedMessage {...messages.noTags} />\n              </DropdownMenu.Item>\n            )}\n            <DropdownMenu.Separator />\n          </>\n        )}\n        {filteredParamNames.length > 0 && (\n          <>\n            <DropdownMenu.Label>\n              <FormattedMessage {...messages.params} />\n            </DropdownMenu.Label>\n\n            {filteredParamNames.map((paramName, index) => {\n              const groupByKey = createRunsGroupByKey(RunGroupingMode.Param, paramName, aggregateFunction);\n              return (\n                <DropdownMenu.CheckboxItem\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsgroupbyselector.tsx_330\"\n                  checked={isGroupedBy(groupBy, RunGroupingMode.Param, paramName)}\n                  key={groupByKey}\n                  ref={index === 0 ? paramElementRef : undefined}\n                  onCheckedChange={(checked) => groupByToggle(RunGroupingMode.Param, paramName, checked)}\n                >\n                  <DropdownMenu.ItemIndicator />\n                  {paramName}\n                </DropdownMenu.CheckboxItem>\n              );\n            })}\n            {!runsData.paramKeyList.length && (\n              <DropdownMenu.Item\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsgroupbyselector.tsx_342\"\n                disabled\n              >\n                <FormattedMessage {...messages.noParams} />\n              </DropdownMenu.Item>\n            )}\n          </>\n        )}\n        {!hasAnyResults && (\n          <DropdownMenu.Item\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsgroupbyselector.tsx_349\"\n            disabled\n          >\n            <FormattedMessage {...messages.noResults} />\n          </DropdownMenu.Item>\n        )}\n      </DropdownMenu.Group>\n    </>\n  );\n};\n\n/**\n * A component displaying searchable \"group by\" selector\n */\nexport const ExperimentViewRunsGroupBySelector = React.memo(\n  ({\n    runsData,\n    groupBy,\n    isLoading,\n    onChange,\n    useGroupedValuesInCharts,\n    onUseGroupedValuesInChartsChange,\n  }: ExperimentViewRunsGroupBySelectorProps & {\n    isLoading: boolean;\n  }) => {\n    const { theme } = useDesignSystemTheme();\n\n    // In case we encounter deprecated string-based group by descriptor\n    const normalizedGroupBy = normalizeRunsGroupByKey(groupBy) || {\n      aggregateFunction: RunGroupingAggregateFunction.Average,\n      groupByKeys: [],\n    };\n\n    const isGroupedBy = normalizedGroupBy && !isEmpty(normalizedGroupBy.groupByKeys);\n\n    return (\n      <DropdownMenu.Root modal={false}>\n        <DropdownMenu.Trigger asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsgroupbyselector.tsx_306\"\n            icon={<ListBorderIcon />}\n            style={{ display: 'flex', alignItems: 'center' }}\n            data-testid=\"column-selection-dropdown\"\n            endIcon={<ChevronDownIcon />}\n          >\n            {isGroupedBy ? (\n              <FormattedMessage\n                defaultMessage=\"Group by: {value}\"\n                description=\"Experiment page > group by runs control > trigger button label > with value\"\n                values={{\n                  value: normalizedGroupBy.groupByKeys[0].groupByData,\n                  // value: mode === RunGroupingMode.Dataset ? intl.formatMessage(messages.dataset) : groupByData,\n                }}\n              />\n            ) : (\n              <FormattedMessage\n                defaultMessage=\"Group by\"\n                description=\"Experiment page > group by runs control > trigger button label > empty\"\n              />\n            )}\n            {normalizedGroupBy.groupByKeys.length > 1 && (\n              <Tag\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsgroupbyselector.tsx_426\"\n                css={{ marginLeft: 4, marginRight: 0 }}\n              >\n                +{normalizedGroupBy.groupByKeys.length - 1}\n              </Tag>\n            )}\n            {groupBy && (\n              <XCircleFillIcon\n                aria-hidden=\"false\"\n                css={{\n                  color: theme.colors.textPlaceholder,\n                  fontSize: theme.typography.fontSizeSm,\n                  marginLeft: theme.spacing.sm,\n\n                  ':hover': {\n                    color: theme.colors.actionTertiaryTextHover,\n                  },\n                }}\n                role=\"button\"\n                onClick={() => {\n                  onChange(null);\n                }}\n                onPointerDownCapture={(e) => {\n                  // Prevents the dropdown from opening when clearing\n                  e.stopPropagation();\n                }}\n              />\n            )}\n          </Button>\n        </DropdownMenu.Trigger>\n        <DropdownMenu.Content>\n          {isLoading ? (\n            <DropdownMenu.Item componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsgroupbyselector.tsx_436\">\n              <Spinner />\n            </DropdownMenu.Item>\n          ) : (\n            <GroupBySelectorBody\n              groupBy={normalizedGroupBy}\n              onChange={onChange}\n              runsData={runsData}\n              onUseGroupedValuesInChartsChange={onUseGroupedValuesInChartsChange}\n              useGroupedValuesInCharts={useGroupedValuesInCharts}\n            />\n          )}\n        </DropdownMenu.Content>\n      </DropdownMenu.Root>\n    );\n  },\n);\n","import {\n  ArrowDownIcon,\n  ArrowUpIcon,\n  SortAscendingIcon,\n  SortDescendingIcon,\n  Input,\n  SearchIcon,\n  useDesignSystemTheme,\n  DropdownMenu,\n  Button,\n  ChevronDownIcon,\n} from '@databricks/design-system';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { middleTruncateStr } from '../../../../../common/utils/StringUtils';\nimport { ATTRIBUTE_COLUMN_SORT_KEY, ATTRIBUTE_COLUMN_SORT_LABEL, COLUMN_TYPES } from '../../../../constants';\nimport { useUpdateExperimentPageSearchFacets } from '../../hooks/useExperimentPageSearchFacets';\nimport { useUpdateExperimentViewUIState } from '../../contexts/ExperimentPageUIStateContext';\nimport { ToggleIconButton } from '../../../../../common/components/ToggleIconButton';\nimport { makeCanonicalSortKey } from '../../utils/experimentPage.common-utils';\nimport { customMetricBehaviorDefs } from '../../utils/customMetricBehaviorUtils';\n\ntype SORT_KEY_TYPE = keyof (typeof ATTRIBUTE_COLUMN_SORT_KEY & typeof ATTRIBUTE_COLUMN_SORT_LABEL);\n\nconst ExperimentViewRunsSortSelectorV2Body = ({\n  sortOptions,\n  orderByKey,\n  orderByAsc,\n  onOptionSelected,\n}: {\n  sortOptions: {\n    label: string;\n    value: string;\n  }[];\n  orderByKey: string;\n  orderByAsc: boolean;\n  onOptionSelected: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const setUrlSearchFacets = useUpdateExperimentPageSearchFacets();\n  const updateUIState = useUpdateExperimentViewUIState();\n  const inputElementRef = useRef<React.ComponentRef<typeof Input>>(null);\n  const [filter, setFilter] = useState('');\n  const firstElementRef = useRef<HTMLDivElement>(null);\n\n  // Merge all sort options and filter them by the search query\n  const filteredSortOptions = useMemo(\n    () =>\n      sortOptions.filter((option) => {\n        return option.label.toLowerCase().includes(filter.toLowerCase());\n      }),\n    [sortOptions, filter],\n  );\n\n  const handleChange = (orderByKey: string) => {\n    setUrlSearchFacets({\n      orderByKey,\n    });\n\n    updateUIState((currentUIState) => {\n      if (!currentUIState.selectedColumns.includes(orderByKey)) {\n        return {\n          ...currentUIState,\n          selectedColumns: [...currentUIState.selectedColumns, orderByKey],\n        };\n      }\n      return currentUIState;\n    });\n\n    onOptionSelected();\n  };\n  const setOrder = (ascending: boolean) => {\n    setUrlSearchFacets({\n      orderByAsc: ascending,\n    });\n    onOptionSelected();\n  };\n\n  // Autofocus won't work everywhere so let's focus input everytime the dropdown is opened\n  useEffect(() => {\n    requestAnimationFrame(() => {\n      inputElementRef.current?.focus();\n    });\n  }, []);\n\n  return (\n    <>\n      <div\n        css={{\n          padding: `${theme.spacing.sm}px ${theme.spacing.lg / 2}px ${theme.spacing.sm}px`,\n          width: '100%',\n          display: 'flex',\n          gap: theme.spacing.xs,\n        }}\n      >\n        <Input\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunssortselectorv2.tsx_97\"\n          prefix={<SearchIcon />}\n          value={filter}\n          type=\"search\"\n          onChange={(e) => setFilter(e.target.value)}\n          placeholder=\"Search\"\n          autoFocus\n          ref={inputElementRef}\n          onKeyDown={(e) => {\n            if (e.key === 'ArrowDown' || e.key === 'Tab') {\n              firstElementRef.current?.focus();\n              return;\n            }\n            e.stopPropagation();\n          }}\n        />\n        <div\n          css={{\n            display: 'flex',\n            gap: theme.spacing.xs,\n          }}\n        >\n          <ToggleIconButton\n            pressed={!orderByAsc}\n            icon={<ArrowDownIcon />}\n            componentId=\"mlflow.experiment_page.sort_select_v2.sort_desc\"\n            onClick={() => setOrder(false)}\n            aria-label=\"Sort descending\"\n            data-testid=\"sort-select-desc\"\n          />\n          <ToggleIconButton\n            pressed={orderByAsc}\n            icon={<ArrowUpIcon />}\n            componentId=\"mlflow.experiment_page.sort_select_v2.sort_asc\"\n            onClick={() => setOrder(true)}\n            aria-label=\"Sort ascending\"\n            data-testid=\"sort-select-asc\"\n          />\n        </div>\n      </div>\n      <DropdownMenu.Group css={{ maxHeight: 400, overflowY: 'auto' }}>\n        {filteredSortOptions.map((sortOption, index) => (\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunssortselectorv2.tsx_137\"\n            key={sortOption.value}\n            onClick={() => handleChange(sortOption.value)}\n            checked={sortOption.value === orderByKey}\n            data-testid={`sort-select-${sortOption.label}`}\n            ref={index === 0 ? firstElementRef : undefined}\n          >\n            <DropdownMenu.ItemIndicator />\n            <span css={{ display: 'flex', alignItems: 'center', gap: 4 }}>\n              {middleTruncateStr(sortOption.label, 50)}\n            </span>\n          </DropdownMenu.CheckboxItem>\n        ))}\n        {!filteredSortOptions.length && (\n          <DropdownMenu.Item\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunssortselectorv2.tsx_151\"\n            disabled\n          >\n            <FormattedMessage\n              defaultMessage=\"No results\"\n              description=\"Experiment page > sort selector > no results after filtering by search query\"\n            />\n          </DropdownMenu.Item>\n        )}\n      </DropdownMenu.Group>\n    </>\n  );\n};\n\nexport const ExperimentViewRunsSortSelectorV2 = React.memo(\n  ({\n    metricKeys,\n    paramKeys,\n    orderByAsc,\n    orderByKey,\n  }: {\n    orderByKey: string;\n    orderByAsc: boolean;\n    metricKeys: string[];\n    paramKeys: string[];\n  }) => {\n    const intl = useIntl();\n    const [open, setOpen] = useState(false);\n    const { theme } = useDesignSystemTheme();\n\n    // Get sort options for attributes (e.g. start time, run name, etc.)\n    const attributeSortOptions = useMemo(\n      () =>\n        Object.keys(ATTRIBUTE_COLUMN_SORT_LABEL).map((sortLabelKey) => ({\n          label: ATTRIBUTE_COLUMN_SORT_LABEL[sortLabelKey as SORT_KEY_TYPE],\n          value: ATTRIBUTE_COLUMN_SORT_KEY[sortLabelKey as SORT_KEY_TYPE],\n        })),\n      [],\n    );\n\n    // Get sort options for metrics\n    const metricsSortOptions = useMemo(\n      () =>\n        metricKeys.map((sortLabelKey) => {\n          const canonicalSortKey = makeCanonicalSortKey(COLUMN_TYPES.METRICS, sortLabelKey);\n          const displayName = customMetricBehaviorDefs[sortLabelKey]?.displayName ?? sortLabelKey;\n          return {\n            label: displayName,\n            value: canonicalSortKey,\n          };\n        }),\n      [\n        // A list of metric key names that need to be turned into canonical sort keys\n        metricKeys,\n      ],\n    );\n\n    // Get sort options for params\n    const paramsSortOptions = useMemo(\n      () =>\n        paramKeys.map((sortLabelKey) => ({\n          label: sortLabelKey,\n          value: `${makeCanonicalSortKey(COLUMN_TYPES.PARAMS, sortLabelKey)}`,\n        })),\n      [paramKeys],\n    );\n\n    const sortOptions = useMemo(\n      () => [...attributeSortOptions, ...metricsSortOptions, ...paramsSortOptions],\n      [attributeSortOptions, metricsSortOptions, paramsSortOptions],\n    );\n\n    // Generate the label for the sort select dropdown\n    const currentSortSelectLabel = useMemo(() => {\n      // Search through all sort options generated basing on the fetched runs\n      const sortOption = sortOptions.find((option) => option.value === orderByKey);\n\n      let sortOptionLabel = sortOption?.label;\n\n      // If the actually chosen sort value is not found in the sort option list (e.g. because the list of fetched runs is empty),\n      // use it to generate the label\n      if (!sortOptionLabel) {\n        // The following regex extracts plain sort key name from its canonical form, i.e.\n        // metrics.`metric_key_name` => metric_key_name\n        const extractedKeyName = orderByKey.match(/^.+\\.`(.+)`$/);\n        if (extractedKeyName) {\n          // eslint-disable-next-line prefer-destructuring\n          sortOptionLabel = extractedKeyName[1];\n        }\n      }\n      return `${intl.formatMessage({\n        defaultMessage: 'Sort',\n        description: 'Experiment page > sort selector > label for the dropdown button',\n      })}: ${sortOptionLabel}`;\n    }, [sortOptions, intl, orderByKey]);\n\n    return (\n      <DropdownMenu.Root open={open} onOpenChange={setOpen} modal={false}>\n        <DropdownMenu.Trigger data-testid=\"sort-select-dropdown\" asChild>\n          <Button\n            componentId=\"mlflow.experiment_page.sort_select_v2.toggle\"\n            icon={orderByAsc ? <SortAscendingIcon /> : <SortDescendingIcon />}\n            css={{ minWidth: 32 }}\n            aria-label={currentSortSelectLabel}\n            endIcon={<ChevronDownIcon />}\n          >\n            {currentSortSelectLabel}\n          </Button>\n        </DropdownMenu.Trigger>\n        <DropdownMenu.Content minWidth={250}>\n          <ExperimentViewRunsSortSelectorV2Body\n            sortOptions={sortOptions}\n            orderByKey={orderByKey}\n            orderByAsc={orderByAsc}\n            onOptionSelected={() => setOpen(false)}\n          />\n        </DropdownMenu.Content>\n      </DropdownMenu.Root>\n    );\n  },\n);\n","import React, { useCallback, useMemo } from 'react';\nimport type { UpdateExperimentViewStateFn } from '../../../../types';\nimport { useRunSortOptions } from '../../hooks/useRunSortOptions';\nimport type { ExperimentPageViewState } from '../../models/ExperimentPageViewState';\nimport type { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { ExperimentViewRunsControlsActions } from './ExperimentViewRunsControlsActions';\nimport { ExperimentViewRunsControlsFilters } from './ExperimentViewRunsControlsFilters';\nimport type { ErrorWrapper } from '../../../../../common/utils/ErrorWrapper';\nimport { ToggleButton, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentViewRunsColumnSelector } from './ExperimentViewRunsColumnSelector';\nimport { useExperimentPageViewMode } from '../../hooks/useExperimentPageViewMode';\nimport Utils from '../../../../../common/utils/Utils';\nimport { downloadRunsCsv } from '../../utils/experimentPage.common-utils';\nimport type { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport { ExperimentViewRunsGroupBySelector } from './ExperimentViewRunsGroupBySelector';\nimport { useUpdateExperimentViewUIState } from '../../contexts/ExperimentPageUIStateContext';\nimport type { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { ExperimentViewRunsSortSelectorV2 } from './ExperimentViewRunsSortSelectorV2';\n\ntype ExperimentViewRunsControlsProps = {\n  viewState: ExperimentPageViewState;\n  updateViewState: UpdateExperimentViewStateFn;\n\n  searchFacetsState: ExperimentPageSearchFacetsState;\n\n  experimentId: string;\n\n  runsData: ExperimentRunsSelectorResult;\n\n  expandRows: boolean;\n  updateExpandRows: (expandRows: boolean) => void;\n\n  requestError: ErrorWrapper | Error | null;\n\n  refreshRuns: () => void;\n  uiState: ExperimentPageUIState;\n  isLoading: boolean;\n  isComparingExperiments: boolean;\n};\n\n/**\n * This component houses all controls related to searching runs: sort controls,\n * filters and run related actions (delete, restore, download CSV).\n */\nexport const ExperimentViewRunsControls = React.memo(\n  ({\n    runsData,\n    viewState,\n    updateViewState,\n    searchFacetsState,\n    experimentId,\n    requestError,\n    expandRows,\n    updateExpandRows,\n    refreshRuns,\n    uiState,\n    isLoading,\n    isComparingExperiments,\n  }: ExperimentViewRunsControlsProps) => {\n    const [compareRunsMode, setCompareRunsMode] = useExperimentPageViewMode();\n\n    const { paramKeyList, metricKeyList, tagsList } = runsData;\n    const { orderByAsc, orderByKey } = searchFacetsState;\n\n    const updateUIState = useUpdateExperimentViewUIState();\n\n    const isComparingRuns = compareRunsMode !== 'TABLE';\n    const isEvaluationMode = compareRunsMode === 'ARTIFACT';\n\n    const { theme } = useDesignSystemTheme();\n\n    const filteredParamKeys = paramKeyList;\n    const filteredMetricKeys = metricKeyList;\n    const filteredTagKeys = Utils.getVisibleTagKeyList(tagsList);\n\n    const onDownloadCsv = useCallback(\n      () => downloadRunsCsv(runsData, filteredTagKeys, filteredParamKeys, filteredMetricKeys),\n      [filteredMetricKeys, filteredParamKeys, filteredTagKeys, runsData],\n    );\n\n    const sortOptions = useRunSortOptions(filteredMetricKeys, filteredParamKeys);\n\n    const selectedRunsCount = Object.values(viewState.runsSelected).filter(Boolean).length;\n    const canRestoreRuns = selectedRunsCount > 0;\n    const canRenameRuns = selectedRunsCount === 1;\n    const canCompareRuns = selectedRunsCount > 1;\n    const showActionButtons = canCompareRuns || canRenameRuns || canRestoreRuns;\n\n    const showGroupBySelector = !isEvaluationMode;\n\n    // Shows or hides the column selector\n    const changeColumnSelectorVisible = useCallback(\n      (value: boolean) => updateViewState({ columnSelectorVisible: value }),\n      [updateViewState],\n    );\n\n    const toggleExpandedRows = useCallback(() => updateExpandRows(!expandRows), [expandRows, updateExpandRows]);\n\n    const multipleDatasetsArePresent = useMemo(\n      () => runsData.datasetsList.some((datasetsInRun) => datasetsInRun?.length > 1),\n      [runsData],\n    );\n\n    return (\n      <div\n        css={{\n          display: 'flex',\n          gap: theme.spacing.sm,\n          flexDirection: 'column' as const,\n          marginBottom: theme.spacing.sm,\n        }}\n      >\n        {showActionButtons && (\n          <ExperimentViewRunsControlsActions\n            runsData={runsData}\n            searchFacetsState={searchFacetsState}\n            viewState={viewState}\n            refreshRuns={refreshRuns}\n          />\n        )}\n\n        {!showActionButtons && (\n          <ExperimentViewRunsControlsFilters\n            onDownloadCsv={onDownloadCsv}\n            searchFacetsState={searchFacetsState}\n            experimentId={experimentId}\n            viewState={viewState}\n            updateViewState={updateViewState}\n            runsData={runsData}\n            requestError={requestError}\n            refreshRuns={refreshRuns}\n            viewMaximized={uiState.viewMaximized}\n            autoRefreshEnabled={uiState.autoRefreshEnabled}\n            hideEmptyCharts={uiState.hideEmptyCharts}\n            areRunsGrouped={Boolean(uiState.groupBy)}\n            additionalControls={\n              <>\n                <ExperimentViewRunsSortSelectorV2\n                  orderByAsc={orderByAsc}\n                  orderByKey={orderByKey}\n                  metricKeys={filteredMetricKeys}\n                  paramKeys={filteredParamKeys}\n                />\n\n                {!isComparingRuns && (\n                  <ExperimentViewRunsColumnSelector\n                    columnSelectorVisible={viewState.columnSelectorVisible}\n                    onChangeColumnSelectorVisible={changeColumnSelectorVisible}\n                    runsData={runsData}\n                    selectedColumns={uiState.selectedColumns}\n                  />\n                )}\n\n                {!isComparingRuns && multipleDatasetsArePresent && (\n                  <ToggleButton\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrols.tsx_175\"\n                    onClick={toggleExpandedRows}\n                  >\n                    <FormattedMessage\n                      defaultMessage=\"Expand rows\"\n                      description=\"Label for the expand rows button above the experiment runs table\"\n                    />\n                  </ToggleButton>\n                )}\n                {showGroupBySelector && (\n                  <ExperimentViewRunsGroupBySelector\n                    groupBy={uiState.groupBy}\n                    onChange={(groupBy) => {\n                      updateUIState((state) => ({ ...state, groupBy }));\n                    }}\n                    runsData={runsData}\n                    isLoading={isLoading}\n                    useGroupedValuesInCharts={uiState.useGroupedValuesInCharts ?? true}\n                    onUseGroupedValuesInChartsChange={(useGroupedValuesInCharts) => {\n                      updateUIState((state) => ({ ...state, useGroupedValuesInCharts }));\n                    }}\n                  />\n                )}\n              </>\n            }\n          />\n        )}\n      </div>\n    );\n  },\n);\n","import { useMemo } from 'react';\nimport {\n  ATTRIBUTE_COLUMN_SORT_KEY,\n  ATTRIBUTE_COLUMN_SORT_LABEL,\n  COLUMN_SORT_BY_ASC,\n  COLUMN_SORT_BY_DESC,\n  COLUMN_TYPES,\n  SORT_DELIMITER_SYMBOL,\n} from '../../../constants';\nimport { makeCanonicalSortKey } from '../utils/experimentPage.common-utils';\n\nexport type ExperimentRunSortOption = {\n  label: string;\n  order: string;\n  value: string;\n};\n\ntype SORT_KEY_TYPE = keyof (typeof ATTRIBUTE_COLUMN_SORT_KEY & typeof ATTRIBUTE_COLUMN_SORT_LABEL);\n\n/**\n * This hook creates a set of run+sort options basing on currently selected\n * columns and the list of all metrics and keys.\n */\nexport const useRunSortOptions = (\n  filteredMetricKeys: string[],\n  filteredParamKeys: string[],\n): ExperimentRunSortOption[] =>\n  useMemo(() => {\n    let sortOptions = [];\n    const ColumnSortByOrder = [COLUMN_SORT_BY_ASC, COLUMN_SORT_BY_DESC];\n    const attributesSortBy = Object.keys(ATTRIBUTE_COLUMN_SORT_LABEL).reduce<any[]>((options, sortLabelKey) => {\n      const sortLabel = ATTRIBUTE_COLUMN_SORT_LABEL[sortLabelKey as SORT_KEY_TYPE];\n\n      ColumnSortByOrder.forEach((order) => {\n        options.push({\n          label: sortLabel,\n          value: ATTRIBUTE_COLUMN_SORT_KEY[sortLabelKey as SORT_KEY_TYPE] + SORT_DELIMITER_SYMBOL + order,\n          order,\n        });\n      });\n\n      return options;\n    }, []);\n    const metricsSortBy = filteredMetricKeys.reduce<any[]>((options, sortLabelKey) => {\n      ColumnSortByOrder.forEach((order) => {\n        options.push({\n          label: sortLabelKey,\n          value: `${makeCanonicalSortKey(COLUMN_TYPES.METRICS, sortLabelKey)}${SORT_DELIMITER_SYMBOL}${order}`,\n          order,\n        });\n      });\n\n      return options;\n    }, []);\n    const paramsSortBy = filteredParamKeys.reduce<any[]>((options, sortLabelKey) => {\n      ColumnSortByOrder.forEach((order) => {\n        options.push({\n          label: sortLabelKey,\n          value: `${makeCanonicalSortKey(COLUMN_TYPES.PARAMS, sortLabelKey)}${SORT_DELIMITER_SYMBOL}${order}`,\n          order,\n        });\n      });\n\n      return options;\n    }, []);\n    sortOptions = [...attributesSortBy, ...metricsSortBy, ...paramsSortBy];\n\n    return sortOptions;\n  }, [filteredMetricKeys, filteredParamKeys]);\n","/**\n * Defines non-persistable, local state that\n * controls visibility of various UI elements in the\n * runs table and controls\n */\nexport class ExperimentPageViewState {\n  /**\n   * Currently selected runs\n   */\n  runsSelected: Record<string, boolean> = {};\n\n  /**\n   * Currently hidden, selected child runs\n   */\n  hiddenChildRunsSelected: Record<string, boolean> = {};\n\n  /**\n   * Display \"select columns\" dropdown\n   */\n  columnSelectorVisible = false;\n\n  /**\n   * Display \"select columns\" dropdown\n   */\n  previewPaneVisible = false;\n\n  /**\n   * Persists controls state in the evaluation artifact compare mode\n   */\n  artifactViewState: {\n    selectedTables?: string[];\n    groupByCols?: string[];\n    outputColumn?: string;\n    intersectingOnly?: boolean;\n  } = {\n    selectedTables: [],\n    groupByCols: [],\n    outputColumn: '',\n    intersectingOnly: false,\n  };\n}\n","import type { NotificationInstance } from '@databricks/design-system';\nimport { useCallback } from 'react';\nimport { useIntl } from 'react-intl';\nimport type { RunEntity, RunInfoEntity } from '../../../types';\nimport { EXPERIMENT_PARENT_ID_TAG } from '../utils/experimentPage.common-utils';\n\nconst FETCHED_RUN_NOTIFICATION_DURATION = 3; // Seconds\nconst FETCHED_RUN_NOTIFICATION_KEY = 'FETCHED_RUN_NOTIFICATION_KEY';\n\nconst countFetchedRuns = (fetchedRuns: RunEntity[], existingRunInfos: RunInfoEntity[] = []) => {\n  // Extract only runs that are not loaded yet\n  const newRuns = fetchedRuns.filter((r) => !existingRunInfos.some((x) => x.runUuid === r.info.runUuid));\n\n  // Next, extract runs containing non-empty \"parentRunId\" tag\n  const runsWithParent = newRuns.filter((run: any) => {\n    const runTagsList = run?.data?.tags;\n    return (\n      Array.isArray(runTagsList) &&\n      runTagsList.some((tag) => tag.key === EXPERIMENT_PARENT_ID_TAG && Boolean(tag.value))\n    );\n  });\n\n  // Return counts of both all runs and those with parent\n  return {\n    allRuns: newRuns.length,\n    childRuns: runsWithParent.length,\n  };\n};\n\nexport const useFetchedRunsNotification = (notification: NotificationInstance) => {\n  const { formatMessage } = useIntl();\n\n  // Creates the localized message based on the returned run count\n  const getMessage = useCallback(\n    (allRuns: number, childRuns: number) => {\n      // Returned when only child runs are loaded\n      if (allRuns === childRuns) {\n        return formatMessage(\n          {\n            defaultMessage: 'Loaded {childRuns} child {childRuns, plural, =1 {run} other {runs}}',\n            description: 'Experiment page > loaded more runs notification > loaded only child runs',\n          },\n          { childRuns: childRuns },\n        );\n      }\n\n      // Returned when we fetch both regular (parent) and child runs\n      return formatMessage(\n        {\n          defaultMessage:\n            // eslint-disable-next-line formatjs/no-multiple-plurals\n            'Loaded {allRuns} {allRuns, plural, =1 {run} other {runs}}, including {childRuns} child {childRuns, plural, =1 {run} other {runs}}',\n          description: 'Experiment page > loaded more runs notification > loaded both parent and child runs',\n        },\n        { allRuns, childRuns: childRuns },\n      );\n    },\n    [formatMessage],\n  );\n\n  return useCallback(\n    (fetchedRuns: RunEntity[], existingRunInfos: RunInfoEntity[]) => {\n      if (Array.isArray(fetchedRuns)) {\n        // Get counted runs\n        const { allRuns, childRuns } = countFetchedRuns(fetchedRuns, existingRunInfos);\n\n        // Display notification only if there are any new child runs\n        if (childRuns < 1) {\n          return;\n        }\n\n        // If there is a similar notification visible already, close it first\n        // to avoid confusion due to multiple displayed notification elements\n        notification.close(FETCHED_RUN_NOTIFICATION_KEY);\n\n        // Display the notification\n        notification.info({\n          message: getMessage(allRuns, childRuns),\n          duration: FETCHED_RUN_NOTIFICATION_DURATION,\n          placement: 'bottomRight',\n          key: FETCHED_RUN_NOTIFICATION_KEY,\n        });\n      }\n    },\n    [notification, getMessage],\n  );\n};\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport type { UseEvaluationArtifactTableDataResult } from './useEvaluationArtifactTableData';\nimport { useDispatch } from 'react-redux';\nimport type { ThunkDispatch } from '../../../../redux-types';\nimport {\n  compilePromptInputText,\n  extractEvaluationPrerequisitesForRun,\n  extractPromptInputVariables,\n} from '../../prompt-engineering/PromptEngineering.utils';\nimport type { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport { evaluatePromptTableValue } from '../../../actions/PromptEngineeringActions';\nimport Utils from '../../../../common/utils/Utils';\nimport { getPromptEngineeringErrorMessage } from '../utils/PromptEngineeringErrorUtils';\n\n/**\n * Local utilility function, confirms if all param values\n * are provided for a particular evaluation table data row.\n */\nconst containsAllParamValuesForRow = (row: UseEvaluationArtifactTableDataResult[0], requiredInputs: string[]) => {\n  const missingInputParams = requiredInputs.filter((requiredInput) => !row.groupByCellValues[requiredInput]);\n\n  return missingInputParams.length === 0;\n};\n\n/**\n * A hook containing complete toolset supporting \"Evaluate all\" button\n */\nexport const useEvaluateAllRows = (evaluationTableData: UseEvaluationArtifactTableDataResult, outputColumn: string) => {\n  const currentTableData = useRef<UseEvaluationArtifactTableDataResult>(evaluationTableData);\n  const currentRunsBeingEvaluated = useRef<string[]>([]);\n  const intl = useIntl();\n\n  useEffect(() => {\n    currentTableData.current = evaluationTableData;\n  }, [evaluationTableData]);\n\n  const [runColumnsBeingEvaluated, setEvaluatedRuns] = useState<string[]>([]);\n\n  useEffect(() => {\n    currentRunsBeingEvaluated.current = runColumnsBeingEvaluated;\n  }, [runColumnsBeingEvaluated]);\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  // Processes single run's evaluation queue.\n  const processQueueForRun = useCallback(\n    (run: RunRowType) => {\n      const tableData = currentTableData.current;\n      const { parameters, promptTemplate, routeName, routeType } = extractEvaluationPrerequisitesForRun(run);\n\n      if (!promptTemplate) {\n        return;\n      }\n\n      const requiredInputs = extractPromptInputVariables(promptTemplate);\n\n      // Try to find the next row in the table that can be evaluated for a particular table\n      const nextEvaluableRow = tableData.find(\n        (tableRow) => !tableRow.cellValues[run.runUuid] && containsAllParamValuesForRow(tableRow, requiredInputs),\n      );\n\n      // If there's no row, close the queue and return\n      if (!nextEvaluableRow) {\n        setEvaluatedRuns((runs) => runs.filter((existingRunUuid) => existingRunUuid !== run.runUuid));\n        return;\n      }\n      const rowKey = nextEvaluableRow.key;\n      const inputValues = nextEvaluableRow.groupByCellValues;\n\n      if (!promptTemplate) {\n        return;\n      }\n\n      const compiledPrompt = compilePromptInputText(promptTemplate, inputValues);\n\n      if (routeName) {\n        dispatch(\n          evaluatePromptTableValue({\n            routeName,\n            routeType,\n            compiledPrompt,\n            inputValues,\n            outputColumn,\n            rowKey,\n            parameters,\n            run,\n          }),\n        )\n          .then(() => {\n            // If the current queue for the run is still active, continue with processing\n            if (currentRunsBeingEvaluated.current.includes(run.runUuid)) {\n              processQueueForRun(run);\n            }\n          })\n          .catch((e) => {\n            const errorMessage = getPromptEngineeringErrorMessage(e);\n\n            // In case of error, notify the user and close the queue\n            const wrappedMessage = intl.formatMessage(\n              {\n                defaultMessage: 'Gateway returned the following error: \"{errorMessage}\"',\n                description: 'Experiment page > gateway error message',\n              },\n              {\n                errorMessage,\n              },\n            );\n            Utils.logErrorAndNotifyUser(wrappedMessage);\n            setEvaluatedRuns((runs) => runs.filter((existingRunUuid) => existingRunUuid !== run.runUuid));\n          });\n      }\n    },\n    [dispatch, outputColumn, intl],\n  );\n\n  // Enables run's evaluation queue and starts its processing\n  const startEvaluatingRunColumn = useCallback(\n    (run: RunRowType) => {\n      setEvaluatedRuns((runs) => [...runs, run.runUuid]);\n      processQueueForRun(run);\n    },\n    [processQueueForRun],\n  );\n\n  // Removes the run from evaluation queue so it will gracefully stop after currently pending evaluation\n  const stopEvaluatingRunColumn = useCallback((run: RunRowType) => {\n    setEvaluatedRuns((runs) => runs.filter((existingRunUuid) => existingRunUuid !== run.runUuid));\n  }, []);\n\n  return { runColumnsBeingEvaluated, startEvaluatingRunColumn, stopEvaluatingRunColumn };\n};\n","import React, { useCallback, useContext, useMemo, useState } from 'react';\nimport type { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport type { UseEvaluationArtifactTableDataResult } from '../hooks/useEvaluationArtifactTableData';\nimport { useDispatch, useSelector } from 'react-redux';\nimport type { ReduxState, ThunkDispatch } from '../../../../redux-types';\nimport type { EvaluationDataReduxState } from '../../../reducers/EvaluationDataReducer';\nimport { evaluatePromptTableValue } from '../../../actions/PromptEngineeringActions';\nimport {\n  DEFAULT_PROMPTLAB_OUTPUT_COLUMN,\n  canEvaluateOnRun,\n  compilePromptInputText,\n  extractEvaluationPrerequisitesForRun,\n  extractPromptInputVariables,\n} from '../../prompt-engineering/PromptEngineering.utils';\nimport Utils from '../../../../common/utils/Utils';\nimport { useEvaluateAllRows } from '../hooks/useEvaluateAllRows';\nimport { useIntl } from 'react-intl';\nimport type { ErrorWrapper } from '../../../../common/utils/ErrorWrapper';\nimport { getPromptEngineeringErrorMessage } from '../utils/PromptEngineeringErrorUtils';\nimport type { GatewayErrorWrapper } from '../../../utils/LLMGatewayUtils';\n\nexport interface PromptEngineeringContextType {\n  getMissingParams: (run: RunRowType, rowKey: string) => string[] | null;\n  getEvaluableRowCount: (run: RunRowType) => number;\n  pendingDataLoading: EvaluationDataReduxState['evaluationPendingDataLoadingByRunUuid'];\n  evaluateCell: (run: RunRowType, rowKey: string) => void;\n  evaluateAllClick: (run: RunRowType) => void;\n  runColumnsBeingEvaluated: string[];\n  canEvaluateInRunColumn: (run: RunRowType) => boolean;\n  toggleExpandedHeader: () => void;\n  isHeaderExpanded: boolean;\n}\n\nconst PromptEngineeringContext = React.createContext<PromptEngineeringContextType>({\n  getMissingParams: () => [],\n  pendingDataLoading: {},\n  getEvaluableRowCount: () => 0,\n  evaluateCell: () => {},\n  evaluateAllClick: () => {},\n  runColumnsBeingEvaluated: [],\n  canEvaluateInRunColumn: () => false,\n  toggleExpandedHeader: () => {},\n  isHeaderExpanded: false,\n});\n\nexport const PromptEngineeringContextProvider = ({\n  tableData,\n  outputColumn,\n  children,\n}: React.PropsWithChildren<{\n  tableData: UseEvaluationArtifactTableDataResult;\n  outputColumn: string;\n}>) => {\n  const intl = useIntl();\n\n  const [isHeaderExpanded, setIsHeaderExpanded] = useState(false);\n  const toggleExpandedHeader = useCallback(() => setIsHeaderExpanded((expanded) => !expanded), []);\n\n  const getMissingParams = useCallback(\n    (run: RunRowType, rowKey: string) => {\n      if (!canEvaluateOnRun(run)) {\n        return null;\n      }\n      const row = tableData.find((x) => x.key === rowKey);\n      if (!row) {\n        return null;\n      }\n\n      const { promptTemplate } = extractEvaluationPrerequisitesForRun(run);\n\n      if (!promptTemplate) {\n        return null;\n      }\n\n      const requiredInputs = extractPromptInputVariables(promptTemplate);\n\n      const missingInputParams = requiredInputs.filter((requiredInput) => !row.groupByCellValues[requiredInput]);\n\n      return missingInputParams;\n    },\n    [tableData],\n  );\n\n  const dispatch = useDispatch<ThunkDispatch>();\n  const { startEvaluatingRunColumn, stopEvaluatingRunColumn, runColumnsBeingEvaluated } = useEvaluateAllRows(\n    tableData,\n    outputColumn,\n  );\n\n  const pendingDataLoading = useSelector(\n    ({ evaluationData }: ReduxState) => evaluationData.evaluationPendingDataLoadingByRunUuid,\n  );\n\n  const canEvaluateInRunColumn = useCallback(\n    (run?: RunRowType) => outputColumn === DEFAULT_PROMPTLAB_OUTPUT_COLUMN && canEvaluateOnRun(run),\n    [outputColumn],\n  );\n\n  const getEvaluableRowCount = useCallback(\n    (run: RunRowType) => {\n      const evaluatableRows = tableData.filter((tableRow) => {\n        if (tableRow.cellValues[run.runUuid]) {\n          return false;\n        }\n        const missingParams = getMissingParams(run, tableRow.key);\n        return missingParams?.length === 0;\n      });\n\n      return evaluatableRows.length;\n    },\n    [tableData, getMissingParams],\n  );\n\n  const evaluateAllClick = useCallback(\n    (run: RunRowType) => {\n      if (runColumnsBeingEvaluated.includes(run.runUuid)) {\n        stopEvaluatingRunColumn(run);\n      } else {\n        startEvaluatingRunColumn(run);\n      }\n    },\n    [runColumnsBeingEvaluated, startEvaluatingRunColumn, stopEvaluatingRunColumn],\n  );\n\n  const evaluateCell = useCallback(\n    (run: RunRowType, rowKey: string) => {\n      const row = tableData.find(({ key }) => key === rowKey);\n      if (!row) {\n        return;\n      }\n      const inputValues = row.groupByCellValues;\n\n      const { parameters, promptTemplate, routeName, routeType } = extractEvaluationPrerequisitesForRun(run);\n\n      if (!promptTemplate) {\n        return;\n      }\n\n      const compiledPrompt = compilePromptInputText(promptTemplate, inputValues);\n\n      if (routeName) {\n        const getAction = () => {\n          return evaluatePromptTableValue({\n            routeName,\n            routeType,\n            compiledPrompt,\n            inputValues,\n            outputColumn,\n            rowKey,\n            parameters,\n            run,\n          });\n        };\n\n        dispatch(getAction()).catch((e: Error | ErrorWrapper | GatewayErrorWrapper) => {\n          const errorMessage = getPromptEngineeringErrorMessage(e);\n\n          const wrappedMessage = intl.formatMessage(\n            {\n              defaultMessage: 'MLflow deployment returned the following error: \"{errorMessage}\"',\n              description: 'Experiment page > MLflow deployment error message',\n            },\n            {\n              errorMessage,\n            },\n          );\n          Utils.logErrorAndNotifyUser(wrappedMessage);\n        });\n      }\n    },\n    [tableData, dispatch, outputColumn, intl],\n  );\n  const contextValue = useMemo(\n    () => ({\n      getMissingParams,\n      getEvaluableRowCount,\n      evaluateCell,\n      evaluateAllClick,\n      pendingDataLoading,\n      canEvaluateInRunColumn,\n      runColumnsBeingEvaluated,\n      isHeaderExpanded,\n      toggleExpandedHeader,\n    }),\n    [\n      getMissingParams,\n      getEvaluableRowCount,\n      evaluateAllClick,\n      evaluateCell,\n      pendingDataLoading,\n      canEvaluateInRunColumn,\n      runColumnsBeingEvaluated,\n      isHeaderExpanded,\n      toggleExpandedHeader,\n    ],\n  );\n  return <PromptEngineeringContext.Provider value={contextValue}>{children}</PromptEngineeringContext.Provider>;\n};\n\nexport const usePromptEngineeringContext = () => useContext(PromptEngineeringContext);\n","import { Button, Popover, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport type { ReduxState } from '../../../../redux-types';\nimport type { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport {\n  canEvaluateOnRun,\n  extractEvaluationPrerequisitesForRun,\n} from '../../prompt-engineering/PromptEngineering.utils';\nimport { usePromptEngineeringContext } from '../contexts/PromptEngineeringContext';\n\ninterface EvaluationRunHeaderModelIndicatorProps {\n  run: RunRowType;\n}\nexport const EvaluationRunHeaderModelIndicator = ({ run }: EvaluationRunHeaderModelIndicatorProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  const { isHeaderExpanded } = usePromptEngineeringContext();\n\n  const promptEvaluationDataForRun = extractEvaluationPrerequisitesForRun(run);\n\n  const gatewayRoute = useSelector(({ modelGateway }: ReduxState) => {\n    const gatewayKey = `${promptEvaluationDataForRun.routeType}:${promptEvaluationDataForRun.routeName}`;\n    return promptEvaluationDataForRun.routeName ? modelGateway.modelGatewayRoutes[gatewayKey] : null;\n  });\n\n  if (!canEvaluateOnRun(run) || !promptEvaluationDataForRun) {\n    return null;\n  }\n\n  const { parameters, promptTemplate, routeName } = promptEvaluationDataForRun;\n  const { stop: stopSequences = [] } = parameters;\n\n  return (\n    <div\n      css={{\n        marginTop: theme.spacing.xs,\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n        overflowX: 'hidden',\n        width: '100%',\n      }}\n    >\n      {gatewayRoute && 'mlflowDeployment' in gatewayRoute && gatewayRoute.mlflowDeployment && (\n        <Typography.Hint>{gatewayRoute.mlflowDeployment.name}</Typography.Hint>\n      )}\n      {isHeaderExpanded && (\n        <>\n          <Typography.Hint>\n            <FormattedMessage\n              // eslint-disable-next-line formatjs/enforce-placeholders -- TODO(FEINF-2480)\n              defaultMessage=\"Temperature: {temperature}\"\n              description=\"Experiment page > artifact compare view > run column header prompt metadata > temperature parameter\"\n              values={parameters}\n            />\n          </Typography.Hint>\n          <Typography.Hint>\n            <FormattedMessage\n              // eslint-disable-next-line formatjs/enforce-placeholders -- TODO(FEINF-2480)\n              defaultMessage=\"Max. tokens: {max_tokens}\"\n              description=\"Experiment page > artifact compare view > run column header prompt metadata > max tokens parameter\"\n              values={parameters}\n            />\n          </Typography.Hint>\n          {stopSequences.length ? (\n            <Typography.Hint css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n              <FormattedMessage\n                defaultMessage=\"Stop sequences: {stopSequences}\"\n                description=\"Experiment page > artifact compare view > run column header prompt metadata > stop sequences parameter\"\n                values={{ stopSequences: stopSequences?.join(', ') }}\n              />\n            </Typography.Hint>\n          ) : null}\n          <div css={{ fontSize: 0 }}>\n            <Popover.Root componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationrunheadermodelindicator.tsx_107\">\n              <Popover.Trigger asChild>\n                <Button\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationrunheadermodelindicator.tsx_115\"\n                  type=\"link\"\n                  size=\"small\"\n                  css={{\n                    fontSize: theme.typography.fontSizeSm,\n                  }}\n                >\n                  <FormattedMessage\n                    defaultMessage=\"View prompt template\"\n                    description='Experiment page > artifact compare view > run column header prompt metadata > \"view prompt template\" button label'\n                  />\n                </Button>\n              </Popover.Trigger>\n              <Popover.Content css={{ maxWidth: 300 }}>\n                <Popover.Arrow />\n                {promptTemplate}\n              </Popover.Content>\n            </Popover.Root>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n","import { Button, Popover, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentViewDatasetWithContext } from '../../experiment-page/components/runs/ExperimentViewDatasetWithContext';\nimport type { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport type { RunDatasetWithTags } from '../../../types';\nimport { useCallback } from 'react';\n\ninterface EvaluationRunHeaderDatasetIndicatorProps {\n  run: RunRowType;\n  onDatasetSelected: (dataset: RunDatasetWithTags, run: RunRowType) => void;\n}\n\nexport const EvaluationRunHeaderDatasetIndicator = ({\n  run,\n  onDatasetSelected,\n}: EvaluationRunHeaderDatasetIndicatorProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  const handleDatasetSelected = useCallback(\n    (datasetWithTags: RunDatasetWithTags) => onDatasetSelected(datasetWithTags, run),\n    [onDatasetSelected, run],\n  );\n\n  if (run.datasets?.length < 1) {\n    return null;\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        gap: theme.spacing.xs,\n        overflow: 'hidden',\n      }}\n    >\n      <div css={{ flexShrink: 1, flexGrow: 1, overflow: 'hidden' }}>\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationrunheaderdatasetindicator.tsx_37\"\n          type=\"link\"\n          onClick={() => handleDatasetSelected(run.datasets[0])}\n        >\n          <ExperimentViewDatasetWithContext\n            datasetWithTags={run.datasets[0]}\n            displayTextAsLink\n            css={{ marginTop: theme.spacing.xs / 2, marginBottom: theme.spacing.xs / 2 }}\n          />\n        </Button>\n      </div>\n      {run.datasets.length > 1 && (\n        <div css={{ flexShrink: 0, flexGrow: 1, display: 'flex', alignItems: 'flex-end' }}>\n          <Popover.Root\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationrunheaderdatasetindicator.tsx_51\"\n            modal={false}\n          >\n            <Popover.Trigger asChild>\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationrunheaderdatasetindicator.tsx_49\"\n                size=\"small\"\n                style={{ borderRadius: '8px', width: '40px' }}\n              >\n                <Typography.Text color=\"secondary\">+{run.datasets.length - 1}</Typography.Text>\n              </Button>\n            </Popover.Trigger>\n            <Popover.Content align=\"start\">\n              {run.datasets\n                .slice(1)\n                .filter(Boolean)\n                .map((datasetWithTags) => (\n                  <div\n                    css={{\n                      height: theme.general.heightSm,\n                      display: 'flex',\n                      alignItems: 'center',\n                    }}\n                    key={`${datasetWithTags.dataset.name}-${datasetWithTags.dataset.digest}`}\n                  >\n                    <Button\n                      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationrunheaderdatasetindicator.tsx_66\"\n                      type=\"link\"\n                      onClick={() => handleDatasetSelected(datasetWithTags)}\n                    >\n                      <ExperimentViewDatasetWithContext datasetWithTags={datasetWithTags} displayTextAsLink />\n                    </Button>\n                  </div>\n                ))}\n            </Popover.Content>\n          </Popover.Root>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport type { PropsWithChildren, ReactNode } from 'react';\n\ninterface Props {\n  className?: string;\n  groupHeaderContent?: ReactNode;\n  isGroupByHeader?: false;\n}\n\nexport const EvaluationTableHeader = ({ children, className, groupHeaderContent = null }: PropsWithChildren<Props>) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    // Header cell wrapper element\n    <div\n      css={{\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      {/* Spacer element serving as a group header */}\n      <div\n        css={{\n          width: '100%',\n          flexBasis: 40,\n          display: 'flex',\n          alignItems: 'center',\n          padding: theme.spacing.sm,\n          borderBottom: `1px solid ${theme.colors.borderDecorative}`,\n        }}\n        className=\"header-group-cell\"\n      >\n        {groupHeaderContent}\n      </div>\n      {/* Main header cell content */}\n      <div\n        css={{\n          width: '100%',\n          flex: 1,\n          display: 'flex',\n          justifyContent: 'flex-start',\n          alignItems: 'flex-start',\n          padding: theme.spacing.xs,\n          borderRight: `1px solid ${theme.colors.borderDecorative}`,\n        }}\n        className={className}\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n","import {\n  Button,\n  DropdownMenu,\n  OverflowIcon,\n  PlayIcon,\n  StopIcon,\n  LegacyTooltip,\n  VisibleIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport ExperimentRoutes from '../../../routes';\nimport type { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport { EvaluationRunHeaderModelIndicator } from './EvaluationRunHeaderModelIndicator';\nimport { shouldEnablePromptLab } from '../../../../common/utils/FeatureUtils';\nimport { EvaluationRunHeaderDatasetIndicator } from './EvaluationRunHeaderDatasetIndicator';\nimport type { RunDatasetWithTags } from '../../../types';\nimport { usePromptEngineeringContext } from '../contexts/PromptEngineeringContext';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport React, { useMemo } from 'react';\nimport { EvaluationTableHeader } from './EvaluationTableHeader';\nimport { useCreateNewRun } from '../../experiment-page/hooks/useCreateNewRun';\nimport { canEvaluateOnRun } from '../../prompt-engineering/PromptEngineering.utils';\nimport { useGetExperimentRunColor } from '../../experiment-page/hooks/useExperimentRunColor';\nimport { RunColorPill } from '../../experiment-page/components/RunColorPill';\n\ninterface EvaluationRunHeaderCellRendererProps {\n  run: RunRowType;\n  onHideRun: (runUuid: string) => void;\n  onDuplicateRun: (run: RunRowType) => void;\n  onDatasetSelected: (dataset: RunDatasetWithTags, run: RunRowType) => void;\n  groupHeaderContent?: React.ReactNode;\n}\n\n/**\n * Component used as a column header for output (\"run\") columns\n */\nexport const EvaluationRunHeaderCellRenderer = ({\n  run,\n  onHideRun,\n  onDuplicateRun,\n  onDatasetSelected,\n  groupHeaderContent = null,\n}: EvaluationRunHeaderCellRendererProps) => {\n  const { theme } = useDesignSystemTheme();\n  const { getEvaluableRowCount, evaluateAllClick, runColumnsBeingEvaluated, canEvaluateInRunColumn } =\n    usePromptEngineeringContext();\n  const intl = useIntl();\n  const evaluableRowCount = getEvaluableRowCount(run);\n  const getRunColor = useGetExperimentRunColor();\n  const evaluateAllButtonEnabled = evaluableRowCount > 0;\n\n  const evaluatingAllInProgress = runColumnsBeingEvaluated.includes(run.runUuid);\n\n  const evaluateAllTooltipContent = useMemo(() => {\n    if (!evaluateAllButtonEnabled) {\n      return intl.formatMessage({\n        defaultMessage: 'There are no evaluable rows within this column',\n        description:\n          'Experiment page > artifact compare view > run column header > Disabled \"Evaluate all\" button tooltip when no rows are evaluable',\n      });\n    }\n    if (evaluateAllButtonEnabled && !evaluatingAllInProgress) {\n      return intl.formatMessage(\n        {\n          defaultMessage: 'Process {evaluableRowCount} rows without evaluation output',\n          description: 'Experiment page > artifact compare view > run column header > \"Evaluate all\" button tooltip',\n        },\n        {\n          evaluableRowCount,\n        },\n      );\n    }\n\n    return null;\n  }, [evaluableRowCount, evaluateAllButtonEnabled, evaluatingAllInProgress, intl]);\n\n  return (\n    <EvaluationTableHeader\n      css={{\n        justifyContent: 'flex-start',\n        padding: theme.spacing.sm,\n        paddingBottom: 0,\n        paddingTop: theme.spacing.sm,\n        flexDirection: 'column',\n        gap: theme.spacing.xs / 2,\n        overflow: 'hidden',\n      }}\n      groupHeaderContent={groupHeaderContent}\n    >\n      <div\n        css={{\n          width: '100%',\n          display: 'flex',\n        }}\n      >\n        <span css={{ display: 'flex', gap: theme.spacing.sm, alignItems: 'center' }}>\n          <RunColorPill color={getRunColor(run.runUuid)} />\n          <Link to={ExperimentRoutes.getRunPageRoute(run.experimentId || '', run.runUuid)} target=\"_blank\">\n            {run.runName}\n          </Link>\n        </span>\n        <div css={{ flexBasis: theme.spacing.sm, flexShrink: 0 }} />\n\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationrunheadercellrenderer.tsx_112\"\n          onClick={() => onHideRun(run.runUuid)}\n          size=\"small\"\n          icon={<VisibleIcon />}\n          css={{ flexShrink: 0 }}\n        />\n        <div css={{ flex: 1 }} />\n        {shouldEnablePromptLab() && canEvaluateInRunColumn(run) && (\n          <>\n            <div css={{ flexBasis: theme.spacing.sm }} />\n            <LegacyTooltip title={evaluateAllTooltipContent}>\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationrunheadercellrenderer.tsx_118\"\n                disabled={!evaluateAllButtonEnabled}\n                size=\"small\"\n                onClick={() => evaluateAllClick(run)}\n                icon={evaluatingAllInProgress ? <StopIcon /> : <PlayIcon />}\n              >\n                {evaluatingAllInProgress ? (\n                  <FormattedMessage\n                    defaultMessage=\"Stop evaluating\"\n                    description='Experiment page > artifact compare view > run column header > \"Evaluate all\" button label when the column is being evaluated'\n                  />\n                ) : (\n                  <FormattedMessage\n                    defaultMessage=\"Evaluate all\"\n                    description='Experiment page > artifact compare view > run column header > \"Evaluate all\" button label'\n                  />\n                )}\n              </Button>\n            </LegacyTooltip>\n          </>\n        )}\n        <div css={{ flexBasis: theme.spacing.sm }} />\n        {shouldEnablePromptLab() && canEvaluateOnRun(run) && (\n          <DropdownMenu.Root modal={false}>\n            <DropdownMenu.Trigger asChild>\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationrunheadercellrenderer.tsx_143\"\n                size=\"small\"\n                icon={<OverflowIcon />}\n              />\n            </DropdownMenu.Trigger>\n            <DropdownMenu.Content>\n              <DropdownMenu.Item\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationrunheadercellrenderer.tsx_150\"\n                onClick={() => onDuplicateRun(run)}\n              >\n                <FormattedMessage\n                  defaultMessage=\"Duplicate run\"\n                  description='Experiment page > artifact compare view > run column header > \"duplicate run\" button label'\n                />\n              </DropdownMenu.Item>\n            </DropdownMenu.Content>\n          </DropdownMenu.Root>\n        )}\n      </div>\n\n      {shouldEnablePromptLab() && canEvaluateOnRun(run) ? (\n        <EvaluationRunHeaderModelIndicator run={run} />\n      ) : (\n        <EvaluationRunHeaderDatasetIndicator run={run} onDatasetSelected={onDatasetSelected} />\n      )}\n    </EvaluationTableHeader>\n  );\n};\n","import { Button, InfoSmallIcon, PlayIcon, RefreshIcon, LegacyTooltip } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { usePromptEngineeringContext } from '../contexts/PromptEngineeringContext';\nimport type { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport { canEvaluateOnRun } from '../../prompt-engineering/PromptEngineering.utils';\n\n/**\n * Displays multiple variants of \"(re)evaluate\" button within the artifact comparison table\n */\nexport const EvaluationCellEvaluateButton = ({\n  disabled,\n  isLoading,\n  run,\n  rowKey,\n}: {\n  disabled?: boolean;\n  isLoading: boolean;\n  rowKey: string;\n  run: RunRowType;\n}) => {\n  const isRunEvaluable = canEvaluateOnRun(run);\n  const { evaluateCell, getMissingParams } = usePromptEngineeringContext();\n\n  const missingParamsToEvaluate = (run && getMissingParams(run, rowKey)) || null;\n\n  if (missingParamsToEvaluate && missingParamsToEvaluate.length > 0) {\n    return (\n      <LegacyTooltip\n        title={\n          <FormattedMessage\n            description=\"Experiment page > artifact compare view > text cell > missing evaluation parameter values tooltip\"\n            defaultMessage='Evaluation is not possible because values for the following inputs cannot be determined: {missingParamList}. Add input columns to the \"group by\" settings or use \"Add row\" button to define new parameter set.'\n            values={{\n              missingParamList: <code>{missingParamsToEvaluate.join(', ')}</code>,\n            }}\n          />\n        }\n      >\n        <InfoSmallIcon />\n      </LegacyTooltip>\n    );\n  }\n\n  if (!isRunEvaluable) {\n    return (\n      <LegacyTooltip\n        title={\n          <FormattedMessage\n            description=\"Experiment page > artifact compare view > text cell > run not evaluable tooltip\"\n            defaultMessage=\"You cannot evaluate this cell, this run was not created using served LLM model route\"\n          />\n        }\n      >\n        <InfoSmallIcon />\n      </LegacyTooltip>\n    );\n  }\n  return (\n    <Button\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationcellevaluatebutton.tsx_59\"\n      loading={isLoading}\n      disabled={disabled}\n      size=\"small\"\n      onMouseDownCapture={(e) => e.stopPropagation()}\n      onClickCapture={(e) => {\n        e.stopPropagation();\n        evaluateCell(run, rowKey);\n      }}\n      icon={<PlayIcon />}\n    >\n      <>Evaluate</>\n    </Button>\n  );\n};\n","import { TableSkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { ICellRendererParams } from '@ag-grid-community/core';\nimport { FormattedMessage } from 'react-intl';\nimport React from 'react';\nimport type { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport { usePromptEngineeringContext } from '../contexts/PromptEngineeringContext';\nimport { useSelector } from 'react-redux';\nimport type { ReduxState } from '../../../../redux-types';\nimport { EvaluationCellEvaluateButton } from './EvaluationCellEvaluateButton';\nimport { shouldEnablePromptLab } from '../../../../common/utils/FeatureUtils';\nimport type { UseEvaluationArtifactTableDataResult } from '../hooks/useEvaluationArtifactTableData';\nimport { JsonPreview } from '../../../../common/components/JsonFormatting';\n\n// Truncate the text in the cell, it doesn't make sense to populate\n// more data into the DOM since cells have hidden overflow anyway\nconst MAX_TEXT_LENGTH = 512;\n\ninterface EvaluationTextCellRendererProps extends ICellRendererParams {\n  value: string;\n  isGroupByColumn?: boolean;\n  context: { highlightedText: string };\n\n  data: UseEvaluationArtifactTableDataResult extends (infer U)[] ? U : UseEvaluationArtifactTableDataResult;\n\n  // Valid only for run columns\n  run?: RunRowType;\n}\n\n/**\n * Internal use component - breaks down the rendered text into chunks and highlights\n * particular part found by the provided substring.\n */\nconst HighlightedText = React.memo(({ text, highlight }: { text: string; highlight: string }) => {\n  const { theme } = useDesignSystemTheme();\n  if (!highlight) {\n    return <>{text}</>;\n  }\n\n  const parts = text.split(new RegExp(`(${highlight})`, 'gi'));\n\n  return (\n    <>\n      {parts.map((part, i) => (\n        <React.Fragment key={i}>\n          {part.toLowerCase() === highlight.toLowerCase() ? (\n            <span css={{ backgroundColor: theme.colors.yellow200 }}>{part}</span>\n          ) : (\n            part\n          )}\n        </React.Fragment>\n      ))}\n    </>\n  );\n});\n\n/**\n * Component used to render a single text cell in the evaluation artifacts comparison table.\n */\n/* eslint-disable complexity */\nexport const EvaluationTextCellRenderer = ({\n  value,\n  context,\n  isGroupByColumn,\n  run,\n  data,\n}: EvaluationTextCellRendererProps) => {\n  const { theme } = useDesignSystemTheme();\n  const { pendingDataLoading, canEvaluateInRunColumn } = usePromptEngineeringContext();\n  const isGatewayRoutesLoading = useSelector(\n    ({ modelGateway: { modelGatewayRoutesLoading, modelGatewayRoutesLoadingLegacy } }: ReduxState) => {\n      return modelGatewayRoutesLoading.loading;\n    },\n  );\n\n  const isCellEvaluating = run && pendingDataLoading[run.runUuid]?.[data?.key];\n  const outputMetadata = (run && data.outputMetadataByRunUuid?.[run.runUuid]) || null;\n\n  const backgroundColor =\n    outputMetadata?.isPending || data.isPendingInputRow\n      ? theme.colors.backgroundSecondary\n      : theme.colors.backgroundPrimary;\n\n  const structuredJSONValue = React.useMemo(() => {\n    try {\n      const objectData = JSON.parse(value);\n      return objectData;\n    } catch (e) {\n      return null;\n    }\n  }, [value]);\n\n  return (\n    <div\n      css={{\n        height: '100%',\n        whiteSpace: 'normal',\n        padding: theme.spacing.sm,\n        overflow: 'hidden',\n        position: 'relative',\n        cursor: 'pointer',\n        backgroundColor,\n        '&:hover': {\n          backgroundColor: theme.colors.actionDefaultBackgroundHover,\n        },\n      }}\n    >\n      {isCellEvaluating ? (\n        <TableSkeleton lines={3} />\n      ) : (\n        <>\n          {!value ? (\n            <Typography.Text color=\"info\" css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>\n              <FormattedMessage\n                defaultMessage=\"(empty)\"\n                description=\"Experiment page > artifact compare view > results table > no result (empty cell)\"\n              />\n            </Typography.Text>\n          ) : structuredJSONValue ? (\n            <JsonPreview json={JSON.stringify(structuredJSONValue, null, 2)} />\n          ) : (\n            <span\n              css={{\n                display: '-webkit-box',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                WebkitBoxOrient: 'vertical',\n                WebkitLineClamp: '7',\n              }}\n            >\n              {isGroupByColumn && context.highlightedText ? (\n                <HighlightedText text={value} highlight={context.highlightedText} />\n              ) : typeof value === 'string' ? (\n                value.substring(0, MAX_TEXT_LENGTH)\n              ) : (\n                /**\n                 * There is a transient state when this value is an object used\n                 * for EvaluationImageCellRenderer. This will prevent displaying\n                 * [object Object] in the cell and cause AgGrid errors.\n                 */\n                typeof value !== 'object' && value\n              )}\n            </span>\n          )}\n        </>\n      )}\n      {shouldEnablePromptLab() && run && canEvaluateInRunColumn(run) && (\n        <div\n          css={{\n            position: 'absolute',\n            left: 8,\n            bottom: 8,\n            right: 8,\n            display: 'flex',\n            gap: theme.spacing.sm,\n            alignItems: 'center',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n            {!value && (\n              <EvaluationCellEvaluateButton\n                disabled={isCellEvaluating}\n                isLoading={isGatewayRoutesLoading}\n                run={run}\n                rowKey={data.key}\n              />\n            )}\n            {(outputMetadata?.isPending || data.isPendingInputRow) && (\n              <Typography.Hint size=\"sm\" css={{ fontStyle: 'italic' }}>\n                <FormattedMessage\n                  defaultMessage=\"Unsaved\"\n                  description=\"Experiment page > artifact compare view > results table > unsaved indicator\"\n                />\n              </Typography.Hint>\n            )}\n          </div>\n          {outputMetadata && !isCellEvaluating && (\n            <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n              {outputMetadata.evaluationTime && (\n                <Typography.Hint size=\"sm\">\n                  {Math.round(outputMetadata.evaluationTime)} ms\n                  {outputMetadata.totalTokens ? ',' : ''}\n                </Typography.Hint>\n              )}\n              {outputMetadata.totalTokens && (\n                <Typography.Hint size=\"sm\">\n                  <FormattedMessage\n                    defaultMessage=\"{totalTokens} total tokens\"\n                    description=\"Experiment page > artifact compare view > results table > total number of evaluated tokens\"\n                    values={{ totalTokens: outputMetadata.totalTokens }}\n                  />\n                </Typography.Hint>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","export const EVALUATION_ARTIFACTS_TEXT_COLUMN_WIDTH = {\n  // Default width of \"group by\" columns\n  initialWidthGroupBy: 200,\n  // Default width of \"compare\" (output) columns\n  initialWidthOutput: 360,\n  maxWidth: 500,\n  minWidth: 140,\n};\nexport const EVALUATION_ARTIFACTS_TABLE_ROW_HEIGHT = 190;\n\nexport const getEvaluationArtifactsTableHeaderHeight = (isExpanded = false, includePlaceForMetadata = false) => {\n  // If there is no metadata displayed at all, prepare\n  // 40 px for group header plus 40 px for the run name\n  if (!includePlaceForMetadata) {\n    return 80;\n  }\n\n  // If there's a metadata to be displayed, base the resulting height\n  // on the header expansion. Pixel values according to designs.\n  return 40 + (isExpanded ? 175 : 62);\n};\n","import type { IHeaderParams } from '@ag-grid-community/core';\nimport { LegacyTooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { truncate } from 'lodash';\nimport { EvaluationTableHeader } from './EvaluationTableHeader';\n\ninterface EvaluationGroupByHeaderCellRendererProps extends IHeaderParams {\n  displayName: string;\n  onAddNewInputs: () => void;\n  displayAddNewInputsButton?: boolean;\n}\n\n/**\n * Component used as a column header for \"group by\" columns\n */\nexport const EvaluationGroupByHeaderCellRenderer = ({ displayName }: EvaluationGroupByHeaderCellRendererProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <EvaluationTableHeader css={{ justifyContent: 'flex-start', padding: theme.spacing.sm }}>\n      <LegacyTooltip title={truncate(displayName, { length: 250 })}>\n        <Typography.Text bold css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>\n          {displayName}\n        </Typography.Text>\n      </LegacyTooltip>\n    </EvaluationTableHeader>\n  );\n};\n","import { Input, Modal, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useCallback, useMemo, useState } from 'react';\nimport type { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport { uniq, compact } from 'lodash';\nimport { canEvaluateOnRun, extractRequiredInputParamsForRun } from '../../prompt-engineering/PromptEngineering.utils';\nimport { FormattedMessage } from 'react-intl';\n\nconst MAX_RUN_NAMES = 5;\n\nexport const useEvaluationAddNewInputsModal = () => {\n  const [modalVisible, setModalVisible] = useState(false);\n  const [requiredInputKeys, setRequiredInputKeys] = useState<\n    {\n      inputName: string;\n      runNames: string[];\n    }[]\n  >([]);\n  const [inputValues, setInputValues] = useState<Record<string, string>>({});\n\n  const allValuesProvided = useMemo(\n    () => requiredInputKeys.every(({ inputName }) => inputValues[inputName]),\n    [inputValues, requiredInputKeys],\n  );\n\n  const [successCallback, setSuccessCallback] = useState<(providedParamValues: Record<string, string>) => void>(\n    async () => {},\n  );\n\n  const setInputValue = useCallback((key: string, value: string) => {\n    setInputValues((values) => ({ ...values, [key]: value }));\n  }, []);\n\n  const showAddNewInputsModal = useCallback(\n    (runs: RunRowType[], onSuccess: (providedParamValues: Record<string, string>) => void) => {\n      const requiredInputsForRuns = runs.filter(canEvaluateOnRun).map((run) => ({\n        runName: run.runName,\n        params: extractRequiredInputParamsForRun(run),\n      }));\n      const inputValuesWithRunNames = uniq(requiredInputsForRuns.map(({ params }) => params).flat()).map(\n        (inputName) => ({\n          inputName,\n          runNames: compact(\n            requiredInputsForRuns.filter((r) => r.params.includes(inputName)).map(({ runName }) => runName),\n          ),\n        }),\n      );\n      setModalVisible(true);\n      setRequiredInputKeys(inputValuesWithRunNames);\n      setInputValues({});\n      setSuccessCallback(() => onSuccess);\n    },\n    [],\n  );\n  const { theme } = useDesignSystemTheme();\n\n  const AddNewInputsModal = (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_hooks_useevaluationaddnewinputsmodal.tsx_57\"\n      title={\n        <FormattedMessage\n          defaultMessage=\"Add row\"\n          description='Experiment page > artifact compare view > \"add new row\" modal title'\n        />\n      }\n      okButtonProps={{ disabled: !allValuesProvided }}\n      okText={\n        <FormattedMessage\n          // TODO(ML-32664): Implement \"Submit and evaluate\" that evaluates entire row\n          defaultMessage=\"Submit\"\n          description='Experiment page > artifact compare view > \"add new row\" modal submit button label'\n        />\n      }\n      cancelText={\n        <FormattedMessage\n          defaultMessage=\"Cancel\"\n          description='Experiment page > artifact compare view > \"add new row\" modal cancel button label'\n        />\n      }\n      onOk={() => {\n        successCallback(inputValues);\n        setModalVisible(false);\n      }}\n      visible={modalVisible}\n      onCancel={() => setModalVisible(false)}\n    >\n      {requiredInputKeys.map(({ inputName, runNames }) => (\n        <div key={inputName} css={{ marginBottom: theme.spacing.md }}>\n          <Typography.Text bold>{inputName}</Typography.Text>\n          <Typography.Hint css={{ whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}>\n            <FormattedMessage\n              defaultMessage=\"Used by {runNames} {hasMore, select, true {and other runs} other {}}\"\n              description=\"Experiment page > artifact compare view > label indicating which runs are using particular input field\"\n              values={{\n                runNames: runNames.slice(0, MAX_RUN_NAMES).join(', '),\n                hasMore: runNames.length > MAX_RUN_NAMES,\n              }}\n            />\n          </Typography.Hint>\n          <div css={{ marginTop: theme.spacing.sm }}>\n            <Input.TextArea\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_hooks_useevaluationaddnewinputsmodal.tsx_99\"\n              value={inputValues[inputName]}\n              onChange={(e) => setInputValue(inputName, e.target.value)}\n            />\n          </div>\n        </div>\n      ))}\n    </Modal>\n  );\n  return { showAddNewInputsModal, AddNewInputsModal };\n};\n","import { Button, ChevronDownIcon, ChevronRightIcon, LegacyTooltip } from '@databricks/design-system';\nimport { EvaluationTableHeader } from './EvaluationTableHeader';\nimport { usePromptEngineeringContext } from '../contexts/PromptEngineeringContext';\nimport { FormattedMessage } from 'react-intl';\n\nconst enlargedIconStyle = { svg: { width: 20, height: 20 } };\n\nexport const EvaluationTableActionsColumnRenderer = () => {\n  const { toggleExpandedHeader, isHeaderExpanded } = usePromptEngineeringContext();\n\n  return (\n    <EvaluationTableHeader>\n      <LegacyTooltip\n        placement=\"right\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Toggle detailed view\"\n            description='Experiment page > artifact compare view > table header > label for \"toggle detailed view\" button'\n          />\n        }\n      >\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationtableactionscolumnrenderer.tsx_22\"\n          icon={\n            isHeaderExpanded ? (\n              <ChevronDownIcon css={enlargedIconStyle} />\n            ) : (\n              <ChevronRightIcon css={enlargedIconStyle} />\n            )\n          }\n          onClick={toggleExpandedHeader}\n        />\n      </LegacyTooltip>\n    </EvaluationTableHeader>\n  );\n};\n","import { Button, PlusIcon, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\ninterface EvaluationTableActionsCellRendererProps {\n  onAddNewInputs: () => void;\n  displayAddNewInputsButton: boolean;\n}\n\nexport const EvaluationTableActionsCellRenderer = ({\n  onAddNewInputs,\n  displayAddNewInputsButton,\n}: EvaluationTableActionsCellRendererProps) => {\n  const { theme } = useDesignSystemTheme();\n  if (!displayAddNewInputsButton) {\n    return null;\n  }\n\n  return (\n    <div\n      css={{\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        padding: theme.spacing.xs,\n      }}\n    >\n      <LegacyTooltip\n        placement=\"right\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Add row\"\n            description=\"Experiment page > artifact compare view > add new row button\"\n          />\n        }\n      >\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationtableactionscellrenderer.tsx_37\"\n          icon={<PlusIcon />}\n          onClick={onAddNewInputs}\n        />\n      </LegacyTooltip>\n    </div>\n  );\n};\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { ICellRendererParams } from '@ag-grid-community/core';\nimport { FormattedMessage } from 'react-intl';\nimport type { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport type { UseEvaluationArtifactTableDataResult } from '../hooks/useEvaluationArtifactTableData';\nimport { ImagePlot } from '@mlflow/mlflow/src/experiment-tracking/components/runs-charts/components/charts/ImageGridPlot.common';\nimport type { EvaluateCellImage } from '@mlflow/mlflow/src/experiment-tracking/types';\n\ninterface EvaluationImageCellRendererProps extends ICellRendererParams {\n  value: EvaluateCellImage;\n  isGroupByColumn?: boolean;\n  context: { highlightedText: string };\n\n  data: UseEvaluationArtifactTableDataResult extends (infer U)[] ? U : UseEvaluationArtifactTableDataResult;\n\n  // Valid only for run columns\n  run?: RunRowType;\n}\n\n/**\n * Component used to render a single text cell in the evaluation artifacts comparison table.\n */\n/* eslint-disable complexity */\nexport const EvaluationImageCellRenderer = ({ value }: EvaluationImageCellRendererProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  const backgroundColor = theme.colors.backgroundPrimary;\n\n  return (\n    <div\n      css={{\n        height: '100%',\n        whiteSpace: 'normal',\n        padding: theme.spacing.sm,\n        overflow: 'hidden',\n        position: 'relative',\n        cursor: 'pointer',\n        backgroundColor,\n        '&:hover': {\n          backgroundColor: theme.colors.actionDefaultBackgroundHover,\n        },\n      }}\n    >\n      {!value || !value.url || !value.compressed_url ? (\n        <Typography.Text color=\"info\" css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>\n          <FormattedMessage\n            defaultMessage=\"(empty)\"\n            description=\"Experiment page > artifact compare view > results table > no result (empty cell)\"\n          />\n        </Typography.Text>\n      ) : (\n        <span\n          css={{\n            display: '-webkit-box',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            WebkitBoxOrient: 'vertical',\n            WebkitLineClamp: '7',\n            width: '100%',\n            height: '100%',\n          }}\n        >\n          <ImagePlot imageUrl={value.url} compressedImageUrl={value.compressed_url} />\n        </span>\n      )}\n    </div>\n  );\n};\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport type { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport type { UseEvaluationArtifactTableDataResult } from '../hooks/useEvaluationArtifactTableData';\nimport type { CellClickedEvent, ColDef, GridApi } from '@ag-grid-community/core';\nimport { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { MLFlowAgGridLoader } from '../../../../common/components/ag-grid/AgGridLoader';\nimport { EvaluationRunHeaderCellRenderer } from './EvaluationRunHeaderCellRenderer';\nimport { EvaluationTextCellRenderer } from './EvaluationTextCellRenderer';\nimport {\n  EVALUATION_ARTIFACTS_TABLE_ROW_HEIGHT,\n  EVALUATION_ARTIFACTS_TEXT_COLUMN_WIDTH,\n  getEvaluationArtifactsTableHeaderHeight,\n} from '../EvaluationArtifactCompare.utils';\nimport { EvaluationGroupByHeaderCellRenderer } from './EvaluationGroupByHeaderCellRenderer';\nimport type { Theme } from '@emotion/react';\nimport type { RunDatasetWithTags } from '../../../types';\nimport { useEvaluationAddNewInputsModal } from '../hooks/useEvaluationAddNewInputsModal';\nimport { useDispatch, useSelector } from 'react-redux';\nimport type { ReduxState, ThunkDispatch } from '../../../../redux-types';\nimport { evaluateAddInputValues } from '../../../actions/PromptEngineeringActions';\nimport { canEvaluateOnRun, extractRequiredInputParamsForRun } from '../../prompt-engineering/PromptEngineering.utils';\nimport { useIntl } from 'react-intl';\nimport { usePromptEngineeringContext } from '../contexts/PromptEngineeringContext';\nimport { EvaluationTableHeader } from './EvaluationTableHeader';\nimport { EvaluationTableActionsColumnRenderer } from './EvaluationTableActionsColumnRenderer';\nimport { EvaluationTableActionsCellRenderer } from './EvaluationTableActionsCellRenderer';\nimport { shouldEnablePromptLab } from '../../../../common/utils/FeatureUtils';\nimport { useCreateNewRun } from '../../experiment-page/hooks/useCreateNewRun';\nimport { EvaluationImageCellRenderer } from './EvaluationImageCellRenderer';\n\nexport interface EvaluationArtifactCompareTableProps {\n  resultList: UseEvaluationArtifactTableDataResult;\n  visibleRuns: RunRowType[];\n  groupByColumns: string[];\n  onCellClick?: (value: string, columnHeader: string) => void;\n  onHideRun: (runUuid: string) => void;\n  onDatasetSelected: (dataset: RunDatasetWithTags, run: RunRowType) => void;\n  highlightedText: string;\n  isPreviewPaneVisible?: boolean;\n  outputColumnName: string;\n  isImageColumn: boolean;\n}\n\nexport const EvaluationArtifactCompareTable = ({\n  resultList,\n  visibleRuns,\n  groupByColumns,\n  onCellClick,\n  onHideRun,\n  onDatasetSelected,\n  highlightedText = '',\n  isPreviewPaneVisible,\n  outputColumnName,\n  isImageColumn,\n}: EvaluationArtifactCompareTableProps) => {\n  const [columns, setColumns] = useState<ColDef[]>([]);\n\n  const [gridApi, setGridApi] = useState<GridApi | null>(null);\n  const pendingData = useSelector(({ evaluationData }: ReduxState) => evaluationData.evaluationPendingDataByRunUuid);\n  const gridWrapperRef = useRef<HTMLDivElement>(null);\n\n  const { isHeaderExpanded } = usePromptEngineeringContext();\n  const { createNewRun } = useCreateNewRun();\n\n  // Before hiding or duplicating the run, let's refresh the header to mitigate ag-grid's\n  // bug where it fails to defocus cell after the whole table has been hidden.\n  const handleHideRun = useCallback(\n    (runUuid: string) => {\n      gridApi?.refreshHeader();\n      onHideRun(runUuid);\n    },\n    [gridApi, onHideRun],\n  );\n\n  const handleDuplicateRun = useCallback(\n    (runToDuplicate?: RunRowType) => {\n      gridApi?.refreshHeader();\n      createNewRun(runToDuplicate);\n    },\n    [createNewRun, gridApi],\n  );\n\n  useEffect(() => {\n    if (gridApi && !isPreviewPaneVisible) {\n      gridApi.clearFocusedCell();\n    }\n  }, [gridApi, isPreviewPaneVisible]);\n\n  // Force-refresh visible cells' values when some pending data have changes\n  // either by loading new data or discarding values. This makes sure\n  // that even if the prompt evaluates to the same value, the grid still refreshes.\n  useEffect(() => {\n    if (!gridApi) {\n      return;\n    }\n    const visibleRows = gridApi.getRenderedNodes();\n    gridApi.refreshCells({ force: true, rowNodes: visibleRows });\n  }, [gridApi, pendingData, highlightedText]);\n\n  const { showAddNewInputsModal, AddNewInputsModal } = useEvaluationAddNewInputsModal();\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const scrollGridToTop = useCallback(() => {\n    // Find the scrollable viewport element\n    const gridViewport = gridWrapperRef.current?.querySelector('.ag-body-viewport');\n    if (gridViewport) {\n      gridViewport.scrollTo({ top: 0, behavior: 'smooth' });\n    } else {\n      // If for some reason there's no element, use native jumpy method\n      gridApi?.ensureIndexVisible(0, 'top');\n    }\n  }, [gridApi]);\n\n  const displayAddNewInputsButton = useMemo(\n    // TODO(ML-32969): count prompt-engineered runs based on tags\n    () => visibleRuns.map(extractRequiredInputParamsForRun).flat().length > 0,\n    [visibleRuns],\n  );\n\n  const onAddNewInputs = useCallback(() => {\n    showAddNewInputsModal(visibleRuns, (values) => {\n      dispatch(evaluateAddInputValues(values));\n      // Scroll the grid to the top after adding new row\n      scrollGridToTop();\n    });\n  }, [scrollGridToTop, showAddNewInputsModal, dispatch, visibleRuns]);\n\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const handleCellClicked = useCallback(\n    ({ value, colDef, column }: CellClickedEvent) => {\n      const emptyMessage = intl.formatMessage({\n        defaultMessage: '(empty)',\n        description: 'Experiment page > artifact compare view > results table > no result (empty cell)',\n      });\n      return onCellClick?.(value || emptyMessage, colDef.headerName || column.getId());\n    },\n    [intl, onCellClick],\n  );\n\n  const outputColumnIndicator = useMemo(\n    () => <Typography.Text bold>{outputColumnName}</Typography.Text>,\n    [outputColumnName],\n  );\n\n  useEffect(() => {\n    const cols: ColDef[] = [];\n\n    const { initialWidthGroupBy, initialWidthOutput, maxWidth, minWidth } = EVALUATION_ARTIFACTS_TEXT_COLUMN_WIDTH;\n\n    if (shouldEnablePromptLab() && visibleRuns.some((run) => canEvaluateOnRun(run))) {\n      cols.push({\n        resizable: false,\n        pinned: true,\n        width: 40,\n        headerComponent: 'ActionsColumnRenderer',\n        cellRendererSelector: ({ rowIndex }) =>\n          rowIndex === 0\n            ? {\n                component: 'ActionsCellRenderer',\n                params: {\n                  displayAddNewInputsButton,\n                  onAddNewInputs,\n                },\n              }\n            : undefined,\n        cellClass: 'leading-column-cell',\n      });\n    }\n\n    groupByColumns.forEach((col, index) => {\n      const isLastGroupByColumns = index === groupByColumns.length - 1;\n      cols.push({\n        resizable: true,\n        initialWidth: initialWidthGroupBy,\n        minWidth,\n        maxWidth,\n        headerName: col,\n        valueGetter: ({ data }) => data.groupByCellValues[col],\n        suppressMovable: true,\n        cellRenderer: 'TextRendererCellRenderer',\n        headerClass: isLastGroupByColumns ? 'last-group-by-header-cell' : undefined,\n        cellRendererParams: {\n          isGroupByColumn: true,\n        },\n        headerComponent: 'GroupHeaderCellRenderer',\n        headerComponentParams: {\n          displayAddNewInputsButton,\n          onAddNewInputs,\n        },\n        colId: col,\n        onCellClicked: handleCellClicked,\n      });\n    });\n\n    visibleRuns.forEach((run, index) => {\n      const isFirstColumn = index === 0;\n      cols.push({\n        resizable: true,\n        initialWidth: initialWidthOutput,\n        minWidth,\n        maxWidth,\n        headerName: run.runName,\n        colId: run.runUuid,\n        valueGetter: ({ data }) => data.cellValues[run.runUuid],\n        suppressMovable: true,\n        cellRenderer: isImageColumn ? 'ImageRendererCellRenderer' : 'TextRendererCellRenderer',\n        cellRendererParams: {\n          run,\n        },\n        headerComponent: 'RunHeaderCellRenderer',\n        headerComponentParams: {\n          run,\n          onDuplicateRun: handleDuplicateRun,\n          onHideRun: handleHideRun,\n          onDatasetSelected,\n          groupHeaderContent: isFirstColumn ? outputColumnIndicator : null,\n        },\n        onCellClicked: handleCellClicked,\n      });\n    });\n\n    setColumns(cols);\n  }, [\n    visibleRuns,\n    groupByColumns,\n    handleHideRun,\n    handleDuplicateRun,\n    onDatasetSelected,\n    onAddNewInputs,\n    displayAddNewInputsButton,\n    handleCellClicked,\n    outputColumnIndicator,\n    isImageColumn,\n  ]);\n\n  useEffect(() => {\n    if (!gridApi) {\n      return;\n    }\n\n    // Check if we need to have a tall header, i.e. if we have any runs\n    // with datasets or with evaluation metadata\n    const runsContainHeaderMetadata = visibleRuns.some((run) => canEvaluateOnRun(run) || run.datasets?.length > 0);\n\n    // Set header height dynamically\n    gridApi.setHeaderHeight(getEvaluationArtifactsTableHeaderHeight(isHeaderExpanded, runsContainHeaderMetadata));\n  }, [gridApi, isHeaderExpanded, visibleRuns]);\n\n  return (\n    <div css={{ height: '100%', overflow: 'hidden' }} ref={gridWrapperRef}>\n      <MLFlowAgGridLoader\n        css={createTableStyles(theme)}\n        context={{ highlightedText }}\n        rowHeight={EVALUATION_ARTIFACTS_TABLE_ROW_HEIGHT}\n        onGridReady={({ api }) => setGridApi(api)}\n        getRowId={({ data }) => data.key}\n        suppressHorizontalScroll={false}\n        columnDefs={columns}\n        rowData={resultList}\n        components={{\n          TextRendererCellRenderer: EvaluationTextCellRenderer,\n          GroupHeaderCellRenderer: EvaluationGroupByHeaderCellRenderer,\n          RunHeaderCellRenderer: EvaluationRunHeaderCellRenderer,\n          ActionsColumnRenderer: EvaluationTableActionsColumnRenderer,\n          ActionsCellRenderer: EvaluationTableActionsCellRenderer,\n          ImageRendererCellRenderer: EvaluationImageCellRenderer,\n        }}\n      />\n      {AddNewInputsModal}\n    </div>\n  );\n};\n\nconst createTableStyles = (theme: Theme) => ({\n  '.ag-row:not(.ag-row-first), .ag-body-viewport': {\n    borderTop: `1px solid ${theme.colors.borderDecorative}`,\n  },\n  '.ag-row-last': {\n    borderBottom: `1px solid ${theme.colors.borderDecorative}`,\n  },\n  '.ag-cell, .last-group-by-header-cell .header-group-cell': {\n    borderRight: `1px solid ${theme.colors.borderDecorative}`,\n  },\n  '.ag-cell-focus:not(.leading-column-cell)::after': {\n    content: '\"\"',\n    position: 'absolute' as const,\n    inset: 0,\n    boxShadow: `inset 0 0 0px 2px ${theme.colors.blue300}`,\n    pointerEvents: 'none' as const,\n  },\n});\n","import { fromPairs, isNil, isObject, isString, sortBy } from 'lodash';\nimport { useMemo } from 'react';\n\nimport type { ArtifactLogTableImageObject, EvaluateCellImage, EvaluationArtifactTableEntry } from '../../../types';\nimport { PendingEvaluationArtifactTableEntry } from '../../../types';\nimport type { EvaluationDataReduxState } from '../../../reducers/EvaluationDataReducer';\nimport { shouldEnablePromptLab } from '../../../../common/utils/FeatureUtils';\nimport {\n  PROMPTLAB_METADATA_COLUMN_LATENCY,\n  PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS,\n} from '../../prompt-engineering/PromptEngineering.utils';\nimport { LOG_TABLE_IMAGE_COLUMN_TYPE } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { getArtifactLocationUrl } from '@mlflow/mlflow/src/common/utils/ArtifactUtils';\n\ntype ArtifactsByRun = EvaluationDataReduxState['evaluationArtifactsByRunUuid'];\ntype PendingDataByRun = EvaluationDataReduxState['evaluationPendingDataByRunUuid'];\ntype DraftInputValues = EvaluationDataReduxState['evaluationDraftInputValues'];\n\nexport type UseEvaluationArtifactTableDataResult = {\n  // Unique key for every result row\n  key: string;\n\n  // Values of \"group by\" columns. The column name is the key.\n  groupByCellValues: Record<string, string>;\n\n  // Values of output columns. The run uuid is the key.\n  cellValues: Record<string, string | EvaluateCellImage>;\n\n  // Contains data describing additional metadata for output: evaluation time, total tokens and a flag\n  // indicating if the run was evaluated in this session and is unsynced\n  outputMetadataByRunUuid?: Record<string, { isPending: boolean; evaluationTime: number; totalTokens?: number }>;\n\n  isPendingInputRow?: boolean;\n}[];\n\nconst extractGroupByValuesFromEntry = (entry: EvaluationArtifactTableEntry, groupByCols: string[]) => {\n  const groupByMappings = groupByCols.map<[string, string]>((groupBy) => {\n    const value = entry[groupBy];\n    return [groupBy, isString(value) ? value : JSON.stringify(value)];\n  });\n\n  // Next, let's calculate a unique hash for values of those columns - it will serve as\n  // an identifier of each result row.\n  const groupByHashKey = groupByMappings.map(([, keyValue]) => String(keyValue)).join('.');\n\n  return { key: groupByHashKey, groupByValues: fromPairs(groupByMappings) };\n};\n\n/**\n * Consumes table artifact data and based on provided dimensions,\n * generates the data ready to be displayed in the comparison data grid.\n *\n * @param artifactsByRun artifacts-by-run data (extracted from the redux store)\n * @param comparedRunsUuids UUIDs of runs we want to compare\n * @param tableNames table names we want to include in the comparison\n * @param groupByCols list of columns that will be used to group the results by\n * @param outputColumn selects the column to be displayed in the run\n */\nexport const useEvaluationArtifactTableData = (\n  artifactsByRun: ArtifactsByRun,\n  pendingDataByRun: PendingDataByRun,\n  draftInputValues: DraftInputValues,\n  comparedRunsUuids: string[],\n  tableNames: string[],\n  groupByCols: string[],\n  outputColumn: string,\n): UseEvaluationArtifactTableDataResult =>\n  // eslint-disable-next-line complexity\n  useMemo(() => {\n    /**\n     * End results, i.e. table rows\n     */\n    const results: UseEvaluationArtifactTableDataResult = [];\n\n    /**\n     * An aggregate object containing all output column values.\n     * The first level key is the combined hash of all group by values,\n     * the second level key is the run UUID. A leaf of this tree corresponds to the output cell value.\n     */\n    const outputCellsValueMap: Record<string, Record<string, any>> = {};\n\n    /**\n     * An aggregate object containing values of the \"group by\" columns.\n     * The first level key is the combined hash of all group by values,\n     * the second level key is the \"group by\" column name. A leaf of this tree corresponds to the cell value.\n     */\n    const groupByCellsValueMap: Record<string, Record<string, any>> = {};\n\n    /**\n     * This array contains all \"group by\" keys that were freshly added or evaluated, i.e. they are not found\n     * in the original evaluation data. This helps to identify them, place them on the top and indicate\n     * they're yet to be synchronized.\n     */\n    const pendingRowKeys: string[] = [];\n\n    /**\n     * Start with populating the table with the draft rows created from the draft input sets\n     */\n    for (const draftInputValueSet of draftInputValues) {\n      const visibleGroupByValues = groupByCols.map((colName) => [colName, draftInputValueSet[colName]]);\n\n      const draftInputRowKey = visibleGroupByValues.map(([, value]) => value).join('.');\n\n      // Register new \"group by\" values combination and mark it as an artificial row\n      groupByCellsValueMap[draftInputRowKey] = fromPairs(visibleGroupByValues);\n      pendingRowKeys.push(draftInputRowKey);\n    }\n\n    const outputMetadataByCellsValueMap: Record<\n      string,\n      Record<string, { isPending: boolean; evaluationTime: number; totalTokens?: number }>\n    > = {};\n\n    // Search through artifact tables and get all entries corresponding to a particular run\n    const runsWithEntries = comparedRunsUuids.map<[string, EvaluationArtifactTableEntry[]]>((runUuid) => {\n      const baseEntries = Object.values(artifactsByRun[runUuid] || {})\n        .filter(({ path }) => tableNames.includes(path))\n        .map(({ entries }) => entries)\n        .flat();\n      return [runUuid, baseEntries];\n    });\n\n    // Iterate through all entries and assign them to the corresponding groups.\n    for (const [runUuid, entries] of runsWithEntries) {\n      for (const entry of entries) {\n        const { key, groupByValues } = extractGroupByValuesFromEntry(entry, groupByCols);\n\n        // Do not process the entry that have empty values for all active \"group by\" columns\n        if (Object.values(groupByValues).every((value) => !value)) {\n          continue;\n        }\n\n        // Assign \"group by\" column cell values\n        if (!groupByCellsValueMap[key]) {\n          groupByCellsValueMap[key] = groupByValues;\n        }\n\n        // Check if there are values in promptlab metadata columns\n        if (entry[PROMPTLAB_METADATA_COLUMN_LATENCY] || entry[PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS]) {\n          if (!outputMetadataByCellsValueMap[key]) {\n            outputMetadataByCellsValueMap[key] = {};\n          }\n\n          // If true, save it to the record containing output metadata at the index\n          // corresponding to a current \"group by\" key (row) and the run uuid (column)\n          // Show the metadata of the most recent value\n          if (!outputMetadataByCellsValueMap[key][runUuid]) {\n            outputMetadataByCellsValueMap[key][runUuid] = {\n              isPending: false,\n              evaluationTime: parseFloat(entry[PROMPTLAB_METADATA_COLUMN_LATENCY]),\n              totalTokens: entry[PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS]\n                ? parseInt(entry[PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS], 10)\n                : undefined,\n            };\n          }\n        }\n\n        // Assign output column cell values\n        if (!outputCellsValueMap[key]) {\n          outputCellsValueMap[key] = {};\n        }\n\n        const cellsEntry = outputCellsValueMap[key];\n\n        // Use the data from the other set if present, but only if there\n        // is no value assigned already. This way we will proritize prepended values.\n        cellsEntry[runUuid] = cellsEntry[runUuid] || entry[outputColumn];\n      }\n    }\n\n    for (const [runUuid, pendingEntries] of Object.entries(pendingDataByRun)) {\n      for (const pendingEntry of pendingEntries) {\n        const { entryData, ...metadata } = pendingEntry;\n        const { key, groupByValues } = extractGroupByValuesFromEntry(entryData, groupByCols);\n\n        // Do not process the entry that have empty values for all active \"group by\" columns\n        if (Object.values(groupByValues).every((value) => !value)) {\n          continue;\n        }\n\n        // Assign \"group by\" column cell values\n        if (!groupByCellsValueMap[key]) {\n          groupByCellsValueMap[key] = groupByValues;\n\n          // If the key was not found in the original set, mark entire row as pending\n          pendingRowKeys.push(key);\n        }\n\n        if (!outputMetadataByCellsValueMap[key]) {\n          outputMetadataByCellsValueMap[key] = {};\n        }\n\n        // code pointer for where the metadat is stored\n        outputMetadataByCellsValueMap[key][runUuid] = metadata;\n\n        // Assign output column cell values\n        if (!outputCellsValueMap[key]) {\n          outputCellsValueMap[key] = {};\n        }\n\n        const cellsEntry = outputCellsValueMap[key];\n        // Use pending data to overwrite already existing result\n        cellsEntry[runUuid] = entryData[outputColumn] || cellsEntry[runUuid];\n      }\n    }\n\n    /**\n     * Extract all \"group by\" keys, i.e. effectively row keys.\n     * Hoist all rows that were created during the pending evaluation to the top.\n     */\n    const allRowKeys = sortBy(Object.entries(groupByCellsValueMap), ([key]) => !pendingRowKeys.includes(key));\n\n    // In the final step, iterate through all found combinations of \"group by\" values and\n    // assign the cells\n    for (const [key, groupByCellValues] of allRowKeys) {\n      const existingTableRow = results.find(({ key: existingKey }) => key === existingKey);\n      if (existingTableRow && outputCellsValueMap[key]) {\n        existingTableRow.cellValues = outputCellsValueMap[key];\n        existingTableRow.outputMetadataByRunUuid = outputMetadataByCellsValueMap[key];\n      } else {\n        const cellsEntry = outputCellsValueMap[key];\n        Object.keys(cellsEntry || {}).forEach((runUuid: string) => {\n          if (cellsEntry[runUuid] !== null && typeof cellsEntry[runUuid] === 'object') {\n            try {\n              const { type, filepath, compressed_filepath } = cellsEntry[runUuid] as ArtifactLogTableImageObject;\n              if (type === LOG_TABLE_IMAGE_COLUMN_TYPE) {\n                cellsEntry[runUuid] = {\n                  url: getArtifactLocationUrl(filepath, runUuid),\n                  compressed_url: getArtifactLocationUrl(compressed_filepath, runUuid),\n                };\n              } else {\n                cellsEntry[runUuid] = JSON.stringify(cellsEntry[runUuid]);\n              }\n            } catch {\n              cellsEntry[runUuid] = '';\n            }\n          } else if (!isNil(cellsEntry[runUuid]) && !isString(cellsEntry[runUuid])) {\n            // stringify non-empty values so that the value\n            // doesn't appear as (empty) in the output cell\n            // also don't stringify strings, since they'll have\n            // an extra quote around them\n            cellsEntry[runUuid] = JSON.stringify(cellsEntry[runUuid]);\n          }\n        });\n\n        results.push({\n          key,\n          groupByCellValues,\n          cellValues: outputCellsValueMap[key] || {},\n          outputMetadataByRunUuid: outputMetadataByCellsValueMap[key],\n          isPendingInputRow: pendingRowKeys.includes(key),\n        });\n      }\n    }\n\n    return results;\n  }, [comparedRunsUuids, artifactsByRun, groupByCols, draftInputValues, tableNames, outputColumn, pendingDataByRun]);\n","import { useEffect, useState } from 'react';\nimport type { ExperimentPageViewState } from '../../experiment-page/models/ExperimentPageViewState';\nimport type { UpdateExperimentViewStateFn } from '../../../types';\n\nexport const useEvaluationArtifactViewState = (\n  viewState: ExperimentPageViewState,\n  updateViewState: UpdateExperimentViewStateFn,\n) => {\n  const { artifactViewState = {} } = viewState;\n  const [selectedTables, setSelectedTables] = useState<string[]>(artifactViewState.selectedTables || []);\n  const [groupByCols, setGroupByCols] = useState<string[]>(artifactViewState.groupByCols || []);\n  const [outputColumn, setOutputColumn] = useState(artifactViewState.outputColumn || '');\n\n  useEffect(\n    () =>\n      updateViewState({\n        artifactViewState: {\n          selectedTables,\n          groupByCols,\n          outputColumn,\n        },\n      }),\n    [updateViewState, selectedTables, groupByCols, outputColumn],\n  );\n\n  return {\n    selectedTables,\n    groupByCols,\n    outputColumn,\n    setSelectedTables,\n    setGroupByCols,\n    setOutputColumn,\n  };\n};\n","import { useEffect } from 'react';\n\ndeclare interface NavigatorWithUserData extends Navigator {\n  userAgentData: any;\n}\n\nconst isMacKeyboard = () =>\n  // userAgentData should be supported in modern Chromium based browsers\n  /mac/i.test((window.navigator as NavigatorWithUserData).userAgentData?.platform) ||\n  // if not, falls back to navigator.platform\n  /mac/i.test(window.navigator.platform);\n\nconst systemModifierKey: keyof KeyboardEvent = isMacKeyboard() ? 'metaKey' : 'ctrlKey';\n\n/**\n * Triggers certain action when a keyboard combination is pressed\n *\n * @example\n *\n * // Listens to CMD+S action\n * useBrowserKeyShortcutListener('s', { ctrlOrCmdKey: true }, () => { ... })\n */\nexport const useBrowserKeyShortcutListener = (\n  /**\n   * A single key (e.g. \"s\") that will be listened for pressing\n   */\n  key: string,\n  /**\n   * Determines which modifier keys are necessary to trigger the action\n   */\n  modifierKeys: { shiftKey?: boolean; ctrlOrCmdKey?: boolean; altOrOptKey?: boolean } = {},\n  /**\n   * A callback function. If returns true, the default action for the key combination will be prevented.\n   */\n  fn: () => boolean | void,\n) => {\n  const { altOrOptKey = false, ctrlOrCmdKey = false, shiftKey = false } = modifierKeys;\n  useEffect(() => {\n    const handler = (e: KeyboardEvent) => {\n      if (\n        (!ctrlOrCmdKey || e[systemModifierKey]) &&\n        (!altOrOptKey || e.altKey) &&\n        (!shiftKey || e.shiftKey) &&\n        e.key === key\n      ) {\n        const shouldPreventDefault = fn();\n        if (shouldPreventDefault) {\n          e.preventDefault();\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handler);\n    return () => window.removeEventListener('keydown', handler);\n  }, [key, fn, ctrlOrCmdKey, altOrOptKey, shiftKey]);\n\n  return { isMacKeyboard };\n};\n","import React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport type { ReduxState, ThunkDispatch } from '../../../../redux-types';\nimport { Button, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport {\n  discardPendingEvaluationData,\n  writeBackEvaluationArtifactsAction,\n} from '../../../actions/PromptEngineeringActions';\nimport { FormattedMessage } from 'react-intl';\nimport Utils from '../../../../common/utils/Utils';\nimport { useBrowserKeyShortcutListener } from '../../../../common/hooks/useBrowserKeyShortcutListener';\n\nexport const useEvaluationArtifactWriteBack = () => {\n  const { evaluationPendingDataByRunUuid, evaluationArtifactsBeingUploaded, evaluationDraftInputValues } = useSelector(\n    ({ evaluationData }: ReduxState) => evaluationData,\n  );\n\n  const [isSyncingArtifacts, setSyncingArtifacts] = useState(false);\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const discard = useCallback(() => {\n    dispatch(discardPendingEvaluationData());\n  }, [dispatch]);\n\n  const unsyncedDataEntriesCount = Object.values(evaluationPendingDataByRunUuid).flat().length;\n  const draftInputValuesCount = evaluationDraftInputValues.length;\n  const runsBeingSynchronizedCount = Object.values(evaluationArtifactsBeingUploaded).filter((runArtifacts) =>\n    Object.values(runArtifacts).some((isSynced) => isSynced),\n  ).length;\n\n  useEffect(() => {\n    if (unsyncedDataEntriesCount === 0) {\n      setSyncingArtifacts(false);\n    }\n  }, [unsyncedDataEntriesCount]);\n\n  const synchronizeArtifactData = useCallback(() => {\n    if (unsyncedDataEntriesCount === 0 || isSyncingArtifacts) {\n      return true;\n    }\n    setSyncingArtifacts(true);\n    dispatch(writeBackEvaluationArtifactsAction()).catch((e) => {\n      Utils.logErrorAndNotifyUser(e);\n    });\n    return true;\n  }, [dispatch, unsyncedDataEntriesCount, isSyncingArtifacts]);\n\n  const { isMacKeyboard } = useBrowserKeyShortcutListener('s', { ctrlOrCmdKey: true }, synchronizeArtifactData);\n\n  const { theme } = useDesignSystemTheme();\n\n  // Following flag is true when there are draft input values (draft rows), but\n  // no evaluated values yet\n  const pendingUnevaluatedDraftInputValues = draftInputValuesCount > 0 && unsyncedDataEntriesCount === 0;\n\n  // Display write-back UI only if there are draft rows or unsynced evaluation values\n  const shouldStatusElementBeDisplayed = unsyncedDataEntriesCount > 0 || pendingUnevaluatedDraftInputValues;\n\n  const EvaluationSyncStatusElement = shouldStatusElementBeDisplayed ? (\n    <div\n      css={{\n        backgroundColor: theme.colors.backgroundPrimary,\n        border: `1px solid ${theme.colors.border}`,\n        padding: theme.spacing.md,\n        marginBottom: theme.spacing.sm,\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n      }}\n    >\n      {pendingUnevaluatedDraftInputValues ? (\n        <FormattedMessage\n          defaultMessage=\"You have added rows with new input values, but you still need to evaluate the new data in order to save it.\"\n          description=\"Experiment page > artifact compare view > prompt lab artifact synchronization > unevaluated rows indicator\"\n        />\n      ) : isSyncingArtifacts ? (\n        <Typography.Text>\n          <FormattedMessage\n            defaultMessage=\"Synchronizing artifacts for {runsBeingSynchronizedCount} runs...\"\n            description=\"Experiment page > artifact compare view > prompt lab artifact synchronization > loading state\"\n            values={{\n              runsBeingSynchronizedCount: <strong>{runsBeingSynchronizedCount}</strong>,\n            }}\n          />\n        </Typography.Text>\n      ) : (\n        <Typography.Text>\n          <FormattedMessage\n            defaultMessage={`You have <strong>{unsyncedDataEntriesCount}</strong> unsaved evaluated {unsyncedDataEntriesCount, plural, =1 {value} other {values}}. Click \"Save\" button or press {keyCombination} keys to synchronize the artifact data.`}\n            description=\"Experiment page > artifact compare view > prompt lab artifact synchronization > pending changes indicator\"\n            values={{\n              strong: (value) => <strong>{value}</strong>,\n              unsyncedDataEntriesCount,\n              keyCombination: isMacKeyboard() ? '⌘CMD+S' : 'CTRL+S',\n            }}\n          />\n        </Typography.Text>\n      )}\n      <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_hooks_useevaluationartifactwriteback.tsx_102\"\n          disabled={isSyncingArtifacts}\n          onClick={discard}\n        >\n          <FormattedMessage\n            defaultMessage=\"Discard\"\n            description=\"Experiment page > artifact compare view > prompt lab artifact synchronization > submit button label\"\n          />\n        </Button>{' '}\n        {/* Display \"Save\" button only if there are actual evaluated data to sync (don't allow to sync empty draft rows) */}\n        {unsyncedDataEntriesCount > 0 && (\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_hooks_useevaluationartifactwriteback.tsx_110\"\n            loading={isSyncingArtifacts}\n            type=\"primary\"\n            onClick={synchronizeArtifactData}\n          >\n            <FormattedMessage\n              defaultMessage=\"Save\"\n              description=\"Experiment page > artifact compare view > prompt lab artifact synchronization > cancel button label\"\n            />\n          </Button>\n        )}\n      </div>\n    </div>\n  ) : null;\n\n  return { isSyncingArtifacts, EvaluationSyncStatusElement };\n};\n","import { Empty, Typography } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nexport const shouldDisplayEvaluationArtifactEmptyState = ({\n  noEvalTablesLogged,\n  userDeselectedAllColumns,\n  areRunsSelected,\n  areTablesSelected,\n}: EvaluationArtifactViewEmptyStateProps) =>\n  !areTablesSelected || !areRunsSelected || userDeselectedAllColumns || noEvalTablesLogged;\n\ninterface EvaluationArtifactViewEmptyStateProps {\n  noEvalTablesLogged: boolean;\n  userDeselectedAllColumns: boolean;\n  areRunsSelected: boolean;\n  areTablesSelected: boolean;\n}\n\nexport const EvaluationArtifactViewEmptyState = ({\n  noEvalTablesLogged,\n  userDeselectedAllColumns,\n  areRunsSelected,\n}: EvaluationArtifactViewEmptyStateProps) => {\n  const getEmptyContent = () => {\n    if (!areRunsSelected) {\n      return [\n        // eslint-disable-next-line react/jsx-key\n        <FormattedMessage\n          defaultMessage=\"No runs selected\"\n          description=\"Experiment page > artifact compare view > empty state for no runs selected > title\"\n        />,\n        // eslint-disable-next-line react/jsx-key\n        <FormattedMessage\n          defaultMessage=\"Make sure that at least one experiment run is visible and available to compare\"\n          description=\"Experiment page > artifact compare view > empty state for no runs selected > subtitle with the hint\"\n        />,\n      ];\n    }\n    if (noEvalTablesLogged) {\n      return [\n        // eslint-disable-next-line react/jsx-key\n        <FormattedMessage\n          defaultMessage=\"No evaluation tables logged\"\n          description=\"Experiment page > artifact compare view > empty state for no evaluation tables logged > title\"\n        />,\n        // eslint-disable-next-line react/jsx-key\n        <FormattedMessage\n          defaultMessage=\"Please log at least one table artifact containing evaluation data. <link>Learn more</link>.\"\n          description=\"Experiment page > artifact compare view > empty state for no evaluation tables logged > subtitle\"\n          values={{\n            link: (chunks) => (\n              <Typography.Link\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationartifactviewemptystate.tsx_48\"\n                openInNewTab\n                href=\"https://mlflow.org/docs/latest/python_api/mlflow.html?highlight=log_table#mlflow.log_table\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {chunks}\n              </Typography.Link>\n            ),\n          }}\n        />,\n      ];\n    }\n    if (userDeselectedAllColumns) {\n      return [\n        // eslint-disable-next-line react/jsx-key\n        <FormattedMessage\n          defaultMessage=\"No group by columns selected\"\n          description=\"Experiment page > artifact compare view > empty state for no group by columns selected > title\"\n        />,\n        // eslint-disable-next-line react/jsx-key\n        <FormattedMessage\n          defaultMessage='Using controls above, select at least one \"group by\" column.'\n          description=\"Experiment page > artifact compare view > empty state for no group by columns selected > title\"\n        />,\n      ];\n    }\n    return [\n      // eslint-disable-next-line react/jsx-key\n      <FormattedMessage\n        defaultMessage=\"No tables selected\"\n        description=\"Experiment page > artifact compare view > empty state for no tables selected > title\"\n      />,\n      // eslint-disable-next-line react/jsx-key\n      <FormattedMessage\n        defaultMessage=\"Using controls above, select at least one artifact containing table.\"\n        description=\"Experiment page > artifact compare view > empty state for no tables selected > subtitle with the hint\"\n      />,\n    ];\n  };\n  const [title, description] = getEmptyContent();\n  return <Empty title={title} description={description} />;\n};\n","import {\n  CopyIcon,\n  DialogCombobox,\n  DialogComboboxContent,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListCheckboxItem,\n  DialogComboboxOptionListSelectItem,\n  DialogComboboxTrigger,\n  Empty,\n  InfoSmallIcon,\n  Input,\n  SearchIcon,\n  LegacySkeleton,\n  Spinner,\n  ToggleButton,\n  LegacyTooltip,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport type { EvaluationDataReduxState } from '../../reducers/EvaluationDataReducer';\nimport type { ExperimentPageViewState } from '../experiment-page/models/ExperimentPageViewState';\nimport type { RunRowType } from '../experiment-page/utils/experimentPage.row-types';\nimport { EvaluationArtifactCompareTable } from './components/EvaluationArtifactCompareTable';\nimport { useEvaluationArtifactColumns } from './hooks/useEvaluationArtifactColumns';\nimport { useEvaluationArtifactTableData } from './hooks/useEvaluationArtifactTableData';\nimport { useEvaluationArtifactTables } from './hooks/useEvaluationArtifactTables';\nimport type { RunDatasetWithTags, UpdateExperimentViewStateFn } from '../../types';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { PreviewSidebar } from '../../../common/components/PreviewSidebar';\nimport { useEvaluationArtifactViewState } from './hooks/useEvaluationArtifactViewState';\nimport { useEvaluationArtifactWriteBack } from './hooks/useEvaluationArtifactWriteBack';\nimport { PromptEngineeringContextProvider } from './contexts/PromptEngineeringContext';\nimport type { ReduxState, ThunkDispatch } from '../../../redux-types';\nimport { getEvaluationTableArtifact } from '../../actions';\nimport Utils from '../../../common/utils/Utils';\nimport {\n  DEFAULT_PROMPTLAB_OUTPUT_COLUMN,\n  canEvaluateOnRun,\n  extractRequiredInputParamsForRun,\n} from '../prompt-engineering/PromptEngineering.utils';\nimport { searchAllPromptLabAvailableEndpoints } from '../../actions/PromptEngineeringActions';\nimport { shouldEnablePromptLab } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport {\n  EvaluationArtifactViewEmptyState,\n  shouldDisplayEvaluationArtifactEmptyState,\n} from './EvaluationArtifactViewEmptyState';\nimport { useUpdateExperimentViewUIState } from '../experiment-page/contexts/ExperimentPageUIStateContext';\nimport { useToggleRowVisibilityCallback } from '../experiment-page/hooks/useToggleRowVisibilityCallback';\nimport { RUNS_VISIBILITY_MODE } from '../experiment-page/models/ExperimentPageUIState';\nimport { FormattedJsonDisplay } from '@mlflow/mlflow/src/common/components/JsonFormatting';\nimport { EvaluationTableParseError } from '../../sdk/EvaluationArtifactService';\n\nconst MAX_RUNS_TO_COMPARE = 10;\n\ninterface EvaluationArtifactCompareViewProps {\n  comparedRuns: RunRowType[];\n  viewState: ExperimentPageViewState;\n  updateViewState: UpdateExperimentViewStateFn;\n  onDatasetSelected: (dataset: RunDatasetWithTags, run: RunRowType) => void;\n}\n\n/**\n * Compares the table data contained in experiment run artifacts.\n */\nconst EvaluationArtifactCompareViewImpl = ({\n  comparedRuns,\n  onDatasetSelected,\n  viewState,\n  updateViewState,\n}: EvaluationArtifactCompareViewProps) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const updateUIState = useUpdateExperimentViewUIState();\n\n  const visibleRuns = useMemo(\n    () => comparedRuns.filter(({ hidden }) => !hidden).slice(0, MAX_RUNS_TO_COMPARE),\n    [comparedRuns],\n  );\n\n  const { selectedTables, groupByCols, outputColumn, setSelectedTables, setGroupByCols, setOutputColumn } =\n    useEvaluationArtifactViewState(viewState, updateViewState);\n\n  const [showSearchSpinner, setShowSearchSpinner] = useState(false);\n  const [filter, setFilter] = useState('');\n  const [debouncedFilter, setDebouncedFilter] = useState('');\n  const [userDeselectedAllColumns, setUserDeselectedAllColumns] = useState(false);\n\n  const { isSyncingArtifacts, EvaluationSyncStatusElement } = useEvaluationArtifactWriteBack();\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  useEffect(() => {\n    if (shouldEnablePromptLab()) {\n      dispatch(searchAllPromptLabAvailableEndpoints()).catch((e) => {\n        Utils.logErrorAndNotifyUser(e?.message || e);\n      });\n    }\n  }, [dispatch]);\n\n  const handleTableToggle = useCallback(\n    (value: string) =>\n      setSelectedTables((currentValue) => {\n        if (currentValue.includes(value)) {\n          return currentValue.filter((item) => item !== value);\n        } else {\n          return [...currentValue, value];\n        }\n      }),\n    [setSelectedTables],\n  );\n\n  const handleGroupByToggle = useCallback(\n    (value: string) =>\n      setGroupByCols((currentValue) => {\n        const newValues = currentValue.includes(value)\n          ? currentValue.filter((item) => item !== value)\n          : [...currentValue, value];\n        setUserDeselectedAllColumns(newValues.length === 0);\n        return newValues;\n      }),\n    [setGroupByCols],\n  );\n\n  const visibleRunsUuids = useMemo(() => visibleRuns.map(({ runUuid }) => runUuid), [visibleRuns]);\n\n  const { evaluationArtifactsByRunUuid, evaluationPendingDataByRunUuid, evaluationDraftInputValues } = useSelector(\n    ({ evaluationData }: ReduxState) => evaluationData,\n  );\n\n  const { tables, tablesByRun, noEvalTablesLogged } = useEvaluationArtifactTables(visibleRuns);\n\n  // Select the first table by default\n  useEffect(() => {\n    if (tables.length > 0 && selectedTables.length === 0) {\n      setSelectedTables([tables[0]]);\n    }\n  }, [tables, setSelectedTables, selectedTables.length]);\n\n  const isLoading = useSelector(({ evaluationData, modelGateway }: ReduxState) => {\n    const gatewayRoutesLoading = modelGateway.modelGatewayRoutesLoading.loading;\n    return (\n      gatewayRoutesLoading ||\n      visibleRunsUuids.some((uuid) =>\n        selectedTables.some((table) => evaluationData.evaluationArtifactsLoadingByRunUuid[uuid]?.[table]),\n      )\n    );\n  });\n\n  const { columns, imageColumns } = useEvaluationArtifactColumns(\n    evaluationArtifactsByRunUuid,\n    visibleRunsUuids,\n    selectedTables,\n  );\n\n  const isImageColumn = imageColumns.includes(outputColumn);\n\n  const tableRows = useEvaluationArtifactTableData(\n    evaluationArtifactsByRunUuid,\n    evaluationPendingDataByRunUuid,\n    evaluationDraftInputValues,\n    visibleRunsUuids,\n    selectedTables,\n    groupByCols,\n    outputColumn,\n  );\n\n  // Try to extract all existing prompt input fields from prompt engineering runs, if there are any.\n  // Return \"null\" otherwise.\n  const promptLabInputVariableNames = useMemo(() => {\n    const promptEngineeringRuns = visibleRuns.filter(canEvaluateOnRun);\n    const allInputNames = promptEngineeringRuns.map(extractRequiredInputParamsForRun).flat();\n    if (!allInputNames.length) {\n      return null;\n    }\n\n    // Remove duplicates\n    const distinctInputNames = Array.from(new Set(allInputNames));\n\n    // Ensure that detected input names are included in the available columns\n    return distinctInputNames.filter((inputName) => columns.includes(inputName));\n  }, [visibleRuns, columns]);\n\n  // If we've changed the visible run set and all of them originate from prompt engineering,\n  // reset the columns so they will be recalculated again\n  useEffect(() => {\n    if (visibleRuns.every(canEvaluateOnRun)) {\n      setGroupByCols([]);\n    }\n  }, [setGroupByCols, visibleRuns]);\n\n  // For every run, load its selected tables\n  useEffect(() => {\n    if (!selectedTables.length) {\n      return;\n    }\n    for (const run of visibleRuns) {\n      if (!run) {\n        continue;\n      }\n      const tablesToFetch = (tablesByRun[run.runUuid] || []).filter((table) => selectedTables.includes(table));\n      for (const table of tablesToFetch) {\n        dispatch(getEvaluationTableArtifact(run.runUuid, table, false)).catch((e) => {\n          if (e instanceof EvaluationTableParseError) {\n            // In case of table parse errors, just display the error to the user without propagating it upstream\n            Utils.displayGlobalErrorNotification(e.message);\n          } else {\n            Utils.logErrorAndNotifyUser(e.message || e);\n          }\n        });\n      }\n    }\n  }, [visibleRuns, dispatch, selectedTables, tablesByRun]);\n\n  // Table is ready to use if it's loaded, at least one table and at least one run is selected\n  const areTablesSelected = selectedTables.length > 0;\n  const areRunsSelected = visibleRuns.length > 0;\n  const isViewConfigured = !isLoading && areTablesSelected && areRunsSelected;\n\n  const filteredRows = useMemo(() => {\n    if (!debouncedFilter.trim()) {\n      return tableRows;\n    }\n    const regexp = new RegExp(debouncedFilter, 'i');\n    return tableRows.filter(({ groupByCellValues }) =>\n      Object.values(groupByCellValues).some((groupByValue) => groupByValue?.match(regexp)),\n    );\n  }, [tableRows, debouncedFilter]);\n\n  const toggleRowVisibility = useToggleRowVisibilityCallback(comparedRuns);\n\n  const handleHideRun = useCallback(\n    (runUuid: string) => {\n      toggleRowVisibility(RUNS_VISIBILITY_MODE.CUSTOM, runUuid);\n    },\n    [toggleRowVisibility],\n  );\n\n  // Make sure that there's at least one \"group by\" column selected\n  useEffect(() => {\n    if (isLoading || userDeselectedAllColumns) {\n      return;\n    }\n    const noColumnsSelected = groupByCols.length < 1;\n    const columnNotAvailableAnymore = groupByCols.some((column) => !columns.includes(column));\n    const firstColumn = columns[0];\n\n    // If prompt engineering prompt inputs are detected, take them as a candidate for initial \"group by\" columns.\n    // If not, use the first valid column found.\n    const groupByColumnCandidates = promptLabInputVariableNames || (firstColumn ? [firstColumn] : null);\n\n    if ((noColumnsSelected || columnNotAvailableAnymore) && groupByColumnCandidates) {\n      setGroupByCols(groupByColumnCandidates);\n    }\n  }, [\n    isLoading,\n    userDeselectedAllColumns,\n    groupByCols,\n    outputColumn,\n    columns,\n    setGroupByCols,\n    promptLabInputVariableNames,\n  ]);\n\n  // Remove MLFLOW_ columns from the list of groupby columns since they are for metadata only\n  const availableGroupByColumns = useMemo(() => columns.filter((col) => !col.startsWith('MLFLOW_')), [columns]);\n\n  // All columns that are not used for grouping can be used as output (compare) column\n  // Remove MLFLOW_ columns from the list of output columns\n  const availableOutputColumns = useMemo(\n    () => [...columns, ...imageColumns].filter((col) => !groupByCols.includes(col) && !col.startsWith('MLFLOW_')),\n    [columns, imageColumns, groupByCols],\n  );\n\n  // If the current output column have been selected as \"group by\", change it to the other available one\n  useEffect(() => {\n    if (groupByCols.includes(outputColumn) || !outputColumn) {\n      const nextColumnCandidate = availableOutputColumns.includes(DEFAULT_PROMPTLAB_OUTPUT_COLUMN)\n        ? DEFAULT_PROMPTLAB_OUTPUT_COLUMN\n        : availableOutputColumns[0];\n      setOutputColumn(nextColumnCandidate || '');\n    }\n  }, [groupByCols, outputColumn, availableOutputColumns, setOutputColumn]);\n\n  // On every change of \"filter\" input, debounce the value and show the spinner\n  useEffect(() => {\n    setShowSearchSpinner(true);\n    const handler = setTimeout(() => setDebouncedFilter(filter), 250);\n    return () => clearTimeout(handler);\n  }, [filter]);\n\n  // After debounced filter value settles in, remove the search spinner\n  useEffect(() => {\n    setShowSearchSpinner(false);\n  }, [debouncedFilter]);\n\n  // If the current output column is not available anymore, change it to the other available one\n  useEffect(() => {\n    if (!availableOutputColumns.includes(outputColumn)) {\n      const nextColumnCandidate = availableOutputColumns.includes(DEFAULT_PROMPTLAB_OUTPUT_COLUMN)\n        ? DEFAULT_PROMPTLAB_OUTPUT_COLUMN\n        : availableOutputColumns[0];\n      setOutputColumn(nextColumnCandidate || '');\n    }\n  }, [outputColumn, availableOutputColumns, setOutputColumn]);\n\n  // If any currently selected table is not available anymore, deselect it\n  useEffect(() => {\n    if (selectedTables.some((table) => !tables.includes(table))) {\n      setSelectedTables([]);\n    }\n  }, [selectedTables, tables, setSelectedTables]);\n\n  const [sidebarPreviewData, setSidebarPreviewData] = useState<{\n    value: string;\n    header: string;\n  } | null>(null);\n\n  const handleCellClicked = useCallback(\n    (value: string, header: string) => {\n      setSidebarPreviewData({ value, header });\n      updateViewState({ previewPaneVisible: true });\n    },\n    [updateViewState],\n  );\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        borderTop: `1px solid ${theme.colors.border}`,\n        borderLeft: `1px solid ${theme.colors.border}`,\n        // Let's cover 1 pixel of the grid's border for the sleek look\n        marginLeft: -1,\n        zIndex: 1,\n        height: '100%',\n        display: 'grid',\n        gridTemplateColumns: viewState.previewPaneVisible ? '1fr auto' : '1fr',\n        overflow: 'hidden',\n      }}\n    >\n      <div\n        css={{\n          paddingLeft: theme.spacing.sm,\n          paddingTop: theme.spacing.sm,\n          height: '100%',\n          display: 'grid',\n          gridTemplateRows: 'auto auto 1fr',\n          overflow: 'hidden',\n          rowGap: theme.spacing.sm,\n          backgroundColor: theme.colors.backgroundSecondary,\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            alignItems: 'center',\n            gap: theme.spacing.sm,\n            overflow: 'hidden',\n            height: theme.general.heightSm,\n          }}\n        >\n          <DialogCombobox\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationartifactcompareview.tsx_358\"\n            label={\n              <FormattedMessage\n                defaultMessage=\"Table\"\n                description=\"Experiment page > artifact compare view > table select dropdown label\"\n              />\n            }\n            multiSelect\n            value={selectedTables}\n          >\n            <DialogComboboxTrigger\n              css={{ maxWidth: 300, backgroundColor: theme.colors.backgroundPrimary }}\n              data-testid=\"dropdown-tables\"\n              onClear={() => setSelectedTables([])}\n              disabled={isSyncingArtifacts || !areRunsSelected || noEvalTablesLogged}\n            />\n            <DialogComboboxContent css={{ maxWidth: 300 }}>\n              <DialogComboboxOptionList>\n                {tables.map((artifactPath) => (\n                  <DialogComboboxOptionListCheckboxItem\n                    value={artifactPath}\n                    key={artifactPath}\n                    onChange={handleTableToggle}\n                    checked={selectedTables.includes(artifactPath)}\n                    data-testid=\"dropdown-tables-option\"\n                  >\n                    {artifactPath}\n                  </DialogComboboxOptionListCheckboxItem>\n                ))}\n              </DialogComboboxOptionList>\n            </DialogComboboxContent>\n          </DialogCombobox>\n          <LegacyTooltip\n            title={\n              <FormattedMessage\n                defaultMessage=\"Using the list of logged table artifacts, select at least one to start comparing results.\"\n                description=\"Experiment page > artifact compare view > table select dropdown tooltip\"\n              />\n            }\n          >\n            <InfoSmallIcon />\n          </LegacyTooltip>\n        </div>\n        {isLoading ? (\n          <LegacySkeleton />\n        ) : (\n          <>\n            <div\n              css={{\n                display: 'flex',\n                columnGap: theme.spacing.sm,\n                alignItems: 'center',\n                overflow: 'hidden',\n                height: theme.general.heightSm,\n              }}\n            >\n              <Input\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationartifactcompareview.tsx_414\"\n                prefix={<SearchIcon />}\n                suffix={showSearchSpinner && <Spinner size=\"small\" />}\n                css={{ width: 300, minWidth: 300 }}\n                onChange={(e) => setFilter(e.target.value)}\n                value={filter}\n                placeholder={intl.formatMessage(\n                  {\n                    defaultMessage: 'Filter by {columnNames}',\n                    description: 'Experiment page > artifact compare view > search input placeholder',\n                  },\n                  {\n                    columnNames: groupByCols.join(', '),\n                  },\n                )}\n                allowClear\n                disabled={!isViewConfigured || isSyncingArtifacts}\n              />\n              <DialogCombobox\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationartifactcompareview.tsx_433\"\n                value={groupByCols}\n                multiSelect\n                label={\n                  <FormattedMessage\n                    defaultMessage=\"Group by\"\n                    description='Experiment page > artifact compare view > \"group by column\" select dropdown label'\n                  />\n                }\n              >\n                <DialogComboboxTrigger\n                  disabled={!isViewConfigured || isSyncingArtifacts}\n                  allowClear={false}\n                  showTagAfterValueCount={1}\n                  css={{ maxWidth: 300, backgroundColor: theme.colors.backgroundPrimary }}\n                  aria-label='Select \"group by\" columns'\n                />\n                <DialogComboboxContent css={{ maxWidth: 300 }}>\n                  <DialogComboboxOptionList>\n                    {availableGroupByColumns.map((columnName) => (\n                      <DialogComboboxOptionListCheckboxItem\n                        value={columnName}\n                        key={columnName}\n                        onChange={handleGroupByToggle}\n                        checked={groupByCols.includes(columnName)}\n                      >\n                        {columnName}\n                      </DialogComboboxOptionListCheckboxItem>\n                    ))}\n                  </DialogComboboxOptionList>\n                </DialogComboboxContent>\n              </DialogCombobox>\n              <DialogCombobox\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationartifactcompareview.tsx_465\"\n                value={[outputColumn]}\n                label={\n                  <FormattedMessage\n                    defaultMessage=\"Compare\"\n                    description='Experiment page > artifact compare view > \"compare\" select dropdown label'\n                  />\n                }\n              >\n                <DialogComboboxTrigger\n                  disabled={!isViewConfigured || isSyncingArtifacts}\n                  allowClear={false}\n                  css={{ maxWidth: 300, backgroundColor: theme.colors.backgroundPrimary }}\n                />\n                <DialogComboboxContent css={{ maxWidth: 300 }}>\n                  <DialogComboboxOptionList>\n                    {availableOutputColumns.map((columnName) => (\n                      <DialogComboboxOptionListSelectItem\n                        value={columnName}\n                        key={columnName}\n                        onChange={() => setOutputColumn(columnName)}\n                        checked={outputColumn === columnName}\n                      >\n                        {columnName}\n                      </DialogComboboxOptionListSelectItem>\n                    ))}\n                  </DialogComboboxOptionList>\n                </DialogComboboxContent>\n              </DialogCombobox>\n            </div>\n\n            {shouldDisplayEvaluationArtifactEmptyState({\n              areRunsSelected,\n              areTablesSelected,\n              noEvalTablesLogged,\n              userDeselectedAllColumns,\n            }) ? (\n              <div\n                css={{\n                  height: '100%',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                }}\n              >\n                <EvaluationArtifactViewEmptyState\n                  areRunsSelected={areRunsSelected}\n                  areTablesSelected={areTablesSelected}\n                  noEvalTablesLogged={noEvalTablesLogged}\n                  userDeselectedAllColumns={userDeselectedAllColumns}\n                />\n              </div>\n            ) : (\n              <div\n                css={{\n                  position: 'relative' as const,\n                  zIndex: 1,\n                  overflowY: 'hidden' as const,\n                  height: '100%',\n                  backgroundColor: theme.colors.backgroundPrimary,\n                }}\n              >\n                <PromptEngineeringContextProvider tableData={tableRows} outputColumn={outputColumn}>\n                  <EvaluationArtifactCompareTable\n                    visibleRuns={visibleRuns}\n                    groupByColumns={groupByCols}\n                    resultList={filteredRows}\n                    onCellClick={isImageColumn ? undefined : handleCellClicked}\n                    onHideRun={handleHideRun}\n                    onDatasetSelected={onDatasetSelected}\n                    highlightedText={debouncedFilter.trim()}\n                    isPreviewPaneVisible={viewState.previewPaneVisible}\n                    outputColumnName={outputColumn}\n                    isImageColumn={isImageColumn}\n                  />\n                </PromptEngineeringContextProvider>\n              </div>\n            )}\n            {EvaluationSyncStatusElement}\n          </>\n        )}\n      </div>\n      {viewState.previewPaneVisible && (\n        <PreviewSidebar\n          content={sidebarPreviewData?.value ? <FormattedJsonDisplay json={sidebarPreviewData.value} /> : null}\n          copyText={sidebarPreviewData?.value || ''}\n          headerText={sidebarPreviewData?.header}\n          onClose={() => updateViewState({ previewPaneVisible: false })}\n          empty={\n            <Empty\n              description={\n                <FormattedMessage\n                  defaultMessage=\"Select a cell to display preview\"\n                  description=\"Experiment page > artifact compare view > preview sidebar > nothing selected\"\n                />\n              }\n            />\n          }\n        />\n      )}\n    </div>\n  );\n};\n\nexport const EvaluationArtifactCompareView = (props: EvaluationArtifactCompareViewProps & { disabled?: boolean }) => {\n  const { theme } = useDesignSystemTheme();\n  if (props.disabled) {\n    return (\n      <div\n        css={{\n          flex: 1,\n          backgroundColor: theme.colors.backgroundSecondary,\n          height: '100%',\n          borderTop: `1px solid ${theme.colors.border}`,\n          borderLeft: `1px solid ${theme.colors.border}`,\n          paddingTop: theme.spacing.lg,\n          marginLeft: -1,\n          zIndex: 1,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"Evaluation not available when grouping is enabled\"\n              description=\"Experiment page > artifact compare view > disabled due to run grouping > title\"\n            />\n          }\n          description={\n            <FormattedMessage\n              defaultMessage=\"Disable run grouping in order to access the evaluation view\"\n              description=\"Experiment page > artifact compare view > disabled due to run grouping > description\"\n            />\n          }\n          image={<div />}\n        />\n      </div>\n    );\n  }\n  return <EvaluationArtifactCompareViewImpl {...props} />;\n};\n","import { fromPairs } from 'lodash';\nimport { useMemo } from 'react';\nimport type { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport { extractLoggedTablesFromRunTags } from '../../../utils/ArtifactUtils';\n\n/**\n * Consumes an array of experiment run entities and extracts names of\n * all table artifacts defined by their tags.\n */\nexport const useEvaluationArtifactTables = (comparedRunRows: RunRowType[]) =>\n  useMemo(() => {\n    const tablesByRun = fromPairs(\n      comparedRunRows\n        .map<[string, string[]]>((run) => {\n          const tablesInRun = run.tags ? extractLoggedTablesFromRunTags(run.tags) : [];\n          return [run.runUuid, tablesInRun];\n        })\n        // Filter entries with no tables reported\n        .filter(([, tables]) => tables.length > 0),\n    );\n\n    const allUniqueTables = Array.from(new Set(Object.values(tablesByRun).flat()));\n\n    const tablesIntersection = allUniqueTables.filter((tableName) =>\n      comparedRunRows.every(({ runUuid }) => tablesByRun[runUuid]?.includes(tableName)),\n    );\n\n    const noEvalTablesLogged = allUniqueTables.length === 0;\n\n    return {\n      tables: allUniqueTables,\n      tablesByRun,\n      tablesIntersection,\n      noEvalTablesLogged,\n    };\n  }, [comparedRunRows]);\n","import { useMemo } from 'react';\nimport type { EvaluationDataReduxState } from '../../../reducers/EvaluationDataReducer';\nimport type { ArtifactLogTableImageObject } from '@mlflow/mlflow/src/experiment-tracking/types';\n\ntype ArtifactsByRun = EvaluationDataReduxState['evaluationArtifactsByRunUuid'];\n\n/**\n * Consumes artifacts data (extracted from the redux store) and based on the\n * provided list of tables and run UUIDs, returns:\n * - list of all columns found in the tables data\n * - list of columns that are present in every matching table\n */\nexport const useEvaluationArtifactColumns = (\n  artifactsByRun: ArtifactsByRun,\n  comparedRunUuids: string[],\n  tableNames: string[],\n) =>\n  useMemo(() => {\n    // Do not proceed if there are no tables or runs selected\n    if (tableNames.length === 0 || comparedRunUuids.length === 0) {\n      return { columns: [], columnsIntersection: [], imageColumns: [] };\n    }\n\n    // Extract all matching table objects from the store data\n    const allTableEntries = comparedRunUuids\n      .map((runUuid) => Object.values(artifactsByRun[runUuid] || {}).filter(({ path }) => tableNames.includes(path)))\n      .flat();\n\n    // Extract all valid column names\n    const allColumnsForAllTables = allTableEntries\n      .filter(({ path }) => tableNames.includes(path))\n      .map(({ columns, entries }) => {\n        return columns.map((column) => {\n          const column_string = String(column);\n          if (entries.length > 0) {\n            const entry = entries[0][column];\n            if (typeof entry === 'object' && (entry as ArtifactLogTableImageObject)?.type === 'image') {\n              return { name: column_string, type: 'image' };\n            } else {\n              return { name: column_string, type: 'text' };\n            }\n          } else {\n            return { name: column_string, type: 'text' };\n          }\n        });\n      })\n      .flat();\n\n    // Remove duplicates\n    const columns = Array.from(\n      new Set(allColumnsForAllTables.filter((col) => col.type === 'text').map((col) => col.name)),\n    );\n    const imageColumns = Array.from(\n      new Set(allColumnsForAllTables.filter((col) => col.type === 'image').map((col) => col.name)),\n    );\n    // Find the intersection\n    const columnsIntersection = columns.filter((column) =>\n      allTableEntries.every(({ columns: tableColumns }) => tableColumns.includes(column)),\n    );\n\n    return {\n      columns,\n      columnsIntersection,\n      imageColumns,\n    };\n  }, [comparedRunUuids, artifactsByRun, tableNames]);\n","import { TableSkeleton, useDesignSystemTheme } from '@databricks/design-system';\nimport type { ReactNode } from 'react';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport type { MetricEntitiesByName, ChartSectionConfig, ImageEntity } from '../../types';\nimport type { KeyValueEntity } from '../../../common/types';\nimport { RunsChartsCardConfig } from '../runs-charts/runs-charts.types';\nimport type { RunsChartType } from '../runs-charts/runs-charts.types';\nimport { type SerializedRunsChartsCardConfigCard } from '../runs-charts/runs-charts.types';\nimport { RunsChartsConfigureModal } from '../runs-charts/components/RunsChartsConfigureModal';\nimport { isEmptyChartCard, type RunsChartsRunData } from '../runs-charts/components/RunsCharts.common';\nimport {\n  AUTOML_EVALUATION_METRIC_TAG,\n  LOG_IMAGE_TAG_INDICATOR,\n  MLFLOW_EXPERIMENT_PRIMARY_METRIC_NAME,\n} from '../../constants';\nimport { RunsChartsTooltipBody } from '../runs-charts/components/RunsChartsTooltipBody';\nimport { RunsChartsTooltipWrapper } from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { useUpdateExperimentViewUIState } from '../experiment-page/contexts/ExperimentPageUIStateContext';\nimport {\n  type ExperimentPageUIState,\n  RUNS_VISIBILITY_MODE,\n  type RunsChartsGlobalLineChartConfig,\n} from '../experiment-page/models/ExperimentPageUIState';\nimport type { RunRowType } from '../experiment-page/utils/experimentPage.row-types';\nimport { RunsChartsSectionAccordion } from '../runs-charts/components/sections/RunsChartsSectionAccordion';\nimport type { ReduxState } from '@mlflow/mlflow/src/redux-types';\nimport { SearchIcon } from '@databricks/design-system';\nimport { Input } from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport {\n  type RunsGroupByConfig,\n  getRunGroupDisplayName,\n  isRemainingRunsGroup,\n  normalizeRunsGroupByKey,\n} from '../experiment-page/utils/experimentPage.group-row-utils';\nimport { keyBy, values } from 'lodash';\nimport {\n  type RunsChartsUIConfigurationSetter,\n  RunsChartsUIConfigurationContextProvider,\n  useUpdateRunsChartsUIConfiguration,\n  useReorderRunsChartsFn,\n  useInsertRunsChartsFn,\n  useRemoveRunsChartFn,\n  useConfirmChartCardConfigurationFn,\n} from '../runs-charts/hooks/useRunsChartsUIConfiguration';\nimport { useToggleRowVisibilityCallback } from '../experiment-page/hooks/useToggleRowVisibilityCallback';\nimport { RunsChartsFullScreenModal } from '../runs-charts/components/RunsChartsFullScreenModal';\nimport { usePopulateImagesByRunUuid } from '../experiment-page/hooks/usePopulateImagesByRunUuid';\nimport { useGetExperimentRunColor } from '../experiment-page/hooks/useExperimentRunColor';\nimport { RunsChartsGlobalChartSettingsDropdown } from '../runs-charts/components/RunsChartsGlobalChartSettingsDropdown';\nimport { RunsChartsDraggableCardsGridContextProvider } from '../runs-charts/components/RunsChartsDraggableCardsGridContext';\nimport { RunsChartsFilterInput } from '../runs-charts/components/RunsChartsFilterInput';\nimport { RUNS_CHARTS_UI_Z_INDEX } from '../runs-charts/utils/runsCharts.const';\n\nexport interface RunsCompareProps {\n  comparedRuns: RunRowType[];\n  isLoading: boolean;\n  metricKeyList: string[];\n  paramKeyList: string[];\n  experimentTags: Record<string, KeyValueEntity>;\n  compareRunCharts?: SerializedRunsChartsCardConfigCard[];\n  compareRunSections?: ChartSectionConfig[];\n  groupBy: null | string | RunsGroupByConfig;\n  autoRefreshEnabled?: boolean;\n  hideEmptyCharts?: boolean;\n  globalLineChartConfig?: RunsChartsGlobalLineChartConfig;\n  chartsSearchFilter?: string;\n  storageKey: string;\n  minWidth: number;\n}\n\n/**\n * Utility function: based on a run row coming from runs table, creates run data trace to be used in charts\n */\nconst createRunDataTrace = (\n  run: RunRowType,\n  latestMetricsByRunUuid: Record<string, MetricEntitiesByName>,\n  paramsByRunUuid: Record<string, Record<string, KeyValueEntity>>,\n  tagsByRunUuid: Record<string, Record<string, KeyValueEntity>>,\n  imagesByRunUuid: Record<string, Record<string, Record<string, ImageEntity>>>,\n  color: string,\n) => ({\n  uuid: run.runUuid,\n  displayName: run.runInfo?.runName || run.runUuid,\n  runInfo: run.runInfo,\n  metrics: latestMetricsByRunUuid[run.runUuid] || {},\n  params: paramsByRunUuid[run.runUuid] || {},\n  tags: tagsByRunUuid[run.runUuid] || {},\n  images: imagesByRunUuid[run.runUuid] || {},\n  color,\n  pinned: run.pinned,\n  pinnable: run.pinnable,\n  metricsHistory: {},\n  belongsToGroup: run.runDateAndNestInfo?.belongsToGroup,\n  hidden: run.hidden,\n});\n\n/**\n * Utility function: based on a group row coming from runs table, creates run group data trace to be used in charts\n */\nconst createGroupDataTrace = (run: RunRowType, color: string) => {\n  // Latest aggregated metrics in groups does not contain step or timestamps.\n  // For step, we're using maxStep which will help determine the chart type.\n  // For timestamp, we use 0 as a placeholder.\n  const metricsData = run.groupParentInfo?.aggregatedMetricData\n    ? keyBy(\n        values(run.groupParentInfo?.aggregatedMetricData).map(({ key, value, maxStep }) => ({\n          key,\n          value,\n          step: maxStep,\n          timestamp: 0,\n        })),\n        'key',\n      )\n    : {};\n  return {\n    uuid: run.rowUuid,\n    displayName: getRunGroupDisplayName(run.groupParentInfo),\n    groupParentInfo: run.groupParentInfo,\n    metrics: metricsData,\n    params: run.groupParentInfo?.aggregatedParamData || {},\n    // TODO: add tags for groups\n    tags: {},\n    images: {},\n    color,\n    pinned: run.pinned,\n    pinnable: run.pinnable,\n    metricsHistory: {},\n    hidden: run.hidden,\n  };\n};\n\n/**\n * Component displaying comparison charts and differences (and in future artifacts) between experiment runs.\n * Intended to be mounted next to runs table.\n *\n * This component extracts params/metrics from redux store by itself for quicker access. However,\n * it needs a provided list of compared run entries using same model as runs table.\n */\nconst RunsCompareImpl = ({\n  isLoading,\n  comparedRuns,\n  metricKeyList,\n  paramKeyList,\n  experimentTags,\n  compareRunCharts,\n  compareRunSections,\n  groupBy,\n  autoRefreshEnabled,\n  hideEmptyCharts,\n  globalLineChartConfig,\n  chartsSearchFilter,\n  minWidth,\n}: RunsCompareProps) => {\n  // Updater function for the general experiment view UI state\n  const updateUIState = useUpdateExperimentViewUIState();\n  const getRunColor = useGetExperimentRunColor();\n\n  // Updater function for charts UI state\n  const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n\n  const { paramsByRunUuid, latestMetricsByRunUuid, tagsByRunUuid, imagesByRunUuid } = useSelector(\n    (state: ReduxState) => ({\n      paramsByRunUuid: state.entities.paramsByRunUuid,\n      latestMetricsByRunUuid: state.entities.latestMetricsByRunUuid,\n      tagsByRunUuid: state.entities.tagsByRunUuid,\n      imagesByRunUuid: state.entities.imagesByRunUuid,\n    }),\n  );\n\n  const { theme } = useDesignSystemTheme();\n  const [initiallyLoaded, setInitiallyLoaded] = useState(false);\n  const [configuredCardConfig, setConfiguredCardConfig] = useState<RunsChartsCardConfig | null>(null);\n  const [search, setSearch] = useState('');\n  const { formatMessage } = useIntl();\n\n  const groupByNormalized = useMemo(\n    () =>\n      // In case we encounter deprecated string-based group by descriptor\n      normalizeRunsGroupByKey(groupBy),\n    [groupBy],\n  );\n\n  const [fullScreenChart, setFullScreenChart] = useState<\n    | {\n        config: RunsChartsCardConfig;\n        title: string | ReactNode;\n        subtitle: ReactNode;\n      }\n    | undefined\n  >(undefined);\n\n  const addNewChartCard = (metricSectionId: string) => {\n    return (type: RunsChartType) => {\n      // TODO: pass existing runs data and get pre-configured initial setup for every chart type\n      setConfiguredCardConfig(RunsChartsCardConfig.getEmptyChartCardByType(type, false, undefined, metricSectionId));\n    };\n  };\n\n  const startEditChart = useCallback((chartCard: RunsChartsCardConfig) => {\n    setConfiguredCardConfig(chartCard);\n  }, []);\n\n  useEffect(() => {\n    if (!initiallyLoaded && !isLoading) {\n      setInitiallyLoaded(true);\n    }\n  }, [initiallyLoaded, isLoading]);\n\n  const primaryMetricKey = useMemo(() => {\n    const automlEntry = experimentTags[AUTOML_EVALUATION_METRIC_TAG];\n    const mlflowPrimaryEntry = experimentTags[MLFLOW_EXPERIMENT_PRIMARY_METRIC_NAME];\n    return automlEntry?.value || mlflowPrimaryEntry?.value || metricKeyList[0] || '';\n  }, [experimentTags, metricKeyList]);\n\n  /**\n   * Dataset generated for all charts in a single place\n   */\n  const chartData: RunsChartsRunData[] = useMemo(() => {\n    if (!groupBy) {\n      return comparedRuns\n        .filter((run) => run.runInfo)\n        .map<RunsChartsRunData>((run) =>\n          createRunDataTrace(\n            run,\n            latestMetricsByRunUuid,\n            paramsByRunUuid,\n            tagsByRunUuid,\n            imagesByRunUuid,\n            getRunColor(run.runUuid),\n          ),\n        );\n    }\n\n    const groupChartDataEntries = comparedRuns\n      .filter((run) => run.groupParentInfo && !isRemainingRunsGroup(run.groupParentInfo))\n      .map<RunsChartsRunData>((group) => createGroupDataTrace(group, getRunColor(group.groupParentInfo?.groupId)));\n\n    const remainingRuns = comparedRuns\n      .filter((run) => !run.groupParentInfo && !run.runDateAndNestInfo?.belongsToGroup)\n      .map((run) =>\n        createRunDataTrace(\n          run,\n          latestMetricsByRunUuid,\n          paramsByRunUuid,\n          tagsByRunUuid,\n          imagesByRunUuid,\n          getRunColor(run.runUuid),\n        ),\n      );\n\n    return [...groupChartDataEntries, ...remainingRuns];\n  }, [groupBy, comparedRuns, latestMetricsByRunUuid, paramsByRunUuid, tagsByRunUuid, imagesByRunUuid, getRunColor]);\n\n  const filteredImageData = chartData.filter((run) => !run.hidden && run.tags[LOG_IMAGE_TAG_INDICATOR]);\n  usePopulateImagesByRunUuid({\n    runUuids: filteredImageData.map((run) => run.uuid),\n    runUuidsIsActive: filteredImageData.map((run) => run.runInfo?.status === 'RUNNING'),\n    enabled: true,\n    autoRefreshEnabled,\n  });\n\n  // Set chart cards to the user-facing base config if there is no other information.\n  useEffect(() => {\n    if ((!compareRunSections || !compareRunCharts) && chartData.length > 0) {\n      const { resultChartSet, resultSectionSet } = RunsChartsCardConfig.getBaseChartAndSectionConfigs({\n        primaryMetricKey,\n        runsData: chartData,\n        useParallelCoordinatesChart: true,\n      });\n      updateChartsUIState(\n        (current) => ({\n          ...current,\n          compareRunCharts: resultChartSet,\n          compareRunSections: resultSectionSet,\n        }),\n        true,\n      );\n    }\n  }, [compareRunCharts, compareRunSections, primaryMetricKey, chartData, updateChartsUIState]);\n\n  /**\n   * When chartData changes, we need to update the RunCharts with the latest charts\n   */\n  useEffect(() => {\n    updateChartsUIState((current) => {\n      if (!current.compareRunCharts || !current.compareRunSections) {\n        return current;\n      }\n\n      const { resultChartSet, resultSectionSet, isResultUpdated } = RunsChartsCardConfig.updateChartAndSectionConfigs({\n        compareRunCharts: current.compareRunCharts,\n        compareRunSections: current.compareRunSections,\n        runsData: chartData,\n        isAccordionReordered: current.isAccordionReordered,\n      });\n\n      if (!isResultUpdated) {\n        return current;\n      }\n      return {\n        ...current,\n        compareRunCharts: resultChartSet,\n        compareRunSections: resultSectionSet,\n      };\n    }, true);\n  }, [chartData, updateChartsUIState]);\n\n  const onTogglePin = useCallback(\n    (runUuid: string) => {\n      updateUIState((existingFacets: ExperimentPageUIState) => ({\n        ...existingFacets,\n        runsPinned: !existingFacets.runsPinned.includes(runUuid)\n          ? [...existingFacets.runsPinned, runUuid]\n          : existingFacets.runsPinned.filter((r) => r !== runUuid),\n      }));\n    },\n    [updateUIState],\n  );\n\n  const toggleRunVisibility = useToggleRowVisibilityCallback(comparedRuns);\n\n  const onHideRun = useCallback(\n    (runUuid: string) => toggleRunVisibility(RUNS_VISIBILITY_MODE.CUSTOM, runUuid),\n    [toggleRunVisibility],\n  );\n\n  const confirmChartCardConfiguration = useConfirmChartCardConfigurationFn();\n\n  const submitForm = (configuredCard: Partial<RunsChartsCardConfig>) => {\n    confirmChartCardConfiguration(configuredCard);\n\n    // Hide the modal\n    setConfiguredCardConfig(null);\n  };\n\n  /**\n   * Removes the chart from the compare run view.\n   */\n  const removeChart = useRemoveRunsChartFn();\n\n  /**\n   * Reorders the charts in the compare run view.\n   */\n  const reorderCharts = useReorderRunsChartsFn();\n\n  /*\n   * Inserts the source chart into the target group\n   */\n  const insertCharts = useInsertRunsChartsFn();\n\n  /**\n   * Data utilized by the tooltip system:\n   * runs data and toggle pin callback\n   */\n  const tooltipContextValue = useMemo(\n    () => ({ runs: chartData, onTogglePin, onHideRun }),\n    [chartData, onHideRun, onTogglePin],\n  );\n\n  // If using draggable grid layout, already filter out charts that are empty or deleted\n  const visibleChartCards = useMemo(() => {\n    if (hideEmptyCharts) {\n      return compareRunCharts?.filter((chartCard) => !chartCard.deleted && !isEmptyChartCard(chartData, chartCard));\n    }\n    return compareRunCharts?.filter((chartCard) => !chartCard.deleted);\n  }, [chartData, compareRunCharts, hideEmptyCharts]);\n\n  if (!initiallyLoaded) {\n    return <RunsCompareSkeleton />;\n  }\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        borderTop: `1px solid ${theme.colors.border}`,\n        borderLeft: `1px solid ${theme.colors.border}`,\n\n        // Let's cover 1 pixel of the grid's border for the sleek look\n        marginLeft: -1,\n\n        position: 'relative' as const,\n        backgroundColor: theme.colors.backgroundSecondary,\n        paddingLeft: theme.spacing.md,\n        paddingRight: theme.spacing.md,\n        paddingBottom: theme.spacing.md,\n        zIndex: 1,\n        overflowY: 'auto' as const,\n\n        // Make sure charts are visible even on small screens\n        minWidth,\n      }}\n      data-testid=\"experiment-view-compare-runs-chart-area\"\n    >\n      <div\n        css={[\n          {\n            paddingTop: theme.spacing.sm,\n            paddingBottom: theme.spacing.sm,\n            display: 'flex',\n            gap: theme.spacing.xs,\n            position: 'sticky',\n            top: 0,\n            // Make sure the search bar is above the charts\n            zIndex: RUNS_CHARTS_UI_Z_INDEX.SEARCH_BAR,\n            backgroundColor: theme.colors.backgroundSecondary,\n            // Use negative margin to properly cover surrounding area with background color\n            marginLeft: -theme.spacing.md,\n            marginRight: -theme.spacing.md,\n            paddingLeft: theme.spacing.md,\n            paddingRight: theme.spacing.md,\n          },\n        ]}\n      >\n        <RunsChartsFilterInput chartsSearchFilter={chartsSearchFilter} />\n        <RunsChartsGlobalChartSettingsDropdown\n          updateUIState={updateChartsUIState}\n          metricKeyList={metricKeyList}\n          globalLineChartConfig={globalLineChartConfig}\n        />\n      </div>\n      <RunsChartsTooltipWrapper contextData={tooltipContextValue} component={RunsChartsTooltipBody}>\n        <RunsChartsDraggableCardsGridContextProvider visibleChartCards={visibleChartCards}>\n          <RunsChartsSectionAccordion\n            compareRunSections={compareRunSections}\n            compareRunCharts={visibleChartCards}\n            reorderCharts={reorderCharts}\n            insertCharts={insertCharts}\n            chartData={chartData}\n            startEditChart={startEditChart}\n            removeChart={removeChart}\n            addNewChartCard={addNewChartCard}\n            search={chartsSearchFilter ?? ''}\n            groupBy={groupByNormalized}\n            setFullScreenChart={setFullScreenChart}\n            autoRefreshEnabled={autoRefreshEnabled}\n            hideEmptyCharts={hideEmptyCharts}\n            globalLineChartConfig={globalLineChartConfig}\n          />\n        </RunsChartsDraggableCardsGridContextProvider>\n      </RunsChartsTooltipWrapper>\n      {configuredCardConfig && (\n        <RunsChartsConfigureModal\n          chartRunData={chartData}\n          metricKeyList={metricKeyList}\n          paramKeyList={paramKeyList}\n          config={configuredCardConfig}\n          onSubmit={submitForm}\n          onCancel={() => setConfiguredCardConfig(null)}\n          groupBy={groupByNormalized}\n          globalLineChartConfig={globalLineChartConfig}\n        />\n      )}\n      <RunsChartsFullScreenModal\n        fullScreenChart={fullScreenChart}\n        onCancel={() => setFullScreenChart(undefined)}\n        chartData={chartData}\n        groupBy={groupByNormalized}\n        tooltipContextValue={tooltipContextValue}\n        tooltipComponent={RunsChartsTooltipBody}\n        autoRefreshEnabled={autoRefreshEnabled}\n        globalLineChartConfig={globalLineChartConfig}\n      />\n    </div>\n  );\n};\n\n/* eslint-disable react-hooks/rules-of-hooks */\nexport const RunsCompare = (props: RunsCompareProps) => {\n  // Updater function for the general experiment view UI state\n  const updateUIState = useUpdateExperimentViewUIState();\n\n  // An extracted partial updater function, responsible for setting charts UI state\n  const updateChartsUIState = useCallback<(stateSetter: RunsChartsUIConfigurationSetter) => void>(\n    (setter) => {\n      updateUIState((state) => ({\n        ...state,\n        ...setter(state),\n      }));\n    },\n    [updateUIState],\n  );\n\n  return (\n    <RunsChartsUIConfigurationContextProvider updateChartsUIState={updateChartsUIState}>\n      <RunsCompareImpl {...props} />\n    </RunsChartsUIConfigurationContextProvider>\n  );\n};\n/* eslint-enable react-hooks/rules-of-hooks */\n\nconst RunsCompareSkeleton = () => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        display: 'grid',\n        gridTemplateColumns: '1fr 1fr 1fr',\n        gridTemplateRows: '200px',\n        gap: theme.spacing.md,\n        borderTop: `1px solid ${theme.colors.border}`,\n        borderLeft: `1px solid ${theme.colors.border}`,\n        marginLeft: -1,\n        backgroundColor: theme.colors.backgroundSecondary,\n        padding: theme.spacing.md,\n        zIndex: 1,\n      }}\n    >\n      {new Array(6).fill(null).map((_, index) => (\n        <TableSkeleton key={index} lines={5} seed={index.toString()} />\n      ))}\n    </div>\n  );\n};\n","import { Empty, WarningIcon } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nexport const ExperimentViewRunsRequestError = ({ error }: { error?: Error | null }) => {\n  const message = error?.message;\n\n  return (\n    <div css={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <Empty\n        description={\n          message ?? (\n            <FormattedMessage\n              defaultMessage=\"Your request could not be fulfilled. Please try again.\"\n              description=\"A message shown on the experiment page if the runs request fails\"\n            />\n          )\n        }\n        image={<WarningIcon />}\n        title={\n          <FormattedMessage\n            defaultMessage=\"Request error\"\n            description=\"A title shown on the experiment page if the runs request fails\"\n          />\n        }\n      />\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLegacyNotification } from '@databricks/design-system';\nimport type {\n  DatasetSummary,\n  ExperimentEntity,\n  LIFECYCLE_FILTER,\n  MODEL_VERSION_FILTER,\n  RunDatasetWithTags,\n  UpdateExperimentViewStateFn,\n} from '../../../../types';\nimport type { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { ExperimentViewRunsControls } from './ExperimentViewRunsControls';\nimport { ExperimentViewRunsTable } from './ExperimentViewRunsTable';\nimport { ExperimentPageViewState } from '../../models/ExperimentPageViewState';\nimport Utils from '../../../../../common/utils/Utils';\nimport { ATTRIBUTE_COLUMN_SORT_KEY, MLFLOW_LOGGED_IMAGE_ARTIFACTS_PATH } from '../../../../constants';\nimport type { RunRowType } from '../../utils/experimentPage.row-types';\nimport { useExperimentRunRows } from '../../utils/experimentPage.row-utils';\nimport { useFetchedRunsNotification } from '../../hooks/useFetchedRunsNotification';\nimport type { DatasetWithRunType } from './ExperimentViewDatasetDrawer';\nimport { ExperimentViewDatasetDrawer } from './ExperimentViewDatasetDrawer';\nimport { useExperimentViewLocalStore } from '../../hooks/useExperimentViewLocalStore';\nimport { EvaluationArtifactCompareView } from '../../../evaluation-artifacts-compare/EvaluationArtifactCompareView';\nimport { shouldUseGetLoggedModelsBatchAPI } from '../../../../../common/utils/FeatureUtils';\nimport { CreateNewRunContextProvider } from '../../hooks/useCreateNewRun';\nimport { useExperimentPageViewMode } from '../../hooks/useExperimentPageViewMode';\nimport type { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport { RunsCompare } from '../../../runs-compare/RunsCompare';\nimport type { ErrorWrapper } from '../../../../../common/utils/ErrorWrapper';\nimport type { ReduxState } from '../../../../../redux-types';\nimport { ThunkDispatch } from '../../../../../redux-types';\nimport type { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { useIsTabActive } from '../../../../../common/hooks/useIsTabActive';\nimport { ExperimentViewRunsTableResizer } from './ExperimentViewRunsTableResizer';\nimport { RunsChartsSetHighlightContextProvider } from '../../../runs-charts/hooks/useRunsChartTraceHighlight';\nimport { useLoggedModelsForExperimentRunsTable } from '../../hooks/useLoggedModelsForExperimentRunsTable';\nimport { ExperimentViewRunsRequestError } from '../ExperimentViewRunsRequestError';\nimport { useLoggedModelsForExperimentRunsTableV2 } from '../../hooks/useLoggedModelsForExperimentRunsTableV2';\nimport { useResizableMaxWidth } from '@mlflow/mlflow/src/shared/web-shared/hooks/useResizableMaxWidth';\n\nexport interface ExperimentViewRunsOwnProps {\n  isLoading: boolean;\n  experiments: ExperimentEntity[];\n  modelVersionFilter?: MODEL_VERSION_FILTER;\n  lifecycleFilter?: LIFECYCLE_FILTER;\n  datasetsFilter?: DatasetSummary[];\n  onMaximizedChange?: (newIsMaximized: boolean) => void;\n\n  searchFacetsState: ExperimentPageSearchFacetsState;\n  uiState: ExperimentPageUIState;\n}\n\nexport interface ExperimentViewRunsProps extends ExperimentViewRunsOwnProps {\n  runsData: ExperimentRunsSelectorResult;\n  isLoadingRuns: boolean;\n  loadMoreRuns: () => Promise<any>;\n  moreRunsAvailable: boolean;\n  requestError: ErrorWrapper | Error | null;\n  refreshRuns: () => void;\n}\n\n/**\n * Creates time with milliseconds set to zero, usable in calculating\n * relative time\n */\nconst createCurrentTime = () => {\n  const mountTime = new Date();\n  mountTime.setMilliseconds(0);\n  return mountTime;\n};\n\nconst INITIAL_RUN_COLUMN_SIZE = 295;\nconst CHARTS_MIN_WIDTH = 350;\n\nexport const ExperimentViewRuns = React.memo((props: ExperimentViewRunsProps) => {\n  const [compareRunsMode] = useExperimentPageViewMode();\n  const {\n    experiments,\n    runsData,\n    uiState,\n    searchFacetsState,\n    isLoadingRuns,\n    loadMoreRuns,\n    moreRunsAvailable,\n    requestError,\n    refreshRuns,\n  } = props;\n\n  const isComparingExperiments = experiments.length > 1;\n\n  // Non-persistable view model state is being created locally\n  const [viewState, setViewState] = useState(new ExperimentPageViewState());\n\n  const { experimentId } = experiments[0];\n  const expandRowsStore = useExperimentViewLocalStore(experimentId);\n  const [expandRows, updateExpandRows] = useState<boolean>(expandRowsStore.getItem('expandRows') === 'true');\n\n  useEffect(() => {\n    expandRowsStore.setItem('expandRows', expandRows);\n  }, [expandRows, expandRowsStore]);\n\n  const {\n    paramKeyList,\n    metricKeyList,\n    tagsList,\n    paramsList,\n    metricsList,\n    runInfos,\n    runUuidsMatchingFilter,\n    datasetsList,\n    inputsOutputsList,\n  } = runsData;\n\n  const modelVersionsByRunUuid = useSelector(({ entities }: ReduxState) => entities.modelVersionsByRunUuid);\n\n  /**\n   * Create a list of run infos with assigned metrics, params and tags\n   */\n  const runData = useMemo(\n    () =>\n      runInfos.map((runInfo, index) => ({\n        runInfo,\n        params: paramsList[index],\n        metrics: metricsList[index],\n        tags: tagsList[index],\n        datasets: datasetsList[index],\n        inputs: inputsOutputsList?.[index]?.inputs || {},\n        outputs: inputsOutputsList?.[index]?.outputs || {},\n      })),\n    [datasetsList, metricsList, paramsList, runInfos, tagsList, inputsOutputsList],\n  );\n\n  const { orderByKey, searchFilter } = searchFacetsState;\n  // In new view state model, runs state is in the uiState instead of the searchFacetsState.\n  const { runsPinned, runsExpanded, runsHidden, runListHidden } = uiState;\n\n  const isComparingRuns = compareRunsMode !== 'TABLE';\n\n  const updateViewState = useCallback<UpdateExperimentViewStateFn>(\n    (newPartialViewState) => setViewState((currentViewState) => ({ ...currentViewState, ...newPartialViewState })),\n    [],\n  );\n\n  const addColumnClicked = useCallback(() => {\n    updateViewState({ columnSelectorVisible: true });\n  }, [updateViewState]);\n\n  const shouldNestChildrenAndFetchParents = useMemo(\n    () => (!orderByKey && !searchFilter) || orderByKey === ATTRIBUTE_COLUMN_SORT_KEY.DATE,\n    [orderByKey, searchFilter],\n  );\n\n  // Value used a reference for the \"date\" column\n  const [referenceTime, setReferenceTime] = useState(createCurrentTime);\n\n  // We're setting new reference date only when new runs data package has arrived\n  useEffect(() => {\n    setReferenceTime(createCurrentTime);\n  }, [runInfos]);\n\n  const filteredTagKeys = useMemo(() => Utils.getVisibleTagKeyList(tagsList), [tagsList]);\n\n  const [isDrawerOpen, setIsDrawerOpen] = useState<boolean>(false);\n  const [selectedDatasetWithRun, setSelectedDatasetWithRun] = useState<DatasetWithRunType>();\n\n  const experimentIds = useMemo(() => experiments.map(({ experimentId }) => experimentId), [experiments]);\n\n  // Check if we should use new GetLoggedModels API.\n  // If true, logged (and registered) models will be fetched based on runs inputs/outputs.\n  const isUsingGetLoggedModelsAPI = shouldUseGetLoggedModelsBatchAPI();\n\n  // Conditionally use legacy hook for fetching all logged models in the experiment\n  const loggedModelsV3ByRunUuidFromExperiment = useLoggedModelsForExperimentRunsTable({\n    experimentIds,\n    enabled: !isUsingGetLoggedModelsAPI,\n  });\n\n  // Conditionally use new hook for fetching logged models based on runs inputs/outputs\n  const loggedModelsV3ByRunUuidFromRunInputsOutputs = useLoggedModelsForExperimentRunsTableV2({\n    runData,\n    enabled: isUsingGetLoggedModelsAPI,\n  });\n\n  // Select the appropriate logged models based on the feature flag\n  const loggedModelsV3ByRunUuid = isUsingGetLoggedModelsAPI\n    ? loggedModelsV3ByRunUuidFromRunInputsOutputs\n    : loggedModelsV3ByRunUuidFromExperiment;\n\n  // Use new, memoized version of the row creation function.\n  // Internally disabled if the flag is not set.\n  const visibleRuns = useExperimentRunRows({\n    experiments,\n    paramKeyList,\n    metricKeyList,\n    modelVersionsByRunUuid,\n    runsExpanded,\n    tagKeyList: filteredTagKeys,\n    nestChildren: shouldNestChildrenAndFetchParents,\n    referenceTime,\n    runData,\n    runUuidsMatchingFilter,\n    runsPinned,\n    runsHidden,\n    groupBy: uiState.groupBy,\n    groupsExpanded: uiState.groupsExpanded,\n    runsHiddenMode: uiState.runsHiddenMode,\n    runsVisibilityMap: uiState.runsVisibilityMap,\n    useGroupedValuesInCharts: uiState.useGroupedValuesInCharts,\n    searchFacetsState,\n    loggedModelsV3ByRunUuid,\n  });\n\n  const [notificationsFn, notificationContainer] = useLegacyNotification();\n  const showFetchedRunsNotifications = useFetchedRunsNotification(notificationsFn);\n\n  const [tableAreaWidth, setTableAreaWidth] = useState(INITIAL_RUN_COLUMN_SIZE);\n\n  const loadMoreRunsCallback = useCallback(() => {\n    if (moreRunsAvailable && !isLoadingRuns) {\n      // Don't do this if we're loading runs\n      // to prevent too many requests from being\n      // sent out\n      loadMoreRuns().then((runs) => {\n        // Display notification about freshly loaded runs\n        showFetchedRunsNotifications(runs, runInfos);\n      });\n    }\n  }, [moreRunsAvailable, isLoadingRuns, loadMoreRuns, runInfos, showFetchedRunsNotifications]);\n\n  const datasetSelected = useCallback((dataset: RunDatasetWithTags, run: RunRowType) => {\n    setSelectedDatasetWithRun({ datasetWithTags: dataset, runData: run });\n    setIsDrawerOpen(true);\n  }, []);\n\n  const isTabActive = useIsTabActive();\n  const autoRefreshEnabled = uiState.autoRefreshEnabled && isTabActive;\n  const usingGroupedValuesInCharts = uiState.useGroupedValuesInCharts ?? true;\n\n  const tableElement =\n    requestError instanceof Error && !isLoadingRuns ? (\n      <ExperimentViewRunsRequestError error={requestError} />\n    ) : (\n      <ExperimentViewRunsTable\n        experiments={experiments}\n        runsData={runsData}\n        searchFacetsState={searchFacetsState}\n        viewState={viewState}\n        isLoading={isLoadingRuns}\n        updateViewState={updateViewState}\n        onAddColumnClicked={addColumnClicked}\n        rowsData={visibleRuns}\n        loadMoreRunsFunc={loadMoreRunsCallback}\n        moreRunsAvailable={moreRunsAvailable}\n        onDatasetSelected={datasetSelected}\n        expandRows={expandRows}\n        uiState={uiState}\n        compareRunsMode={compareRunsMode}\n      />\n    );\n\n  // Generate a unique storage key based on the experiment IDs\n  const configStorageKey = useMemo(\n    () =>\n      experiments\n        .map((e) => e.experimentId)\n        .sort()\n        .join(','),\n    [experiments],\n  );\n\n  const { resizableMaxWidth, ref } = useResizableMaxWidth(CHARTS_MIN_WIDTH);\n\n  return (\n    <CreateNewRunContextProvider visibleRuns={visibleRuns} refreshRuns={refreshRuns}>\n      <RunsChartsSetHighlightContextProvider>\n        <ExperimentViewRunsControls\n          viewState={viewState}\n          updateViewState={updateViewState}\n          runsData={runsData}\n          searchFacetsState={searchFacetsState}\n          experimentId={experimentId}\n          requestError={requestError}\n          expandRows={expandRows}\n          updateExpandRows={updateExpandRows}\n          refreshRuns={refreshRuns}\n          uiState={uiState}\n          isLoading={isLoadingRuns}\n          isComparingExperiments={isComparingExperiments}\n        />\n        <div\n          ref={ref}\n          css={{\n            minHeight: 225, // This is the exact height for displaying a minimum five rows and table header\n            height: '100%',\n            position: 'relative',\n            display: 'flex',\n          }}\n        >\n          {isComparingRuns ? (\n            <ExperimentViewRunsTableResizer\n              onResize={setTableAreaWidth}\n              runListHidden={runListHidden}\n              width={tableAreaWidth}\n              maxWidth={resizableMaxWidth}\n            >\n              {tableElement}\n            </ExperimentViewRunsTableResizer>\n          ) : (\n            tableElement\n          )}\n          {compareRunsMode === 'CHART' && (\n            <RunsCompare\n              isLoading={isLoadingRuns}\n              comparedRuns={visibleRuns}\n              metricKeyList={runsData.metricKeyList}\n              paramKeyList={runsData.paramKeyList}\n              experimentTags={runsData.experimentTags}\n              compareRunCharts={uiState.compareRunCharts}\n              compareRunSections={uiState.compareRunSections}\n              groupBy={usingGroupedValuesInCharts ? uiState.groupBy : null}\n              autoRefreshEnabled={autoRefreshEnabled}\n              hideEmptyCharts={uiState.hideEmptyCharts}\n              globalLineChartConfig={uiState.globalLineChartConfig}\n              chartsSearchFilter={uiState.chartsSearchFilter}\n              storageKey={configStorageKey}\n              minWidth={CHARTS_MIN_WIDTH}\n            />\n          )}\n          {compareRunsMode === 'ARTIFACT' && (\n            <EvaluationArtifactCompareView\n              comparedRuns={visibleRuns}\n              viewState={viewState}\n              updateViewState={updateViewState}\n              onDatasetSelected={datasetSelected}\n              disabled={Boolean(uiState.groupBy)}\n            />\n          )}\n          {notificationContainer}\n          {selectedDatasetWithRun && (\n            <ExperimentViewDatasetDrawer\n              isOpen={isDrawerOpen}\n              setIsOpen={setIsDrawerOpen}\n              selectedDatasetWithRun={selectedDatasetWithRun}\n              setSelectedDatasetWithRun={setSelectedDatasetWithRun}\n            />\n          )}\n        </div>\n      </RunsChartsSetHighlightContextProvider>\n    </CreateNewRunContextProvider>\n  );\n});\n","import { useMemo } from 'react';\nimport { useSearchLoggedModelsQuery } from '../../../hooks/logged-models/useSearchLoggedModelsQuery';\nimport type { LoggedModelProto } from '../../../types';\n\nexport const useLoggedModelsForExperimentRunsTable = ({\n  experimentIds,\n  enabled = true,\n}: {\n  experimentIds: string[];\n  enabled?: boolean;\n}) => {\n  const { data: loggedModelsData } = useSearchLoggedModelsQuery(\n    { experimentIds },\n    {\n      enabled,\n    },\n  );\n\n  const loggedModelsByRunId = useMemo(\n    () =>\n      loggedModelsData?.reduce<Record<string, LoggedModelProto[]>>((acc, model) => {\n        const { source_run_id } = model.info ?? {};\n        if (!source_run_id) {\n          return acc;\n        }\n        if (!acc[source_run_id]) {\n          acc[source_run_id] = [];\n        }\n        acc[source_run_id].push(model);\n        return acc;\n      }, {}),\n    [loggedModelsData],\n  );\n\n  return loggedModelsByRunId;\n};\n","import { useMemo } from 'react';\nimport type { LoggedModelProto, RunInfoEntity, RunInputsType, RunOutputsType } from '../../../types';\nimport { useGetLoggedModelsQuery } from '../../../hooks/logged-models/useGetLoggedModelsQuery';\nimport { uniq } from 'lodash';\n\n/**\n * Custom hook to fetch logged models for experiment runs table.\n * It processes run data to extract model IDs and fetches the corresponding logged models.\n *\n * Contrary to V1, this version uses runs' inputs and outputs to determine the model IDs,\n * instead of getting all models logged in the experiment.\n */\nexport const useLoggedModelsForExperimentRunsTableV2 = ({\n  runData,\n  enabled,\n}: {\n  runData: {\n    runInfo: RunInfoEntity;\n    inputs?: RunInputsType;\n    outputs?: RunOutputsType;\n  }[];\n  enabled?: boolean;\n}) => {\n  const modelIdsByRunId = useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    const modelIdsMap: Record<string, string[]> = {};\n    for (const { runInfo, inputs, outputs } of runData) {\n      const runId = runInfo.runUuid;\n      const inputModelIds = inputs?.modelInputs?.map((input) => input.modelId) || [];\n      const outputModelIds = outputs?.modelOutputs?.map((output) => output.modelId) || [];\n      const allModelIds = [...inputModelIds, ...outputModelIds];\n      if (runId && allModelIds.length > 0) {\n        modelIdsMap[runId] = uniq(allModelIds); // Ensure unique model IDs per run\n      }\n    }\n    return modelIdsMap;\n  }, [runData, enabled]);\n\n  const modelIds = useMemo(() => {\n    if (!enabled) {\n      return [];\n    }\n    // Unique model IDs across all runs with no repeats\n    return uniq(Object.values(modelIdsByRunId).flat());\n  }, [modelIdsByRunId, enabled]);\n\n  const loggedModelsData = useGetLoggedModelsQuery(\n    {\n      modelIds,\n    },\n    {\n      enabled: enabled && modelIds.length > 0,\n    },\n  );\n\n  const loggedModelsByRunId = useMemo(() => {\n    if (!loggedModelsData.data) {\n      return {};\n    }\n    return Object.entries(modelIdsByRunId).reduce<Record<string, LoggedModelProto[]>>((acc, [runId, modelIds]) => {\n      acc[runId] = loggedModelsData.data?.filter((model) => modelIds.includes(model.info?.model_id || '')) ?? [];\n      return acc;\n    }, {});\n  }, [modelIdsByRunId, loggedModelsData.data]);\n\n  return loggedModelsByRunId;\n};\n","import LocalStorageUtils from '../../../../common/utils/LocalStorageUtils';\nimport Utils from '../../../../common/utils/Utils';\n\nimport type { ExperimentPageUIState } from '../models/ExperimentPageUIState';\nimport { createExperimentPageUIState } from '../models/ExperimentPageUIState';\nimport type { ExperimentPageSearchFacetsState } from '../models/ExperimentPageSearchFacetsState';\nimport { createExperimentPageSearchFacetsState } from '../models/ExperimentPageSearchFacetsState';\n\n/**\n * Loads current view state (UI state, view state) in the local storage.\n */\nexport function loadExperimentViewState(idKey: string) {\n  try {\n    const localStorageInstance = LocalStorageUtils.getStoreForComponent('ExperimentPage', idKey);\n    return localStorageInstance.loadComponentState();\n  } catch {\n    Utils.logErrorAndNotifyUser(`Error: malformed persisted search state for experiment(s) ${idKey}`);\n\n    return {\n      ...createExperimentPageUIState(),\n      ...createExperimentPageSearchFacetsState(),\n    };\n  }\n}\n\n/**\n * Persists view state (UI state, view state) in the local storage.\n */\nexport function saveExperimentViewState(data: ExperimentPageUIState & ExperimentPageSearchFacetsState, idKey: string) {\n  const localStorageInstance = LocalStorageUtils.getStoreForComponent('ExperimentPage', idKey);\n  localStorageInstance.saveComponentState(data);\n}\n","import { useEffect, useMemo } from 'react';\n\nimport { pick } from 'lodash';\nimport { createExperimentPageSearchFacetsState } from '../models/ExperimentPageSearchFacetsState';\nimport type { ExperimentPageUIState } from '../models/ExperimentPageUIState';\nimport { loadExperimentViewState, saveExperimentViewState } from '../utils/persistSearchFacets';\nimport type { ExperimentQueryParamsSearchFacets } from './useExperimentPageSearchFacets';\nimport { EXPERIMENT_PAGE_QUERY_PARAM_KEYS, useUpdateExperimentPageSearchFacets } from './useExperimentPageSearchFacets';\n\n/**\n * Takes care of initializing the search facets from persisted view state and persisting them.\n * Partially replaces GetExperimentRunsContext.\n */\nexport const usePersistExperimentPageViewState = (\n  uiState: ExperimentPageUIState,\n  searchFacets: ExperimentQueryParamsSearchFacets | null,\n  experimentIds: string[],\n  disabled = false,\n) => {\n  const setSearchFacets = useUpdateExperimentPageSearchFacets();\n\n  const persistKey = useMemo(() => (experimentIds ? JSON.stringify(experimentIds.sort()) : null), [experimentIds]);\n\n  // If there are no query params visible in the address bar, either reinstantiate\n  // them from persisted view state or use default values.\n  useEffect(() => {\n    if (disabled) {\n      return;\n    }\n    if (!searchFacets) {\n      const persistedViewState = persistKey ? loadExperimentViewState(persistKey) : null;\n      const rebuiltViewState = pick(\n        { ...createExperimentPageSearchFacetsState(), ...persistedViewState },\n        EXPERIMENT_PAGE_QUERY_PARAM_KEYS,\n      );\n      setSearchFacets(rebuiltViewState, { replace: true });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchFacets, persistKey, disabled]);\n\n  // Persist complete view state in local storage when either search facets or UI state change\n  useEffect(() => {\n    if (!searchFacets || !persistKey || disabled) {\n      return;\n    }\n    saveExperimentViewState({ ...searchFacets, ...uiState }, persistKey);\n  }, [searchFacets, uiState, persistKey, disabled]);\n};\n","import type {\n  ExperimentEntity,\n  ExperimentStoreEntities,\n  ModelVersionInfoEntity,\n  DatasetSummary,\n  RunInfoEntity,\n  RunDatasetWithTags,\n  MetricEntity,\n  RunInputsType,\n  RunOutputsType,\n} from '../../../types';\nimport { LIFECYCLE_FILTER, MODEL_VERSION_FILTER } from '../../../types';\nimport type { KeyValueEntity } from '../../../../common/types';\nimport { getLatestMetrics } from '../../../reducers/MetricReducer';\nimport { getExperimentTags, getParams, getRunDatasets, getRunInfo, getRunTags } from '../../../reducers/Reducers';\nimport { pickBy } from 'lodash';\n\nexport type ExperimentRunsSelectorResult = {\n  /**\n   * Array of run infos\n   */\n  runInfos: RunInfoEntity[];\n\n  /**\n   * List of unique metric keys\n   */\n  runUuidsMatchingFilter: string[];\n\n  /**\n   * List of unique metric keys\n   */\n  metricKeyList: string[];\n\n  /**\n   * List of unique param keys\n   */\n  paramKeyList: string[];\n\n  /**\n   * List of metrics indexed by the respective runs.\n   * Example: metricsList[2] contains list of all\n   * metrics corresponding to the 3rd run in the run list\n   */\n  metricsList: MetricEntity[][];\n\n  /**\n   * List of metrics indexed by the respective runs.\n   * Example: paramsList[2] contains list of all\n   * params corresponding to the 3rd run in the run list\n   */\n  paramsList: KeyValueEntity[][];\n\n  /**\n   * List of tags indexed by the respective runs.\n   * Example: tagsList[2] contains dictionary of all\n   * tags corresponding to the 3rd run in the run list\n   */\n  tagsList: Record<string, KeyValueEntity>[];\n\n  /**\n   * Dictionary containing model information objects indexed by run uuid\n   */\n  modelVersionsByRunUuid: Record<string, ModelVersionInfoEntity[]>;\n\n  /**\n   * Dictionary containing all tags assigned to a experiment\n   * (single experiment only)\n   */\n  experimentTags: Record<string, KeyValueEntity>;\n\n  /**\n   * List of dataset arrays indexed by the respective runs.\n   * E.g. datasetsList[2] yields an array of all\n   * datasets corresponding to the 3rd run in the run list\n   */\n  datasetsList: RunDatasetWithTags[][];\n\n  /**\n   * List of inputs and outputs for each run.\n   */\n  inputsOutputsList?: { inputs?: RunInputsType; outputs?: RunOutputsType }[];\n};\n\nexport type ExperimentRunsSelectorParams = {\n  experiments: ExperimentEntity[];\n  experimentIds?: string[];\n  lifecycleFilter?: LIFECYCLE_FILTER;\n  modelVersionFilter?: MODEL_VERSION_FILTER;\n  datasetsFilter?: DatasetSummary[];\n};\n\n/**\n * Extracts run infos filtered by lifecycle filter and model version filter\n */\nconst extractRunInfos = (\n  runUuids: string[],\n  state: { entities: ExperimentStoreEntities },\n  {\n    lifecycleFilter = LIFECYCLE_FILTER.ACTIVE,\n    modelVersionFilter = MODEL_VERSION_FILTER.ALL_RUNS,\n    datasetsFilter = [],\n  }: ExperimentRunsSelectorParams,\n): RunInfoEntity[] => {\n  const { modelVersionsByRunUuid } = state.entities;\n\n  return (\n    runUuids\n      // Get the basic run info\n      .map((run_id) => [getRunInfo(run_id, state), getRunDatasets(run_id, state)])\n      // Filter out runs by given lifecycle filter\n      .filter(([rInfo, _]) => {\n        if (lifecycleFilter === LIFECYCLE_FILTER.ACTIVE) {\n          return rInfo.lifecycleStage === 'active';\n        } else {\n          return rInfo.lifecycleStage === 'deleted';\n        }\n      })\n      // Filter out runs by given model version filter\n      .filter(([rInfo, _]) => {\n        if (modelVersionFilter === MODEL_VERSION_FILTER.ALL_RUNS) {\n          return true;\n        } else if (modelVersionFilter === MODEL_VERSION_FILTER.WITH_MODEL_VERSIONS) {\n          return rInfo.runUuid in modelVersionsByRunUuid;\n        } else if (modelVersionFilter === MODEL_VERSION_FILTER.WTIHOUT_MODEL_VERSIONS) {\n          return !(rInfo.runUuid in modelVersionsByRunUuid);\n        } else {\n          // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n          console.warn('Invalid input to model version filter - defaulting to showing all runs.');\n          return true;\n        }\n      })\n      .filter(([_, datasets]) => {\n        if (!datasetsFilter || datasetsFilter.length === 0) return true;\n        if (!datasets) return false;\n\n        // Returns true if there exists a dataset that is in datasetsFilter\n        return datasets.some((datasetWithTags: RunDatasetWithTags) => {\n          const datasetName = datasetWithTags.dataset.name;\n          const datasetDigest = datasetWithTags.dataset.digest;\n\n          return datasetsFilter.some(({ name, digest }) => name === datasetName && digest === datasetDigest);\n        });\n      })\n      .map(([rInfo, _]) => rInfo)\n  );\n};\n\nexport const experimentRunsSelector = (\n  state: { entities: ExperimentStoreEntities },\n  params: ExperimentRunsSelectorParams,\n): ExperimentRunsSelectorResult => {\n  const { experiments } = params;\n  const experimentIds = params.experimentIds || experiments.map((e) => e.experimentId);\n  const comparingExperiments = experimentIds.length > 1;\n\n  // Read the order of runs from array of UUIDs in the store, because otherwise the order when\n  // reading from the object is not guaranteed. This is important when we are trying to sort runs by\n  // metrics and other fields.\n  const runOrder = state.entities.runInfoOrderByUuid || [];\n  const runs = runOrder.map((runUuid) => state.entities.runInfosByUuid[runUuid]);\n\n  /**\n   * Extract run UUIDs relevant to selected experiments\n   */\n  const runUuids = runs\n    .filter(({ experimentId }) => experimentIds.includes(experimentId))\n    .map(({ runUuid }) => runUuid);\n\n  /**\n   * Extract model version and runs matching filter directly from the store\n   */\n  const { modelVersionsByRunUuid, runUuidsMatchingFilter } = state.entities;\n\n  /**\n   * Extract run infos\n   */\n  const runInfos = extractRunInfos(runUuids, state, params);\n\n  /**\n   * Set of unique metric keys\n   */\n  const metricKeysSet = new Set<string>();\n\n  /**\n   * Set of unique param keys\n   */\n  const paramKeysSet = new Set<string>();\n\n  const datasetsList = runInfos.map((runInfo) => {\n    return state.entities.runDatasetsByUuid[runInfo.runUuid];\n  });\n\n  const inputsOutputsList = runInfos.map((runInfo) => {\n    return state.entities.runInputsOutputsByUuid[runInfo.runUuid];\n  });\n\n  /**\n   * Extracting lists of metrics by run index\n   */\n  const metricsList = runInfos.map((runInfo) => {\n    const metricsByRunUuid = getLatestMetrics(runInfo.runUuid, state);\n    const metrics = (Object.values(metricsByRunUuid || {}) as any[]).filter(\n      (metric) => metric.key.trim().length > 0, // Filter out metrics that are entirely whitespace\n    );\n    metrics.forEach((metric) => {\n      metricKeysSet.add(metric.key);\n    });\n    return metrics;\n  }) as MetricEntity[][];\n\n  /**\n   * Extracting lists of params by run index\n   */\n  const paramsList = runInfos.map((runInfo) => {\n    const paramValues = (Object.values(getParams(runInfo.runUuid, state)) as any[]).filter(\n      (param) => param.key.trim().length > 0, // Filter out params that are entirely whitespace\n    );\n    paramValues.forEach((param) => {\n      paramKeysSet.add(param.key);\n    });\n    return paramValues;\n  }) as KeyValueEntity[][];\n\n  /**\n   * Extracting dictionaries of tags by run index\n   */\n  const tagsList = runInfos.map((runInfo) =>\n    pickBy(\n      getRunTags(runInfo.runUuid, state),\n      (tags) => tags.key.trim().length > 0, // Filter out tags that are entirely whitespace\n    ),\n  ) as Record<string, KeyValueEntity>[];\n\n  const firstExperimentId = experimentIds[0];\n\n  /**\n   * If there is only one experiment, extract experiment tags as well\n   */\n  const experimentTags = (comparingExperiments ? {} : getExperimentTags(firstExperimentId, state)) as Record<\n    string,\n    KeyValueEntity\n  >;\n\n  return {\n    modelVersionsByRunUuid,\n    experimentTags,\n    runInfos,\n    paramsList,\n    tagsList,\n    metricsList,\n    runUuidsMatchingFilter,\n    datasetsList,\n    inputsOutputsList,\n    metricKeyList: Array.from(metricKeysSet.values()).sort(),\n    paramKeyList: Array.from(paramKeysSet.values()).sort(),\n  };\n};\n","import { useEffect, useRef } from 'react';\nimport { RUNS_SEARCH_MAX_RESULTS } from '../../../actions';\nimport { isArray, isEqual } from 'lodash';\nimport type { ExperimentQueryParamsSearchFacets } from './useExperimentPageSearchFacets';\nimport type { ExperimentRunsSelectorResult } from '../utils/experimentRuns.selector';\nimport { RUNS_AUTO_REFRESH_INTERVAL, createSearchRunsParams } from '../utils/experimentPage.fetch-utils';\nimport type { FetchRunsHookFunction, FetchRunsHookParams } from './useExperimentRuns';\nimport type { SearchRunsApiResponse } from '../../../types';\n\n/**\n * Enables auto-refreshing runs on the experiment page.\n * The hook will schedule a new runs fetch every `RUNS_AUTO_REFRESH_INTERVAL` milliseconds and will be postponed\n * if user is currently loading runs or changes the search facets.\n */\nexport const useExperimentRunsAutoRefresh = ({\n  experimentIds,\n  lastFetchedTime,\n  fetchRuns,\n  searchFacets,\n  enabled,\n  cachedPinnedRuns,\n  runsData,\n  isLoadingRuns,\n}: {\n  cachedPinnedRuns: React.MutableRefObject<string[]>;\n  lastFetchedTime: React.MutableRefObject<number | null>;\n  enabled: boolean;\n  experimentIds: string[];\n  fetchRuns: FetchRunsHookFunction;\n  searchFacets: ExperimentQueryParamsSearchFacets | null;\n  runsData: ExperimentRunsSelectorResult;\n  isLoadingRuns: boolean;\n}) => {\n  const refreshTimeoutRef = useRef<number | undefined>(undefined);\n\n  const isLoadingImmediate = useRef(isLoadingRuns);\n  const autoRefreshEnabledRef = useRef(enabled);\n  const currentResults = useRef(runsData.runInfos);\n\n  currentResults.current = runsData.runInfos;\n  isLoadingImmediate.current = isLoadingRuns;\n  autoRefreshEnabledRef.current = enabled;\n\n  useEffect(() => {\n    // Each time the parameters change, clear the timeout and try to schedule a new one\n    window.clearTimeout(refreshTimeoutRef.current);\n\n    // If auto refresh has been disabled or user is currently loading runs, do not schedule a new refresh\n    if (!enabled || isLoadingRuns) {\n      return;\n    }\n\n    const scheduleRefresh = async () => {\n      const hasBeenInitialized = Boolean(lastFetchedTime.current);\n      const timePassed = lastFetchedTime.current ? Date.now() - lastFetchedTime.current : 0;\n      if (searchFacets && hasBeenInitialized && timePassed >= RUNS_AUTO_REFRESH_INTERVAL) {\n        // We want no less results than the current amount of runs displayed, round up to the next page\n        const initialRunsCount = currentResults.current.length;\n\n        // Use Math.max(1, ...) so at least one page is fetched\n        const requestedRunsCount =\n          Math.max(1, Math.ceil(initialRunsCount / RUNS_SEARCH_MAX_RESULTS)) * RUNS_SEARCH_MAX_RESULTS;\n\n        const requestParams = {\n          ...createSearchRunsParams(\n            experimentIds,\n            { ...searchFacets, runsPinned: cachedPinnedRuns.current },\n            Date.now(),\n          ),\n          requestedFacets: searchFacets,\n          maxResults: requestedRunsCount,\n        };\n\n        let autoRefreshFetchedPages = 0;\n        let autoRefreshResultsCount = 0;\n        let currentPageToken = undefined;\n\n        const discardResultsFn = (lastRequestedParams: FetchRunsHookParams, value?: SearchRunsApiResponse) => {\n          // If it's not the final page and we still didn't reach the requested amount of runs,\n          // flag results as not to be displayed yet\n          if (autoRefreshResultsCount + (value?.runs?.length ?? 0) < requestedRunsCount && value?.next_page_token) {\n            return true;\n          }\n\n          // At this moment, check if the results from auto-refresh should be considered. If the following\n          // conditions are met, the results from auto-refresh will be discarded.\n          if (\n            // Skip if auto-refresh has been disabled before the results response came back\n            !autoRefreshEnabledRef.current ||\n            // Skip if user has loaded more runs since the last request\n            initialRunsCount > requestedRunsCount ||\n            // Skip if the requested facets have changed since the last request\n            !isEqual(lastRequestedParams.requestedFacets, requestParams.requestedFacets)\n          ) {\n            return true;\n          }\n\n          // Otherwise, return \"false\" and consider the results from auto-refresh as valid\n          return false;\n        };\n\n        while (autoRefreshFetchedPages === 0 || currentPageToken) {\n          // We have enough results, no need to fetch more\n          if (autoRefreshResultsCount >= requestedRunsCount) {\n            break;\n          }\n          autoRefreshFetchedPages++;\n          const result = await fetchRuns(\n            { ...requestParams, pageToken: currentPageToken },\n            {\n              isAutoRefreshing: true,\n              discardResultsFn,\n            },\n          );\n          autoRefreshResultsCount += isArray(result?.runs) ? result.runs.length : 0;\n          currentPageToken = result?.next_page_token;\n        }\n      }\n\n      // Clear the timeout before scheduling a new one\n      window.clearTimeout(refreshTimeoutRef.current);\n\n      // If auto refresh has been disabled during last fetch, do not schedule a new one\n      if (!autoRefreshEnabledRef.current) {\n        return;\n      }\n      refreshTimeoutRef.current = window.setTimeout(scheduleRefresh, RUNS_AUTO_REFRESH_INTERVAL);\n    };\n    scheduleRefresh();\n    return () => {\n      clearTimeout(refreshTimeoutRef.current);\n    };\n  }, [experimentIds, fetchRuns, searchFacets, enabled, cachedPinnedRuns, lastFetchedTime, isLoadingRuns]);\n};\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport type { ReduxState, ThunkDispatch } from '../../../../redux-types';\nimport { loadMoreRunsApi, searchRunsApi } from '../../../actions';\nimport type { ExperimentPageUIState } from '../models/ExperimentPageUIState';\nimport { createSearchRunsParams, fetchModelVersionsForRuns } from '../utils/experimentPage.fetch-utils';\nimport type { ExperimentRunsSelectorResult } from '../utils/experimentRuns.selector';\nimport { experimentRunsSelector } from '../utils/experimentRuns.selector';\nimport type { ExperimentQueryParamsSearchFacets } from './useExperimentPageSearchFacets';\nimport type { ExperimentPageSearchFacetsState } from '../models/ExperimentPageSearchFacetsState';\nimport { ErrorWrapper } from '../../../../common/utils/ErrorWrapper';\nimport { searchModelVersionsApi } from '../../../../model-registry/actions';\nimport { PredefinedError } from '@databricks/web-shared/errors';\nimport { mapErrorWrapperToPredefinedError } from '../../../../common/utils/ErrorUtils';\nimport { shouldUsePredefinedErrorsInExperimentTracking } from '../../../../common/utils/FeatureUtils';\nimport Utils from '../../../../common/utils/Utils';\nimport { useExperimentRunsAutoRefresh } from './useExperimentRunsAutoRefresh';\nimport type { RunEntity, SearchRunsApiResponse } from '../../../types';\n\nexport type FetchRunsHookParams = ReturnType<typeof createSearchRunsParams> & {\n  requestedFacets: ExperimentPageSearchFacetsState;\n};\n\nexport type FetchRunsHookFunction = (\n  params: FetchRunsHookParams,\n  options?: {\n    isAutoRefreshing?: boolean;\n    discardResultsFn?: (lastRequestedParams: FetchRunsHookParams, response?: SearchRunsApiResponse) => boolean;\n  },\n) => Promise<{ runs: RunEntity[]; next_page_token?: string }>;\n\n// Calculate actual params to use for fetching runs\nconst createFetchRunsRequestParams = (\n  searchFacets: ExperimentQueryParamsSearchFacets | null,\n  experimentIds: string[],\n  runsPinned: string[],\n): FetchRunsHookParams | null => {\n  if (!searchFacets || !experimentIds.length) {\n    return null;\n  }\n  const searchParams = createSearchRunsParams(experimentIds, { ...searchFacets, runsPinned }, Date.now());\n  return { ...searchParams, requestedFacets: searchFacets };\n};\n\n/**\n * This hook will request for new runs data based on the current experiment page search facets and UI state.\n * Replaces GetExperimentRunsContext and a substantial portion of <ExperimentRuns> component stack.\n */\nexport const useExperimentRuns = (\n  uiState: ExperimentPageUIState,\n  searchFacets: ExperimentQueryParamsSearchFacets | null,\n  experimentIds: string[],\n  disabled = false,\n) => {\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const [runsData, setRunsData] = useState<ExperimentRunsSelectorResult>(() => createEmptyRunsResult());\n\n  const enableWorkspaceModelsRegistryCall = true;\n\n  const persistKey = useMemo(() => (experimentIds ? JSON.stringify(experimentIds.sort()) : null), [experimentIds]);\n  const [isLoadingRuns, setIsLoadingRuns] = useState(true);\n  const [isInitialLoadingRuns, setIsInitialLoadingRuns] = useState(true);\n  const [nextPageToken, setNextPageToken] = useState<string | null>(null);\n  const [requestError, setRequestError] = useState<ErrorWrapper | Error | null>(null);\n  const cachedPinnedRuns = useRef<string[]>([]);\n\n  const lastFetchedTime = useRef<number | null>(null);\n  const lastRequestedParams = useRef<FetchRunsHookParams | null>(null);\n  const lastSuccessfulRequestedParams = useRef<FetchRunsHookParams | null>(null);\n\n  // Reset initial loading state when experiment IDs change\n  useEffect(() => {\n    if (disabled) {\n      return;\n    }\n    setIsInitialLoadingRuns(true);\n    setRunsData(createEmptyRunsResult());\n  }, [persistKey, disabled]);\n\n  const setResultRunsData = useCallback(\n    (store: ReduxState, experimentIds: string[], requestedFacets: ExperimentPageSearchFacetsState) => {\n      setRunsData(\n        experimentRunsSelector(store, {\n          datasetsFilter: requestedFacets.datasetsFilter,\n          lifecycleFilter: requestedFacets.lifecycleFilter,\n          modelVersionFilter: requestedFacets.modelVersionFilter,\n          // In the new version of the view state, experiment IDs are used instead of full experiment entities:\n          experiments: [],\n          experimentIds,\n        }),\n      );\n    },\n    [],\n  );\n\n  useEffect(() => {\n    cachedPinnedRuns.current = uiState.runsPinned;\n  }, [uiState.runsPinned]);\n\n  const loadModelVersions = useCallback(\n    (runs: Parameters<typeof fetchModelVersionsForRuns>[0]) => {\n      const handleModelVersionLoadFailure = (error: Error | ErrorWrapper) => {\n        const normalizedError =\n          (error instanceof ErrorWrapper ? mapErrorWrapperToPredefinedError(error) : error) ?? error;\n        const message =\n          normalizedError instanceof ErrorWrapper ? normalizedError.getMessageField() : normalizedError.message;\n        Utils.displayGlobalErrorNotification(`Failed to load model versions for runs: ${message}`);\n      };\n      if (enableWorkspaceModelsRegistryCall) {\n        fetchModelVersionsForRuns(runs || [], searchModelVersionsApi, dispatch).catch(handleModelVersionLoadFailure);\n      }\n    },\n    [dispatch, enableWorkspaceModelsRegistryCall],\n  );\n\n  // Main function for fetching runs\n  const fetchRuns: FetchRunsHookFunction = useCallback(\n    (fetchParams, options = {}) =>\n      dispatch((thunkDispatch: ThunkDispatch, getStore: () => ReduxState) => {\n        // If we're auto-refreshing, we don't want to show the loading spinner and\n        // we don't want to update the last requested params - they're used to determine\n        // whether to discard results when the automatically fetched data changes.\n        if (!options.isAutoRefreshing) {\n          setIsLoadingRuns(true);\n          lastRequestedParams.current = fetchParams;\n        }\n        return thunkDispatch((fetchParams.pageToken ? loadMoreRunsApi : searchRunsApi)(fetchParams))\n          .then(async ({ value }) => {\n            lastFetchedTime.current = Date.now();\n\n            setIsLoadingRuns(false);\n            setIsInitialLoadingRuns(false);\n            setRequestError(null);\n\n            if (lastRequestedParams.current && options.discardResultsFn?.(lastRequestedParams.current, value)) {\n              return value;\n            }\n\n            lastSuccessfulRequestedParams.current = fetchParams;\n            setNextPageToken(value.next_page_token || null);\n\n            // We rely on redux reducer to update the state with new runs data,\n            // then we pick it up from the store. This benefits other pages that use same data\n            // from the same store slice (e.g. run details page). Will be changed when moving to graphQL.\n            setResultRunsData(getStore(), fetchParams.experimentIds, fetchParams.requestedFacets);\n\n            // In the end, load model versions for the fetched runs\n            loadModelVersions(value.runs || []);\n            return value;\n          })\n          .catch((e: ErrorWrapper | PredefinedError) => {\n            setIsLoadingRuns(false);\n            setIsInitialLoadingRuns(false);\n            if (shouldUsePredefinedErrorsInExperimentTracking()) {\n              // If it's already a PredefinedError, we don't need to map it again\n              if (e instanceof PredefinedError) {\n                setRequestError(e);\n                return;\n              }\n              const maybePredefinedError = mapErrorWrapperToPredefinedError(e);\n              if (maybePredefinedError) {\n                setRequestError(maybePredefinedError);\n                return;\n              }\n            }\n            setRequestError(e);\n            if (!shouldUsePredefinedErrorsInExperimentTracking()) {\n              Utils.logErrorAndNotifyUser(e);\n            }\n          });\n      }),\n    [dispatch, setResultRunsData, loadModelVersions],\n  );\n\n  // Fetch runs when new request params are available\n  // (e.g. after search facets change)\n  useEffect(() => {\n    if (disabled) {\n      return;\n    }\n    const requestParams = createFetchRunsRequestParams(searchFacets, experimentIds, cachedPinnedRuns.current);\n    if (requestParams) {\n      fetchRuns(requestParams);\n    }\n  }, [fetchRuns, dispatch, disabled, searchFacets, experimentIds]);\n\n  const loadMoreRuns = async () => {\n    const requestParams = createFetchRunsRequestParams(searchFacets, experimentIds, cachedPinnedRuns.current);\n    if (!nextPageToken || !requestParams) {\n      return [];\n    }\n    return fetchRuns({ ...requestParams, pageToken: nextPageToken });\n  };\n\n  const refreshRuns = useCallback(() => {\n    if (lastSuccessfulRequestedParams.current) {\n      fetchRuns({ ...lastSuccessfulRequestedParams.current, pageToken: undefined });\n    }\n  }, [fetchRuns]);\n\n  useExperimentRunsAutoRefresh({\n    experimentIds,\n    fetchRuns,\n    searchFacets,\n    enabled: uiState.autoRefreshEnabled,\n    cachedPinnedRuns,\n    runsData,\n    isLoadingRuns: isLoadingRuns,\n    lastFetchedTime,\n  });\n\n  return {\n    isLoadingRuns,\n    moreRunsAvailable: Boolean(nextPageToken),\n    refreshRuns,\n    loadMoreRuns,\n    isInitialLoadingRuns,\n    runsData,\n    requestError,\n  };\n};\n\nconst createEmptyRunsResult = () => ({\n  datasetsList: [],\n  experimentTags: {},\n  metricKeyList: [],\n  metricsList: [],\n  modelVersionsByRunUuid: {},\n  paramKeyList: [],\n  paramsList: [],\n  runInfos: [],\n  runUuidsMatchingFilter: [],\n  tagsList: [],\n  inputsOutputsList: [],\n});\n","import { useEffect, useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { EXPERIMENT_PAGE_QUERY_PARAM_KEYS, useUpdateExperimentPageSearchFacets } from './useExperimentPageSearchFacets';\nimport { pick } from 'lodash';\nimport type { ExperimentPageUIState } from '../models/ExperimentPageUIState';\nimport { EXPERIMENT_PAGE_UI_STATE_FIELDS } from '../models/ExperimentPageUIState';\nimport type { ExperimentPageSearchFacetsState } from '../models/ExperimentPageSearchFacetsState';\nimport type { ExperimentEntity } from '../../../types';\nimport type { KeyValueEntity } from '../../../../common/types';\nimport { useNavigate, useSearchParams } from '../../../../common/utils/RoutingUtils';\nimport Utils from '../../../../common/utils/Utils';\nimport {\n  EXPERIMENT_PAGE_VIEW_STATE_SHARE_TAG_PREFIX,\n  EXPERIMENT_PAGE_VIEW_STATE_SHARE_URL_PARAM_KEY,\n} from '../../../constants';\nimport Routes from '../../../routes';\nimport { isTextCompressedDeflate, textDecompressDeflate } from '../../../../common/utils/StringUtils';\n\nconst deserializePersistedState = async (state: string) => {\n  if (isTextCompressedDeflate(state)) {\n    return JSON.parse(await textDecompressDeflate(state));\n  }\n  return JSON.parse(state);\n};\n\n/**\n * Hook that handles loading shared view state from URL and updating the search facets/UI state accordingly\n */\nexport const useSharedExperimentViewState = (\n  uiStateSetter: React.Dispatch<React.SetStateAction<ExperimentPageUIState>>,\n  experiment?: ExperimentEntity,\n  disabled = false,\n) => {\n  const [searchParams] = useSearchParams();\n  const intl = useIntl();\n  const viewStateShareKey = searchParams.get(EXPERIMENT_PAGE_VIEW_STATE_SHARE_URL_PARAM_KEY);\n\n  const isViewStateShared = Boolean(viewStateShareKey);\n\n  const updateSearchFacets = useUpdateExperimentPageSearchFacets();\n\n  const [sharedSearchFacetsState, setSharedSearchFacetsState] = useState<ExperimentPageSearchFacetsState | null>(null);\n  const [sharedUiState, setSharedUiState] = useState<ExperimentPageUIState | null>(null);\n  const [sharedStateError, setSharedStateError] = useState<string | null>(null);\n  const [sharedStateErrorMessage, setSharedStateErrorMessage] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!viewStateShareKey || !experiment) {\n      return;\n    }\n\n    // Find the tag with the given share key\n    const shareViewTag = experiment.tags.find(\n      ({ key }) => key === `${EXPERIMENT_PAGE_VIEW_STATE_SHARE_TAG_PREFIX}${viewStateShareKey}`,\n    );\n\n    const tryParseSharedStateFromTag = async (shareViewTag: KeyValueEntity) => {\n      try {\n        const parsedSharedViewState = await deserializePersistedState(shareViewTag.value);\n        // First, extract search facets part of the shared view state\n        const sharedSearchFacetsState = pick(\n          parsedSharedViewState,\n          EXPERIMENT_PAGE_QUERY_PARAM_KEYS,\n        ) as ExperimentPageSearchFacetsState;\n\n        // Then, extract UI state part of the shared view state\n        const sharedUiState = pick(parsedSharedViewState, EXPERIMENT_PAGE_UI_STATE_FIELDS) as ExperimentPageUIState;\n\n        setSharedSearchFacetsState(sharedSearchFacetsState);\n        setSharedUiState(sharedUiState);\n        setSharedStateError(null);\n        setSharedStateErrorMessage(null);\n      } catch (e) {\n        setSharedSearchFacetsState(null);\n        setSharedUiState(null);\n        setSharedStateError(`Error loading shared view state: share key is invalid`);\n        setSharedStateErrorMessage(\n          intl.formatMessage({\n            defaultMessage: `Error loading shared view state: share key is invalid`,\n            description: 'Experiment page > share viewstate > error > share key is invalid',\n          }),\n        );\n      }\n    };\n\n    // If the tag exists, parse the view state from the tag value\n    if (!shareViewTag) {\n      setSharedSearchFacetsState(null);\n      setSharedUiState(null);\n      setSharedStateError(`Error loading shared view state: share key ${viewStateShareKey} does not exist`);\n      setSharedStateErrorMessage(\n        intl.formatMessage(\n          {\n            defaultMessage: `Error loading shared view state: share key \"{viewStateShareKey}\" does not exist`,\n            description: 'Experiment page > share viewstate > error > share key does not exist',\n          },\n          {\n            viewStateShareKey,\n          },\n        ),\n      );\n      return;\n    }\n\n    tryParseSharedStateFromTag(shareViewTag);\n  }, [experiment, viewStateShareKey, intl]);\n\n  useEffect(() => {\n    if (!sharedSearchFacetsState || disabled) {\n      return;\n    }\n    updateSearchFacets(sharedSearchFacetsState, { replace: true });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sharedSearchFacetsState, disabled]);\n\n  useEffect(() => {\n    if (!sharedUiState || disabled) {\n      return;\n    }\n    uiStateSetter(sharedUiState);\n  }, [uiStateSetter, sharedUiState, disabled]);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (disabled) {\n      return;\n    }\n    if (sharedStateError && experiment) {\n      // If there's an error with share key, remove it from the URL and notify user\n      Utils.logErrorAndNotifyUser(new Error(sharedStateError));\n      Utils.displayGlobalErrorNotification(sharedStateErrorMessage, 3);\n      navigate(Routes.getExperimentPageRoute(experiment.experimentId), { replace: true });\n    }\n  }, [sharedStateError, sharedStateErrorMessage, experiment, navigate, disabled]);\n\n  return {\n    isViewStateShared,\n    sharedStateError,\n  };\n};\n","import { useCallback, useEffect, useMemo, useReducer, useState } from 'react';\nimport type { ExperimentPageUIState } from '../models/ExperimentPageUIState';\nimport { EXPERIMENT_PAGE_UI_STATE_FIELDS, createExperimentPageUIState } from '../models/ExperimentPageUIState';\nimport { loadExperimentViewState } from '../utils/persistSearchFacets';\nimport { keys, pick } from 'lodash';\nimport type { ExperimentRunsSelectorResult } from '../utils/experimentRuns.selector';\nimport type { UseExperimentsResult } from './useExperiments';\nimport { useUpdateExperimentPageSearchFacets } from './useExperimentPageSearchFacets';\nimport { expandedEvaluationRunRowsUIStateInitializer } from '../utils/expandedRunsViewStateInitializer';\nimport { shouldRerunExperimentUISeeding } from '../../../../common/utils/FeatureUtils';\n\n// prettier-ignore\nconst uiStateInitializers = [\n  expandedEvaluationRunRowsUIStateInitializer,\n];\n\ntype UpdateUIStateAction = {\n  type: 'UPDATE_UI_STATE';\n  payload: ExperimentPageUIState | ((current: ExperimentPageUIState) => ExperimentPageUIState);\n};\n\ntype SetupInitUIStateAction = {\n  type: 'INITIAL_UI_STATE_SEEDED';\n};\n\ntype LoadNewExperimentAction = {\n  type: 'LOAD_NEW_EXPERIMENT';\n  payload: { uiState: ExperimentPageUIState; isSeeded: boolean; isFirstVisit: boolean; newPersistKey: string };\n};\n\ntype UIStateContainer = {\n  uiState: ExperimentPageUIState;\n  currentPersistKey: string;\n  isSeeded: boolean;\n  /**\n   * Indicates if the user is visiting the experiment page for the first time in the current session.\n   */\n  isFirstVisit: boolean;\n};\n\nconst baseState = createExperimentPageUIState();\n\nexport const useInitializeUIState = (\n  experimentIds: string[],\n): [\n  ExperimentPageUIState,\n  React.Dispatch<React.SetStateAction<ExperimentPageUIState>>,\n  (experiments: UseExperimentsResult, runs: ExperimentRunsSelectorResult) => void,\n] => {\n  const persistKey = useMemo(() => JSON.stringify(experimentIds.sort()), [experimentIds]);\n\n  // Hash of the current experiment and runs. Used to determine if the UI state could be re-seeded.\n  const [experimentHash, setExperimentHash] = useState<string | null>(null);\n\n  const updateSearchFacets = useUpdateExperimentPageSearchFacets();\n\n  const [{ uiState, isSeeded, isFirstVisit }, dispatchAction] = useReducer(\n    (state: UIStateContainer, action: UpdateUIStateAction | SetupInitUIStateAction | LoadNewExperimentAction) => {\n      if (action.type === 'UPDATE_UI_STATE') {\n        const newState = typeof action.payload === 'function' ? action.payload(state.uiState) : action.payload;\n        return {\n          ...state,\n          uiState: newState,\n        };\n      }\n      if (action.type === 'INITIAL_UI_STATE_SEEDED') {\n        if (state.isSeeded) {\n          return state;\n        }\n        return {\n          ...state,\n          isSeeded: true,\n        };\n      }\n      if (action.type === 'LOAD_NEW_EXPERIMENT') {\n        return {\n          uiState: action.payload.uiState,\n          isFirstVisit: action.payload.isFirstVisit,\n          currentPersistKey: action.payload.newPersistKey,\n          isSeeded: action.payload.isSeeded,\n        };\n      }\n      return state;\n    },\n    undefined,\n    () => {\n      const persistedViewState = loadExperimentViewState(persistKey);\n      const persistedStateFound = Boolean(keys(persistedViewState || {}).length);\n      const persistedUIState = persistedStateFound ? pick(persistedViewState, EXPERIMENT_PAGE_UI_STATE_FIELDS) : {};\n      return {\n        uiState: { ...baseState, ...persistedUIState },\n        isSeeded: persistedStateFound,\n        isFirstVisit: !persistedStateFound,\n        currentPersistKey: persistKey,\n      };\n    },\n  );\n\n  const setUIState = useCallback(\n    (newStateOrSelector: ExperimentPageUIState | ((current: ExperimentPageUIState) => ExperimentPageUIState)) => {\n      dispatchAction({ type: 'UPDATE_UI_STATE', payload: newStateOrSelector });\n    },\n    [],\n  );\n\n  const seedInitialUIState = useCallback(\n    (experiments: UseExperimentsResult, runs: ExperimentRunsSelectorResult) => {\n      // Disable if there are no experiments/runs or if the state has already been persisted previously\n      if (!isFirstVisit || experiments.length === 0 || runs.runInfos.length === 0) {\n        return;\n      }\n\n      const newHash = generateExperimentHash(runs, experiments);\n\n      if (experimentHash === newHash && isSeeded) {\n        // Do not re-seed if the hash is the same, as we don't expect changes in the UI state\n        return;\n      }\n\n      if (isSeeded && !shouldRerunExperimentUISeeding()) {\n        // Do not re-seed if the feature is not enabled\n        return;\n      }\n\n      // Then, update the UI state using all known UI state initializers\n      setUIState((uiState) => {\n        const newUIState = uiStateInitializers.reduce(\n          (state, initializer) => initializer(experiments, state, runs, isSeeded),\n          {\n            ...uiState,\n          },\n        );\n        return newUIState;\n      });\n\n      setExperimentHash(newHash);\n      if (!isSeeded) {\n        // Mark the initial state as seeded (effectively set isSeeded to true)\n        dispatchAction({ type: 'INITIAL_UI_STATE_SEEDED' });\n      }\n    },\n    // prettier-ignore\n    [\n      isSeeded,\n      isFirstVisit,\n      setUIState,\n      experimentHash,\n    ],\n  );\n\n  // Each time persist key (experiment IDs) change, load persisted view state\n  useEffect(() => {\n    const persistedViewState = loadExperimentViewState(persistKey);\n    const persistedUIState = pick(persistedViewState, EXPERIMENT_PAGE_UI_STATE_FIELDS);\n    const isSeeded = Boolean(keys(persistedViewState || {}).length);\n    const isFirstVisit = !isSeeded;\n\n    dispatchAction({\n      type: 'LOAD_NEW_EXPERIMENT',\n      payload: { uiState: { ...baseState, ...persistedUIState }, isSeeded, isFirstVisit, newPersistKey: persistKey },\n    });\n  }, [persistKey]);\n\n  return [uiState, setUIState, seedInitialUIState];\n};\n\nexport const generateExperimentHash = (runs: ExperimentRunsSelectorResult, experiments: UseExperimentsResult) => {\n  if (runs.runInfos.length === 0 || experiments.length === 0) {\n    return null;\n  }\n\n  const sortedExperimentIds = experiments.map((exp) => exp.experimentId).sort();\n\n  const sortedRunUuids = runs.runInfos.map((run) => run.runUuid).sort();\n\n  return `${sortedExperimentIds.join(':')}:${sortedRunUuids.join(':')}`;\n};\n","import { compact } from 'lodash';\nimport { MLFLOW_RUN_TYPE_TAG, MLFLOW_RUN_TYPE_VALUE_EVALUATION } from '../../../constants';\nimport type { ExperimentEntity } from '../../../types';\nimport type { ExperimentPageUIState } from '../models/ExperimentPageUIState';\nimport { EXPERIMENT_PARENT_ID_TAG } from './experimentPage.common-utils';\nimport type { ExperimentRunsSelectorResult } from './experimentRuns.selector';\n\nexport const expandedEvaluationRunRowsUIStateInitializer = (\n  experiments: ExperimentEntity[],\n  uiState: ExperimentPageUIState,\n  runsData: ExperimentRunsSelectorResult,\n  isSeeded: boolean,\n) => {\n  if (isSeeded) {\n    return uiState;\n  }\n\n  const evaluationRunIds = runsData.runInfos\n    .filter((run, index) => runsData.tagsList[index]?.[MLFLOW_RUN_TYPE_TAG]?.value === MLFLOW_RUN_TYPE_VALUE_EVALUATION)\n    .map(({ runUuid }) => runUuid);\n\n  const parentIdsOfEvaluationRunIds = compact(\n    runsData.runInfos.map(\n      ({ runUuid }, index) =>\n        evaluationRunIds.includes(runUuid) && runsData.tagsList[index]?.[EXPERIMENT_PARENT_ID_TAG].value,\n    ),\n  );\n\n  if (parentIdsOfEvaluationRunIds.length) {\n    return {\n      ...uiState,\n      runsExpanded: parentIdsOfEvaluationRunIds.reduce(\n        (aggregate, runUuid) => ({ ...aggregate, [runUuid]: true }),\n        uiState.runsExpanded,\n      ),\n    };\n  }\n  return uiState;\n};\n","import { Button, Empty, NoIcon } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\n\nexport const ExperimentViewNotFound = () => {\n  return (\n    <div css={{ height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <Empty\n        description={\n          <FormattedMessage\n            defaultMessage=\"Requested experiment was not found.\"\n            description=\"A message shown on the experiment page if the experiment is not found\"\n          />\n        }\n        image={<NoIcon />}\n        title={\n          <FormattedMessage\n            defaultMessage=\"Experiment not found\"\n            description=\"A title shown on the experiment page if the experiment is not found\"\n          />\n        }\n      />\n    </div>\n  );\n};\n","import { Button, Empty, NoIcon } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\n\nexport const ExperimentViewNoPermissionsError = () => {\n  return (\n    <div css={{ height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <Empty\n        description={\n          <FormattedMessage\n            defaultMessage=\"You don't have permissions to open requested experiment.\"\n            description=\"A message shown on the experiment page if user has no permissions to open the experiment\"\n          />\n        }\n        image={<NoIcon />}\n        title={\n          <FormattedMessage\n            defaultMessage=\"Permission denied\"\n            description=\"A title shown on the experiment page if user has no permissions to open the experiment\"\n          />\n        }\n      />\n    </div>\n  );\n};\n","import { Empty, WarningIcon } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * A simple wrapper over <Empty> component displaying an error message.\n */\nexport const ErrorViewV2 = ({\n  error,\n  image,\n  title,\n  button,\n  className,\n}: {\n  error: Error;\n  image?: React.ReactElement;\n  title?: React.ReactElement;\n  button?: React.ReactElement;\n  className?: string;\n}) => {\n  return (\n    <div css={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }} className={className}>\n      <Empty\n        description={error.message}\n        image={image ?? <WarningIcon />}\n        title={\n          title ?? (\n            <FormattedMessage\n              defaultMessage=\"Error\"\n              description=\"A generic error message for error state in MLflow UI\"\n            />\n          )\n        }\n        button={button}\n      />\n    </div>\n  );\n};\n","import { Alert, LegacySkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useEffect, useState } from 'react';\nimport { ErrorCodes } from '../../../common/constants';\nimport { getExperimentApi } from '../../actions';\nimport { ExperimentKind } from '../../constants';\nimport { ExperimentViewHeaderCompare } from './components/header/ExperimentViewHeaderCompare';\nimport { ExperimentViewRuns } from './components/runs/ExperimentViewRuns';\nimport { useExperiments } from './hooks/useExperiments';\nimport { useFetchExperiments } from './hooks/useFetchExperiments';\nimport { useElementHeight } from '../../../common/utils/useElementHeight';\nimport { searchDatasetsApi } from '../../actions';\nimport Utils from '../../../common/utils/Utils';\nimport { ExperimentPageUIStateContextProvider } from './contexts/ExperimentPageUIStateContext';\nimport { first } from 'lodash';\nimport {\n  shouldEnableExperimentKindInference,\n  shouldUsePredefinedErrorsInExperimentTracking,\n} from '../../../common/utils/FeatureUtils';\nimport { useExperimentPageSearchFacets } from './hooks/useExperimentPageSearchFacets';\nimport { usePersistExperimentPageViewState } from './hooks/usePersistExperimentPageViewState';\nimport { useDispatch } from 'react-redux';\nimport type { ThunkDispatch } from '../../../redux-types';\nimport { useExperimentRuns } from './hooks/useExperimentRuns';\nimport type { ExperimentRunsSelectorResult } from './utils/experimentRuns.selector';\nimport { useSharedExperimentViewState } from './hooks/useSharedExperimentViewState';\nimport { useInitializeUIState } from './hooks/useInitializeUIState';\nimport { ExperimentViewDescriptionNotes } from './components/ExperimentViewDescriptionNotes';\nimport invariant from 'invariant';\nimport { useExperimentPageViewMode } from './hooks/useExperimentPageViewMode';\nimport { ExperimentViewTraces } from './components/ExperimentViewTraces';\nimport { FormattedMessage } from 'react-intl';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\nimport { NotFoundError, PermissionError } from '@databricks/web-shared/errors';\nimport { ExperimentViewNotFound } from './components/ExperimentViewNotFound';\nimport { ExperimentViewNoPermissionsError } from './components/ExperimentViewNoPermissionsError';\nimport { ErrorViewV2 } from '../../../common/components/ErrorViewV2';\nimport { ExperimentViewHeader } from './components/header/ExperimentViewHeader';\nimport { ExperimentViewHeaderKindSelector } from './components/header/ExperimentViewHeaderKindSelector';\nimport { getExperimentKindFromTags } from '../../utils/ExperimentKindUtils';\nimport { useUpdateExperimentKind } from './hooks/useUpdateExperimentKind';\nimport { canModifyExperiment } from './utils/experimentPage.common-utils';\nimport { useInferExperimentKind } from './hooks/useInferExperimentKind';\nimport { ExperimentViewInferredKindModal } from './components/header/ExperimentViewInferredKindModal';\n\nexport const ExperimentView = ({ showHeader = true }: { showHeader?: boolean }) => {\n  const dispatch = useDispatch<ThunkDispatch>();\n  const { theme } = useDesignSystemTheme();\n\n  const [searchFacets, experimentIds, isPreview] = useExperimentPageSearchFacets();\n  const [viewMode] = useExperimentPageViewMode();\n\n  const experiments = useExperiments(experimentIds);\n\n  const [firstExperiment] = experiments;\n\n  const { fetchExperiments, isLoadingExperiment, requestError: experimentRequestError } = useFetchExperiments();\n\n  const { elementHeight: hideableElementHeight, observeHeight } = useElementHeight();\n\n  const [editing, setEditing] = useState(false);\n\n  const [showAddDescriptionButton, setShowAddDescriptionButton] = useState(true);\n\n  // Create new version of the UI state for the experiment page on this level\n  const [uiState, setUIState, seedInitialUIState] = useInitializeUIState(experimentIds);\n\n  const { isViewStateShared } = useSharedExperimentViewState(setUIState, first(experiments));\n\n  // Get the maximized state from the new view state model if flag is set\n  const isMaximized = uiState.viewMaximized;\n\n  const {\n    isLoadingRuns,\n    loadMoreRuns,\n    runsData,\n    moreRunsAvailable,\n    requestError: runsRequestError,\n    refreshRuns,\n  } = useExperimentRuns(uiState, searchFacets, experimentIds);\n\n  useEffect(() => {\n    // If the new tabbed UI is enabled, fetch the experiments only if they are not already loaded.\n    // Helps with the smooth page transition.\n    if (experimentIds.every((id) => experiments.find((exp) => exp.experimentId === id))) {\n      return;\n    }\n    fetchExperiments(experimentIds);\n  }, [fetchExperiments, experimentIds, experiments]);\n\n  useEffect(() => {\n    // Seed the initial UI state when the experiments and runs are loaded.\n    // Should only run once.\n    seedInitialUIState(experiments, runsData);\n  }, [seedInitialUIState, experiments, runsData]);\n\n  useEffect(() => {\n    const requestAction = searchDatasetsApi(experimentIds);\n    dispatch(requestAction).catch((e) => {\n      // In V2 error handling, do not display datasets retrieval error\n      if (!shouldUsePredefinedErrorsInExperimentTracking()) {\n        Utils.logErrorAndNotifyUser(e);\n      }\n    });\n  }, [dispatch, experimentIds]);\n\n  const isComparingExperiments = experimentIds.length > 1;\n\n  usePersistExperimentPageViewState(uiState, searchFacets, experimentIds, isViewStateShared || isPreview);\n\n  const isViewInitialized = Boolean(!isLoadingExperiment && experiments[0] && runsData && searchFacets);\n\n  const { mutate: updateExperimentKind, isLoading: updatingExperimentKind } = useUpdateExperimentKind(() => {\n    if (isComparingExperiments) {\n      return;\n    }\n    return dispatch(getExperimentApi(experimentIds[0]));\n  });\n\n  const experimentKind = getExperimentKindFromTags(first(experiments)?.tags);\n  const firstExperimentId = first(experiments)?.experimentId;\n\n  const {\n    inferredExperimentKind,\n    isLoading: inferringExperimentType,\n    dismiss,\n  } = useInferExperimentKind({\n    experimentId: firstExperimentId,\n    isLoadingExperiment,\n    enabled: showHeader && !isComparingExperiments && shouldEnableExperimentKindInference() && !experimentKind,\n    experimentTags: first(experiments)?.tags,\n    updateExperimentKind,\n  });\n\n  if (\n    // Scenario for 404: either request error is resolved to NotFoundError or the code of ErrorWrapper is \"RESOURCE_DOES_NOT_EXIST\"\n    experimentRequestError instanceof NotFoundError ||\n    (experimentRequestError instanceof ErrorWrapper &&\n      experimentRequestError.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST)\n  ) {\n    return <ExperimentViewNotFound />;\n  }\n\n  if (\n    // Scenario for 401: either request error is resolved to PermissionError or the code of ErrorWrapper is \"PERMISSION_DENIED\"\n    experimentRequestError instanceof PermissionError ||\n    (experimentRequestError instanceof ErrorWrapper &&\n      experimentRequestError.getErrorCode() === ErrorCodes.PERMISSION_DENIED)\n  ) {\n    return <ExperimentViewNoPermissionsError />;\n  }\n\n  if (experimentRequestError instanceof Error) {\n    return <ErrorViewV2 css={{ height: '100%' }} error={experimentRequestError} />;\n  }\n\n  if (!isViewInitialized) {\n    // In the new view state model, wait for search facets to initialize\n    return <LegacySkeleton />;\n  }\n\n  invariant(searchFacets, 'searchFacets should be initialized at this point');\n\n  const isLoading = isLoadingExperiment || !experiments[0];\n\n  const canUpdateExperimentKind = true;\n\n  if (\n    inferredExperimentKind === ExperimentKind.NO_INFERRED_TYPE &&\n    canUpdateExperimentKind &&\n    shouldEnableExperimentKindInference()\n  ) {\n    return (\n      <ExperimentViewInferredKindModal\n        onConfirm={(kind) => {\n          firstExperimentId &&\n            updateExperimentKind(\n              { experimentId: firstExperimentId, kind },\n              {\n                onSettled: dismiss,\n              },\n            );\n        }}\n        onDismiss={dismiss}\n      />\n    );\n  }\n\n  const renderMlflow3PromoBanner = () => {\n    return null;\n  };\n\n  const renderTaskSection = () => {\n    return null;\n  };\n\n  const renderExperimentHeader = () => (\n    <>\n      <>\n        <ExperimentViewHeader\n          experiment={firstExperiment}\n          searchFacetsState={searchFacets || undefined}\n          uiState={uiState}\n          setEditing={setEditing}\n          experimentKindSelector={\n            !isComparingExperiments && firstExperimentId ? (\n              <ExperimentViewHeaderKindSelector\n                value={experimentKind}\n                inferredExperimentKind={inferredExperimentKind}\n                onChange={(kind) => updateExperimentKind({ experimentId: firstExperimentId, kind })}\n                isUpdating={updatingExperimentKind || inferringExperimentType}\n                key={inferredExperimentKind}\n                readOnly={!canUpdateExperimentKind}\n              />\n            ) : null\n          }\n        />\n        <div\n          css={{\n            width: '100%',\n            borderTop: `1px solid ${theme.colors.border}`,\n            marginTop: theme.spacing.sm,\n            marginBottom: theme.spacing.sm,\n          }}\n        />\n      </>\n      <div\n        style={{\n          maxHeight: isMaximized ? 0 : hideableElementHeight,\n        }}\n        css={{ overflowY: 'hidden', flexShrink: 0, transition: 'max-height .12s' }}\n      >\n        <div ref={observeHeight}>\n          <ExperimentViewDescriptionNotes\n            experiment={firstExperiment}\n            setShowAddDescriptionButton={setShowAddDescriptionButton}\n            editing={editing}\n            setEditing={setEditing}\n          />\n        </div>\n      </div>\n    </>\n  );\n\n  const getRenderedView = () => {\n    if (viewMode === 'TRACES') {\n      return <ExperimentViewTraces experimentIds={experimentIds} />;\n    }\n\n    return (\n      <ExperimentViewRuns\n        isLoading={false}\n        experiments={experiments}\n        isLoadingRuns={isLoadingRuns}\n        runsData={runsData as ExperimentRunsSelectorResult}\n        searchFacetsState={searchFacets}\n        loadMoreRuns={loadMoreRuns}\n        moreRunsAvailable={moreRunsAvailable}\n        requestError={runsRequestError}\n        refreshRuns={refreshRuns}\n        uiState={uiState}\n      />\n    );\n  };\n\n  return (\n    <ExperimentPageUIStateContextProvider setUIState={setUIState}>\n      <div css={styles.experimentViewWrapper}>\n        {isLoading ? (\n          <LegacySkeleton title paragraph={false} active />\n        ) : showHeader ? (\n          <>\n            {isComparingExperiments ? (\n              <ExperimentViewHeaderCompare experiments={experiments} />\n            ) : (\n              renderExperimentHeader()\n            )}\n          </>\n        ) : (\n          // When the header is not shown, we still want to render the promo banner and task section\n          <>\n            {renderMlflow3PromoBanner()}\n            {renderTaskSection()}\n          </>\n        )}\n        {getRenderedView()}\n      </div>\n    </ExperimentPageUIStateContextProvider>\n  );\n};\n\nconst styles = {\n  experimentViewWrapper: { height: '100%', display: 'flex', flexDirection: 'column' as const },\n};\n","import { isEqual } from 'lodash';\nimport { useSelector } from 'react-redux';\nimport type { ExperimentEntity, ExperimentStoreEntities } from '../../../types';\n\nexport type UseExperimentsResult = ExperimentEntity[];\n\n/**\n * Hook that returns data and functions necessary for rendering\n * experiment(s) details - name, title, tags etc.\n */\nexport const useExperiments = (ids: (number | string)[]): UseExperimentsResult =>\n  useSelector(\n    (state: { entities: ExperimentStoreEntities }) =>\n      ids.map((id) => state.entities.experimentsById[id]).filter(Boolean),\n    (oldExperiments, newExperiments) => isEqual(oldExperiments, newExperiments),\n  );\n","import { useContext } from 'react';\n\nimport { GetExperimentsContext } from '../contexts/GetExperimentsContext';\n\nexport const useFetchExperiments = () => {\n  const getExperimentsContext = useContext(GetExperimentsContext);\n\n  if (!getExperimentsContext) {\n    throw new Error('Trying to use GetExperimentsContext actions outside of the context!');\n  }\n\n  return getExperimentsContext;\n};\n","import { useEffect, useState } from 'react';\n\n/**\n * Hook that returns dynamically updated changing element height. Usage example:\n * ```ts\n * const { elementHeight, observeHeight } = useElementHeight();\n * // ...\n * return <div ref={observeHeight}>Element height: {elementHeight}px</div>\n * ```\n */\nexport const useElementHeight = (resizeCallback?: (entry: ResizeObserverEntry) => void) => {\n  const [hideableElementsContainer, setHideableElementsContainer] = useState<HTMLElement | null>(null);\n\n  const [elementHeight, setElementHeight] = useState<number | undefined>(undefined);\n\n  useEffect(() => {\n    if (!hideableElementsContainer || !window.ResizeObserver) {\n      return undefined;\n    }\n    const resizeObserver = new ResizeObserver(([entry]) => {\n      resizeCallback?.(entry);\n      if (entry.target.scrollHeight) {\n        setElementHeight(entry.target.scrollHeight);\n      }\n    });\n    resizeObserver.observe(hideableElementsContainer);\n    return () => resizeObserver.disconnect();\n  }, [hideableElementsContainer, resizeCallback]);\n\n  return { elementHeight, observeHeight: setHideableElementsContainer };\n};\n","import { isEqual } from 'lodash';\nimport React, { createContext, useCallback, useMemo, useState } from 'react';\nimport { mapErrorWrapperToPredefinedError } from '../../../../common/utils/ErrorUtils';\nimport { shouldUsePredefinedErrorsInExperimentTracking } from '../../../../common/utils/FeatureUtils';\nimport { ErrorWrapper } from '../../../../common/utils/ErrorWrapper';\nimport RequestStateWrapper from '../../../../common/components/RequestStateWrapper';\nimport Utils from '../../../../common/utils/Utils';\nimport type { getExperimentApi, setCompareExperiments, setExperimentTagApi } from '../../../actions';\nimport { useDispatch } from 'react-redux';\nimport type { ThunkDispatch } from '../../../../redux-types';\n\nexport interface GetExperimentsContextActions {\n  setExperimentTagApi: typeof setExperimentTagApi;\n  getExperimentApi: typeof getExperimentApi;\n  setCompareExperiments: typeof setCompareExperiments;\n}\n\nexport interface GetExperimentsContextType {\n  /**\n   * Function used to (re)fetch experiments using their IDs.\n   */\n  fetchExperiments: (experimentIds: string[]) => void;\n\n  /**\n   * Indicates if experiments are being loaded at the moment\n   */\n  isLoadingExperiment: boolean;\n\n  /**\n   * Contains error descriptor if fetching runs failed\n   */\n  requestError: ErrorWrapper | Error | null;\n\n  /**\n   * All experiment-related actions creators\n   */\n  actions: GetExperimentsContextActions;\n}\n\n/**\n * Wrapper context that aggregates concrete redux actions necessary to fetch experiments.\n */\nexport const GetExperimentsContext = createContext<GetExperimentsContextType | null>(null);\n\n/**\n * Provider component for GetExperimentsContext.\n * Accepts concrete redux actions for searching experiments.\n */\nexport const GetExperimentsContextProvider = ({\n  children,\n  actions,\n}: React.PropsWithChildren<{\n  actions: GetExperimentsContextActions;\n}>) => {\n  const [fetchExperimentsRequestIds, setFetchExperimentsRequestIds] = useState<string[]>([]);\n  const [isLoadingExperiment, setIsLoadingExperiment] = useState(false);\n\n  const [requestError, setRequestError] = useState<any>(null);\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const fetchExperiments = useCallback(\n    (experimentIds: string[]) => {\n      const fetchFn = () => {\n        const newRequestIds = experimentIds.map((experimentId) => {\n          const requestAction = actions.getExperimentApi(experimentId);\n          dispatch(requestAction).catch((e) => {\n            if (!shouldUsePredefinedErrorsInExperimentTracking()) {\n              Utils.logErrorAndNotifyUser(e);\n            }\n          });\n          return requestAction.meta.id;\n        });\n        setFetchExperimentsRequestIds((requestIds) =>\n          isEqual(newRequestIds, requestIds) ? requestIds : newRequestIds,\n        );\n      };\n\n      setRequestError(null);\n      fetchFn();\n    },\n    [actions, dispatch],\n  );\n\n  const contextValue = useMemo(\n    () => ({\n      fetchExperiments,\n      isLoadingExperiment,\n      requestError: requestError,\n      actions,\n    }),\n    [actions, fetchExperiments, isLoadingExperiment, requestError],\n  );\n\n  const renderFn = (_isLoading: false, _renderError: any, requests: any[]) => {\n    /**\n     * TODO:\n     * Defer setting this state because currently it might happen inside\n     * RequestStateWrapper's render function which causes React to act up.\n     * Either rebuild RequestStateWrapper or introduce some workaround.\n     */\n    setIsLoadingExperiment(requests.some((r) => fetchExperimentsRequestIds.includes(r.id) && r.active));\n\n    if (!requestError) {\n      requests.forEach((request) => {\n        if (request.error) {\n          if (shouldUsePredefinedErrorsInExperimentTracking()) {\n            const maybePredefinedError = mapErrorWrapperToPredefinedError(request.error);\n            if (maybePredefinedError) {\n              setRequestError(maybePredefinedError);\n              return;\n            }\n          }\n          setRequestError(request.error);\n        }\n      });\n    }\n\n    return children;\n  };\n\n  return (\n    <GetExperimentsContext.Provider value={contextValue}>\n      <RequestStateWrapper\n        shouldOptimisticallyRender\n        // eslint-disable-next-line no-trailing-spaces\n        requestIds={fetchExperimentsRequestIds}\n      >\n        {renderFn}\n      </RequestStateWrapper>\n    </GetExperimentsContext.Provider>\n  );\n};\n"],"names":["useResizableMaxWidth","minWidth","ref","useRef","containerWidth","setContainerWidth","useState","undefined","updateWidth","useCallback","current","clientWidth","useLayoutEffect","window","addEventListener","removeEventListener","resizableMaxWidth","node","ExperimentViewHeaderCompare","React","experiments","pageTitle","useMemo","_jsx","FormattedMessage","id","defaultMessage","values","numExperiments","length","breadcrumbs","Link","to","Routes","experimentsObservatoryRoute","children","PageHeader","title","ExperimentViewHeaderShareButton","RestoreRunModalImpl","Component","constructor","props","super","this","handleSubmit","bind","restorePromises","selectedRunIds","forEach","runId","push","restoreRunApi","Promise","all","catch","e","errorMessage","textJson","error_code","message","openErrorModal","then","_this$props$onSuccess","_this$props","onSuccess","call","render","number","ConfirmModal","isOpen","onClose","Utils","pluralize","helpText","confirmButtonText","mapDispatchToProps","connect","ExperimentViewRunModals","showDeleteRunModal","showRestoreRunModal","showRenameRunModal","runsSelected","onCloseDeleteRunModal","onCloseRestoreRunModal","onCloseRenameRunModal","renamedRunName","refreshRuns","Object","entries","filter","selected","map","key","_jsxs","_Fragment","DeleteRunModal","RestoreRunModal","RenameRunModal","runUuid","runName","_ref","name","styles","_ref2","ExperimentViewRunsControlsActionsAddNewTagModal","setIsOpen","selectedRunsExistingTagKeys","addNewTag","theme","useDesignSystemTheme","tagKey","setTagKey","tagValue","setTagValue","isTagKeyAllowedChars","test","isTagKeyDuplicate","includes","isTagKeyValid","isTagNonEmptyAndTagKeyValid","Modal","componentId","visible","onCancel","onOk","onConfirmTag","value","okText","cancelText","okButtonProps","disabled","css","_css","display","alignItems","gap","spacing","md","flex","FormUI","Label","htmlFor","Input","onChange","target","validationState","Hint","convertTagToString","tag","convertStringToTag","tagString","splits","split","join","ExperimentViewRunsControlsActionsSelectTags","runInfos","tagsList","selectedTags","setSelectedTags","isAddNewTagModalOpen","setIsAddNewTagModalOpen","isMultiSelectOpen","setIsMultiSelectOpen","isSavingTagsLoading","setIsSavingTagsLoading","allSelectedTags","allNotSelectedTags","indeterminateTags","allTags","getRunsTagsSelection","selectedRunsTagArray","flatMap","run","idx","tags","keys","isUserFacingTag","allRunsTags","selectedRunsAllSelectedTags","every","selectedRunsAllNotSelectedTags","selectedRunsIndeterminateTags","some","openDropdown","newTag","selectedValues","handleChange","updatedTagString","dispatch","useDispatch","DialogCombobox","open","label","multiSelect","DialogComboboxTrigger","onClick","DialogComboboxContent","matchTriggerWidth","DialogComboboxOptionList","isIndeterminate","DialogComboboxOptionListCheckboxItem","checked","indeterminate","DialogComboboxFooter","justifyContent","sm","Button","addNewTagModal","icon","PlusIcon","type","saveTags","runInfo","existingKeys","newKeys","setRunTagsBulkApi","ErrorWrapper","getMessageField","displayGlobalErrorNotification","finally","loading","uniq","concat","CompareRunsButtonWrapper","ExperimentViewRunsControlsActions","viewState","runsData","searchFacetsState","lifecycleFilter","navigate","useNavigate","setShowDeleteRunModal","setShowRestoreRunModal","setShowRenameRunModal","setRenamedRunName","renameButtonClicked","runsSelectedList","selectedRun","find","info","compareButtonClicked","experimentIds","experimentId","getCompareRunPageRoute","Set","sort","onDeleteRun","onRestoreRun","selectedRunsCount","Boolean","canRestoreRuns","canRenameRuns","canCompareRuns","controlBar","LIFECYCLE_FILTER","ACTIVE","danger","DELETED","buttonSeparator","borderLeft","colors","border","marginLeft","xs","marginRight","height","CreateNotebookRunModal","closeModal","codeSnippetTheme","isDarkMode","classical_ml_text","trimStart","llm_text","snippetHeight","Math","min","text","footer","Typography","Title","level","marginTop","marginBottom","LegacyTabs","LegacyTabPane","tab","CodeSnippet","style","padding","language","actions","CopyButton","copyText","showLabel","CopyIcon","GatewayErrorWrapper","getGatewayErrorMessage","_this$textJson","_this$textJson$error","_this$textJson2","_this$textJson3","error","toString","ModelGatewayService","createEvaluationTextPayload","inputText","task","ModelGatewayRouteTask","LLM_V1_COMPLETIONS","prompt","LLM_V1_CHAT","messages","content","role","LLM_V1_EMBEDDINGS","Error","_ModelGatewayService","queryMLflowDeploymentEndpointRoute","async","route","data","invariant","mlflowDeployment","processed_data","parameters","MlflowService","gatewayProxyPost","gateway_path","endpoint_url","substring","json_data","queryModelGatewayRoute","payload","parseEndpointEvaluationResponse","response","_completionsResponse$","_completionsResponse$2","completionsResponse","choices","usage","metadata","total_tokens","output_tokens","completion_tokens","input_tokens","prompt_tokens","_chatResponse$choices","_chatResponse$choices2","_chatResponse$choices3","chatResponse","parameterDefinitions","string","defineMessage","helpString","max","step","DEFAULT_PARAMETER_VALUES","temperature","max_tokens","usePromptEvaluationParameters","updateParameters","updateParameter","currentParameters","EvaluationCreateParameterListControl","parameterValue","draftValue","setDraftValue","isArray","stop","index","Tag","closable","s","allowClear","onKeyDown","trim","EvaluationCreatePromptParameters","lg","parameterDef","_parameters$parameter","LegacyTooltip","placement","InfoSmallIcon","verticalAlign","color","textSecondary","LineSmoothSlider","parseInt","newVariableEndSegment","newDefaultVariableName","usePromptEvaluationPromptTemplateValue","promptTemplate","updatePromptTemplate","DEFAULT_PROMPTLAB_NEW_TEMPLATE_VALUE","promptTemplateRef","handleAddVariableToTemplate","template","newVariableName","getNewVariableName","alreadyExistingVariableNames","maximumVariableNameIndex","_name$match","match","extractPromptInputVariables","newValue","requestAnimationFrame","textAreaElement","focus","setSelectionRange","savePromptTemplateInputRef","_ref$resizableTextAre","resizableTextArea","textArea","whitespaceViolationMessage","EvaluationCreateRunPromptTemplateErrors","violations","namesWithSpaces","formatMessage","useIntl","Text","size","invalidNames","nameWithSpace","PROMPT_TEMPLATE_EXAMPLES","variables","TextArea","EvaluationCreatePromptRunModalExamples","closeExamples","updateInputVariableValue","verticalSizing","ArrowLeftIcon","dangerouslySetAntdProps","width","flexDirection","boxSizing","actionDefaultBorderDefault","borderRadius","legacyBorders","borderRadiusMd","background","backgroundPrimary","margin","overflow","float","tryPromptTemplate","line","Paragraph","borderTop","opacity","Spacer","EvaluationCreatePromptRunOutput","evaluationMetadata","isEvaluating","isOutputDirty","evaluationOutput","evaluationError","evaluateButtonTooltip","onEvaluateClick","onCancelClick","metadataOutput","PROMPTLAB_METADATA_COLUMN_LATENCY","round","Number","PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS","totalTokens","PlayIcon","StopIcon","WarningIcon","TableSkeleton","lines","rows","readOnly","Message","evaluatePromptTableValue","routeName","routeType","compiledPrompt","inputValues","outputColumn","rowKey","evaluatePromptTableValueUnified","getState","modelGateway","modelGatewayRoutesLoading","modelGatewayRoutes","searchAllPromptLabAvailableEndpoints","gatewayRoute","logErrorAndNotifyUser","modelGatewayRequestPayload","meta","startTime","performance","now","gatewayProxyGet","getUUID","getPromptEngineeringErrorMessage","_ref3","_ref4","EvaluationCreatePromptRunModal","runBeingDuplicated","visibleRuns","useExperimentIds","setViewMode","useExperimentPageViewMode","selectedModel","updateSelectedModel","newRunName","setNewRunName","isCreatingRun","setIsCreatingRun","setIsEvaluating","lastEvaluationError","setLastEvaluationError","setEvaluationOutput","setEvaluationMetadata","outputDirty","setOutputDirty","isViewExamplesModalOpen","setViewExamplesModalOpen","cancelTokenRef","useEffect","intl","updateInputVariables","inputVariables","inputVariableValues","inputVariableNameViolations","clearInputVariableValues","usePromptEvaluationInputValues","updateInputVariablesDirect","setInputVariableNameViolations","updateInputVariableValues","DEFAULT_PROMPTLAB_INPUT_VALUES","debounce","currentInputVariables","newInputVariables","isEqual","getPromptInputVariableNameViolations","sanitizedInputVariableValues","fromPairs","generateRandomRunName","duplicatedPromptTemplate","duplicatedRouteName","duplicatedParameters","extractEvaluationPrerequisitesForRun","extractRequiredInputParamsForRun","duplicatedRunName","getDuplicatedRunName","compact","modelRoutesUnified","useSelector","supportedModelRouteListUnified","sortBy","modelRoutesLoading","handleEvaluate","modelRoute","cancelToken","random","compilePromptInputText","latency","metadataWithEvaluationTime","prefixedMetadata","reduce","acc","metadata_key","metadata_value","wrappedMessage","handleCancel","selectModelLabel","selectModelPlaceholder","promptTemplateProvided","allInputValuesProvided","variable","_inputVariableValues$","runNameProvided","evaluateButtonEnabled","createRunButtonEnabled","createRunButtonTooltip","onHandleSubmit","_modelRoutesUnified$s","_modelRoutesUnified$s2","modelRouteName","modelParameters","route_type","modelInput","createPromptLabRunApi","promptParameters","modelOutput","modelOutputParameters","modal","selectedRouteName","placeholder","withInlineLabel","maxHeight","DialogComboboxOptionListSearch","autoFocus","DialogComboboxOptionListSelectItem","DialogComboboxHintRow","model","formItem","required","autoSize","minRows","inputVariable","inset","backgroundColor","overlayOverlay","position","zIndex","Spinner","CreateNewRunContext","createNewRun","CreateNewRunContextProvider","setRunBeingDuplicated","contextValue","runToDuplicate","Provider","shouldEnablePromptLab","useCreateNewRun","useContext","ExperimentViewRunsControlsFilters","updateViewState","onDownloadCsv","requestError","additionalControls","viewMaximized","autoRefreshEnabled","hideEmptyCharts","areRunsGrouped","setUrlSearchFacets","useUpdateExperimentPageSearchFacets","pageViewMode","setViewModeInURL","updateUIState","useUpdateExperimentViewUIState","isComparingExperiments","datasetsFilter","searchFilter","compareRunsMode","isCreateRunWithNotebookModalOpen","setCreateRunWithNotebookModalOpenValue","startTimeColumnLabels","getStartTimeColumnDisplayName","currentLifecycleFilterValue","currentStartTimeFilterLabel","displaySidebarToggleButton","datasetSummaries","state","entities","datasetsByExperimentId","hasDatasets","responsive","mediaQueries","flexWrap","SegmentedControlGroup","SegmentedControlButton","Tooltip","ListIcon","ChartLineIcon","TableIcon","RunsSearchAutoComplete","onSearchFilterChange","newSearchFilter","onClear","createExperimentPageSearchFacetsState","startTimeKey","datasetSummary","showTagAfterValueCount","summary","item","datasetSummariesEqual","newDatasetsFilter","updateDatasetsFilter","digest","context","textTransform","DropdownMenu","Root","Trigger","asChild","OverflowIcon","Content","Item","className","IconWrapper","DownloadIcon","Separator","CheckboxItem","ItemIndicator","useAsLabel","ToggleIconButton","pressed","previewPaneVisible","SidebarIcon","onSelect","PreviewBadge","GROUP_KEY","GROUP_KEY_ATTRIBUTES","makeCanonicalSortKey","COLUMN_TYPES","ATTRIBUTES","GROUP_KEY_PARAMS","PARAMS","GROUP_KEY_METRICS","METRICS","GROUP_KEY_TAGS","TAGS","findMatching","filterQuery","v","toLowerCase","createHighlightedNode","indexOf","beforeStr","matchStr","afterStr","ExperimentViewRunsColumnSelector","columnSelectorVisible","onChangeColumnSelectorVisible","selectedColumns","setFilter","searchInputRef","scrollableContainerRef","buttonRef","attributeColumnNames","isComparing","result","ATTRIBUTE_COLUMN_LABELS","USER","SOURCE","VERSION","MODELS","DESCRIPTION","unshift","EXPERIMENT_NAME","DATASET","getAttributeColumns","setCheckedColumns","updateFn","facets","newColumns","uniqueNewColumns","Array","from","tagsKeyList","getVisibleTagKeyList","canonicalKeyNames","paramKeyList","metricKeyList","treeData","filteredAttributes","filteredParams","filteredMetrics","filteredTags","attributeKey","metricKey","_customColumnDef$disp","customColumnDef","customMetricBehaviorDefs","displayName","paramKey","toggleGroup","isChecked","keyList","k","toggleSingleKey","_scrollableContainerR","_searchInputRef$curre","scrollTo","preventScroll","scrollIntoView","block","behavior","onCheck","_","isCanonicalSortKeyOfType","columnType","extractCanonicalSortKey","canonicalKeysForGroup","searchInputKeyDown","treeElement","parent","querySelector","dropdownContent","borderColor","_buttonRef$current","prefix","SearchIcon","overflowY","overflowX","paddingBottom","whiteSpace","textOverflow","Tree","mode","checkedKeys","defaultExpandedKeys","Dropdown","overlay","trigger","onVisibleChange","ColumnsIcon","ChevronDownIcon","defineMessages","minimum","maximum","average","attributes","params","dataset","noParams","noTags","aggregationTooltip","noResults","GroupBySelectorBody","groupBy","useGroupedValuesInCharts","onUseGroupedValuesInChartsChange","attributeElementRef","tagElementRef","paramElementRef","inputElementRef","minimumLabel","maximumLabel","averageLabel","datasetLabel","tagNames","runTags","startsWith","MLFLOW_INTERNAL_PREFIX","aggregateFunction","RunGroupingAggregateFunction","Average","groupByKeys","currentAggregateFunctionLabel","filteredTagNames","filteredParamNames","param","attributesMatchFilter","isEmpty","datasetsList","hasAnyResults","groupByToggle","groupByData","newGroupByKeys","stopPropagation","firstItem","GearIcon","align","side","shouldEnableToggleIndividualRunsInGroups","onCheckedChange","RadioGroup","onValueChange","aggregateFunctionString","newFunction","newGroupBy","RadioItem","Min","Max","Group","isGroupedBy","RunGroupingMode","Dataset","createRunsGroupByKey","tagName","groupByKey","paramName","Param","ExperimentViewRunsGroupBySelector","isLoading","normalizedGroupBy","normalizeRunsGroupByKey","ListBorderIcon","endIcon","XCircleFillIcon","textPlaceholder","fontSize","typography","fontSizeSm","actionTertiaryTextHover","onPointerDownCapture","ExperimentViewRunsSortSelectorV2Body","sortOptions","orderByKey","orderByAsc","onOptionSelected","firstElementRef","filteredSortOptions","option","setOrder","ascending","_inputElementRef$curr","_firstElementRef$curr","ArrowDownIcon","ArrowUpIcon","sortOption","currentUIState","middleTruncateStr","ExperimentViewRunsSortSelectorV2","metricKeys","paramKeys","setOpen","attributeSortOptions","ATTRIBUTE_COLUMN_SORT_LABEL","sortLabelKey","ATTRIBUTE_COLUMN_SORT_KEY","metricsSortOptions","_customMetricBehavior","_customMetricBehavior2","canonicalSortKey","paramsSortOptions","currentSortSelectLabel","sortOptionLabel","extractedKeyName","onOpenChange","SortAscendingIcon","SortDescendingIcon","ExperimentViewRunsControls","expandRows","updateExpandRows","uiState","_uiState$useGroupedVa","setCompareRunsMode","isComparingRuns","isEvaluationMode","filteredParamKeys","filteredMetricKeys","filteredTagKeys","downloadRunsCsv","useRunSortOptions","ColumnSortByOrder","COLUMN_SORT_BY_ASC","COLUMN_SORT_BY_DESC","options","sortLabel","order","SORT_DELIMITER_SYMBOL","showActionButtons","showGroupBySelector","changeColumnSelectorVisible","toggleExpandedRows","multipleDatasetsArePresent","datasetsInRun","ToggleButton","ExperimentPageViewState","hiddenChildRunsSelected","artifactViewState","selectedTables","groupByCols","intersectingOnly","FETCHED_RUN_NOTIFICATION_KEY","useFetchedRunsNotification","notification","getMessage","allRuns","childRuns","fetchedRuns","existingRunInfos","countFetchedRuns","newRuns","r","x","runsWithParent","_run$data","runTagsList","EXPERIMENT_PARENT_ID_TAG","close","duration","PromptEngineeringContext","getMissingParams","pendingDataLoading","getEvaluableRowCount","evaluateCell","evaluateAllClick","runColumnsBeingEvaluated","canEvaluateInRunColumn","toggleExpandedHeader","isHeaderExpanded","PromptEngineeringContextProvider","tableData","setIsHeaderExpanded","expanded","canEvaluateOnRun","row","requiredInput","groupByCellValues","startEvaluatingRunColumn","stopEvaluatingRunColumn","useEvaluateAllRows","evaluationTableData","currentTableData","currentRunsBeingEvaluated","setEvaluatedRuns","processQueueForRun","requiredInputs","nextEvaluableRow","tableRow","cellValues","containsAllParamValuesForRow","runs","existingRunUuid","evaluationData","evaluationPendingDataLoadingByRunUuid","DEFAULT_PROMPTLAB_OUTPUT_COLUMN","missingParams","getAction","usePromptEngineeringContext","EvaluationRunHeaderModelIndicator","promptEvaluationDataForRun","gatewayKey","stopSequences","Popover","Arrow","EvaluationRunHeaderDatasetIndicator","onDatasetSelected","_run$datasets","handleDatasetSelected","datasetWithTags","datasets","ExperimentViewDatasetWithContext","displayTextAsLink","slice","general","heightSm","EvaluationTableHeader","groupHeaderContent","flexBasis","borderBottom","borderDecorative","borderRight","EvaluationRunHeaderCellRenderer","onHideRun","onDuplicateRun","evaluableRowCount","getRunColor","useGetExperimentRunColor","evaluateAllButtonEnabled","evaluatingAllInProgress","evaluateAllTooltipContent","paddingTop","RunColorPill","ExperimentRoutes","getRunPageRoute","flexShrink","VisibleIcon","EvaluationCellEvaluateButton","isRunEvaluable","missingParamsToEvaluate","missingParamList","onMouseDownCapture","onClickCapture","HighlightedText","highlight","parts","RegExp","part","i","yellow200","EvaluationTextCellRenderer","isGroupByColumn","_pendingDataLoading$r","_data$outputMetadataB","isGatewayRoutesLoading","modelGatewayRoutesLoadingLegacy","isCellEvaluating","outputMetadata","outputMetadataByRunUuid","isPending","isPendingInputRow","backgroundSecondary","structuredJSONValue","JSON","parse","cursor","actionDefaultBackgroundHover","JsonPreview","json","stringify","highlightedText","left","bottom","right","evaluationTime","EVALUATION_ARTIFACTS_TEXT_COLUMN_WIDTH","initialWidthGroupBy","initialWidthOutput","maxWidth","EvaluationGroupByHeaderCellRenderer","truncate","bold","enlargedIconStyle","svg","EvaluationTableActionsColumnRenderer","ChevronRightIcon","EvaluationTableActionsCellRenderer","onAddNewInputs","displayAddNewInputsButton","EvaluationImageCellRenderer","url","compressed_url","ImagePlot","imageUrl","compressedImageUrl","EvaluationArtifactCompareTable","resultList","groupByColumns","onCellClick","isPreviewPaneVisible","outputColumnName","isImageColumn","columns","setColumns","gridApi","setGridApi","pendingData","evaluationPendingDataByRunUuid","gridWrapperRef","handleHideRun","refreshHeader","handleDuplicateRun","clearFocusedCell","visibleRows","getRenderedNodes","refreshCells","force","rowNodes","showAddNewInputsModal","AddNewInputsModal","useEvaluationAddNewInputsModal","modalVisible","setModalVisible","requiredInputKeys","setRequiredInputKeys","setInputValues","allValuesProvided","inputName","successCallback","setSuccessCallback","setInputValue","requiredInputsForRuns","inputValuesWithRunNames","flat","runNames","hasMore","scrollGridToTop","_gridWrapperRef$curre","gridViewport","top","ensureIndexVisible","handleCellClicked","colDef","column","emptyMessage","headerName","getId","outputColumnIndicator","cols","resizable","pinned","headerComponent","cellRendererSelector","rowIndex","component","cellClass","col","isLastGroupByColumns","initialWidth","valueGetter","suppressMovable","cellRenderer","headerClass","cellRendererParams","headerComponentParams","colId","onCellClicked","isFirstColumn","runsContainHeaderMetadata","setHeaderHeight","getEvaluationArtifactsTableHeaderHeight","isExpanded","includePlaceForMetadata","MLFlowAgGridLoader","createTableStyles","rowHeight","onGridReady","api","getRowId","suppressHorizontalScroll","columnDefs","rowData","components","TextRendererCellRenderer","GroupHeaderCellRenderer","RunHeaderCellRenderer","ActionsColumnRenderer","ActionsCellRenderer","ImageRendererCellRenderer","boxShadow","blue300","pointerEvents","extractGroupByValuesFromEntry","entry","groupByMappings","isString","keyValue","String","groupByValues","isMacKeyboard","_userAgentData","navigator","userAgentData","platform","systemModifierKey","useBrowserKeyShortcutListener","modifierKeys","fn","altOrOptKey","ctrlOrCmdKey","shiftKey","handler","altKey","preventDefault","useEvaluationArtifactWriteBack","evaluationArtifactsBeingUploaded","evaluationDraftInputValues","isSyncingArtifacts","setSyncingArtifacts","discard","unsyncedDataEntriesCount","draftInputValuesCount","runsBeingSynchronizedCount","runArtifacts","isSynced","synchronizeArtifactData","evaluationArtifactsByRunUuid","runUuidsToUpdate","originalRunArtifacts","artifactTableRecords","MLFLOW_PROMPT_ENGINEERING_ARTIFACT_NAME","promises","originalTableRecord","transformedEntries","entryData","columnName","updatedArtifactFile","cloneDeep","rawArtifactFile","uploadArtifactApi","newEvaluationTable","parseEvaluationTableArtifact","artifactPath","pendingUnevaluatedDraftInputValues","EvaluationSyncStatusElement","strong","keyCombination","shouldDisplayEvaluationArtifactEmptyState","noEvalTablesLogged","userDeselectedAllColumns","areRunsSelected","areTablesSelected","EvaluationArtifactViewEmptyState","description","link","chunks","openInNewTab","href","rel","Empty","_ref5","EvaluationArtifactCompareViewImpl","comparedRuns","hidden","setSelectedTables","setGroupByCols","setOutputColumn","useEvaluationArtifactViewState","showSearchSpinner","setShowSearchSpinner","debouncedFilter","setDebouncedFilter","setUserDeselectedAllColumns","handleTableToggle","currentValue","handleGroupByToggle","newValues","visibleRunsUuids","tables","tablesByRun","comparedRunRows","tablesInRun","extractLoggedTablesFromRunTags","allUniqueTables","tablesIntersection","tableName","_tablesByRun$runUuid","uuid","table","_evaluationData$evalu","evaluationArtifactsLoadingByRunUuid","imageColumns","artifactsByRun","comparedRunUuids","tableNames","columnsIntersection","allTableEntries","path","allColumnsForAllTables","column_string","tableColumns","useEvaluationArtifactColumns","tableRows","useEvaluationArtifactTableData","pendingDataByRun","draftInputValues","comparedRunsUuids","results","outputCellsValueMap","groupByCellsValueMap","pendingRowKeys","draftInputValueSet","visibleGroupByValues","colName","draftInputRowKey","outputMetadataByCellsValueMap","runsWithEntries","parseFloat","cellsEntry","pendingEntries","pendingEntry","allRowKeys","existingTableRow","existingKey","filepath","compressed_filepath","LOG_TABLE_IMAGE_COLUMN_TYPE","getArtifactLocationUrl","isNil","promptLabInputVariableNames","allInputNames","tablesToFetch","getEvaluationTableArtifact","EvaluationTableParseError","isViewConfigured","filteredRows","regexp","groupByValue","toggleRowVisibility","useToggleRowVisibilityCallback","RUNS_VISIBILITY_MODE","CUSTOM","noColumnsSelected","columnNotAvailableAnymore","firstColumn","groupByColumnCandidates","availableGroupByColumns","availableOutputColumns","nextColumnCandidate","setTimeout","clearTimeout","sidebarPreviewData","setSidebarPreviewData","header","gridTemplateColumns","paddingLeft","gridTemplateRows","rowGap","LegacySkeleton","columnGap","suffix","columnNames","PreviewSidebar","FormattedJsonDisplay","headerText","empty","EvaluationArtifactCompareView","image","createRunDataTrace","latestMetricsByRunUuid","paramsByRunUuid","tagsByRunUuid","imagesByRunUuid","_run$runInfo","_run$runDateAndNestIn","metrics","images","pinnable","metricsHistory","belongsToGroup","runDateAndNestInfo","RunsCompareImpl","experimentTags","compareRunCharts","compareRunSections","globalLineChartConfig","chartsSearchFilter","updateChartsUIState","useUpdateRunsChartsUIConfiguration","initiallyLoaded","setInitiallyLoaded","configuredCardConfig","setConfiguredCardConfig","search","setSearch","groupByNormalized","fullScreenChart","setFullScreenChart","startEditChart","chartCard","primaryMetricKey","automlEntry","AUTOML_EVALUATION_METRIC_TAG","mlflowPrimaryEntry","MLFLOW_EXPERIMENT_PRIMARY_METRIC_NAME","chartData","groupParentInfo","isRemainingRunsGroup","group","_group$groupParentInf","createGroupDataTrace","_run$groupParentInfo","_run$groupParentInfo2","_run$groupParentInfo3","metricsData","aggregatedMetricData","keyBy","maxStep","timestamp","rowUuid","getRunGroupDisplayName","aggregatedParamData","groupId","_run$runDateAndNestIn2","filteredImageData","LOG_IMAGE_TAG_INDICATOR","usePopulateImagesByRunUuid","runUuids","runUuidsIsActive","_run$runInfo2","status","enabled","resultChartSet","resultSectionSet","RunsChartsCardConfig","getBaseChartAndSectionConfigs","useParallelCoordinatesChart","isResultUpdated","updateChartAndSectionConfigs","isAccordionReordered","onTogglePin","existingFacets","runsPinned","toggleRunVisibility","confirmChartCardConfiguration","useConfirmChartCardConfigurationFn","removeChart","useRemoveRunsChartFn","reorderCharts","useReorderRunsChartsFn","insertCharts","useInsertRunsChartsFn","tooltipContextValue","visibleChartCards","deleted","isEmptyChartCard","paddingRight","RUNS_CHARTS_UI_Z_INDEX","SEARCH_BAR","RunsChartsFilterInput","RunsChartsGlobalChartSettingsDropdown","RunsChartsTooltipWrapper","contextData","RunsChartsTooltipBody","RunsChartsDraggableCardsGridContextProvider","RunsChartsSectionAccordion","addNewChartCard","metricSectionId","getEmptyChartCardByType","RunsChartsConfigureModal","chartRunData","config","onSubmit","configuredCard","RunsChartsFullScreenModal","tooltipComponent","RunsCompareSkeleton","RunsCompare","setter","RunsChartsUIConfigurationContextProvider","fill","seed","ExperimentViewRunsRequestError","createCurrentTime","mountTime","Date","setMilliseconds","ExperimentViewRuns","isLoadingRuns","loadMoreRuns","moreRunsAvailable","setViewState","expandRowsStore","useExperimentViewLocalStore","getItem","setItem","paramsList","metricsList","runUuidsMatchingFilter","inputsOutputsList","modelVersionsByRunUuid","runData","_inputsOutputsList$in","_inputsOutputsList$in2","inputs","outputs","runsExpanded","runsHidden","runListHidden","newPartialViewState","currentViewState","addColumnClicked","shouldNestChildrenAndFetchParents","DATE","referenceTime","setReferenceTime","isDrawerOpen","setIsDrawerOpen","selectedDatasetWithRun","setSelectedDatasetWithRun","isUsingGetLoggedModelsAPI","shouldUseGetLoggedModelsBatchAPI","loggedModelsV3ByRunUuidFromExperiment","useLoggedModelsForExperimentRunsTable","loggedModelsData","useSearchLoggedModelsQuery","_model$info","source_run_id","loggedModelsV3ByRunUuidFromRunInputsOutputs","useLoggedModelsForExperimentRunsTableV2","modelIdsByRunId","modelIdsMap","_inputs$modelInputs","_outputs$modelOutputs","allModelIds","modelInputs","input","modelId","modelOutputs","output","modelIds","useGetLoggedModelsQuery","_loggedModelsData$dat","_loggedModelsData$dat2","model_id","loggedModelsV3ByRunUuid","useExperimentRunRows","tagKeyList","nestChildren","groupsExpanded","runsHiddenMode","runsVisibilityMap","notificationsFn","notificationContainer","useLegacyNotification","showFetchedRunsNotifications","tableAreaWidth","setTableAreaWidth","loadMoreRunsCallback","datasetSelected","isTabActive","useIsTabActive","usingGroupedValuesInCharts","tableElement","ExperimentViewRunsTable","onAddColumnClicked","rowsData","loadMoreRunsFunc","configStorageKey","RunsChartsSetHighlightContextProvider","ExperimentViewRunsTableResizer","onResize","storageKey","ExperimentViewDatasetDrawer","loadExperimentViewState","idKey","LocalStorageUtils","getStoreForComponent","loadComponentState","createExperimentPageUIState","usePersistExperimentPageViewState","searchFacets","setSearchFacets","persistKey","persistedViewState","rebuiltViewState","pick","EXPERIMENT_PAGE_QUERY_PARAM_KEYS","replace","saveComponentState","experimentRunsSelector","comparingExperiments","runInfoOrderByUuid","runInfosByUuid","extractRunInfos","modelVersionFilter","MODEL_VERSION_FILTER","ALL_RUNS","run_id","getRunInfo","getRunDatasets","rInfo","lifecycleStage","WITH_MODEL_VERSIONS","WTIHOUT_MODEL_VERSIONS","console","warn","datasetName","datasetDigest","metricKeysSet","paramKeysSet","runDatasetsByUuid","runInputsOutputsByUuid","metricsByRunUuid","getLatestMetrics","metric","add","paramValues","getParams","pickBy","getRunTags","firstExperimentId","getExperimentTags","createFetchRunsRequestParams","createSearchRunsParams","requestedFacets","useExperimentRuns","setRunsData","createEmptyRunsResult","enableWorkspaceModelsRegistryCall","setIsLoadingRuns","isInitialLoadingRuns","setIsInitialLoadingRuns","nextPageToken","setNextPageToken","setRequestError","cachedPinnedRuns","lastFetchedTime","lastRequestedParams","lastSuccessfulRequestedParams","setResultRunsData","store","loadModelVersions","handleModelVersionLoadFailure","normalizedError","mapErrorWrapperToPredefinedError","fetchModelVersionsForRuns","searchModelVersionsApi","fetchRuns","fetchParams","thunkDispatch","getStore","isAutoRefreshing","pageToken","loadMoreRunsApi","searchRunsApi","_options$discardResul","discardResultsFn","next_page_token","shouldUsePredefinedErrorsInExperimentTracking","PredefinedError","maybePredefinedError","requestParams","useExperimentRunsAutoRefresh","refreshTimeoutRef","isLoadingImmediate","autoRefreshEnabledRef","currentResults","scheduleRefresh","hasBeenInitialized","timePassed","RUNS_AUTO_REFRESH_INTERVAL","initialRunsCount","requestedRunsCount","ceil","RUNS_SEARCH_MAX_RESULTS","maxResults","currentPageToken","autoRefreshFetchedPages","autoRefreshResultsCount","_value$runs$length","_value$runs","useSharedExperimentViewState","uiStateSetter","experiment","searchParams","useSearchParams","viewStateShareKey","get","EXPERIMENT_PAGE_VIEW_STATE_SHARE_URL_PARAM_KEY","isViewStateShared","updateSearchFacets","sharedSearchFacetsState","setSharedSearchFacetsState","sharedUiState","setSharedUiState","sharedStateError","setSharedStateError","sharedStateErrorMessage","setSharedStateErrorMessage","shareViewTag","EXPERIMENT_PAGE_VIEW_STATE_SHARE_TAG_PREFIX","parsedSharedViewState","isTextCompressedDeflate","textDecompressDeflate","deserializePersistedState","EXPERIMENT_PAGE_UI_STATE_FIELDS","tryParseSharedStateFromTag","getExperimentPageRoute","uiStateInitializers","expandedEvaluationRunRowsUIStateInitializer","isSeeded","evaluationRunIds","_runsData$tagsList$in","_runsData$tagsList$in2","MLFLOW_RUN_TYPE_TAG","MLFLOW_RUN_TYPE_VALUE_EVALUATION","parentIdsOfEvaluationRunIds","_runsData$tagsList$in3","aggregate","baseState","generateExperimentHash","sortedExperimentIds","exp","sortedRunUuids","ExperimentViewNotFound","NoIcon","ExperimentViewNoPermissionsError","ErrorViewV2","button","ExperimentView","showHeader","_first","_first2","_first3","isPreview","useExperimentPageSearchFacets","viewMode","ids","experimentsById","oldExperiments","newExperiments","firstExperiment","fetchExperiments","isLoadingExperiment","experimentRequestError","useFetchExperiments","getExperimentsContext","GetExperimentsContext","elementHeight","hideableElementHeight","observeHeight","resizeCallback","hideableElementsContainer","setHideableElementsContainer","setElementHeight","ResizeObserver","resizeObserver","scrollHeight","observe","disconnect","useElementHeight","editing","setEditing","showAddDescriptionButton","setShowAddDescriptionButton","setUIState","seedInitialUIState","experimentHash","setExperimentHash","isFirstVisit","dispatchAction","useReducer","action","newState","currentPersistKey","newPersistKey","persistedStateFound","persistedUIState","newStateOrSelector","newHash","shouldRerunExperimentUISeeding","initializer","useInitializeUIState","first","isMaximized","runsRequestError","requestAction","searchDatasetsApi","isViewInitialized","mutate","updateExperimentKind","updatingExperimentKind","useUpdateExperimentKind","getExperimentApi","experimentKind","getExperimentKindFromTags","inferredExperimentKind","inferringExperimentType","dismiss","useInferExperimentKind","shouldEnableExperimentKindInference","NotFoundError","getErrorCode","ErrorCodes","RESOURCE_DOES_NOT_EXIST","PermissionError","PERMISSION_DENIED","ExperimentKind","NO_INFERRED_TYPE","ExperimentViewInferredKindModal","onConfirm","kind","onSettled","onDismiss","ExperimentPageUIStateContextProvider","experimentViewWrapper","paragraph","active","ExperimentViewHeader","experimentKindSelector","ExperimentViewHeaderKindSelector","isUpdating","ExperimentViewDescriptionNotes","ExperimentViewTraces","createContext","GetExperimentsContextProvider","fetchExperimentsRequestIds","setFetchExperimentsRequestIds","setIsLoadingExperiment","fetchFn","newRequestIds","requestIds","RequestStateWrapper","shouldOptimisticallyRender","renderFn","_isLoading","_renderError","requests","request"],"sourceRoot":""}