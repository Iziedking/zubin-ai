{"version":3,"file":"static/js/8090.ce17666c.chunk.js","mappings":"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","sources":["experiment-tracking/components/ExperimentSourceTypeIcon.tsx","../node_modules/invariant/browser.js","common/utils/MarkdownUtils.ts","experiment-tracking/utils/IsUCModelName.ts","common/static/registered-model-grey-ok.svg","common/components/error-boundaries/SectionErrorBoundary.tsx","shared/building_blocks/PreviewBadge.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelRegisteredVersions.tsx","common/components/JsonFormatting.tsx","experiment-tracking/components/experiment-logged-models/hooks/useValidateLoggedModelSignature.ts","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsRegisterButton.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsHeader.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelDeleteModal.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsNav.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDescription.tsx","experiment-tracking/hooks/logged-models/usePatchLoggedModelsTags.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsTableRunCellRenderer.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsMetricsTable.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsRunsTable.tsx","experiment-tracking/components/experiment-prompts/ExperimentLinkedPromptsTable.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsPageLinkedPromptsTable.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelAllDatasetsList.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsModelVersionsList.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelDetailsMetadataV2.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsOverview.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsArtifacts.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsTracesIntroductionText.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsTraces.tsx","experiment-tracking/pages/experiment-logged-models/ExperimentLoggedModelDetailsPage.tsx","shared/building_blocks/CopyButton.tsx","common/components/RequestStateWrapper.tsx","experiment-tracking/hooks/useExperimentQuery.tsx","shared/building_blocks/PageHeader.tsx","shared/web-shared/utils/coerceToEnum.ts","shared/web-shared/utils/unified-details/useResponsiveContainer.ts","shared/web-shared/utils/unified-details/index.tsx","experiment-tracking/utils/ExperimentKindUtils.ts","experiment-tracking/hooks/logged-models/useRelatedRunsDataForLoggedModels.tsx","common/hooks/useArrayMemo.ts","experiment-tracking/pages/experiment-logged-models/ExperimentLoggedModelPageWrapper.tsx","common/components/Spinner.tsx"],"sourcesContent":["import { FileCodeIcon, FolderBranchIcon, NotebookIcon, WorkflowsIcon } from '@databricks/design-system';\nimport { SourceType } from '../sdk/MlflowEnums';\n\n/**\n * Displays an icon corresponding to the source type of an experiment run.\n */\nexport const ExperimentSourceTypeIcon = ({\n  sourceType,\n  className,\n}: {\n  sourceType: SourceType | string;\n  className?: string;\n}) => {\n  if (sourceType === SourceType.NOTEBOOK) {\n    return <NotebookIcon className={className} />;\n  } else if (sourceType === SourceType.LOCAL) {\n    return <FileCodeIcon className={className} />;\n  } else if (sourceType === SourceType.PROJECT) {\n    return <FolderBranchIcon className={className} />;\n  } else if (sourceType === SourceType.JOB) {\n    return <WorkflowsIcon className={className} />;\n  }\n  return null;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { useCallback } from 'react';\nimport sanitizeHtml from 'sanitize-html';\n// @ts-expect-error TS(7016): Could not find a declaration file for module 'show... Remove this comment to see the full error message\nimport { Converter } from 'showdown';\n\n// Use Github-like Markdown (i.e. support for tasklists, strikethrough,\n// simple line breaks, code blocks, emojis)\nconst DEFAULT_MARKDOWN_FLAVOR = 'github';\n\nlet _converter: Converter | null = null;\n\nexport const getMarkdownConverter = () => {\n  // Reuse the same converter instance if available\n  if (_converter) {\n    return _converter;\n  }\n  _converter = new Converter();\n  _converter.setFlavor(DEFAULT_MARKDOWN_FLAVOR);\n  return _converter;\n};\n\n// Options for HTML sanitizer.\n// See https://www.npmjs.com/package/sanitize-html#what-are-the-default-options for usage.\n// These options were chosen to be similar to Github's allowlist but simpler (i.e. we don't\n// do any transforms of the contained HTML and we disallow script entirely instead of\n// removing contents).\nconst sanitizerOptions = {\n  allowedTags: [\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'h7',\n    'h8',\n    'blockquote',\n    'p',\n    'a',\n    'ul',\n    'ol',\n    'nl',\n    'li',\n    'ins',\n    'b',\n    'i',\n    'strong',\n    'em',\n    'strike',\n    'code',\n    'hr',\n    'br',\n    'div',\n    'table',\n    'thead',\n    'tbody',\n    'tr',\n    'th',\n    'td',\n    'pre',\n    'del',\n    'sup',\n    'sub',\n    'dl',\n    'dt',\n    'dd',\n    'kbd',\n    'q',\n    'samp',\n    'samp',\n    'var',\n    'hr',\n    'rt',\n    'rp',\n    'summary',\n    'iframe',\n    'img',\n    'caption',\n    'figure',\n  ],\n  allowedAttributes: {\n    a: ['href', 'name', 'target'],\n    img: ['src', 'longdesc'],\n    div: ['itemscope', 'itemtype'],\n  },\n};\n\nexport const sanitizeConvertedHtml = (dirtyHtml: any) => {\n  return sanitizeHtml(dirtyHtml, sanitizerOptions);\n};\n\nexport const forceAnchorTagNewTab = (html: any) => {\n  return html.replace(new RegExp('<a', 'g'), '<a target=\"_blank\"');\n};\n\nexport const useMarkdownConverter = () =>\n  useCallback((markdown?: string) => {\n    const converter = getMarkdownConverter();\n    const html = converter.makeHtml(markdown);\n    return sanitizeConvertedHtml(html);\n  }, []);\n","/**\n * Checks if a given model name is a valid UC entity name.\n * A valid UC entity name follows the pattern: \"catalog.schema.model\".\n * This is used to distinguish from other registries model names which should not contain dots.\n */\nexport const isUCModelName = (name: string) => Boolean(name.match(/^[^. /]+\\.[^. /]+\\.[^. /]+$/));\n","var _path, _g, _path2, _path3, _defs;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgRegisteredModelGreyOk({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 19,\n    height: 16,\n    viewBox: \"0 0 19 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip0_0_3)\"\n  }, /*#__PURE__*/React.createElement(\"mask\", {\n    id: \"mask0_0_3\",\n    style: {\n      maskType: \"luminance\"\n    },\n    maskUnits: \"userSpaceOnUse\",\n    x: 0,\n    y: 0,\n    width: 16,\n    height: 16\n  }, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16 0H0V16H16V0Z\",\n    fill: \"white\"\n  }))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    mask: \"url(#mask0_0_3)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M2.75 3.49999C2.05964 3.49999 1.5 4.05963 1.5 4.74999C1.5 5.44034 2.05964 5.99999 2.75 5.99999C3.44036 5.99999 4 5.44034 4 4.74999C4 4.05963 3.44036 3.49999 2.75 3.49999ZM0 4.74999C0 3.2312 1.23122 1.99999 2.75 1.99999C3.77682 1.99999 4.6722 2.56276 5.14452 3.39669L9.51655 2.44626C9.66772 1.0704 10.8338 0 12.25 0C13.7688 0 15 1.23122 15 2.75C15 3.87686 14.3222 4.84541 13.3521 5.27025L13.6341 7.52661C14.9711 7.71349 16 8.86158 16 10.25C16 11.7688 14.7687 13 13.25 13C12.3895 13 11.6214 12.6048 11.1172 11.9861L8.49749 13.1322C8.49913 13.1713 8.49997 13.2105 8.49997 13.25C8.49996 14.7688 7.26875 16 5.74997 16C4.23118 16 2.99997 14.7688 2.99996 13.25C2.99997 12.3569 3.42568 11.5633 4.08524 11.0609L3.01322 7.48755C2.92659 7.49578 2.83878 7.49999 2.75 7.49999C1.23122 7.49999 0 6.26877 0 4.74999ZM5.46534 5.18782C5.48277 5.07884 5.4938 4.96773 5.49804 4.85488L9.76409 3.92748C10.1528 4.74671 10.9346 5.34321 11.8658 5.47338L12.1478 7.72974C11.7709 7.89483 11.438 8.14204 11.1719 8.44873L5.46534 5.18782ZM4.82802 6.55126C4.70399 6.69422 4.56546 6.82424 4.41471 6.93906L5.48674 10.5124C5.57337 10.5042 5.66118 10.5 5.74997 10.5C6.69483 10.5 7.52839 10.9765 8.02345 11.7023L10.5231 10.6087C10.5079 10.4913 10.5 10.3716 10.5 10.25C10.5 10.101 10.5118 9.95475 10.5346 9.81218L4.82802 6.55126ZM12 10.25C12 9.55963 12.5596 8.99999 13.25 8.99999C13.9403 8.99999 14.5 9.55963 14.5 10.25C14.5 10.9403 13.9403 11.5 13.25 11.5C12.5596 11.5 12 10.9403 12 10.25ZM5.74997 12C5.05961 12 4.49997 12.5596 4.49997 13.25C4.49997 13.9403 5.05961 14.5 5.74997 14.5C6.44032 14.5 6.99997 13.9403 6.99997 13.25C6.99997 12.5596 6.44032 12 5.74997 12ZM11 2.75C11 2.05964 11.5596 1.5 12.25 1.5C12.9403 1.5 13.5 2.05964 13.5 2.75C13.5 3.44036 12.9403 4 12.25 4C11.5596 4 11 3.44036 11 2.75Z\",\n    fill: \"currentColor\"\n  }))), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M13.5 14C15.433 14 17 12.433 17 10.5C17 8.567 15.433 7 13.5 7C11.567 7 10 8.567 10 10.5C10 12.433 11.567 14 13.5 14Z\",\n    fill: \"white\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M11.125 11C11.125 9.41218 12.4122 8.125 14 8.125C15.5878 8.125 16.875 9.41218 16.875 11C16.875 12.5878 15.5878 13.875 14 13.875C12.4122 13.875 11.125 12.5878 11.125 11ZM14 6.625C11.5838 6.625 9.625 8.58375 9.625 11C9.625 13.4162 11.5838 15.375 14 15.375C16.4162 15.375 18.375 13.4162 18.375 11C18.375 8.58375 16.4162 6.625 14 6.625ZM14.0303 12.5303L16.0303 10.5303L14.9697 9.46967L13.5 10.9393L13.0303 10.4697L11.9697 11.5303L12.9697 12.5303L13.5 13.0607L14.0303 12.5303Z\",\n    fill: \"#3CAA60\"\n  }))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip0_0_3\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 19,\n    height: 16,\n    fill: \"white\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgRegisteredModelGreyOk);\nexport default __webpack_public_path__ + \"static/media/registered-model-grey-ok.8274b58d39504c8d1b8c358aa1c9aa35.svg\";\nexport { ForwardRef as ReactComponent };","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport Utils from '../../utils/Utils';\n\ntype Props = {\n  showServerError?: boolean;\n};\n\ntype State = any;\n\nexport class SectionErrorBoundary extends React.Component<Props, State> {\n  state = { error: null };\n\n  componentDidCatch(error: any, errorInfo: any) {\n    this.setState({ error });\n    // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n    console.error(error, errorInfo);\n  }\n\n  renderErrorMessage(error: any) {\n    return this.props.showServerError ? <div>Error message: {error.message}</div> : '';\n  }\n\n  render() {\n    const { children } = this.props;\n    const { error } = this.state;\n    if (error) {\n      return (\n        <div>\n          <p>\n            <i\n              data-testid=\"icon-fail\"\n              className=\"fa fa-exclamation-triangle mlflow-icon-fail\"\n              css={classNames.wrapper}\n            />\n            <span> Something went wrong with this section. </span>\n            <span>If this error persists, please report an issue </span>\n            {/* Reported during ESLint upgrade */}\n            {/* eslint-disable-next-line react/jsx-no-target-blank */}\n            <a href={Utils.getSupportPageUrl()} target=\"_blank\">\n              here\n            </a>\n            .{this.renderErrorMessage(error)}\n          </p>\n        </div>\n      );\n    }\n\n    return children;\n  }\n}\n\nconst classNames = {\n  wrapper: {\n    marginLeft: -2, // to align the failure icon with the collapsable section caret toggle\n  },\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Tag, useDesignSystemTheme } from '@databricks/design-system';\nexport const PreviewBadge = ({ className }: { className?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_shared_building_blocks_previewbadge.tsx_14\"\n      className={className}\n      css={{ marginLeft: theme.spacing.xs }}\n      color=\"turquoise\"\n    >\n      <FormattedMessage\n        defaultMessage=\"Experimental\"\n        description=\"Experimental badge shown for features which are experimental\"\n      />\n    </Tag>\n  );\n};\n","import { useMemo } from 'react';\nimport { useQueries } from '../../../../common/utils/reactQueryHooks';\nimport type { LoggedModelProto } from '../../../types';\nimport type { RunPageModelVersionSummary } from '../../run-page/hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\nimport { createMLflowRoutePath } from '../../../../common/utils/RoutingUtils';\nimport { isUCModelName } from '../../../utils/IsUCModelName';\nconst MODEL_VERSIONS_TAG_NAME = 'mlflow.modelVersions';\n\nconst getUCModelUrl = (name: string, version: string) =>\n  `/explore/data/models/${name.replace(/\\./g, '/')}/version/${version}`;\nconst getWMRModelUrl = (name: string, version: string) => createMLflowRoutePath(`/models/${name}/versions/${version}`);\n\nconst getTagValueForModel = (loggedModel: LoggedModelProto): { name: string; version: string }[] | null => {\n  try {\n    const tagValue = loggedModel.info?.tags?.find((tag) => tag.key === MODEL_VERSIONS_TAG_NAME)?.value;\n\n    if (tagValue) {\n      // Try to parse the tag. If it's malformed, catch and return nothing.\n      return JSON.parse(tagValue);\n    }\n  } catch (e) {\n    return null;\n  }\n  return null;\n};\n\n// Hook for ACL checking logic\nconst useModelVersionsAclCheck = (\n  ucModels: RunPageModelVersionSummary[],\n  checkAcl: boolean,\n): { aclResults: Record<string, boolean>; isLoading: boolean } => {\n  const queries = useMemo(() => {\n    if (!checkAcl || ucModels.length === 0) {\n      return [];\n    }\n    return [];\n  }, [ucModels, checkAcl]);\n\n  const queryResults = useQueries({ queries });\n\n  const { aclResults, isLoading } = useMemo(() => {\n    if (!checkAcl || ucModels.length === 0) {\n      return { aclResults: {}, isLoading: false };\n    }\n\n    const isLoading = queryResults.some((result) => result.isLoading);\n    const aclResults: Record<string, boolean> = {};\n    return { aclResults, isLoading };\n  }, [\n    // prettier-ignore\n    queryResults,\n    checkAcl,\n    ucModels.length,\n  ]);\n\n  return { aclResults, isLoading };\n};\n\nexport interface RunPageModelVersionSummaryWithAccess extends RunPageModelVersionSummary {\n  hasAccess: boolean;\n}\n\nexport interface UseExperimentLoggedModelRegisteredVersionsResult {\n  modelVersions: RunPageModelVersionSummaryWithAccess[];\n  isLoading: boolean;\n}\n\nexport const useExperimentLoggedModelRegisteredVersions = ({\n  loggedModels,\n  checkAcl = false,\n}: {\n  loggedModels: LoggedModelProto[];\n  checkAcl?: boolean;\n}): UseExperimentLoggedModelRegisteredVersionsResult => {\n  // Combined useMemo for parsing tags and creating model versions\n  const { modelVersions, ucModels } = useMemo(() => {\n    const modelVersions = loggedModels.flatMap((loggedModel) => {\n      const modelVersionsInTag = getTagValueForModel(loggedModel) ?? [];\n      return modelVersionsInTag.map((registeredModelEntry) => {\n        const isUCModel = isUCModelName(registeredModelEntry.name);\n        const getUrlFn = isUCModel ? getUCModelUrl : getWMRModelUrl;\n        return {\n          displayedName: registeredModelEntry.name,\n          version: registeredModelEntry.version,\n          link: getUrlFn(registeredModelEntry.name, registeredModelEntry.version),\n          source: null,\n          status: null,\n          sourceLoggedModel: loggedModel,\n        };\n      });\n    });\n\n    const ucModels = modelVersions.filter((model) => model.displayedName && isUCModelName(model.displayedName));\n\n    return { modelVersions, ucModels };\n  }, [loggedModels]);\n\n  const { aclResults, isLoading } = useModelVersionsAclCheck(ucModels, checkAcl);\n\n  // Add hasAccess to each model version\n  const modelVersionsWithAccess = useMemo<RunPageModelVersionSummaryWithAccess[]>(\n    () =>\n      modelVersions.map((modelVersion) => {\n        const displayedName = modelVersion.displayedName;\n        const isUCModel = displayedName && isUCModelName(displayedName);\n\n        let hasAccess = true; // Default for workspace models\n\n        if (checkAcl && isUCModel && displayedName) {\n          // For UC models with ACL check enabled, use the ACL result\n          hasAccess = aclResults[`${displayedName}:${modelVersion.version}`] ?? false;\n        }\n\n        return {\n          ...modelVersion,\n          hasAccess,\n        };\n      }),\n    [modelVersions, checkAcl, aclResults],\n  );\n\n  return {\n    modelVersions: modelVersionsWithAccess,\n    isLoading,\n  };\n};\n","import React from 'react';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { isObject } from 'lodash';\n\ninterface JsonPreviewProps {\n  json: string;\n  wrapperStyle?: React.CSSProperties;\n  overlayStyle?: React.CSSProperties;\n  codeSnippetStyle?: React.CSSProperties;\n}\n\nexport const JsonPreview: React.FC<React.PropsWithChildren<JsonPreviewProps>> = ({\n  json,\n  wrapperStyle,\n  overlayStyle,\n  codeSnippetStyle,\n}) => {\n  const { formattedJson, isJsonContent } = useFormattedJson(json);\n\n  const defaultWrapperStyle: React.CSSProperties = {\n    position: 'relative',\n    maxHeight: 'calc(1.5em * 9)',\n    overflow: 'hidden',\n  };\n\n  const defaultOverlayStyle: React.CSSProperties = {\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    left: 6,\n    height: '2em',\n    background: 'linear-gradient(transparent, white)',\n  };\n\n  const defaultCodeSnippetStyle: React.CSSProperties = {\n    padding: '5px',\n    overflowX: 'hidden',\n  };\n\n  return (\n    <div style={{ ...defaultWrapperStyle, ...wrapperStyle }}>\n      {isJsonContent ? (\n        <>\n          <CodeSnippet language=\"json\" style={{ ...defaultCodeSnippetStyle, ...codeSnippetStyle }}>\n            {formattedJson}\n          </CodeSnippet>\n          <div css={{ ...defaultOverlayStyle, ...overlayStyle }} />\n        </>\n      ) : (\n        <>{json}</>\n      )}\n    </div>\n  );\n};\n\nfunction useFormattedJson(json: string) {\n  return React.useMemo(() => {\n    try {\n      const parsed = JSON.parse(json);\n      const isJson = isObject(parsed) && typeof parsed !== 'function' && !(parsed instanceof Date);\n      return {\n        formattedJson: isJson ? JSON.stringify(parsed, null, 2) : json,\n        isJsonContent: isJson,\n      };\n    } catch (e) {\n      return {\n        formattedJson: json,\n        isJsonContent: false,\n      };\n    }\n  }, [json]);\n}\n\nexport const FormattedJsonDisplay: React.FC<React.PropsWithChildren<{ json: string }>> = ({ json }) => {\n  const { formattedJson, isJsonContent } = useFormattedJson(json);\n\n  return (\n    <div css={{ whiteSpace: 'pre-wrap' }}>\n      {isJsonContent ? (\n        <CodeSnippet language=\"json\" wrapLongLines>\n          {formattedJson}\n        </CodeSnippet>\n      ) : (\n        <span>{json}</span>\n      )}\n    </div>\n  );\n};\n","import { useCallback } from 'react';\nimport { getArtifactBlob, getLoggedModelArtifactLocationUrl } from '../../../../common/utils/ArtifactUtils';\nimport { MLMODEL_FILE_NAME } from '../../../constants';\nimport type { LoggedModelProto } from '../../../types';\n\nconst lazyJsYaml = () => import('js-yaml');\n\nexport const useValidateLoggedModelSignature = (loggedModel?: LoggedModelProto | null) =>\n  useCallback(async () => {\n    if (!loggedModel?.info?.model_id || !loggedModel?.info?.artifact_uri) {\n      return true;\n    }\n\n    const artifactLocation = getLoggedModelArtifactLocationUrl(MLMODEL_FILE_NAME, loggedModel.info.model_id);\n    const blob = await getArtifactBlob(artifactLocation);\n\n    const yamlContent = (await lazyJsYaml()).load(await blob.text());\n\n    const isValid = yamlContent?.signature?.inputs !== undefined && yamlContent?.signature?.outputs !== undefined;\n\n    return isValid;\n  }, [loggedModel]);\n","import { FormattedMessage, useIntl } from 'react-intl';\nimport type { LoggedModelProto } from '../../types';\nimport { RegisterModel } from '../../../model-registry/components/RegisterModel';\nimport { useCallback } from 'react';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { CopyButton } from '../../../shared/building_blocks/CopyButton';\nimport { CopyIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useValidateLoggedModelSignature } from './hooks/useValidateLoggedModelSignature';\nimport Utils from '../../../common/utils/Utils';\n\nconst RegisterLoggedModelInUCCodeSnippet = ({ modelId }: { modelId: string }) => {\n  const { theme } = useDesignSystemTheme();\n\n  const code = `import mlflow\n\nmlflow.set_registry_uri(\"databricks-uc\")\n\nmodel_uri = \"models:/${modelId}\"\nmodel_name = \"main.default.my_model\"\n\nmlflow.register_model(model_uri=model_uri, name=model_name)\n`;\n\n  return (\n    <div>\n      <Typography.Text>\n        <FormattedMessage\n          defaultMessage=\"In order to register model in Unity Catalog, copy and run the following code in the notebook:\"\n          description=\"Instruction to register model in Unity Catalog on the logged model details page\"\n        />\n      </Typography.Text>\n      <div css={{ position: 'relative' }}>\n        <CopyButton\n          css={{ zIndex: 1, position: 'absolute', top: theme.spacing.sm, right: theme.spacing.sm }}\n          showLabel={false}\n          copyText={code}\n          icon={<CopyIcon />}\n        />\n        <CodeSnippet\n          showLineNumbers\n          style={{\n            padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n            marginTop: theme.spacing.md,\n            marginBottom: theme.spacing.md,\n          }}\n          language=\"python\"\n        >\n          {code}\n        </CodeSnippet>\n      </div>\n    </div>\n  );\n};\n\nexport const ExperimentLoggedModelDetailsRegisterButton = ({\n  loggedModel,\n  onSuccess,\n}: {\n  loggedModel?: LoggedModelProto | null;\n  onSuccess?: () => void;\n}) => {\n  const intl = useIntl();\n  const handleSuccess = useCallback(\n    (data?: { value: { status?: string } }) => {\n      onSuccess?.();\n      const successTitle = intl.formatMessage({\n        defaultMessage: 'Model registered successfully',\n        description: 'Notification title for model registration succeeded on the logged model details page',\n      });\n      Utils.displayGlobalInfoNotification(`${successTitle} ${data?.value?.status ?? ''}`);\n    },\n    [intl, onSuccess],\n  );\n\n  const handleError = useCallback(\n    (error?: Error | ErrorWrapper) => {\n      const errorTitle = intl.formatMessage({\n        defaultMessage: 'Error registering model',\n        description: 'Notification title for model registration failure on the logged model details page',\n      });\n      const message = (error instanceof ErrorWrapper ? error.getMessageField() : error?.message) ?? String(error);\n      Utils.displayGlobalErrorNotification(`${errorTitle} ${message}`);\n    },\n    [intl],\n  );\n\n  /**\n   * Function that validates that the model file is valid to be registered in UC (contains signature inputs and outputs),\n   * passed to the RegisterModel component.\n   */\n  const modelFileValidationFn = useValidateLoggedModelSignature(loggedModel);\n\n  if (!loggedModel?.info?.artifact_uri || !loggedModel.info.model_id) {\n    return null;\n  }\n\n  return (\n    <RegisterModel\n      modelPath={loggedModel.info.artifact_uri}\n      modelRelativePath=\"\"\n      disabled={false}\n      loggedModelId={loggedModel.info.model_id}\n      buttonType=\"primary\"\n      showButton\n      onRegisterSuccess={handleSuccess}\n      onRegisterFailure={handleError}\n    />\n  );\n};\n","import { FormattedMessage, useIntl } from 'react-intl';\nimport { Link, useNavigate } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport { PageHeader } from '../../../shared/building_blocks/PageHeader';\nimport {\n  Button,\n  DropdownMenu,\n  GenericSkeleton,\n  ModelsIcon,\n  OverflowIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport type { UseGetExperimentQueryResultExperiment } from '../../hooks/useExperimentQuery';\nimport type { LoggedModelProto } from '../../types';\nimport { ExperimentLoggedModelDetailsRegisterButton } from './ExperimentLoggedModelDetailsRegisterButton';\nimport { ExperimentPageTabName } from '../../constants';\nimport { useExperimentLoggedModelDeleteModal } from './hooks/useExperimentLoggedModelDeleteModal';\n\nexport const ExperimentLoggedModelDetailsHeader = ({\n  experimentId,\n  experiment,\n  loading = false,\n  loggedModel,\n  onSuccess,\n}: {\n  experimentId: string;\n  experiment?: UseGetExperimentQueryResultExperiment;\n  loading?: boolean;\n  loggedModel?: LoggedModelProto | null;\n  onSuccess?: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const modelDisplayName = loggedModel?.info?.name;\n  const navigate = useNavigate();\n  const intl = useIntl();\n\n  const { modalElement: DeleteModalElement, openModal } = useExperimentLoggedModelDeleteModal({\n    loggedModel,\n    onSuccess: () => {\n      navigate(Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Models));\n    },\n  });\n\n  const getExperimentName = () => {\n    if (experiment && 'name' in experiment) {\n      return experiment?.name;\n    }\n    return experimentId;\n  };\n\n  const breadcrumbs = [\n    // eslint-disable-next-line react/jsx-key\n    <Link to={Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Models)}>\n      {getExperimentName()}\n    </Link>,\n    // eslint-disable-next-line react/jsx-key\n    <Link to={Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Models)}>\n      <FormattedMessage\n        defaultMessage=\"Models\"\n        description=\"Breadcrumb for models tab of experiments page on the logged model details page\"\n      />\n    </Link>,\n  ];\n\n  return (\n    <div css={{ flexShrink: 0 }}>\n      {loading ? (\n        <ExperimentLoggedModelDetailsHeaderSkeleton />\n      ) : (\n        <PageHeader\n          title={\n            <>\n              <ExperimentLoggedModelDetailsHeaderIcon />\n              <>{modelDisplayName}</>\n            </>\n          }\n          dangerouslyAppendEmotionCSS={{ h2: { display: 'flex', gap: theme.spacing.sm }, wordBreak: 'break-word' }}\n          breadcrumbs={breadcrumbs}\n        >\n          <DropdownMenu.Root>\n            <DropdownMenu.Trigger asChild>\n              <Button\n                componentId=\"mlflow.logged_model.details.more_actions\"\n                icon={<OverflowIcon />}\n                aria-label={intl.formatMessage({\n                  defaultMessage: 'More actions',\n                  description: 'A label for the dropdown menu trigger on the logged model details page',\n                })}\n              />\n            </DropdownMenu.Trigger>\n            <DropdownMenu.Content align=\"end\">\n              <DropdownMenu.Item componentId=\"mlflow.logged_model.details.delete_button\" onClick={openModal}>\n                <FormattedMessage defaultMessage=\"Delete\" description=\"Delete action for logged model\" />\n              </DropdownMenu.Item>\n            </DropdownMenu.Content>\n          </DropdownMenu.Root>\n          <ExperimentLoggedModelDetailsRegisterButton loggedModel={loggedModel} onSuccess={onSuccess} />\n        </PageHeader>\n      )}\n      {DeleteModalElement}\n    </div>\n  );\n};\nconst ExperimentLoggedModelDetailsHeaderIcon = () => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: theme.colors.tagDefault,\n        width: theme.general.heightSm,\n        height: theme.general.heightSm,\n        borderRadius: theme.legacyBorders.borderRadiusMd,\n      }}\n    >\n      <ModelsIcon css={{ color: theme.colors.textSecondary }} />\n    </div>\n  );\n};\n\nconst ExperimentLoggedModelDetailsHeaderSkeleton = () => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ height: 2 * theme.general.heightSm, marginBottom: theme.spacing.sm }}>\n      <div css={{ height: theme.spacing.lg }}>\n        <GenericSkeleton css={{ width: 100, height: theme.spacing.md }} loading />\n      </div>\n      <div css={{ display: 'flex', justifyContent: 'space-between' }}>\n        <div css={{ display: 'flex', gap: theme.spacing.sm, marginTop: theme.spacing.xs * 0.5 }}>\n          <GenericSkeleton css={{ width: theme.general.heightSm, height: theme.general.heightSm }} loading />\n          <GenericSkeleton css={{ width: 160, height: theme.general.heightSm }} loading />\n        </div>\n        <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n          <GenericSkeleton css={{ width: 100, height: theme.general.heightSm }} loading />\n          <GenericSkeleton css={{ width: 60, height: theme.general.heightSm }} loading />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { Alert, Modal, Spacer } from '@databricks/design-system';\nimport { useCallback, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport type { LoggedModelProto } from '../../../types';\nimport { fetchAPI, getAjaxUrl } from '@mlflow/mlflow/src/common/utils/FetchUtils';\n\nexport const useExperimentLoggedModelDeleteModal = ({\n  loggedModel,\n  onSuccess,\n}: {\n  loggedModel?: LoggedModelProto | null;\n  onSuccess?: () => void | Promise<any>;\n}) => {\n  const [open, setOpen] = useState(false);\n\n  const mutation = useMutation<\n    unknown,\n    Error,\n    {\n      loggedModelId: string;\n    }\n  >({\n    mutationFn: async ({ loggedModelId }) => {\n      await fetchAPI(getAjaxUrl(`ajax-api/2.0/mlflow/logged-models/${loggedModelId}`), 'DELETE');\n    },\n  });\n\n  const { mutate, isLoading, reset: resetMutation } = mutation;\n\n  const modalElement = (\n    <Modal\n      componentId=\"mlflow.logged_model.details.delete_modal\"\n      visible={open}\n      onCancel={() => setOpen(false)}\n      title={\n        <FormattedMessage\n          defaultMessage=\"Delete logged model\"\n          description=\"A header of the modal used for deleting logged models\"\n        />\n      }\n      okText={\n        <FormattedMessage\n          defaultMessage=\"Delete\"\n          description=\"A confirmation label of the modal used for deleting logged models\"\n        />\n      }\n      okButtonProps={{ danger: true, loading: isLoading }}\n      onOk={async () => {\n        if (!loggedModel?.info?.model_id) {\n          setOpen(false);\n          return;\n        }\n        mutate(\n          {\n            loggedModelId: loggedModel.info.model_id,\n          },\n          {\n            onSuccess: () => {\n              onSuccess?.();\n              setOpen(false);\n            },\n          },\n        );\n      }}\n      cancelText={\n        <FormattedMessage\n          defaultMessage=\"Cancel\"\n          description=\"A cancel label for the modal used for deleting logged models\"\n        />\n      }\n    >\n      {mutation.error?.message && (\n        <>\n          <Alert\n            componentId=\"mlflow.logged_model.details.delete_modal.error\"\n            closable={false}\n            message={mutation.error.message}\n            type=\"error\"\n          />\n          <Spacer />\n        </>\n      )}\n      <FormattedMessage\n        defaultMessage=\"Are you sure you want to delete this logged model?\"\n        description=\"A content of the delete logged model confirmation modal\"\n      />\n    </Modal>\n  );\n\n  const openModal = useCallback(() => {\n    resetMutation();\n    setOpen(true);\n  }, [resetMutation]);\n\n  return { modalElement, openModal };\n};\n","import { NavigationMenu } from '@databricks/design-system';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\n\nimport { FormattedMessage } from 'react-intl';\n\nexport const ExperimentLoggedModelDetailsNav = ({\n  experimentId,\n  modelId,\n  activeTabName,\n}: {\n  experimentId: string;\n  modelId: string;\n  activeTabName?: string;\n}) => {\n  return (\n    <NavigationMenu.Root>\n      <NavigationMenu.List>\n        <NavigationMenu.Item key=\"overview\" active={!activeTabName}>\n          <Link to={Routes.getExperimentLoggedModelDetailsPageRoute(experimentId, modelId)}>\n            <FormattedMessage\n              defaultMessage=\"Overview\"\n              description=\"Label for the overview tab on the logged model details page\"\n            />\n          </Link>\n        </NavigationMenu.Item>\n        {/* TODO: Implement when available */}\n        {/* <NavigationMenu.Item key=\"evaluations\" active={activeTabName === 'evaluations'}>\n          <Link to={Routes.getExperimentLoggedModelDetailsPageRoute(experimentId, modelId, 'evaluations')}>\n            <FormattedMessage\n              defaultMessage=\"Evaluations\"\n              description=\"Label for the evaluations tab on the logged model details page\"\n            />\n          </Link>\n        </NavigationMenu.Item> */}\n        <NavigationMenu.Item key=\"traces\" active={activeTabName === 'traces'}>\n          <Link to={Routes.getExperimentLoggedModelDetailsPageRoute(experimentId, modelId, 'traces')}>\n            <FormattedMessage\n              defaultMessage=\"Traces\"\n              description=\"Label for the traces tab on the logged model details page\"\n            />\n          </Link>\n        </NavigationMenu.Item>\n        <NavigationMenu.Item key=\"artifacts\" active={activeTabName === 'artifacts'}>\n          <Link to={Routes.getExperimentLoggedModelDetailsPageRoute(experimentId, modelId, 'artifacts')}>\n            <FormattedMessage\n              defaultMessage=\"Artifacts\"\n              description=\"Label for the artifacts tab on the logged model details page\"\n            />\n          </Link>\n        </NavigationMenu.Item>\n      </NavigationMenu.List>\n    </NavigationMenu.Root>\n  );\n};\n","import { useState } from 'react';\nimport { EditableNote } from '../../../common/components/EditableNote';\nimport type { LoggedModelProto } from '../../types';\nimport { NOTE_CONTENT_TAG } from '../../utils/NoteUtils';\nimport { Button, PencilIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { usePatchLoggedModelsTags } from '../../hooks/logged-models/usePatchLoggedModelsTags';\nimport { useUserActionErrorHandler } from '@databricks/web-shared/metrics';\n\n/**\n * Displays editable description section in logged model detail overview.\n */\nexport const ExperimentLoggedModelDescription = ({\n  loggedModel,\n  onDescriptionChanged,\n}: {\n  loggedModel?: LoggedModelProto;\n  onDescriptionChanged: () => void | Promise<void>;\n}) => {\n  const descriptionContent = loggedModel?.info?.tags?.find((tag) => tag.key === NOTE_CONTENT_TAG)?.value ?? undefined;\n\n  const [showNoteEditor, setShowDescriptionEditor] = useState(false);\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const { patch } = usePatchLoggedModelsTags({ loggedModelId: loggedModel?.info?.model_id });\n  const { handleError } = useUserActionErrorHandler();\n\n  const handleSubmitEditDescription = async (markdown: string) => {\n    try {\n      await patch({ [NOTE_CONTENT_TAG]: markdown });\n      await onDescriptionChanged();\n      setShowDescriptionEditor(false);\n    } catch (error: any) {\n      handleError(error);\n    }\n  };\n\n  const handleCancelEditDescription = () => setShowDescriptionEditor(false);\n\n  const isEmpty = !descriptionContent;\n\n  return (\n    <div css={{ marginBottom: theme.spacing.md }}>\n      <Typography.Title level={4} css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n        <FormattedMessage\n          defaultMessage=\"Description\"\n          description=\"Label for descriptions section on the logged models details page\"\n        />\n        <Button\n          componentId=\"mlflow.logged_models.details.description.edit\"\n          size=\"small\"\n          type=\"tertiary\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'Edit description',\n            description: 'Label for the edit description button on the logged models details page',\n          })}\n          onClick={() => setShowDescriptionEditor(true)}\n          icon={<PencilIcon />}\n        />\n      </Typography.Title>\n      {isEmpty && !showNoteEditor && (\n        <Typography.Hint>\n          <FormattedMessage\n            defaultMessage=\"No description\"\n            description=\"Placeholder text when no description is provided for the logged model displayed in the logged models details page\"\n          />\n        </Typography.Hint>\n      )}\n      {(!isEmpty || showNoteEditor) && (\n        <EditableNote\n          defaultMarkdown={descriptionContent}\n          onSubmit={handleSubmitEditDescription}\n          onCancel={handleCancelEditDescription}\n          showEditor={showNoteEditor}\n        />\n      )}\n    </div>\n  );\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { entries } from 'lodash';\nimport { fetchAPI, getAjaxUrl } from '@mlflow/mlflow/src/common/utils/FetchUtils';\n\nexport const usePatchLoggedModelsTags = ({ loggedModelId }: { loggedModelId?: string }) => {\n  const { isLoading, error, mutateAsync } = useMutation<unknown, Error, Record<string, string>>({\n    mutationFn: async (variables) => {\n      const requestBody = {\n        tags: entries(variables).map(([key, value]) => ({ key, value })),\n      };\n\n      return fetchAPI(getAjaxUrl(`ajax-api/2.0/mlflow/logged-models/${loggedModelId}/tags`), 'PATCH', requestBody);\n    },\n  });\n\n  return {\n    isLoading,\n    error,\n    patch: mutateAsync,\n  } as const;\n};\n","import type { CellContext, ColumnDefTemplate } from '@tanstack/react-table';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\n\nexport const ExperimentLoggedModelDetailsTableRunCellRenderer: ColumnDefTemplate<\n  CellContext<\n    unknown,\n    {\n      runId?: string | null;\n      runName?: string | null;\n      experimentId?: string | null;\n    }\n  >\n> = ({ getValue }) => {\n  const { runName, runId } = getValue() ?? {};\n\n  return <Link to={Routes.getDirectRunPageRoute(runId ?? '')}>{runName || runId}</Link>;\n};\n","import {\n  Empty,\n  Input,\n  SearchIcon,\n  Table,\n  TableCell,\n  TableHeader,\n  TableIcon,\n  TableRow,\n  TableSkeleton,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useMemo, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n  type CellContext,\n  type ColumnDef,\n  type ColumnDefTemplate,\n  flexRender,\n  getCoreRowModel,\n  getExpandedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport type { LoggedModelProto, LoggedModelMetricProto, RunEntity } from '../../types';\nimport { ExperimentLoggedModelDetailsTableRunCellRenderer } from './ExperimentLoggedModelDetailsTableRunCellRenderer';\nimport { ExperimentLoggedModelDatasetButton } from './ExperimentLoggedModelDatasetButton';\nimport { useExperimentTrackingDetailsPageLayoutStyles } from '../../hooks/useExperimentTrackingDetailsPageLayoutStyles';\n\ninterface LoggedModelMetricWithRunData extends LoggedModelMetricProto {\n  experimentId?: string | null;\n  runName?: string | null;\n}\n\ntype MetricTableCellRenderer = ColumnDefTemplate<CellContext<LoggedModelMetricWithRunData, unknown>>;\ntype ColumnMeta = {\n  styles?: React.CSSProperties;\n};\n\nconst SingleDatasetCellRenderer = ({\n  getValue,\n}: CellContext<\n  LoggedModelMetricProto,\n  {\n    datasetName: string;\n    datasetDigest: string;\n    runId: string | null;\n  }\n>) => {\n  const { datasetDigest, datasetName, runId } = getValue();\n\n  if (!datasetName) {\n    return '-';\n  }\n\n  return <ExperimentLoggedModelDatasetButton datasetName={datasetName} datasetDigest={datasetDigest} runId={runId} />;\n};\n\nexport const ExperimentLoggedModelDetailsMetricsTable = ({\n  loggedModel,\n  relatedRunsData,\n  relatedRunsLoading,\n}: {\n  loggedModel?: LoggedModelProto;\n  relatedRunsData?: RunEntity[];\n  relatedRunsLoading?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { detailsPageTableStyles, detailsPageNoEntriesStyles } = useExperimentTrackingDetailsPageLayoutStyles();\n  const intl = useIntl();\n  const [filter, setFilter] = useState('');\n\n  const metricsWithRunData = useMemo(() => {\n    if (relatedRunsLoading) {\n      return [];\n    }\n    return (\n      loggedModel?.data?.metrics?.map((metric) => {\n        const runName = relatedRunsData?.find((run) => run.info?.runUuid === metric.run_id)?.info?.runName;\n        return {\n          ...metric,\n          experimentId: loggedModel.info?.experiment_id,\n          runName,\n        };\n      }) ?? []\n    );\n  }, [loggedModel, relatedRunsLoading, relatedRunsData]);\n\n  const filteredMetrics = useMemo(\n    () =>\n      metricsWithRunData.filter(({ key, dataset_name, dataset_digest, runName }) => {\n        const filterLower = filter.toLowerCase();\n        return (\n          key?.toLowerCase().includes(filterLower) ||\n          dataset_name?.toLowerCase().includes(filterLower) ||\n          dataset_digest?.toLowerCase().includes(filterLower) ||\n          runName?.toLowerCase().includes(filterLower)\n        );\n      }),\n    [filter, metricsWithRunData],\n  );\n\n  const columns = useMemo<ColumnDef<LoggedModelMetricWithRunData>[]>(\n    () => [\n      {\n        id: 'metric',\n        accessorKey: 'key',\n        header: intl.formatMessage({\n          defaultMessage: 'Metric',\n          description: 'Label for the metric column in the logged model details metrics table',\n        }),\n        enableResizing: true,\n        size: 240,\n      },\n      {\n        id: 'dataset',\n        header: intl.formatMessage({\n          defaultMessage: 'Dataset',\n          description: 'Label for the dataset column in the logged model details metrics table',\n        }),\n        accessorFn: ({ dataset_name: datasetName, dataset_digest: datasetDigest, run_id: runId }) => ({\n          datasetName,\n          datasetDigest,\n          runId,\n        }),\n        enableResizing: true,\n        cell: SingleDatasetCellRenderer as MetricTableCellRenderer,\n      },\n      {\n        id: 'sourceRun',\n        header: intl.formatMessage({\n          defaultMessage: 'Source run',\n          description:\n            \"Label for the column indicating a run being the source of the logged model's metric (i.e. source run). Displayed in the logged model details metrics table.\",\n        }),\n        accessorFn: ({ run_id: runId, runName, experimentId }) => ({\n          runId,\n          runName,\n          experimentId,\n        }),\n        enableResizing: true,\n        cell: ExperimentLoggedModelDetailsTableRunCellRenderer as MetricTableCellRenderer,\n      },\n      {\n        id: 'value',\n        header: intl.formatMessage({\n          defaultMessage: 'Value',\n          description: 'Label for the value column in the logged model details metrics table',\n        }),\n        accessorKey: 'value',\n        // In full-width layout, let \"Value\" fill the remaining space\n        enableResizing: true,\n        meta: {\n          styles: {\n            minWidth: 120,\n          },\n        },\n      },\n    ],\n    [intl],\n  );\n\n  const table = useReactTable({\n    data: filteredMetrics,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    getRowId: (row) => [row.key, row.dataset_digest, row.run_id].join('.') ?? '',\n    enableColumnResizing: true,\n    columnResizeMode: 'onChange',\n    columns,\n  });\n\n  const renderTableContent = () => {\n    if (relatedRunsLoading) {\n      return <TableSkeleton lines={3} />;\n    }\n    if (!metricsWithRunData.length) {\n      return (\n        <div css={detailsPageNoEntriesStyles}>\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage=\"No metrics recorded\"\n                description=\"Placeholder text when no metrics are recorded for a logged model\"\n              />\n            }\n          />\n        </div>\n      );\n    }\n\n    const areAllResultsFiltered = filteredMetrics.length < 1;\n\n    return (\n      <>\n        <div css={{ marginBottom: theme.spacing.sm }}>\n          <Input\n            componentId=\"mlflow.logged_model.details.metrics.table.search\"\n            prefix={<SearchIcon />}\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Search metrics',\n              description: 'Placeholder text for the search input in the logged model details metrics table',\n            })}\n            value={filter}\n            onChange={(e) => setFilter(e.target.value)}\n            allowClear\n          />\n        </div>\n        <Table\n          ref={(element) => element?.setAttribute('data-testid', 'logged-model-details-metrics-table')}\n          scrollable\n          empty={\n            areAllResultsFiltered ? (\n              <div>\n                <Empty\n                  description={\n                    <FormattedMessage\n                      defaultMessage=\"No metrics match the search filter\"\n                      description=\"Message displayed when no metrics match the search filter in the logged model details metrics table\"\n                    />\n                  }\n                />\n              </div>\n            ) : null\n          }\n          css={detailsPageTableStyles}\n        >\n          <TableRow isHeader>\n            {table.getLeafHeaders().map((header, index) => (\n              <TableHeader\n                componentId=\"mlflow.logged_model.details.metrics.table.header\"\n                key={header.id}\n                header={header}\n                column={header.column}\n                setColumnSizing={table.setColumnSizing}\n                isResizing={header.column.getIsResizing()}\n                css={{\n                  flexGrow: header.column.getCanResize() ? 0 : 1,\n                  ...(header.column.columnDef.meta as ColumnMeta)?.styles,\n                }}\n                style={{\n                  flexBasis: header.column.getCanResize() ? header.column.getSize() : undefined,\n                }}\n              >\n                {flexRender(header.column.columnDef.header, header.getContext())}\n              </TableHeader>\n            ))}\n          </TableRow>\n          {table.getRowModel().rows.map((row) => (\n            <TableRow key={row.id}>\n              {row.getAllCells().map((cell) => (\n                <TableCell\n                  key={cell.id}\n                  style={{\n                    flexGrow: cell.column.getCanResize() ? 0 : 1,\n                    flexBasis: cell.column.getCanResize() ? cell.column.getSize() : undefined,\n                  }}\n                  css={{\n                    ...(cell.column.columnDef.meta as ColumnMeta)?.styles,\n                  }}\n                >\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </Table>\n      </>\n    );\n  };\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'column', overflow: 'hidden', maxHeight: 400 }}>\n      <Typography.Title level={4}>\n        <FormattedMessage\n          defaultMessage=\"Metrics ({length})\"\n          description=\"Header for the metrics table on the logged model details page. (Length) is the number of metrics currently displayed.\"\n          values={{ length: metricsWithRunData.length }}\n        />\n      </Typography.Title>\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.border}`,\n          borderRadius: theme.general.borderRadiusBase,\n          display: 'flex',\n          flexDirection: 'column',\n          overflow: 'hidden',\n        }}\n      >\n        {renderTableContent()}\n      </div>\n    </div>\n  );\n};\n","import {\n  Empty,\n  Input,\n  Overflow,\n  SearchIcon,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  TableSkeleton,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport type { CellContext, ColumnDef, ColumnDefTemplate } from '@tanstack/react-table';\nimport { flexRender, getCoreRowModel, getExpandedRowModel, useReactTable } from '@tanstack/react-table';\nimport { entries, groupBy, isEmpty, uniqBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport type { LoggedModelProto, RunEntity } from '../../types';\nimport { ExperimentLoggedModelDetailsTableRunCellRenderer } from './ExperimentLoggedModelDetailsTableRunCellRenderer';\nimport { ExperimentLoggedModelDatasetButton } from './ExperimentLoggedModelDatasetButton';\nimport { useExperimentTrackingDetailsPageLayoutStyles } from '../../hooks/useExperimentTrackingDetailsPageLayoutStyles';\n\ninterface RunsTableRow {\n  experimentId?: string;\n  runName?: string;\n  runId: string;\n  datasets: {\n    datasetName: string;\n    datasetDigest: string;\n    runId: string;\n  }[];\n}\n\ntype RunsTableCellRenderer = ColumnDefTemplate<CellContext<RunsTableRow, unknown>>;\n\nconst DatasetListCellRenderer = ({ getValue }: CellContext<RunsTableRow, RunsTableRow['datasets']>) => {\n  const datasets = getValue() ?? [];\n\n  if (isEmpty(datasets)) {\n    return <>-</>;\n  }\n\n  return (\n    <Overflow>\n      {datasets.map(({ datasetDigest, datasetName, runId }) => (\n        <ExperimentLoggedModelDatasetButton\n          datasetName={datasetName}\n          datasetDigest={datasetDigest}\n          runId={runId}\n          key={[datasetName, datasetDigest].join('.')}\n        />\n      ))}\n    </Overflow>\n  );\n};\n\nexport const ExperimentLoggedModelDetailsPageRunsTable = ({\n  loggedModel,\n  relatedRunsData,\n  relatedRunsLoading,\n}: {\n  loggedModel?: LoggedModelProto;\n  relatedRunsData?: RunEntity[];\n  relatedRunsLoading?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { detailsPageTableStyles, detailsPageNoEntriesStyles } = useExperimentTrackingDetailsPageLayoutStyles();\n  const intl = useIntl();\n  const [filter, setFilter] = useState('');\n\n  const runsWithDatasets = useMemo(() => {\n    if (relatedRunsLoading) {\n      return [];\n    }\n    const allMetrics = loggedModel?.data?.metrics ?? [];\n    const runsByDatasets = groupBy(allMetrics, 'run_id');\n    if (loggedModel?.info?.source_run_id && !runsByDatasets[loggedModel.info.source_run_id]) {\n      runsByDatasets[loggedModel.info.source_run_id] = [];\n    }\n    return entries(runsByDatasets).map(([runId, metrics]) => {\n      // Locate unique dataset entries\n      const distinctDatasets = uniqBy(metrics, 'dataset_name')\n        .map(({ dataset_digest, dataset_name }) => ({\n          datasetDigest: dataset_digest,\n          datasetName: dataset_name,\n          runId,\n        }))\n        .filter((dataset) => Boolean(dataset.datasetName) || Boolean(dataset.datasetDigest));\n\n      const runName = relatedRunsData?.find((run) => run.info?.runUuid === runId)?.info?.runName;\n      return {\n        runId,\n        runName,\n        datasets: distinctDatasets,\n        experimentId: loggedModel?.info?.experiment_id,\n      };\n    });\n  }, [loggedModel, relatedRunsLoading, relatedRunsData]);\n\n  const filteredRunsWithDatasets = useMemo(\n    () =>\n      runsWithDatasets.filter(({ runName, datasets }) => {\n        const filterLower = filter.toLowerCase();\n        return (\n          runName?.toLowerCase().includes(filterLower) ||\n          datasets.find((d) => d.datasetName?.toLowerCase().includes(filterLower))\n        );\n      }),\n    [filter, runsWithDatasets],\n  );\n\n  const columns = useMemo<ColumnDef<any>[]>(\n    () => [\n      {\n        id: 'run',\n        header: intl.formatMessage({\n          defaultMessage: 'Run',\n          description: 'Column header for the run name in the runs table on the logged model details page',\n        }),\n        enableResizing: true,\n        size: 240,\n        accessorFn: ({ runId, runName, experimentId }) => ({\n          runId,\n          runName,\n          experimentId,\n        }),\n        cell: ExperimentLoggedModelDetailsTableRunCellRenderer as RunsTableCellRenderer,\n      },\n      {\n        id: 'input',\n        header: intl.formatMessage({\n          defaultMessage: 'Input',\n          description: 'Column header for the input in the runs table on the logged model details page',\n        }),\n        accessorKey: 'datasets',\n        enableResizing: false,\n        cell: DatasetListCellRenderer as RunsTableCellRenderer,\n      },\n    ],\n    [intl],\n  );\n\n  const table = useReactTable({\n    data: filteredRunsWithDatasets,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    getRowId: (row) => row.key,\n    enableColumnResizing: true,\n    columnResizeMode: 'onChange',\n    columns,\n  });\n\n  const renderTableContent = () => {\n    if (relatedRunsLoading) {\n      return <TableSkeleton lines={3} />;\n    }\n    if (!runsWithDatasets.length) {\n      return (\n        <div css={detailsPageNoEntriesStyles}>\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage=\"No runs\"\n                description=\"Placeholder text for the runs table on the logged model details page when there are no runs\"\n              />\n            }\n          />\n        </div>\n      );\n    }\n\n    const areAllResultsFiltered = filteredRunsWithDatasets.length < 1;\n\n    return (\n      <>\n        <div css={{ marginBottom: theme.spacing.sm }}>\n          <Input\n            componentId=\"mlflow.logged_model.details.runs.table.search\"\n            prefix={<SearchIcon />}\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Search runs',\n              description: 'Placeholder text for the search input in the runs table on the logged model details page',\n            })}\n            value={filter}\n            onChange={(e) => setFilter(e.target.value)}\n            allowClear\n          />\n        </div>\n        <Table\n          scrollable\n          ref={(element) => element?.setAttribute('data-testid', 'logged-model-details-runs-table')}\n          empty={\n            areAllResultsFiltered ? (\n              <div>\n                <Empty\n                  description={\n                    <FormattedMessage\n                      defaultMessage=\"No runs match the search filter\"\n                      description=\"No results message for the runs table on the logged model details page\"\n                    />\n                  }\n                />\n              </div>\n            ) : null\n          }\n          css={detailsPageTableStyles}\n        >\n          <TableRow isHeader>\n            {table.getLeafHeaders().map((header, index) => (\n              <TableHeader\n                componentId=\"mlflow.logged_model.details.runs.table.header\"\n                key={header.id}\n                header={header}\n                column={header.column}\n                setColumnSizing={table.setColumnSizing}\n                isResizing={header.column.getIsResizing()}\n                css={{\n                  flexGrow: header.column.getCanResize() ? 0 : 1,\n                }}\n                style={{\n                  flexBasis: header.column.getCanResize() ? header.column.getSize() : undefined,\n                }}\n              >\n                {flexRender(header.column.columnDef.header, header.getContext())}\n              </TableHeader>\n            ))}\n          </TableRow>\n          {table.getRowModel().rows.map((row) => (\n            <TableRow key={row.id}>\n              {row.getAllCells().map((cell) => (\n                <TableCell\n                  key={cell.id}\n                  style={{\n                    flexGrow: cell.column.getCanResize() ? 0 : 1,\n                    flexBasis: cell.column.getCanResize() ? cell.column.getSize() : undefined,\n                  }}\n                  multiline\n                >\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </Table>\n      </>\n    );\n  };\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'column', overflow: 'hidden', maxHeight: 400 }}>\n      <Typography.Title css={{ fontSize: 16 }}>Runs</Typography.Title>\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.border}`,\n          borderRadius: theme.general.borderRadiusBase,\n          display: 'flex',\n          flexDirection: 'column',\n          overflow: 'hidden',\n        }}\n      >\n        {renderTableContent()}\n      </div>\n    </div>\n  );\n};\n","import { useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport {\n  useDesignSystemTheme,\n  Typography,\n  Table,\n  Empty,\n  TableRow,\n  TableHeader,\n  TableCell,\n  Input,\n  getShadowScrollStyles,\n  SearchIcon,\n} from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport type { ColumnDef, ColumnDefTemplate, CellContext } from '@tanstack/react-table';\nimport { useReactTable, getCoreRowModel, getFilteredRowModel, flexRender } from '@tanstack/react-table';\n\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport { PROMPT_VERSION_QUERY_PARAM } from '../../pages/prompts/utils';\n\ninterface Props {\n  data: LinkedPromptsRow[];\n}\n\ntype LinkedPromptsRow = { experimentId: string; name: string; version: string };\n\ntype TableCellRenderer = ColumnDefTemplate<CellContext<LinkedPromptsRow, unknown>>;\n\nconst PromptNameCellRenderer: ColumnDef<LinkedPromptsRow>['cell'] = ({ row }) => {\n  const { experimentId, name, version } = row.original ?? {};\n\n  // TODO: allow linking to prompt versions in OSS\n  const baseRoute = Routes.getPromptDetailsPageRoute(name);\n\n  if (version) {\n    const searchParams = new URLSearchParams();\n    searchParams.set(PROMPT_VERSION_QUERY_PARAM, version);\n    const routeWithVersion = `${baseRoute}?${searchParams.toString()}`;\n    return <Link to={routeWithVersion}>{name}</Link>;\n  }\n\n  return <Link to={baseRoute}>{name}</Link>;\n};\n\nconst VersionCellRenderer: ColumnDef<LinkedPromptsRow>['cell'] = ({ row }) => {\n  const { version } = row.original ?? {};\n\n  return <Typography.Paragraph withoutMargins>{version}</Typography.Paragraph>;\n};\n\nexport const ExperimentLinkedPromptsTable = ({ data }: Props) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const [globalFilter, setGlobalFilter] = useState('');\n\n  const columns = useMemo<ColumnDef<any>[]>(\n    () => [\n      {\n        id: 'name',\n        header: intl.formatMessage({\n          defaultMessage: 'Prompt Name',\n          description: 'Header for prompt name column in linked prompts table on logged model details page',\n        }),\n        enableResizing: true,\n        size: 400,\n        accessorKey: 'name',\n        cell: PromptNameCellRenderer as TableCellRenderer,\n      },\n      {\n        id: 'version',\n        header: intl.formatMessage({\n          defaultMessage: 'Version',\n          description: 'Header for version column in linked prompts table on logged model details page',\n        }),\n        enableResizing: false,\n        accessorKey: 'version',\n        cell: VersionCellRenderer as TableCellRenderer,\n      },\n    ],\n    [intl],\n  );\n\n  const table = useReactTable({\n    data,\n    getRowId: (row) => row.name,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    enableColumnResizing: true,\n    columnResizeMode: 'onChange',\n    columns,\n    state: {\n      globalFilter,\n    },\n    onGlobalFilterChange: setGlobalFilter,\n    globalFilterFn: 'includesString',\n  });\n\n  const renderTableContent = () => {\n    return (\n      <>\n        <div css={{ marginBottom: theme.spacing.sm }}>\n          <Input\n            componentId=\"mlflow.logged_model.details.runs.table.search\"\n            prefix={<SearchIcon />}\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Search prompts',\n              description:\n                'Placeholder text for the search input in the prompts table on the logged model details page',\n            })}\n            value={globalFilter}\n            onChange={(e) => setGlobalFilter(e.target.value)}\n            allowClear\n          />\n        </div>\n        <Table\n          scrollable\n          css={{\n            '&>div': getShadowScrollStyles(theme, {\n              orientation: 'vertical',\n            }),\n          }}\n          empty={\n            data.length === 0 ? (\n              <Empty\n                description={\n                  <FormattedMessage\n                    defaultMessage=\"No prompts\"\n                    description=\"No results message for linked prompts table on logged model details page\"\n                  />\n                }\n              />\n            ) : table.getFilteredRowModel().rows.length === 0 ? (\n              <Empty\n                description={\n                  <FormattedMessage\n                    defaultMessage=\"No prompts match your search\"\n                    description=\"No search results message for linked prompts table on logged model details page\"\n                  />\n                }\n              />\n            ) : null\n          }\n        >\n          <TableRow isHeader>\n            {table.getLeafHeaders().map((header) => (\n              <TableHeader\n                componentId=\"mlflow.logged_model.details.linked_prompts.table.header\"\n                key={header.id}\n                header={header}\n                column={header.column}\n                setColumnSizing={table.setColumnSizing}\n                isResizing={header.column.getIsResizing()}\n                css={{\n                  flexGrow: header.column.getCanResize() ? 0 : 1,\n                }}\n                style={{\n                  flexBasis: header.column.getCanResize() ? header.column.getSize() : undefined,\n                }}\n              >\n                {flexRender(header.column.columnDef.header, header.getContext())}\n              </TableHeader>\n            ))}\n          </TableRow>\n          {table.getRowModel().rows.map((row) => (\n            <TableRow key={`${row.id}-${row.original.name}-${row.original.version}-row`}>\n              {row.getAllCells().map((cell) => (\n                <TableCell\n                  key={`${cell.id}-${row.original.name}-${row.original.version}-cell`}\n                  style={{\n                    flexGrow: cell.column.getCanResize() ? 0 : 1,\n                    flexBasis: cell.column.getCanResize() ? cell.column.getSize() : undefined,\n                  }}\n                >\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </Table>\n      </>\n    );\n  };\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'column', overflow: 'hidden', maxHeight: 400 }}>\n      <Typography.Title css={{ fontSize: 16 }}>\n        <FormattedMessage\n          defaultMessage=\"Prompts\"\n          description=\"Title for linked prompts table on logged model details page\"\n        />\n      </Typography.Title>\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.border}`,\n          borderRadius: theme.general.borderRadiusBase,\n          display: 'flex',\n          flexDirection: 'column',\n          overflow: 'hidden',\n        }}\n      >\n        {renderTableContent()}\n      </div>\n    </div>\n  );\n};\n","import { useMemo } from 'react';\n\nimport type { LoggedModelProto } from '../../types';\nimport { ExperimentLinkedPromptsTable } from '../experiment-prompts/ExperimentLinkedPromptsTable';\nimport { MLFLOW_LINKED_PROMPTS_TAG } from '../../constants';\n\ninterface Props {\n  loggedModel?: LoggedModelProto;\n}\n\nexport const ExperimentLoggedModelDetailsPageLinkedPromptsTable = ({ loggedModel }: Props) => {\n  const tags = loggedModel?.info?.tags;\n  const experimentId = loggedModel?.info?.experiment_id ?? '';\n  const linkedPromptsTag = tags?.find(({ key }) => key === MLFLOW_LINKED_PROMPTS_TAG);\n  const rawLinkedPrompts: { name: string; version: string }[] = useMemo(() => {\n    try {\n      return JSON.parse(linkedPromptsTag?.value ?? '[]');\n    } catch (e) {\n      // fail gracefully, just don't show any linked prompts\n      return [];\n    }\n  }, [linkedPromptsTag]);\n\n  const data = useMemo(\n    () => rawLinkedPrompts.map((prompt) => ({ ...prompt, experimentId })),\n    [rawLinkedPrompts, experimentId],\n  );\n\n  return <ExperimentLinkedPromptsTable data={data} />;\n};\n","import { Overflow } from '@databricks/design-system';\nimport { useMemo } from 'react';\nimport { type LoggedModelProto } from '../../types';\nimport { ExperimentLoggedModelDatasetButton } from './ExperimentLoggedModelDatasetButton';\n\nexport const ExperimentLoggedModelAllDatasetsList = ({\n  loggedModel,\n  empty,\n}: {\n  loggedModel: LoggedModelProto;\n  empty?: React.ReactElement;\n}) => {\n  const uniqueDatasets = useMemo(() => {\n    const allMetrics = loggedModel.data?.metrics ?? [];\n    return allMetrics.reduce<{ dataset_name: string; dataset_digest: string; run_id: string | undefined }[]>(\n      (aggregate, { dataset_digest, dataset_name, run_id }) => {\n        if (\n          dataset_name &&\n          dataset_digest &&\n          !aggregate.find(\n            (dataset) => dataset.dataset_name === dataset_name && dataset.dataset_digest === dataset_digest,\n          )\n        ) {\n          aggregate.push({ dataset_name, dataset_digest, run_id });\n        }\n        return aggregate;\n      },\n      [],\n    );\n  }, [loggedModel]);\n\n  if (!uniqueDatasets.length) {\n    return empty ?? <>-</>;\n  }\n\n  return (\n    <Overflow>\n      {uniqueDatasets.map(({ dataset_digest, dataset_name, run_id }) => (\n        <ExperimentLoggedModelDatasetButton\n          datasetName={dataset_name}\n          datasetDigest={dataset_digest}\n          runId={run_id ?? null}\n          key={[dataset_name, dataset_digest].join('.')}\n        />\n      ))}\n    </Overflow>\n  );\n};\n","import { Overflow, Tag, useDesignSystemTheme } from '@databricks/design-system';\nimport { type LoggedModelProto } from '../../types';\nimport { useExperimentLoggedModelRegisteredVersions } from './hooks/useExperimentLoggedModelRegisteredVersions';\nimport { isEmpty } from 'lodash';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { useMemo } from 'react';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../common/static/registered-model-grey-ok.svg';\n\nexport const ExperimentLoggedModelDetailsModelVersionsList = ({\n  loggedModel,\n  empty,\n}: {\n  loggedModel: LoggedModelProto;\n  empty?: React.ReactElement;\n}) => {\n  const loggedModels = useMemo(() => [loggedModel], [loggedModel]);\n  const { theme } = useDesignSystemTheme();\n  const { modelVersions } = useExperimentLoggedModelRegisteredVersions({ loggedModels });\n\n  if (isEmpty(modelVersions)) {\n    return empty ?? <>-</>;\n  }\n\n  return (\n    <Overflow>\n      {modelVersions?.map(({ displayedName, version, link }) => (\n        <Link\n          to={link}\n          key={`${displayedName}-${version}`}\n          css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }}\n        >\n          <span css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm, wordBreak: 'break-all' }}>\n            <RegisteredModelOkIcon css={{ flexShrink: 0 }} /> {displayedName}{' '}\n          </span>\n          <Tag componentId=\"mlflow.logged_model.details.registered_model_version_tag\">v{version}</Tag>\n        </Link>\n      ))}\n    </Overflow>\n  );\n};\n","import { GenericSkeleton, useDesignSystemTheme } from '@databricks/design-system';\nimport type { LoggedModelProto, RunEntity } from '../../../types';\nimport { useIntl } from 'react-intl';\nimport { ExperimentLoggedModelTableDateCell } from '../ExperimentLoggedModelTableDateCell';\nimport { ExperimentLoggedModelStatusIndicator } from '../ExperimentLoggedModelStatusIndicator';\nimport { DetailsOverviewCopyableIdBox } from '../../DetailsOverviewCopyableIdBox';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport type { AsideSections } from '@databricks/web-shared/utils';\nimport { KeyValueProperty, NoneCell } from '@databricks/web-shared/utils';\nimport { ExperimentLoggedModelSourceBox } from '../ExperimentLoggedModelSourceBox';\nimport { ExperimentLoggedModelAllDatasetsList } from '../ExperimentLoggedModelAllDatasetsList';\nimport { ExperimentLoggedModelDetailsModelVersionsList } from '../ExperimentLoggedModelDetailsModelVersionsList';\nimport { MLFLOW_LOGGED_MODEL_USER_TAG } from '../../../constants';\n\nenum ExperimentLoggedModelDetailsMetadataSections {\n  DETAILS = 'DETAILS',\n  DATASETS = 'DATASETS',\n  MODEL_VERSIONS = 'MODEL_VERSIONS',\n}\n\nexport const useExperimentLoggedModelDetailsMetadataV2 = ({\n  loggedModel,\n  relatedRunsLoading,\n  relatedSourceRun,\n}: {\n  loggedModel?: LoggedModelProto;\n  relatedRunsLoading?: boolean;\n  relatedSourceRun?: RunEntity;\n}): AsideSections => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const detailsContent = loggedModel && (\n    <>\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Created at',\n          description: 'Label for the creation timestamp of a logged model on the logged model details page',\n        })}\n        value={<ExperimentLoggedModelTableDateCell value={loggedModel?.info?.creation_timestamp_ms} />}\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Created by',\n          description: 'Label for the creator of a logged model on the logged model details page',\n        })}\n        value={loggedModel.info?.tags?.find((tag) => tag.key === MLFLOW_LOGGED_MODEL_USER_TAG)?.value ?? '-'}\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Status',\n          description: 'Label for the status of a logged model on the logged model details page',\n        })}\n        value={<ExperimentLoggedModelStatusIndicator data={loggedModel} />}\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Model ID',\n          description: 'Label for the model ID of a logged model on the logged model details page',\n        })}\n        value={\n          <DetailsOverviewCopyableIdBox\n            value={loggedModel.info?.model_id ?? ''}\n            css={{\n              whiteSpace: 'nowrap',\n            }}\n          />\n        }\n      />\n      {loggedModel.info?.source_run_id &&\n        loggedModel.info?.experiment_id &&\n        (relatedRunsLoading || relatedSourceRun) && (\n          <KeyValueProperty\n            keyValue={intl.formatMessage({\n              defaultMessage: 'Source run',\n              description: 'Label for the source run name of a logged model on the logged model details page',\n            })}\n            value={\n              // Display a skeleton while loading\n              relatedRunsLoading ? (\n                <GenericSkeleton css={{ width: 200, height: theme.spacing.md }} />\n              ) : (\n                <Link to={Routes.getRunPageRoute(loggedModel.info?.experiment_id, loggedModel.info?.source_run_id)}>\n                  {relatedSourceRun?.info?.runName}\n                </Link>\n              )\n            }\n          />\n        )}\n      {loggedModel.info?.source_run_id && (\n        <KeyValueProperty\n          keyValue={intl.formatMessage({\n            defaultMessage: 'Source run ID',\n            description: 'Label for the source run ID of a logged model on the logged model details page',\n          })}\n          value={\n            <DetailsOverviewCopyableIdBox\n              value={loggedModel.info?.source_run_id ?? ''}\n              element={\n                loggedModel.info?.experiment_id ? (\n                  <Link to={Routes.getRunPageRoute(loggedModel.info?.experiment_id, loggedModel.info?.source_run_id)}>\n                    {loggedModel.info?.source_run_id}\n                  </Link>\n                ) : undefined\n              }\n            />\n          }\n        />\n      )}\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Logged from',\n          description:\n            'Label for the source (where it was logged from) of a logged model on the logged model details page. It can be e.g. a notebook or a file.',\n        })}\n        value={\n          <ExperimentLoggedModelSourceBox\n            loggedModel={loggedModel}\n            displayDetails\n            css={{ paddingTop: theme.spacing.xs, paddingBottom: theme.spacing.xs, wordBreak: 'break-all' }}\n          />\n        }\n      />\n    </>\n  );\n\n  return [\n    {\n      id: ExperimentLoggedModelDetailsMetadataSections.DETAILS,\n      title: intl.formatMessage({\n        defaultMessage: 'About this logged model',\n        description: 'Title for the details sidebar of a logged model on the logged model details page',\n      }),\n      content: detailsContent,\n    },\n    {\n      id: ExperimentLoggedModelDetailsMetadataSections.DATASETS,\n      title: intl.formatMessage({\n        defaultMessage: 'Datasets used',\n        description: 'Label for the datasets used by a logged model on the logged model details page',\n      }),\n      content: loggedModel && <ExperimentLoggedModelAllDatasetsList loggedModel={loggedModel} empty={<NoneCell />} />,\n    },\n    {\n      id: ExperimentLoggedModelDetailsMetadataSections.MODEL_VERSIONS,\n      title: intl.formatMessage({\n        defaultMessage: 'Model versions',\n        description: 'Label for the model versions of a logged model on the logged model details page',\n      }),\n      content: loggedModel && (\n        <ExperimentLoggedModelDetailsModelVersionsList empty={<NoneCell />} loggedModel={loggedModel} />\n      ),\n    },\n  ];\n};\n","import { Alert, GenericSkeleton, Spacer, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { LoggedModelProto } from '../../types';\nimport type { KeyValueEntity } from '../../../common/types';\nimport { DetailsOverviewMetadataTable } from '../DetailsOverviewMetadataTable';\nimport { DetailsOverviewMetadataRow } from '../DetailsOverviewMetadataRow';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentLoggedModelTableDateCell } from './ExperimentLoggedModelTableDateCell';\nimport { ExperimentLoggedModelStatusIndicator } from './ExperimentLoggedModelStatusIndicator';\nimport { DetailsOverviewCopyableIdBox } from '../DetailsOverviewCopyableIdBox';\nimport { ExperimentLoggedModelDescription } from './ExperimentLoggedModelDescription';\nimport { DetailsOverviewParamsTable } from '../DetailsOverviewParamsTable';\nimport { useMemo } from 'react';\nimport { isEmpty, keyBy } from 'lodash';\nimport { ExperimentLoggedModelDetailsMetricsTable } from './ExperimentLoggedModelDetailsMetricsTable';\nimport { ExperimentLoggedModelDetailsPageRunsTable } from './ExperimentLoggedModelDetailsRunsTable';\nimport { ExperimentLoggedModelDetailsPageLinkedPromptsTable } from './ExperimentLoggedModelDetailsPageLinkedPromptsTable';\nimport { useRelatedRunsDataForLoggedModels } from '../../hooks/logged-models/useRelatedRunsDataForLoggedModels';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport { ExperimentLoggedModelAllDatasetsList } from './ExperimentLoggedModelAllDatasetsList';\nimport { ExperimentLoggedModelOpenDatasetDetailsContextProvider } from './hooks/useExperimentLoggedModelOpenDatasetDetails';\nimport { ExperimentLoggedModelDetailsModelVersionsList } from './ExperimentLoggedModelDetailsModelVersionsList';\nimport { ExperimentLoggedModelSourceBox } from './ExperimentLoggedModelSourceBox';\nimport { DetailsPageLayout } from '../../../common/components/details-page-layout/DetailsPageLayout';\nimport { useExperimentLoggedModelDetailsMetadataV2 } from './hooks/useExperimentLoggedModelDetailsMetadataV2';\nimport { ExperimentKind, MLFLOW_LOGGED_MODEL_USER_TAG } from '../../constants';\n\nexport const ExperimentLoggedModelDetailsOverview = ({\n  onDataUpdated,\n  loggedModel,\n  experimentKind,\n}: {\n  onDataUpdated: () => void | Promise<any>;\n  loggedModel?: LoggedModelProto;\n  experimentKind?: ExperimentKind;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const shouldRenderLinkedPromptsTable = experimentKind === ExperimentKind.GENAI_DEVELOPMENT;\n\n  // Fetch related runs data for the logged model\n  const {\n    data: relatedRunsData,\n    loading: relatedRunsLoading,\n    error: relatedRunsDataError,\n  } = useRelatedRunsDataForLoggedModels({ loggedModels: loggedModel ? [loggedModel] : [] });\n\n  const relatedSourceRun = useMemo(\n    () => relatedRunsData?.find((r) => r.info?.runUuid === loggedModel?.info?.source_run_id),\n    [loggedModel?.info?.source_run_id, relatedRunsData],\n  );\n\n  const paramsDictionary = useMemo(\n    () =>\n      keyBy(\n        (loggedModel?.data?.params ?? []).filter(({ key, value }) => !isEmpty(key) && !isEmpty(value)),\n        'key',\n      ) as Record<string, KeyValueEntity>,\n    [loggedModel?.data?.params],\n  );\n\n  const renderDetails = () => {\n    if (!loggedModel) {\n      return null;\n    }\n    return (\n      <DetailsOverviewMetadataTable>\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Created at\"\n              description=\"Label for the creation timestamp of a logged model on the logged model details page\"\n            />\n          }\n          value={<ExperimentLoggedModelTableDateCell value={loggedModel.info?.creation_timestamp_ms} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Created by\"\n              description=\"Label for the creator of a logged model on the logged model details page\"\n            />\n          }\n          value={loggedModel.info?.tags?.find((tag) => tag.key === MLFLOW_LOGGED_MODEL_USER_TAG)?.value ?? '-'}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Status\"\n              description=\"Label for the status of a logged model on the logged model details page\"\n            />\n          }\n          value={<ExperimentLoggedModelStatusIndicator data={loggedModel} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Model ID\"\n              description=\"Label for the model ID of a logged model on the logged model details page\"\n            />\n          }\n          value={<DetailsOverviewCopyableIdBox value={loggedModel.info?.model_id ?? ''} />}\n        />\n        {/* If the logged model has a source run, display the source run name after its loaded */}\n        {loggedModel.info?.source_run_id &&\n          loggedModel.info?.experiment_id &&\n          (relatedRunsLoading || relatedSourceRun) && (\n            <DetailsOverviewMetadataRow\n              title={\n                <FormattedMessage\n                  defaultMessage=\"Source run\"\n                  description=\"Label for the source run name of a logged model on the logged model details page\"\n                />\n              }\n              value={\n                // Display a skeleton while loading\n                relatedRunsLoading ? (\n                  <GenericSkeleton css={{ width: 200, height: theme.spacing.md }} />\n                ) : (\n                  <Link to={Routes.getRunPageRoute(loggedModel.info?.experiment_id, loggedModel.info?.source_run_id)}>\n                    {relatedSourceRun?.info?.runName}\n                  </Link>\n                )\n              }\n            />\n          )}\n        {loggedModel.info?.source_run_id && (\n          <DetailsOverviewMetadataRow\n            title={\n              <FormattedMessage\n                defaultMessage=\"Source run ID\"\n                description=\"Label for the source run ID of a logged model on the logged model details page\"\n              />\n            }\n            value={<DetailsOverviewCopyableIdBox value={loggedModel.info?.source_run_id ?? ''} />}\n          />\n        )}\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Logged from\"\n              description=\"Label for the source (where it was logged from) of a logged model on the logged model details page. It can be e.g. a notebook or a file.\"\n            />\n          }\n          value={<ExperimentLoggedModelSourceBox loggedModel={loggedModel} displayDetails />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Datasets used\"\n              description=\"Label for the datasets used by a logged model on the logged model details page\"\n            />\n          }\n          value={<ExperimentLoggedModelAllDatasetsList loggedModel={loggedModel} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Model versions\"\n              description=\"Label for the model versions of a logged model on the logged model details page\"\n            />\n          }\n          value={<ExperimentLoggedModelDetailsModelVersionsList loggedModel={loggedModel} />}\n        />\n      </DetailsOverviewMetadataTable>\n    );\n  };\n\n  const detailsSectionsV2 = useExperimentLoggedModelDetailsMetadataV2({\n    loggedModel,\n    relatedRunsLoading,\n    relatedSourceRun,\n  });\n\n  return (\n    <ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n      <DetailsPageLayout css={{ flex: 1 }} usingSidebarLayout secondarySections={detailsSectionsV2}>\n        <ExperimentLoggedModelDescription loggedModel={loggedModel} onDescriptionChanged={onDataUpdated} />\n\n        {relatedRunsDataError?.message && (\n          <>\n            <Alert\n              closable={false}\n              message={\n                <FormattedMessage\n                  defaultMessage=\"Error when fetching related runs data: {error}\"\n                  description=\"Error message displayed when logged model details page couldn't fetch related runs data\"\n                  values={{\n                    error: relatedRunsDataError.message,\n                  }}\n                />\n              }\n              type=\"error\"\n              componentId=\"mlflow.logged_model.details.related_runs.error\"\n            />\n            <Spacer size=\"md\" />\n          </>\n        )}\n        <div\n          css={[\n            {\n              display: 'flex',\n              flexDirection: 'column',\n            },\n            {\n              gap: theme.spacing.lg,\n              overflow: 'hidden',\n              // add some bottom padding so the user can interact with the\n              // last table closer to the center of the page\n              paddingBottom: theme.spacing.lg * 3,\n            },\n          ]}\n        >\n          <ExperimentLoggedModelDetailsMetricsTable\n            loggedModel={loggedModel}\n            relatedRunsLoading={relatedRunsLoading}\n            relatedRunsData={relatedRunsData ?? undefined}\n          />\n          <DetailsOverviewParamsTable params={paramsDictionary} />\n          <ExperimentLoggedModelDetailsPageRunsTable\n            loggedModel={loggedModel}\n            relatedRunsLoading={relatedRunsLoading}\n            relatedRunsData={relatedRunsData ?? undefined}\n          />\n          {shouldRenderLinkedPromptsTable && (\n            <ExperimentLoggedModelDetailsPageLinkedPromptsTable loggedModel={loggedModel} />\n          )}\n        </div>\n      </DetailsPageLayout>\n    </ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n  );\n};\n","import type { LoggedModelProto } from '../../types';\nimport ArtifactPage from '../ArtifactPage';\n\nexport const ExperimentLoggedModelDetailsArtifacts = ({ loggedModel }: { loggedModel: LoggedModelProto }) => {\n  return (\n    <div css={{ height: '100%', overflow: 'hidden', display: 'flex' }}>\n      <ArtifactPage\n        isLoggedModelsMode\n        loggedModelId={loggedModel.info?.model_id ?? ''}\n        artifactRootUri={loggedModel?.info?.artifact_uri ?? ''}\n        useAutoHeight\n        experimentId={loggedModel?.info?.experiment_id ?? ''}\n        entityTags={loggedModel?.info?.tags}\n      />\n    </div>\n  );\n};\n","import { Alert, CopyIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { FormattedMessage } from 'react-intl';\nimport { CopyButton } from '../../../shared/building_blocks/CopyButton';\n\nexport const ExperimentLoggedModelDetailsTracesIntroductionText = ({ modelId }: { modelId: string }) => {\n  const { theme } = useDesignSystemTheme();\n  const code = `import mlflow\n          \nmlflow.set_active_model(model_id=\"${modelId}\")`;\n\n  return (\n    <>\n      <Typography.Paragraph>\n        <FormattedMessage\n          defaultMessage=\"This tab displays all the traces logged to this logged model. MLflow supports automatic tracing for many popular generative AI frameworks. Follow the steps below to log your first trace. For more information about MLflow Tracing, visit the <a>MLflow documentation</a>.\"\n          description=\"Message that explains the function of the 'Traces' tab in logged model page. This message is followed by a tutorial explaining how to get started with MLflow Tracing.\"\n          values={{\n            a: (text: string) => (\n              <Typography.Link\n                componentId=\"mlflow.logged_model.traces.traces_table.quickstart_docs_link\"\n                href=\"https://mlflow.org/docs/latest/llms/tracing/index.html\"\n                openInNewTab\n              >\n                {text}\n              </Typography.Link>\n            ),\n          }}\n        />\n      </Typography.Paragraph>\n      <Typography.Paragraph>\n        <FormattedMessage\n          defaultMessage=\"You can start logging traces to this logged model by calling {code} first:\"\n          description='Introductory text for the code example for logging traces to an existing logged model. The code contains reference to \"mlflow.set_active_model\" function call'\n          values={{\n            code: <code>mlflow.set_active_model</code>,\n          }}\n        />\n      </Typography.Paragraph>\n      <Typography.Paragraph>\n        <div css={{ position: 'relative', width: 'min-content' }}>\n          <CopyButton\n            componentId=\"mlflow.logged_model.traces.traces_table.set_active_model_quickstart_snippet_copy\"\n            css={{ zIndex: 1, position: 'absolute', top: theme.spacing.xs, right: theme.spacing.xs }}\n            showLabel={false}\n            copyText={code}\n            icon={<CopyIcon />}\n          />\n          <CodeSnippet\n            showLineNumbers\n            theme={theme.isDarkMode ? 'duotoneDark' : 'light'}\n            style={{\n              padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n            }}\n            language=\"python\"\n          >\n            {code}\n          </CodeSnippet>\n        </div>\n      </Typography.Paragraph>\n      <Typography.Paragraph>\n        <FormattedMessage\n          defaultMessage=\"Next, you can log traces to this logged model depending on your framework:\"\n          description=\"Introductory text for the code example for logging traces to an existing logged model. This part is displayed after the code example for setting the active model.\"\n        />\n      </Typography.Paragraph>\n    </>\n  );\n};\n","import { useMemo } from 'react';\nimport type { LoggedModelProto } from '../../types';\nimport { ExperimentLoggedModelDetailsTracesIntroductionText } from './ExperimentLoggedModelDetailsTracesIntroductionText';\nimport { TracesViewTableNoTracesQuickstartContextProvider } from '../traces/quickstart/TracesViewTableNoTracesQuickstartContext';\nimport { TracesV3Logs } from '../experiment-page/components/traces-v3/TracesV3Logs';\n\nexport const ExperimentLoggedModelDetailsTraces = ({ loggedModel }: { loggedModel: LoggedModelProto }) => {\n  const experimentIds = useMemo(() => [loggedModel.info?.experiment_id ?? ''], [loggedModel.info?.experiment_id]);\n\n  if (!loggedModel.info?.experiment_id) {\n    return null;\n  }\n  return (\n    <div css={{ height: '100%' }}>\n      <TracesViewTableNoTracesQuickstartContextProvider\n        introductionText={\n          loggedModel.info?.model_id && (\n            <ExperimentLoggedModelDetailsTracesIntroductionText modelId={loggedModel.info.model_id} />\n          )\n        }\n        displayVersionWarnings={false}\n      >\n        <TracesComponent experimentIds={experimentIds} loggedModelId={loggedModel.info?.model_id} />\n      </TracesViewTableNoTracesQuickstartContextProvider>\n    </div>\n  );\n};\n\nconst TracesComponent = ({\n  experimentIds,\n  loggedModelId,\n}: {\n  experimentIds: string[];\n  loggedModelId: string | undefined;\n}) => {\n  return experimentIds.length > 0 ? (\n    <TracesV3Logs experimentId={experimentIds[0]} endpointName=\"\" loggedModelId={loggedModelId} />\n  ) : null;\n};\n","import { Alert, PageWrapper, TableSkeleton, useDesignSystemTheme, Spacer } from '@databricks/design-system';\nimport invariant from 'invariant';\nimport { useParams } from '../../../common/utils/RoutingUtils';\nimport { ExperimentLoggedModelDetailsHeader } from '../../components/experiment-logged-models/ExperimentLoggedModelDetailsHeader';\nimport { ExperimentLoggedModelPageWrapper } from './ExperimentLoggedModelPageWrapper';\nimport { ExperimentLoggedModelDetailsNav } from '../../components/experiment-logged-models/ExperimentLoggedModelDetailsNav';\nimport { ExperimentLoggedModelDetailsOverview } from '../../components/experiment-logged-models/ExperimentLoggedModelDetailsOverview';\nimport { useGetLoggedModelQuery } from '../../hooks/logged-models/useGetLoggedModelQuery';\nimport { useGetExperimentQuery } from '../../hooks/useExperimentQuery';\nimport React from 'react';\nimport { ExperimentLoggedModelDetailsArtifacts } from '../../components/experiment-logged-models/ExperimentLoggedModelDetailsArtifacts';\nimport { useUserActionErrorHandler } from '@databricks/web-shared/metrics';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentLoggedModelDetailsTraces } from '../../components/experiment-logged-models/ExperimentLoggedModelDetailsTraces';\nimport { getExperimentKindFromTags } from '../../utils/ExperimentKindUtils';\n\n/**\n * Temporary \"in construction\" placeholder box, to be removed after implementing the actual content.\n */\nconst PlaceholderBox = ({ children }: { children: React.ReactNode }) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        paddingLeft: theme.spacing.md,\n        border: `4px dashed ${theme.colors.border}`,\n        marginBottom: theme.spacing.md,\n        flex: 1,\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst ExperimentLoggedModelDetailsPageImpl = () => {\n  const { experimentId, loggedModelId, tabName } = useParams();\n  const { clearUserActionError, currentUserActionError } = useUserActionErrorHandler();\n\n  invariant(experimentId, 'Experiment ID must be defined');\n  invariant(loggedModelId, 'Logged model ID must be defined');\n\n  const { theme } = useDesignSystemTheme();\n  const {\n    data: loggedModel,\n    isLoading: loggedModelLoading,\n    error: loggedModelLoadError,\n    refetch,\n  } = useGetLoggedModelQuery({ loggedModelId });\n  const {\n    data: experimentData,\n    loading: experimentLoading,\n    apiError: experimentApiError,\n    apolloError: experimentApolloError,\n  } = useGetExperimentQuery({ experimentId });\n\n  // If there is an unrecoverable error loading the model, throw it to be handled by the error boundary\n  if (loggedModelLoadError) {\n    throw loggedModelLoadError;\n  }\n\n  const experimentLoadError = experimentApiError ?? experimentApolloError;\n\n  const renderSelectedTab = () => {\n    if (loggedModelLoading) {\n      return <TableSkeleton lines={12} />;\n    }\n\n    // TODO: implement error handling\n    if (!loggedModel) {\n      return null;\n    }\n\n    if (tabName === 'traces') {\n      return <ExperimentLoggedModelDetailsTraces loggedModel={loggedModel} />;\n    } else if (tabName === 'artifacts') {\n      return <ExperimentLoggedModelDetailsArtifacts loggedModel={loggedModel} />;\n    }\n\n    const experiment = experimentData;\n    const experimentKind = getExperimentKindFromTags(experiment?.tags);\n\n    return (\n      <ExperimentLoggedModelDetailsOverview\n        onDataUpdated={refetch}\n        loggedModel={loggedModel}\n        experimentKind={experimentKind}\n      />\n    );\n  };\n\n  return (\n    <>\n      <ExperimentLoggedModelDetailsHeader\n        experimentId={experimentId}\n        experiment={experimentData}\n        loggedModel={loggedModel}\n        loading={loggedModelLoading || experimentLoading}\n        onSuccess={refetch}\n      />\n      {currentUserActionError && (\n        <Alert\n          componentId=\"mlflow.logged_model.details.user-action-error\"\n          css={{ marginBottom: theme.spacing.sm }}\n          type=\"error\"\n          message={currentUserActionError.displayMessage ?? currentUserActionError.message}\n          onClose={clearUserActionError}\n        />\n      )}\n      {experimentLoadError?.message && (\n        <Alert\n          componentId=\"mlflow.logged_model.details.experiment-error\"\n          css={{ marginBottom: theme.spacing.sm }}\n          type=\"error\"\n          message={\n            <FormattedMessage\n              defaultMessage=\"Experiment load error: {errorMessage}\"\n              description=\"Error message displayed on logged models page when experiment data fails to load\"\n              values={{ errorMessage: experimentLoadError.message }}\n            />\n          }\n          closable={false}\n        />\n      )}\n      <ExperimentLoggedModelDetailsNav experimentId={experimentId} modelId={loggedModelId} activeTabName={tabName} />\n      <div css={{ overflow: 'auto', flex: 1 }}>{renderSelectedTab()}</div>\n    </>\n  );\n};\n\nconst ExperimentLoggedModelDetailsPage = () => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <ExperimentLoggedModelPageWrapper>\n      <PageWrapper\n        css={{\n          display: 'flex',\n          overflow: 'hidden',\n          height: '100%',\n          flexDirection: 'column',\n        }}\n      >\n        <Spacer shrinks={false} />\n        <ExperimentLoggedModelDetailsPageImpl />\n        <Spacer shrinks={false} />\n      </PageWrapper>\n    </ExperimentLoggedModelPageWrapper>\n  );\n};\n\nexport default ExperimentLoggedModelDetailsPage;\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, type ButtonProps, LegacyTooltip } from '@databricks/design-system';\n\ninterface CopyButtonProps extends Partial<ButtonProps> {\n  copyText: string;\n  showLabel?: React.ReactNode;\n  componentId?: string;\n}\n\nexport const CopyButton = ({ copyText, showLabel = true, componentId, ...buttonProps }: CopyButtonProps) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(copyText);\n    setShowTooltip(true);\n    setTimeout(() => {\n      setShowTooltip(false);\n    }, 3000);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <LegacyTooltip\n      title={\n        <FormattedMessage defaultMessage=\"Copied\" description=\"Tooltip text shown when copy operation completes\" />\n      }\n      dangerouslySetAntdProps={{\n        visible: showTooltip,\n      }}\n    >\n      <Button\n        componentId={componentId ?? 'mlflow.shared.copy_button'}\n        type=\"primary\"\n        onClick={handleClick}\n        onMouseLeave={handleMouseLeave}\n        css={{ 'z-index': 1 }}\n        // Define children as a explicit prop so it can be easily overrideable\n        children={\n          showLabel ? <FormattedMessage defaultMessage=\"Copy\" description=\"Button text for copy button\" /> : undefined\n        }\n        {...buttonProps}\n      />\n    </LegacyTooltip>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getApis } from '../../experiment-tracking/reducers/Reducers';\nimport { Spinner } from './Spinner';\nimport { ErrorCodes } from '../constants';\nimport type { ErrorWrapper } from '../utils/ErrorWrapper';\nimport type { ReduxState } from '../../redux-types';\n\nexport const DEFAULT_ERROR_MESSAGE = 'A request error occurred.';\n\ntype RequestStateWrapperProps = {\n  children?: React.ReactNode;\n  customSpinner?: React.ReactNode;\n  shouldOptimisticallyRender?: boolean;\n  requests: any[];\n  requestIds?: string[];\n  requestIdsWith404sToIgnore?: string[];\n  description?: any; // TODO: PropTypes.oneOf(Object.values(LoadingDescription))\n  permissionDeniedView?: React.ReactNode;\n  suppressErrorThrow?: boolean;\n  customRequestErrorHandlerFn?: (\n    failedRequests: {\n      id: string;\n      active?: boolean;\n      error: Error | ErrorWrapper;\n    }[],\n  ) => void;\n};\n\ntype RequestStateWrapperState = any;\n\nexport class RequestStateWrapper extends Component<RequestStateWrapperProps, RequestStateWrapperState> {\n  static defaultProps = {\n    requests: [],\n    requestIdsWith404sToIgnore: [],\n    shouldOptimisticallyRender: false,\n  };\n\n  state = {\n    shouldRender: false,\n    shouldRenderError: false,\n  };\n\n  static getErrorRequests(requests: any, requestIdsWith404sToIgnore: any) {\n    return requests.filter((r: any) => {\n      if (r.error !== undefined) {\n        return !(\n          requestIdsWith404sToIgnore &&\n          requestIdsWith404sToIgnore.includes(r.id) &&\n          r.error.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST\n        );\n      }\n      return false;\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps: any) {\n    const shouldRender = nextProps.requests.length\n      ? nextProps.requests.every((r: any) => r && r.active === false)\n      : false;\n\n    const requestErrors = RequestStateWrapper.getErrorRequests(\n      nextProps.requests,\n      nextProps.requestIdsWith404sToIgnore,\n    );\n\n    return {\n      shouldRender,\n      shouldRenderError: requestErrors.length > 0,\n      requestErrors,\n    };\n  }\n\n  getRenderedContent() {\n    const { children, requests, customSpinner, permissionDeniedView, suppressErrorThrow, customRequestErrorHandlerFn } =\n      this.props;\n    // @ts-expect-error TS(2339): Property 'requestErrors' does not exist on type '{... Remove this comment to see the full error message\n    const { shouldRender, shouldRenderError, requestErrors } = this.state;\n    const permissionDeniedErrors = requestErrors.filter((failedRequest: any) => {\n      return failedRequest.error.getErrorCode() === ErrorCodes.PERMISSION_DENIED;\n    });\n\n    if (typeof children === 'function') {\n      return children(!shouldRender, shouldRenderError, requests, requestErrors);\n    } else if (shouldRender || shouldRenderError || this.props.shouldOptimisticallyRender) {\n      if (permissionDeniedErrors.length > 0 && permissionDeniedView) {\n        return permissionDeniedView;\n      }\n      if (shouldRenderError && !suppressErrorThrow) {\n        customRequestErrorHandlerFn ? customRequestErrorHandlerFn(requestErrors) : triggerError(requestErrors);\n      }\n\n      return children;\n    }\n\n    return customSpinner || <Spinner />;\n  }\n\n  render() {\n    return this.getRenderedContent();\n  }\n}\n\nexport const triggerError = (requests: any) => {\n  // This triggers the OOPS error boundary.\n  // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n  console.error('ERROR', requests);\n  throw Error(`${DEFAULT_ERROR_MESSAGE}: ${requests.error}`);\n};\n\nconst mapStateToProps = (state: ReduxState, ownProps: Omit<RequestStateWrapperProps, 'requests'>) => ({\n  requests: getApis(ownProps.requestIds, state),\n});\n\nexport default connect(mapStateToProps)(RequestStateWrapper);\n","import type { QueryHookOptions } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { gql } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { useQuery } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport type { MlflowGetExperimentQuery, MlflowGetExperimentQueryVariables } from '../../graphql/__generated__/graphql';\nimport { isArray } from 'lodash';\nimport { NotFoundError } from '@databricks/web-shared/errors';\n\nconst GET_EXPERIMENT_QUERY = gql`\n  query MlflowGetExperimentQuery($input: MlflowGetExperimentInput!) @component(name: \"MLflow.ExperimentRunTracking\") {\n    mlflowGetExperiment(input: $input) {\n      apiError {\n        code\n        message\n      }\n      experiment {\n        artifactLocation\n        creationTime\n        experimentId\n        lastUpdateTime\n        lifecycleStage\n        name\n        tags {\n          key\n          value\n        }\n      }\n    }\n  }\n`;\n\nexport type UseGetExperimentQueryResultExperiment = NonNullable<\n  MlflowGetExperimentQuery['mlflowGetExperiment']\n>['experiment'];\n\n/* eslint-disable react-hooks/rules-of-hooks */\nexport const useGetExperimentQuery = ({\n  experimentId,\n  options = {},\n}: {\n  experimentId?: string;\n  options?: QueryHookOptions<MlflowGetExperimentQuery, MlflowGetExperimentQueryVariables>;\n}) => {\n  const {\n    data,\n    loading,\n    error: apolloError,\n    refetch,\n  } = useQuery<MlflowGetExperimentQuery, MlflowGetExperimentQueryVariables>(GET_EXPERIMENT_QUERY, {\n    variables: {\n      input: {\n        experimentId,\n      },\n    },\n    skip: !experimentId,\n    ...options,\n  });\n\n  // Extract the single experiment entity from the response\n  const experimentEntity: UseGetExperimentQueryResultExperiment | undefined = data?.mlflowGetExperiment?.experiment;\n\n  const getApiError = () => {\n    return data?.mlflowGetExperiment?.apiError;\n  };\n\n  return {\n    loading,\n    data: experimentEntity,\n    refetch,\n    apolloError: apolloError,\n    apiError: getApiError(),\n  } as const;\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport {\n  Breadcrumb,\n  Button,\n  Spacer,\n  Dropdown,\n  Menu,\n  Header,\n  OverflowIcon,\n  useDesignSystemTheme,\n  type HeaderProps,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { PreviewBadge } from './PreviewBadge';\n\ntype OverflowMenuProps = {\n  menu?: {\n    id: string;\n    itemName: React.ReactNode;\n    onClick?: (...args: any[]) => any;\n    href?: string;\n  }[];\n};\n\nexport function OverflowMenu({ menu }: OverflowMenuProps) {\n  const overflowMenu = (\n    <Menu>\n      {/* @ts-expect-error TS(2532): Object is possibly 'undefined'. */}\n      {menu.map(({ id, itemName, onClick, href, ...otherProps }) => (\n        // @ts-expect-error TS(2769): No overload matches this call.\n        <Menu.Item key={id} onClick={onClick} href={href} data-testid={id} {...otherProps}>\n          {itemName}\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n\n  // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n  return menu.length > 0 ? (\n    <Dropdown overlay={overflowMenu} trigger={['click']} placement=\"bottomLeft\" arrow>\n      <Button\n        componentId=\"codegen_mlflow_app_src_shared_building_blocks_pageheader.tsx_54\"\n        icon={<OverflowIcon />}\n        data-testid=\"overflow-menu-trigger\"\n        aria-label=\"Open header dropdown menu\"\n      />\n    </Dropdown>\n  ) : null;\n}\n\ntype PageHeaderProps = Pick<HeaderProps, 'dangerouslyAppendEmotionCSS'> & {\n  title: React.ReactNode;\n  breadcrumbs?: React.ReactNode[];\n  preview?: boolean;\n  feedbackOrigin?: string;\n  infoPopover?: React.ReactNode;\n  children?: React.ReactNode;\n  spacerSize?: 'xs' | 'sm' | 'md' | 'lg';\n  hideSpacer?: boolean;\n  titleAddOns?: React.ReactNode | React.ReactNode[];\n};\n\n/**\n * A page header that includes:\n *   - title,\n *   - optional breadcrumb content,\n *   - optional preview mark,\n *   - optional feedback origin: shows the \"Send feedback\" button when not empty, and\n *   - optional info popover, safe to have link inside.\n */\nexport function PageHeader(props: PageHeaderProps) {\n  const {\n    title, // required\n    breadcrumbs = [],\n    titleAddOns = [],\n    preview,\n    children,\n    spacerSize,\n    hideSpacer = false,\n    dangerouslyAppendEmotionCSS,\n  } = props;\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  return (\n    <>\n      <Header\n        breadcrumbs={\n          breadcrumbs.length > 0 && (\n            <Breadcrumb includeTrailingCaret>\n              {breadcrumbs.map((b, i) => (\n                <Breadcrumb.Item key={i}>{b}</Breadcrumb.Item>\n              ))}\n            </Breadcrumb>\n          )\n        }\n        buttons={children}\n        title={title}\n        // prettier-ignore\n        titleAddOns={\n          <>\n            {preview && <PreviewBadge css={{ marginLeft: 0 }} />}\n            {titleAddOns}\n          </>\n        }\n        dangerouslyAppendEmotionCSS={dangerouslyAppendEmotionCSS}\n      />\n      <Spacer\n        // @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message\n        css={{\n          // Ensure spacer's fixed height\n          flexShrink: 0,\n          ...(hideSpacer ? { display: 'none' } : {}),\n        }}\n        size={spacerSize}\n      />\n    </>\n  );\n}\n","export function coerceToEnum<T extends Record<string, string>, K extends keyof T, V extends T[K] | undefined>(\n  enumObj: T,\n  value: any,\n  fallback: V,\n): V | T[keyof T] {\n  if (value === undefined || value === null || typeof value !== 'string') {\n    return fallback;\n  }\n  for (const v in enumObj) {\n    if (enumObj[v] === value) return enumObj[v];\n  }\n  return fallback;\n}\n","import type { RefObject } from 'react';\nimport { useState, useEffect } from 'react';\n\ninterface SizeMap {\n  [key: string]: number;\n}\n\nfunction useResponsiveContainer(ref: RefObject<HTMLElement>, sizeMap: SizeMap): string | null {\n  const [matchedSize, setMatchedSize] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (ref.current && sizeMap) {\n      const handleResize = () => {\n        if (!ref.current) {\n          return;\n        }\n        const elementWidth = ref.current.offsetWidth;\n        const matchedKey = Object.keys(sizeMap)\n          .filter((key) => sizeMap[key] >= elementWidth)\n          .sort((a, b) => sizeMap[a] - sizeMap[b])[0];\n\n        setMatchedSize(matchedKey);\n      };\n\n      handleResize();\n\n      const resizeObserver = new ResizeObserver(handleResize);\n      resizeObserver.observe(ref.current);\n\n      return () => resizeObserver.disconnect();\n    }\n    return undefined;\n  }, [ref, sizeMap]);\n\n  return matchedSize;\n}\n\nexport default useResponsiveContainer;\n","import { GenericSkeleton, ParagraphSkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { ReactNode } from 'react';\nimport { useRef } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport useResponsiveContainer from './useResponsiveContainer';\n\nexport interface AsideSectionProps {\n  id: string;\n  title?: ReactNode;\n  content: ReactNode;\n  isTitleLoading?: boolean;\n}\n\nexport type MaybeAsideSection = AsideSectionProps | null;\nexport type AsideSections = Array<MaybeAsideSection>;\n\nconst SIDEBAR_WIDTHS = {\n  sm: 316,\n  lg: 480,\n} as const;\nconst VERTICAL_MARGIN_PX = 16;\nconst DEFAULT_MAX_WIDTH = 450;\n\nexport const OverviewLayout = ({\n  isLoading,\n  asideSections,\n  children,\n  isTabLayout = true,\n  sidebarSize = 'sm',\n  verticalStackOrder,\n}: {\n  isLoading?: boolean;\n  asideSections: AsideSections;\n  children: ReactNode;\n  isTabLayout?: boolean;\n  sidebarSize?: 'sm' | 'lg';\n  verticalStackOrder?: 'main-first' | 'aside-first';\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const stackVertically = useResponsiveContainer(containerRef, { small: theme.responsive.breakpoints.lg }) === 'small';\n\n  // Determine vertical stack order, i.e. should the main content be on top or bottom\n  const verticalDisplayPrimaryContentOnTop = verticalStackOrder === 'main-first';\n\n  const totalSidebarWidth = SIDEBAR_WIDTHS[sidebarSize];\n  const innerSidebarWidth = totalSidebarWidth - VERTICAL_MARGIN_PX;\n\n  const secondaryStackedStyles = stackVertically\n    ? verticalDisplayPrimaryContentOnTop\n      ? { width: '100%' }\n      : { borderBottom: `1px solid ${theme.colors.border}`, width: '100%' }\n    : verticalDisplayPrimaryContentOnTop\n    ? {\n        width: innerSidebarWidth,\n      }\n    : {\n        paddingBottom: theme.spacing.sm,\n        width: innerSidebarWidth,\n      };\n\n  return (\n    <div\n      data-testid=\"entity-overview-container\"\n      ref={containerRef}\n      css={{\n        display: 'flex',\n        flexDirection: stackVertically ? (verticalDisplayPrimaryContentOnTop ? 'column' : 'column-reverse') : 'row',\n        gap: theme.spacing.lg,\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          flexGrow: 1,\n          flexDirection: 'column',\n          gap: theme.spacing.md,\n          width: stackVertically ? '100%' : `calc(100% - ${totalSidebarWidth}px)`,\n        }}\n      >\n        {isLoading ? <GenericSkeleton /> : children}\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          ...(isTabLayout && { marginTop: -theme.spacing.md }), // remove the gap between tab list and sidebar content\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.lg,\n            ...secondaryStackedStyles,\n          }}\n        >\n          {isLoading && <GenericSkeleton />}\n          {!isLoading && <SidebarWrapper secondarySections={asideSections} />}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst SidebarWrapper = ({ secondarySections }: { secondarySections: AsideSections }) => {\n  return (\n    <div>\n      {secondarySections\n        .filter((section) => section !== null)\n        .filter((section) => section?.content !== null)\n        .map(({ title, isTitleLoading, content, id }, index) => (\n          <AsideSection title={title} isTitleLoading={isTitleLoading} content={content} key={id} index={index} />\n        ))}\n    </div>\n  );\n};\n\nexport const AsideSectionTitle = ({ children }: { children: ReactNode }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Typography.Title\n      level={4}\n      style={{\n        whiteSpace: 'nowrap',\n        marginRight: theme.spacing.lg,\n        marginTop: 0,\n      }}\n    >\n      {children}\n    </Typography.Title>\n  );\n};\n\nconst AsideSection = ({\n  title,\n  content,\n  index,\n  isTitleLoading = false,\n}: Omit<AsideSectionProps, 'id'> & {\n  index: number;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const titleComponent = isTitleLoading ? (\n    <ParagraphSkeleton\n      label={\n        <FormattedMessage\n          defaultMessage=\"Section title loading\"\n          description=\"Loading skeleton label for overview page section title in Catalog Explorer\"\n        />\n      }\n    />\n  ) : title ? (\n    <AsideSectionTitle>{title}</AsideSectionTitle>\n  ) : null;\n\n  const compactStyles = { padding: `${theme.spacing.md}px 0 ${theme.spacing.md}px 0` };\n\n  return (\n    <div\n      css={{\n        ...compactStyles,\n        ...(index === 0 ? {} : { borderTop: `1px solid ${theme.colors.border}` }),\n      }}\n    >\n      {titleComponent}\n      {content}\n    </div>\n  );\n};\n\nexport const KeyValueProperty = ({\n  keyValue,\n  value,\n  maxWidth,\n}: {\n  keyValue: string;\n  value: React.ReactNode;\n  maxWidth?: number | string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      data-testid={`key-value-${keyValue}`}\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        '&:has(+ div)': {\n          marginBottom: theme.spacing.xs,\n        },\n        maxWidth: maxWidth ?? DEFAULT_MAX_WIDTH,\n        wordBreak: 'break-word',\n        lineHeight: theme.typography.lineHeightLg,\n      }}\n    >\n      <div\n        css={{\n          color: theme.colors.textSecondary,\n          flex: 0.5,\n          alignSelf: 'start',\n        }}\n      >\n        {keyValue}\n      </div>\n      <div\n        css={{\n          flex: 1,\n          alignSelf: 'start',\n          overflow: 'hidden',\n        }}\n      >\n        {value}\n      </div>\n    </div>\n  );\n};\n\nexport const NoneCell = () => {\n  return (\n    <Typography.Text color=\"secondary\">\n      <FormattedMessage defaultMessage=\"None\" description=\"Cell value when there's no content\" />\n    </Typography.Text>\n  );\n};\n","import { ExperimentKind } from '../constants';\nimport type { MessageDescriptor } from 'react-intl';\nimport { defineMessage } from 'react-intl';\nimport type { KeyValueEntity } from '../../common/types';\n\nexport const EXPERIMENT_KIND_TAG_KEY = 'mlflow.experimentKind';\n\nexport const getExperimentKindFromTags = (\n  experimentTags?:\n    | ({ __typename: 'MlflowExperimentTag'; key: string | null; value: string | null }[] | null)\n    | KeyValueEntity[],\n): ExperimentKind | undefined =>\n  experimentTags?.find((tag) => tag.key === EXPERIMENT_KIND_TAG_KEY)?.value as ExperimentKind;\n\nexport const isEditableExperimentKind = (experimentKind: ExperimentKind): boolean =>\n  experimentKind === ExperimentKind.GENAI_DEVELOPMENT_INFERRED ||\n  experimentKind === ExperimentKind.CUSTOM_MODEL_DEVELOPMENT_INFERRED ||\n  experimentKind === ExperimentKind.NO_INFERRED_TYPE ||\n  experimentKind === ExperimentKind.GENAI_DEVELOPMENT ||\n  experimentKind === ExperimentKind.CUSTOM_MODEL_DEVELOPMENT ||\n  experimentKind === ExperimentKind.EMPTY;\n\nexport const normalizeInferredExperimentKind = (experimentKind: ExperimentKind): ExperimentKind => {\n  if (experimentKind === ExperimentKind.GENAI_DEVELOPMENT_INFERRED) {\n    return ExperimentKind.GENAI_DEVELOPMENT;\n  }\n  if (experimentKind === ExperimentKind.CUSTOM_MODEL_DEVELOPMENT_INFERRED) {\n    return ExperimentKind.CUSTOM_MODEL_DEVELOPMENT;\n  }\n  return experimentKind;\n};\n\nexport const ExperimentKindDropdownLabels: Record<ExperimentKind, MessageDescriptor> = {\n  [ExperimentKind.GENAI_DEVELOPMENT]: defineMessage({\n    defaultMessage: 'GenAI apps & agents',\n    description: 'Label for experiments focused on generative AI model development',\n  }),\n  [ExperimentKind.CUSTOM_MODEL_DEVELOPMENT]: defineMessage({\n    defaultMessage: 'Machine learning',\n    description: 'Label for custom experiments focused on machine learning',\n  }),\n  [ExperimentKind.GENAI_DEVELOPMENT_INFERRED]: defineMessage({\n    defaultMessage: 'GenAI apps & agents',\n    description: 'Label for experiments automatically identified as generative AI development',\n  }),\n  [ExperimentKind.CUSTOM_MODEL_DEVELOPMENT_INFERRED]: defineMessage({\n    defaultMessage: 'Machine learning',\n    description: 'Label for custom experiments automatically identified as being focused on machine learning',\n  }),\n  [ExperimentKind.NO_INFERRED_TYPE]: defineMessage({\n    defaultMessage: 'None',\n    description: 'Label for experiments with no automatically inferred experiment type',\n  }),\n  [ExperimentKind.FINETUNING]: defineMessage({\n    defaultMessage: 'Finetuning',\n    description: 'Label for experiments focused on model finetuning',\n  }),\n  [ExperimentKind.REGRESSION]: defineMessage({\n    defaultMessage: 'Regression',\n    description: 'Label for experiments focused on regression modeling',\n  }),\n  [ExperimentKind.CLASSIFICATION]: defineMessage({\n    defaultMessage: 'Classification',\n    description: 'Label for experiments focused on classification modeling',\n  }),\n  [ExperimentKind.FORECASTING]: defineMessage({\n    defaultMessage: 'Forecasting',\n    description: 'Label for experiments focused on time series forecasting',\n  }),\n  [ExperimentKind.AUTOML]: defineMessage({\n    defaultMessage: 'AutoML',\n    description: 'Label for generic AutoML experiments',\n  }),\n  [ExperimentKind.EMPTY]: defineMessage({\n    defaultMessage: 'None',\n    description: 'Label for experiments with no experiment kind',\n  }),\n};\n\nexport const ExperimentKindShortLabels: Record<ExperimentKind, MessageDescriptor> = {\n  [ExperimentKind.GENAI_DEVELOPMENT]: defineMessage({\n    defaultMessage: 'GenAI apps & agents',\n    description: 'A short label for custom experiments focused on generative AI app and agent development',\n  }),\n  [ExperimentKind.CUSTOM_MODEL_DEVELOPMENT]: defineMessage({\n    defaultMessage: 'Machine learning',\n    description: 'A short label for custom experiments focused on machine learning',\n  }),\n  [ExperimentKind.GENAI_DEVELOPMENT_INFERRED]: defineMessage({\n    defaultMessage: 'GenAI apps & agents',\n    description:\n      'A short label for custom experiments automatically identified as being focused on generative AI app and agent development',\n  }),\n  [ExperimentKind.CUSTOM_MODEL_DEVELOPMENT_INFERRED]: defineMessage({\n    defaultMessage: 'Machine learning',\n    description: 'A short label for custom experiments automatically identified as being focused on machine learning',\n  }),\n  [ExperimentKind.NO_INFERRED_TYPE]: defineMessage({\n    defaultMessage: 'None',\n    description: 'A short label for experiments with no automatically inferred experiment type',\n  }),\n  [ExperimentKind.FINETUNING]: defineMessage({\n    defaultMessage: 'finetuning',\n    description: 'A short label for experiments focused on model finetuning',\n  }),\n  [ExperimentKind.REGRESSION]: defineMessage({\n    defaultMessage: 'regression',\n    description: 'A short label for experiments focused on regression modeling',\n  }),\n  [ExperimentKind.CLASSIFICATION]: defineMessage({\n    defaultMessage: 'classification',\n    description: 'A short label for experiments focused on classification modeling',\n  }),\n  [ExperimentKind.FORECASTING]: defineMessage({\n    defaultMessage: 'forecasting',\n    description: 'A short label for experiments focused on time series forecasting',\n  }),\n  [ExperimentKind.AUTOML]: defineMessage({\n    defaultMessage: 'AutoML',\n    description: 'A short label for generic AutoML experiments',\n  }),\n  [ExperimentKind.EMPTY]: defineMessage({\n    defaultMessage: 'None',\n    description: 'A short label for experiments with no experiment kind',\n  }),\n};\n\n// Returns list of experiment kinds that are user-selectable in the dropdown\nexport const getSelectableExperimentKinds = () => [\n  ExperimentKind.GENAI_DEVELOPMENT,\n  ExperimentKind.CUSTOM_MODEL_DEVELOPMENT,\n];\n","import type { LoggedModelProto, RunEntity } from '../../types';\nimport { useEffect, useMemo } from 'react';\nimport { compact, sortBy, uniq } from 'lodash';\nimport type { QueryFunctionContext } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { useQueries } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { MlflowService } from '../../sdk/MlflowService';\nimport { useArrayMemo } from '../../../common/hooks/useArrayMemo';\n\ntype UseRegisteredModelRelatedRunNamesQueryKey = ['USE_RELATED_RUNS_DATA_FOR_LOGGED_MODELS', { runUuid: string }];\n\nconst getQueryKey = (runUuid: string): UseRegisteredModelRelatedRunNamesQueryKey => [\n  'USE_RELATED_RUNS_DATA_FOR_LOGGED_MODELS',\n  { runUuid },\n];\n\nconst queryFn = async ({\n  queryKey: [, { runUuid }],\n}: QueryFunctionContext<UseRegisteredModelRelatedRunNamesQueryKey>): Promise<RunEntity | null> => {\n  try {\n    const data = await MlflowService.getRun({ run_id: runUuid });\n    return data?.run;\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * Hook used to fetch necessary run data based on metadata found in logged models\n */\nexport const useRelatedRunsDataForLoggedModels = ({ loggedModels = [] }: { loggedModels?: LoggedModelProto[] }) => {\n  const runUuids = useMemo(() => {\n    // Extract all run ids found in metrics and source run ids\n    const allMetricRunUuids = compact(\n      loggedModels?.flatMap((loggedModel) => loggedModel?.data?.metrics?.map((metric) => metric.run_id)),\n    );\n    const allSourceRunUuids = compact(loggedModels?.map((loggedModel) => loggedModel?.info?.source_run_id));\n    const distinctRunUuids = sortBy(uniq([...allMetricRunUuids, ...allSourceRunUuids]));\n\n    return distinctRunUuids;\n  }, [loggedModels]);\n\n  const queryResults = useQueries({\n    queries: runUuids.map((runUuid) => ({\n      queryKey: getQueryKey(runUuid),\n      queryFn,\n      cacheTime: Infinity,\n      staleTime: Infinity,\n      refetchOnWindowFocus: false,\n      retry: false,\n    })),\n  });\n\n  const loading = queryResults.some(({ isLoading }) => isLoading);\n  const error = queryResults.find(({ error }) => error)?.error as Error | undefined;\n\n  const memoizedQueryResults = useArrayMemo(queryResults.map(({ data }) => data));\n\n  const data = useMemo(\n    () => memoizedQueryResults.map((data) => data).filter(Boolean) as RunEntity[],\n    [memoizedQueryResults],\n  );\n\n  return {\n    data,\n    loading,\n    error,\n  };\n};\n","import { useRef } from 'react';\n\n/**\n * A custom hook that memoizes an array based on the reference of its elements, not the array itself.\n */\nexport function useArrayMemo<T>(array: T[]) {\n  // This holds reference to previous value\n  const ref = useRef<T[]>();\n  // Check if each element of the old and new array match\n  const areArraysConsideredTheSame =\n    ref.current && array.length === ref.current.length\n      ? array.every((element, i) => {\n          return element === ref.current?.[i];\n        })\n      : // Initially there's no old array defined/stored, so set to false\n        false;\n\n  if (!areArraysConsideredTheSame) {\n    ref.current = array;\n  }\n\n  return areArraysConsideredTheSame && ref.current ? ref.current : array;\n}\n","import { UserActionErrorHandler } from '@databricks/web-shared/metrics';\nimport { QueryClient, QueryClientProvider } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { DangerIcon, Empty, PageWrapper } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nconst PageFallback = ({ error }: { error?: Error }) => {\n  return (\n    <PageWrapper css={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <Empty\n        data-testid=\"fallback\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Error\"\n            description=\"Title for error fallback component in prompts management UI\"\n          />\n        }\n        description={\n          error?.message ?? (\n            <FormattedMessage\n              defaultMessage=\"An error occurred while rendering this component.\"\n              description=\"Description for default error message in prompts management UI\"\n            />\n          )\n        }\n        image={<DangerIcon />}\n      />\n    </PageWrapper>\n  );\n};\n\n/**\n * Wrapper for all experiment logged model pages.\n * Provides error boundaries and user action error handling.\n */\nexport const ExperimentLoggedModelPageWrapper = ({\n  children,\n  resetKey,\n}: {\n  children: React.ReactNode;\n  resetKey?: unknown;\n}) => {\n  return (\n    <ErrorBoundary FallbackComponent={PageFallback} resetKeys={[resetKey]}>\n      <UserActionErrorHandler>{children}</UserActionErrorHandler>\n    </ErrorBoundary>\n  );\n};\n","import spinner from '../static/mlflow-spinner.png';\nimport type { Interpolation, Theme } from '@emotion/react';\nimport { keyframes } from '@emotion/react';\n\ntype Props = {\n  showImmediately?: boolean;\n};\n\nexport function Spinner({ showImmediately }: Props) {\n  return (\n    <div css={(theme) => styles.spinner(theme, showImmediately)}>\n      <img alt=\"Page loading...\" src={spinner} />\n    </div>\n  );\n}\n\nconst styles = {\n  spinner: (theme: Theme, immediate?: boolean): Interpolation<Theme> => ({\n    width: 100,\n    marginTop: 100,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n\n    img: {\n      position: 'absolute',\n      opacity: 0,\n      top: '50%',\n      left: '50%',\n      width: theme.general.heightBase * 2,\n      height: theme.general.heightBase * 2,\n      marginTop: -theme.general.heightBase,\n      marginLeft: -theme.general.heightBase,\n      animation: `${keyframes`\n          0% {\n            opacity: 1;\n          }\n          100% {\n            opacity: 1;\n            -webkit-transform: rotate(360deg);\n                transform: rotate(360deg);\n            }\n          `} 3s linear infinite`,\n      animationDelay: immediate ? '0s' : '0.5s',\n    },\n  }),\n};\n"],"names":["ExperimentSourceTypeIcon","sourceType","className","SourceType","NOTEBOOK","_jsx","NotebookIcon","LOCAL","FileCodeIcon","PROJECT","FolderBranchIcon","JOB","WorkflowsIcon","module","exports","condition","format","a","b","c","d","e","f","error","undefined","Error","args","argIndex","replace","name","framesToPop","_converter","getMarkdownConverter","Converter","setFlavor","sanitizerOptions","allowedTags","allowedAttributes","img","div","sanitizeConvertedHtml","dirtyHtml","sanitizeHtml","forceAnchorTagNewTab","html","RegExp","useMarkdownConverter","useCallback","markdown","makeHtml","isUCModelName","Boolean","match","_path","_g","_path2","_path3","_defs","_extends","Object","assign","bind","n","arguments","length","t","r","hasOwnProperty","call","apply","SvgRegisteredModelGreyOk","title","titleId","props","svgRef","width","height","viewBox","fill","xmlns","ref","id","clipPath","style","maskType","maskUnits","x","y","mask","fillRule","clipRule","ForwardRef","SectionErrorBoundary","React","constructor","state","componentDidCatch","errorInfo","this","setState","console","renderErrorMessage","showServerError","_jsxs","children","message","render","css","classNames","wrapper","href","Utils","getSupportPageUrl","target","marginLeft","PreviewBadge","theme","useDesignSystemTheme","Tag","componentId","_css","spacing","xs","color","FormattedMessage","defaultMessage","getUCModelUrl","version","getWMRModelUrl","createMLflowRoutePath","useExperimentLoggedModelRegisteredVersions","loggedModels","checkAcl","modelVersions","ucModels","useMemo","flatMap","loggedModel","_getTagValueForModel","modelVersionsInTag","_loggedModel$info","_loggedModel$info$tag","_loggedModel$info$tag2","tagValue","info","tags","find","tag","key","value","JSON","parse","getTagValueForModel","map","registeredModelEntry","getUrlFn","displayedName","link","source","status","sourceLoggedModel","filter","model","aclResults","isLoading","useModelVersionsAclCheck","queries","queryResults","useQueries","some","result","modelVersion","isUCModel","hasAccess","_aclResults","JsonPreview","json","wrapperStyle","overlayStyle","codeSnippetStyle","formattedJson","isJsonContent","useFormattedJson","position","maxHeight","overflow","_Fragment","CodeSnippet","language","padding","overflowX","bottom","right","left","background","parsed","isJson","isObject","Date","stringify","_ref","styles","FormattedJsonDisplay","wrapLongLines","useValidateLoggedModelSignature","async","_loggedModel$info2","_yamlContent$signatur","_yamlContent$signatur2","model_id","artifact_uri","artifactLocation","getLoggedModelArtifactLocationUrl","MLMODEL_FILE_NAME","blob","getArtifactBlob","yamlContent","load","text","signature","inputs","outputs","ExperimentLoggedModelDetailsRegisterButton","onSuccess","intl","useIntl","handleSuccess","data","_data$value$status","_data$value","successTitle","formatMessage","displayGlobalInfoNotification","handleError","_ref2","errorTitle","ErrorWrapper","getMessageField","String","displayGlobalErrorNotification","RegisterModel","modelPath","modelRelativePath","disabled","loggedModelId","buttonType","showButton","onRegisterSuccess","onRegisterFailure","ExperimentLoggedModelDetailsHeader","experimentId","experiment","loading","modelDisplayName","navigate","useNavigate","modalElement","DeleteModalElement","openModal","useExperimentLoggedModelDeleteModal","_mutation$error","open","setOpen","useState","mutation","useMutation","mutationFn","fetchAPI","getAjaxUrl","mutate","reset","resetMutation","Modal","visible","onCancel","okText","okButtonProps","danger","onOk","cancelText","Alert","closable","type","Spacer","Routes","getExperimentPageTabRoute","ExperimentPageTabName","Models","breadcrumbs","Link","to","ExperimentLoggedModelDetailsHeaderSkeleton","PageHeader","ExperimentLoggedModelDetailsHeaderIcon","dangerouslyAppendEmotionCSS","h2","display","gap","sm","wordBreak","DropdownMenu","Root","Trigger","asChild","Button","icon","OverflowIcon","Content","align","Item","onClick","alignItems","justifyContent","backgroundColor","colors","tagDefault","general","heightSm","borderRadius","legacyBorders","borderRadiusMd","ModelsIcon","textSecondary","marginBottom","lg","GenericSkeleton","md","marginTop","ExperimentLoggedModelDetailsNav","modelId","activeTabName","NavigationMenu","List","active","getExperimentLoggedModelDetailsPageRoute","ExperimentLoggedModelDescription","onDescriptionChanged","_loggedModel$info$tag3","descriptionContent","NOTE_CONTENT_TAG","showNoteEditor","setShowDescriptionEditor","patch","usePatchLoggedModelsTags","mutateAsync","requestBody","entries","variables","useUserActionErrorHandler","isEmpty","Typography","Title","level","size","PencilIcon","Hint","EditableNote","defaultMarkdown","onSubmit","handleCancelEditDescription","showEditor","ExperimentLoggedModelDetailsTableRunCellRenderer","getValue","_getValue","runName","runId","getDirectRunPageRoute","SingleDatasetCellRenderer","datasetDigest","datasetName","ExperimentLoggedModelDatasetButton","ExperimentLoggedModelDetailsMetricsTable","relatedRunsData","relatedRunsLoading","detailsPageTableStyles","detailsPageNoEntriesStyles","useExperimentTrackingDetailsPageLayoutStyles","setFilter","metricsWithRunData","_loggedModel$data$met","_loggedModel$data","_loggedModel$data$met2","metrics","metric","_relatedRunsData$find","_relatedRunsData$find2","run","_run$info","runUuid","run_id","experiment_id","filteredMetrics","dataset_name","dataset_digest","filterLower","toLowerCase","includes","columns","accessorKey","header","enableResizing","accessorFn","cell","meta","minWidth","table","useReactTable","getCoreRowModel","getExpandedRowModel","getRowId","row","_join","join","enableColumnResizing","columnResizeMode","values","border","borderRadiusBase","flexDirection","renderTableContent","TableSkeleton","lines","Empty","description","areAllResultsFiltered","Input","prefix","SearchIcon","placeholder","onChange","allowClear","Table","element","setAttribute","scrollable","empty","TableRow","isHeader","getLeafHeaders","index","_header$column$column","TableHeader","column","setColumnSizing","isResizing","getIsResizing","flexGrow","getCanResize","columnDef","flexBasis","getSize","flexRender","getContext","getRowModel","rows","getAllCells","_cell$column$columnDe","TableCell","DatasetListCellRenderer","datasets","Overflow","ExperimentLoggedModelDetailsPageRunsTable","runsWithDatasets","allMetrics","runsByDatasets","groupBy","source_run_id","distinctDatasets","uniqBy","dataset","filteredRunsWithDatasets","_d$datasetName","multiline","PromptNameCellRenderer","_row$original","original","baseRoute","getPromptDetailsPageRoute","searchParams","URLSearchParams","set","PROMPT_VERSION_QUERY_PARAM","routeWithVersion","toString","VersionCellRenderer","_row$original2","Paragraph","withoutMargins","ExperimentLinkedPromptsTable","globalFilter","setGlobalFilter","getFilteredRowModel","onGlobalFilterChange","globalFilterFn","getShadowScrollStyles","orientation","ExperimentLoggedModelDetailsPageLinkedPromptsTable","_loggedModel$info$exp","linkedPromptsTag","MLFLOW_LINKED_PROMPTS_TAG","rawLinkedPrompts","_linkedPromptsTag$val","prompt","ExperimentLoggedModelAllDatasetsList","uniqueDatasets","reduce","aggregate","push","ExperimentLoggedModelDetailsModelVersionsList","RegisteredModelOkIcon","ExperimentLoggedModelDetailsMetadataSections","ExperimentLoggedModelDetailsOverview","onDataUpdated","experimentKind","_loggedModel$data2","shouldRenderLinkedPromptsTable","ExperimentKind","GENAI_DEVELOPMENT","relatedRunsDataError","useRelatedRunsDataForLoggedModels","relatedSourceRun","_r$info","paramsDictionary","_loggedModel$data$par","keyBy","params","detailsSectionsV2","useExperimentLoggedModelDetailsMetadataV2","_loggedModel$info2$ta","_loggedModel$info2$ta2","_loggedModel$info$mod","_loggedModel$info3","_loggedModel$info4","_loggedModel$info5","_loggedModel$info6","_loggedModel$info7","_relatedSourceRun$inf","_loggedModel$info8","_loggedModel$info$sou","_loggedModel$info9","_loggedModel$info0","_loggedModel$info1","_loggedModel$info10","_loggedModel$info11","detailsContent","KeyValueProperty","keyValue","ExperimentLoggedModelTableDateCell","creation_timestamp_ms","MLFLOW_LOGGED_MODEL_USER_TAG","ExperimentLoggedModelStatusIndicator","DetailsOverviewCopyableIdBox","getRunPageRoute","ExperimentLoggedModelSourceBox","displayDetails","paddingTop","paddingBottom","DETAILS","content","DATASETS","NoneCell","MODEL_VERSIONS","ExperimentLoggedModelOpenDatasetDetailsContextProvider","DetailsPageLayout","usingSidebarLayout","secondarySections","DetailsOverviewParamsTable","ExperimentLoggedModelDetailsArtifacts","_loggedModel$info$art","ArtifactPage","isLoggedModelsMode","artifactRootUri","useAutoHeight","entityTags","ExperimentLoggedModelDetailsTracesIntroductionText","code","openInNewTab","CopyButton","zIndex","top","showLabel","copyText","CopyIcon","showLineNumbers","isDarkMode","ExperimentLoggedModelDetailsTraces","experimentIds","TracesViewTableNoTracesQuickstartContextProvider","introductionText","displayVersionWarnings","TracesComponent","TracesV3Logs","endpointName","ExperimentLoggedModelDetailsPageImpl","_currentUserActionErr","tabName","useParams","clearUserActionError","currentUserActionError","invariant","loggedModelLoading","loggedModelLoadError","refetch","useGetLoggedModelQuery","experimentData","experimentLoading","apiError","experimentApiError","apolloError","experimentApolloError","useGetExperimentQuery","experimentLoadError","displayMessage","onClose","errorMessage","renderSelectedTab","getExperimentKindFromTags","ExperimentLoggedModelDetailsPage","ExperimentLoggedModelPageWrapper","PageWrapper","shrinks","buttonProps","showTooltip","setShowTooltip","LegacyTooltip","dangerouslySetAntdProps","handleClick","navigator","clipboard","writeText","setTimeout","onMouseLeave","handleMouseLeave","RequestStateWrapper","Component","shouldRender","shouldRenderError","getErrorRequests","requests","requestIdsWith404sToIgnore","getErrorCode","ErrorCodes","RESOURCE_DOES_NOT_EXIST","getDerivedStateFromProps","nextProps","every","requestErrors","getRenderedContent","customSpinner","permissionDeniedView","suppressErrorThrow","customRequestErrorHandlerFn","permissionDeniedErrors","failedRequest","PERMISSION_DENIED","shouldOptimisticallyRender","triggerError","Spinner","defaultProps","connect","mapStateToProps","ownProps","getApis","requestIds","GET_EXPERIMENT_QUERY","gql","options","_data$mlflowGetExperi","useQuery","input","skip","mlflowGetExperiment","getApiError","_data$mlflowGetExperi2","OverflowMenu","menu","overflowMenu","Menu","itemName","otherProps","Dropdown","overlay","trigger","placement","arrow","titleAddOns","preview","spacerSize","hideSpacer","Header","Breadcrumb","includeTrailingCaret","i","buttons","flexShrink","coerceToEnum","enumObj","fallback","v","sizeMap","matchedSize","setMatchedSize","useEffect","current","handleResize","elementWidth","offsetWidth","matchedKey","keys","sort","resizeObserver","ResizeObserver","observe","disconnect","SIDEBAR_WIDTHS","OverviewLayout","asideSections","isTabLayout","sidebarSize","verticalStackOrder","containerRef","useRef","stackVertically","useResponsiveContainer","small","responsive","breakpoints","verticalDisplayPrimaryContentOnTop","totalSidebarWidth","innerSidebarWidth","secondaryStackedStyles","borderBottom","SidebarWrapper","section","isTitleLoading","AsideSection","AsideSectionTitle","whiteSpace","marginRight","titleComponent","ParagraphSkeleton","label","compactStyles","borderTop","maxWidth","lineHeight","typography","lineHeightLg","flex","alignSelf","Text","EXPERIMENT_KIND_TAG_KEY","experimentTags","_experimentTags$find","isEditableExperimentKind","GENAI_DEVELOPMENT_INFERRED","CUSTOM_MODEL_DEVELOPMENT_INFERRED","NO_INFERRED_TYPE","CUSTOM_MODEL_DEVELOPMENT","EMPTY","normalizeInferredExperimentKind","ExperimentKindDropdownLabels","defineMessage","FINETUNING","REGRESSION","CLASSIFICATION","FORECASTING","AUTOML","ExperimentKindShortLabels","getSelectableExperimentKinds","getQueryKey","queryFn","queryKey","MlflowService","getRun","_queryResults$find","runUuids","allMetricRunUuids","compact","allSourceRunUuids","sortBy","uniq","cacheTime","Infinity","staleTime","refetchOnWindowFocus","retry","memoizedQueryResults","array","areArraysConsideredTheSame","_ref$current","useArrayMemo","PageFallback","_error$message","image","DangerIcon","resetKey","ErrorBoundary","FallbackComponent","resetKeys","UserActionErrorHandler","showImmediately","spinner","alt","src","immediate","opacity","heightBase","animation","keyframes","animationDelay"],"sourceRoot":""}