{"version":3,"file":"static/js/8455.7ea8121f.chunk.js","mappings":"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","sources":["experiment-tracking/components/run-page/RunViewArtifactTab.tsx","experiment-tracking/components/run-page/useRunViewActiveTab.tsx","experiment-tracking/components/run-page/RunViewModeSwitch.tsx","experiment-tracking/components/run-page/RunViewHeaderRegisterModelButton.tsx","experiment-tracking/components/run-page/RunViewHeader.tsx","experiment-tracking/components/run-page/overview/RunViewStatusBox.tsx","experiment-tracking/components/run-page/overview/RunViewUserLinkBox.tsx","experiment-tracking/components/run-page/overview/RunViewMetricsTable.tsx","experiment-tracking/components/run-page/overview/RunViewParentRunBox.tsx","experiment-tracking/components/run-page/overview/RunViewTagsBox.tsx","experiment-tracking/components/run-page/overview/RunViewDescriptionBox.tsx","experiment-tracking/components/run-page/overview/RunViewRegisteredModelsBox.tsx","experiment-tracking/pages/prompts/hooks/usePromptVersionsForRunQuery.tsx","experiment-tracking/components/run-page/overview/RunViewRegisteredPromptsBox.tsx","experiment-tracking/components/run-page/overview/RunViewLoggedModelsBox.tsx","experiment-tracking/components/run-page/overview/RunViewSourceBox.tsx","experiment-tracking/components/run-page/overview/RunViewLoggedModelsTable.tsx","experiment-tracking/hooks/logged-models/useCombinedRunInputsOutputsModels.tsx","experiment-tracking/components/run-page/overview/RunViewDatasetBoxV2.tsx","experiment-tracking/components/run-page/hooks/useRunDetailsPageOverviewSectionsV2.tsx","experiment-tracking/components/run-page/RunViewOverview.tsx","experiment-tracking/components/RunNotFoundView.tsx","experiment-tracking/components/run-page/RunViewChartTooltipBody.tsx","experiment-tracking/components/run-page/RunViewMetricCharts.tsx","experiment-tracking/components/experiment-page/hooks/useLoggedModelsForExperimentRunV2.tsx","experiment-tracking/components/run-page/RunPage.tsx","experiment-tracking/components/experiment-page/hooks/useLoggedModelsForExperimentRun.tsx","graphql/get-graphql-error.ts","shared/web-shared/unified-tagging/components/TagAssignmentUI/TagAssignmentRowContainer.tsx","shared/web-shared/unified-tagging/context/TagAssignmentContextProvider.tsx","shared/web-shared/unified-tagging/components/TagAssignmentRoot.tsx","shared/web-shared/unified-tagging/components/TagAssignmentRow.tsx","shared/web-shared/unified-tagging/components/TagAssignmentLabel.tsx","shared/web-shared/unified-tagging/components/TagAssignmentField/TagAssignmentInput.tsx","shared/web-shared/unified-tagging/components/TagAssignmentKey.tsx","shared/web-shared/unified-tagging/components/TagAssignmentValue.tsx","shared/web-shared/unified-tagging/components/TagAssignmentUI/TagAssignmentRemoveButtonUI.tsx","shared/web-shared/unified-tagging/components/TagAssignmentRemoveButton.tsx","shared/web-shared/unified-tagging/hooks/useTagAssignmentFieldArray.ts","shared/web-shared/unified-tagging/hooks/useTagAssignmentForm.tsx","common/components/UnifiedTaggingForm.tsx","common/hooks/useTagAssignmentModal.tsx","common/components/PageContainer.tsx","experiment-tracking/components/NotFoundPage.tsx"],"sourcesContent":["import { useDesignSystemTheme } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../../../common/types';\nimport ArtifactPage from '../ArtifactPage';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport type { UseGetRunQueryResponseOutputs } from './hooks/useGetRunQuery';\n\n/**\n * A run page tab containing the artifact browser\n */\nexport const RunViewArtifactTab = ({\n  runTags,\n  experimentId,\n  runOutputs,\n  artifactUri,\n  runUuid,\n}: {\n  runUuid: string;\n  experimentId: string;\n  artifactUri?: string;\n  runOutputs?: UseGetRunQueryResponseOutputs;\n  runTags: Record<string, KeyValueEntity>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  // Use scrollable artifact area only for non-xs screens\n  const useFullHeightPage = useMediaQuery(`(min-width: ${theme.responsive.breakpoints.sm}px)`);\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        overflow: 'hidden',\n        display: 'flex',\n        paddingBottom: theme.spacing.md,\n        position: 'relative',\n      }}\n    >\n      <ArtifactPage\n        runUuid={runUuid}\n        runTags={runTags}\n        runOutputs={runOutputs}\n        useAutoHeight={useFullHeightPage}\n        artifactRootUri={artifactUri}\n        experimentId={experimentId}\n      />\n    </div>\n  );\n};\n","import { useParams } from '../../../common/utils/RoutingUtils';\nimport { RunPageTabName } from '../../constants';\n\n/**\n * Returns the run view's active tab.\n * - Supports multi-slash artifact paths (hence '*' catch-all param)\n * - Supports both new (/artifacts/...) and previous (/artifactPath/...) routes\n */\nexport const useRunViewActiveTab = (): RunPageTabName => {\n  const { '*': tabParam } = useParams<{ '*': string }>();\n  if (tabParam === 'model-metrics') {\n    return RunPageTabName.MODEL_METRIC_CHARTS;\n  }\n  if (tabParam === 'system-metrics') {\n    return RunPageTabName.SYSTEM_METRIC_CHARTS;\n  }\n  if (tabParam === 'evaluations') {\n    return RunPageTabName.EVALUATIONS;\n  }\n  if (tabParam === 'traces') {\n    return RunPageTabName.TRACES;\n  }\n  if (tabParam?.match(/^(artifactPath|artifacts)/)) {\n    return RunPageTabName.ARTIFACTS;\n  }\n\n  return RunPageTabName.OVERVIEW;\n};\n","import { LegacyTabs, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport { RunPageTabName } from '../../constants';\nimport { useRunViewActiveTab } from './useRunViewActiveTab';\nimport { useState } from 'react';\n\n// Set of tabs that when active, the margin of the tab selector should be removed for better displaying\nconst TABS_WITHOUT_MARGIN = [RunPageTabName.ARTIFACTS, RunPageTabName.EVALUATIONS];\n\n/**\n * Mode switcher for the run details page.\n */\nexport const RunViewModeSwitch = () => {\n  const { experimentId, runUuid } = useParams<{ runUuid: string; experimentId: string }>();\n  const navigate = useNavigate();\n  const { theme } = useDesignSystemTheme();\n  const currentTab = useRunViewActiveTab();\n  const [removeTabMargin, setRemoveTabMargin] = useState(TABS_WITHOUT_MARGIN.includes(currentTab));\n\n  const onTabChanged = (newTabKey: string) => {\n    if (!experimentId || !runUuid || currentTab === newTabKey) {\n      return;\n    }\n\n    setRemoveTabMargin(TABS_WITHOUT_MARGIN.includes(newTabKey as RunPageTabName));\n\n    if (newTabKey === RunPageTabName.OVERVIEW) {\n      navigate(Routes.getRunPageRoute(experimentId, runUuid));\n      return;\n    }\n    navigate(Routes.getRunPageTabRoute(experimentId, runUuid, newTabKey));\n  };\n\n  return (\n    // @ts-expect-error TS(2322)\n    <LegacyTabs activeKey={currentTab} onChange={onTabChanged} tabBarStyle={{ margin: removeTabMargin && '0px' }}>\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage defaultMessage=\"Overview\" description=\"Run details page > tab selector > overview tab\" />\n        }\n        key={RunPageTabName.OVERVIEW}\n      />\n\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage\n            defaultMessage=\"Model metrics\"\n            description=\"Run details page > tab selector > Model metrics tab\"\n          />\n        }\n        key={RunPageTabName.MODEL_METRIC_CHARTS}\n      />\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage\n            defaultMessage=\"System metrics\"\n            description=\"Run details page > tab selector > Model metrics tab\"\n          />\n        }\n        key={RunPageTabName.SYSTEM_METRIC_CHARTS}\n      />\n      <LegacyTabs.TabPane\n        tab={<FormattedMessage defaultMessage=\"Traces\" description=\"Run details page > tab selector > Traces tab\" />}\n        key={RunPageTabName.EVALUATIONS}\n      />\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage defaultMessage=\"Artifacts\" description=\"Run details page > tab selector > artifacts tab\" />\n        }\n        key={RunPageTabName.ARTIFACTS}\n      />\n    </LegacyTabs>\n  );\n};\n","import {\n  Button,\n  ChevronDownIcon,\n  DropdownMenu,\n  NewWindowIcon,\n  Tag,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { first, last, orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { RegisterModel } from '../../../model-registry/components/RegisterModel';\nimport { ModelVersionStatusIcons } from '../../../model-registry/constants';\nimport { ModelRegistryRoutes } from '../../../model-registry/routes';\nimport Routes from '../../routes';\nimport type { ModelVersionInfoEntity } from '../../types';\nimport type { KeyValueEntity } from '../../../common/types';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../common/static/registered-model-grey-ok.svg';\nimport type { RunPageModelVersionSummary } from './hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\n\ninterface LoggedModelWithRegistrationInfo {\n  path: string;\n  absolutePath: string;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}\n\nfunction LoggedModelsDropdownContent({\n  models,\n  onRegisterClick,\n  experimentId,\n  runUuid,\n}: {\n  models: LoggedModelWithRegistrationInfo[];\n  onRegisterClick: (model: LoggedModelWithRegistrationInfo) => void;\n  experimentId: string;\n  runUuid: string;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const renderSection = (title: string, sectionModels: LoggedModelWithRegistrationInfo[]) => {\n    return (\n      <DropdownMenu.Group>\n        <DropdownMenu.Label>{title}</DropdownMenu.Label>\n        {sectionModels.map((model) => {\n          const registeredModelSummary = first(model.registeredModelVersionSummaries);\n          if (!registeredModelSummary) {\n            return (\n              <DropdownMenu.Item\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_50\"\n                onClick={() => onRegisterClick(model)}\n                key={model.absolutePath}\n              >\n                <div css={{ marginRight: theme.spacing.md }}>{last(model.path.split('/'))}</div>\n                <DropdownMenu.HintColumn>\n                  <Link\n                    target=\"_blank\"\n                    to={Routes.getRunPageTabRoute(experimentId, runUuid, 'artifacts/' + model.path)}\n                  >\n                    <Button\n                      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_58\"\n                      type=\"link\"\n                      size=\"small\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                      }}\n                      endIcon={<NewWindowIcon />}\n                    >\n                      <FormattedMessage\n                        defaultMessage=\"View model\"\n                        description=\"Run page > Header > Register model dropdown > View model button label\"\n                      />\n                    </Button>\n                  </Link>\n                </DropdownMenu.HintColumn>\n              </DropdownMenu.Item>\n            );\n          }\n          const { status, displayedName, version, link } = registeredModelSummary;\n\n          return (\n            <Link target=\"_blank\" to={link} key={model.absolutePath}>\n              <DropdownMenu.Item componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_80\">\n                <DropdownMenu.IconWrapper css={{ display: 'flex', alignItems: 'center' }}>\n                  {status === 'READY' ? <RegisteredModelOkIcon /> : status ? ModelVersionStatusIcons[status] : null}\n                </DropdownMenu.IconWrapper>\n                <span css={{ marginRight: theme.spacing.md }}>\n                  {displayedName}\n                  <Tag\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_90\"\n                    css={{ marginLeft: 8, marginRight: 4 }}\n                  >\n                    v{version}\n                  </Tag>\n                </span>\n                <DropdownMenu.HintColumn>\n                  <Button\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_89\"\n                    type=\"link\"\n                    size=\"small\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                    }}\n                    endIcon={<NewWindowIcon />}\n                  >\n                    <FormattedMessage\n                      defaultMessage=\"Go to model\"\n                      description=\"Run page > Header > Register model dropdown > Go to model button label\"\n                    />\n                  </Button>\n                </DropdownMenu.HintColumn>\n              </DropdownMenu.Item>\n            </Link>\n          );\n        })}\n      </DropdownMenu.Group>\n    );\n  };\n  const registeredModels = models.filter((model) => model.registeredModelVersionSummaries.length > 0);\n  const unregisteredModels = models.filter((model) => !model.registeredModelVersionSummaries.length);\n  return (\n    <>\n      {unregisteredModels.length ? renderSection('Unregistered models', unregisteredModels) : null}\n      {unregisteredModels.length && registeredModels.length ? <DropdownMenu.Separator /> : null}\n      {registeredModels.length ? renderSection('Registered models', registeredModels) : null}\n    </>\n  );\n}\n\nconst getRegisteredModelVersionLink = (modelVersion: ModelVersionInfoEntity) => {\n  const { name, version } = modelVersion;\n  return ModelRegistryRoutes.getModelVersionPageRoute(name, version);\n};\n\nexport const RunViewHeaderRegisterModelButton = ({\n  runUuid,\n  experimentId,\n  runTags,\n  artifactRootUri,\n  registeredModelVersionSummaries,\n}: {\n  runUuid: string;\n  experimentId: string;\n  runTags: Record<string, KeyValueEntity>;\n  artifactRootUri?: string;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const loggedModelPaths = useMemo(\n    () => (runTags ? Utils.getLoggedModelsFromTags(runTags).map(({ artifactPath }) => artifactPath) : []),\n    [runTags],\n  );\n\n  const models = useMemo<LoggedModelWithRegistrationInfo[]>(\n    () =>\n      orderBy(\n        loggedModelPaths.map((path) => ({\n          path,\n          absolutePath: `${artifactRootUri}/${path}`,\n          registeredModelVersionSummaries:\n            registeredModelVersionSummaries?.filter(({ source }) => source === `${artifactRootUri}/${path}`) || [],\n        })),\n        (model) => parseInt(model.registeredModelVersionSummaries[0]?.version || '0', 10),\n        'desc',\n      ),\n    [loggedModelPaths, registeredModelVersionSummaries, artifactRootUri],\n  );\n\n  const [selectedModelToRegister, setSelectedModelToRegister] = useState<LoggedModelWithRegistrationInfo | null>(null);\n\n  if (models.length > 1) {\n    const modelsRegistered = models.filter((model) => model.registeredModelVersionSummaries.length > 0);\n\n    return (\n      <>\n        {selectedModelToRegister && (\n          <RegisterModel\n            runUuid={runUuid}\n            modelPath={selectedModelToRegister.absolutePath}\n            modelRelativePath={selectedModelToRegister.path}\n            disabled={false}\n            showButton={false}\n            modalVisible\n            onCloseModal={() => setSelectedModelToRegister(null)}\n          />\n        )}\n        <DropdownMenu.Root modal={false}>\n          <LegacyTooltip\n            placement=\"bottom\"\n            title={\n              <FormattedMessage\n                defaultMessage=\"{registeredCount}/{loggedCount} logged models are registered\"\n                description=\"Run page > Header > Register model dropdown > Button tooltip\"\n                values={{ registeredCount: modelsRegistered.length, loggedCount: models.length }}\n              />\n            }\n          >\n            <DropdownMenu.Trigger asChild>\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_195\"\n                type=\"primary\"\n                endIcon={<ChevronDownIcon />}\n              >\n                <FormattedMessage\n                  defaultMessage=\"Register model\"\n                  description=\"Run page > Header > Register model dropdown > Button label when some models are not registered\"\n                />\n              </Button>\n            </DropdownMenu.Trigger>\n          </LegacyTooltip>\n          <DropdownMenu.Content align=\"end\">\n            <LoggedModelsDropdownContent\n              models={models}\n              onRegisterClick={setSelectedModelToRegister}\n              experimentId={experimentId}\n              runUuid={runUuid}\n            />\n          </DropdownMenu.Content>\n        </DropdownMenu.Root>\n      </>\n    );\n  }\n\n  const singleModel = first(models);\n\n  if (!singleModel) {\n    return null;\n  }\n\n  const registeredModelVersionSummary = first(singleModel.registeredModelVersionSummaries);\n\n  if (registeredModelVersionSummary) {\n    return (\n      <Link to={registeredModelVersionSummary.link} target=\"_blank\" css={{ marginLeft: theme.spacing.sm }}>\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_231\"\n          endIcon={<NewWindowIcon />}\n          type=\"link\"\n        >\n          Model registered\n        </Button>\n      </Link>\n    );\n  }\n  return (\n    <RegisterModel\n      disabled={false}\n      runUuid={runUuid}\n      modelPath={singleModel.absolutePath}\n      modelRelativePath={singleModel.path}\n      showButton\n      buttonType=\"primary\"\n    />\n  );\n};\n","import { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { OverflowMenu, PageHeader } from '../../../shared/building_blocks/PageHeader';\nimport Routes, { PageId as ExperimentTrackingPageId } from '../../routes';\nimport type { ExperimentEntity } from '../../types';\nimport type { KeyValueEntity } from '../../../common/types';\nimport { RunViewModeSwitch } from './RunViewModeSwitch';\nimport Utils from '../../../common/utils/Utils';\nimport { RunViewHeaderRegisterModelButton } from './RunViewHeaderRegisterModelButton';\nimport type { UseGetRunQueryResponseExperiment, UseGetRunQueryResponseOutputs } from './hooks/useGetRunQuery';\nimport type { RunPageModelVersionSummary } from './hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\nimport { ExperimentKind } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { ExperimentPageTabName } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { EXPERIMENT_KIND_TAG_KEY } from '../../utils/ExperimentKindUtils';\nimport { useMemo } from 'react';\n\n/**\n * Run details page header component, common for all page view modes\n */\nexport const RunViewHeader = ({\n  hasComparedExperimentsBefore,\n  comparedExperimentIds = [],\n  experiment,\n  runDisplayName,\n  runTags,\n  runParams,\n  runUuid,\n  runOutputs,\n  handleRenameRunClick,\n  handleDeleteRunClick,\n  artifactRootUri,\n  registeredModelVersionSummaries,\n  isLoading,\n}: {\n  hasComparedExperimentsBefore?: boolean;\n  comparedExperimentIds?: string[];\n  runDisplayName: string;\n  runUuid: string;\n  runOutputs?: UseGetRunQueryResponseOutputs | null;\n  runTags: Record<string, KeyValueEntity>;\n  runParams: Record<string, KeyValueEntity>;\n  experiment: ExperimentEntity | UseGetRunQueryResponseExperiment;\n  handleRenameRunClick: () => void;\n  handleDeleteRunClick?: () => void;\n  artifactRootUri?: string;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n  isLoading?: boolean;\n}) => {\n  const shouldRouteToEvaluations = useMemo(() => {\n    const isGenAIExperiment =\n      experiment.tags?.find((tag) => tag.key === EXPERIMENT_KIND_TAG_KEY)?.value === ExperimentKind.GENAI_DEVELOPMENT;\n    const hasModelOutputs = runOutputs && runOutputs.modelOutputs ? runOutputs.modelOutputs.length > 0 : false;\n    return isGenAIExperiment && !hasModelOutputs;\n  }, [experiment, runOutputs]);\n\n  const experimentPageTabRoute = Routes.getExperimentPageTabRoute(\n    experiment.experimentId ?? '',\n    shouldRouteToEvaluations ? ExperimentPageTabName.EvaluationRuns : ExperimentPageTabName.Runs,\n  );\n\n  function getExperimentPageLink() {\n    return hasComparedExperimentsBefore && comparedExperimentIds ? (\n      <Link to={Routes.getCompareExperimentsPageRoute(comparedExperimentIds)}>\n        <FormattedMessage\n          defaultMessage=\"Displaying Runs from {numExperiments} Experiments\"\n          // eslint-disable-next-line max-len\n          description=\"Breadcrumb nav item to link to the compare-experiments page on compare runs page\"\n          values={{\n            numExperiments: comparedExperimentIds.length,\n          }}\n        />\n      </Link>\n    ) : (\n      <Link to={experimentPageTabRoute} data-testid=\"experiment-runs-link\">\n        {experiment.name}\n      </Link>\n    );\n  }\n\n  const breadcrumbs = [getExperimentPageLink()];\n  if (experiment.experimentId) {\n    breadcrumbs.push(\n      <Link to={experimentPageTabRoute} data-testid=\"experiment-observatory-link-runs\">\n        {shouldRouteToEvaluations ? (\n          <FormattedMessage\n            defaultMessage=\"Evaluations\"\n            description=\"Breadcrumb nav item to link to the evaluations tab on the parent experiment\"\n          />\n        ) : (\n          <FormattedMessage\n            defaultMessage=\"Runs\"\n            description=\"Breadcrumb nav item to link to the runs tab on the parent experiment\"\n          />\n        )}\n      </Link>,\n    );\n  }\n\n  const renderRegisterModelButton = () => {\n    return (\n      <RunViewHeaderRegisterModelButton\n        runUuid={runUuid}\n        experimentId={experiment?.experimentId ?? ''}\n        runTags={runTags}\n        artifactRootUri={artifactRootUri}\n        registeredModelVersionSummaries={registeredModelVersionSummaries}\n      />\n    );\n  };\n\n  return (\n    <div css={{ flexShrink: 0 }}>\n      <PageHeader\n        title={<span data-testid=\"runs-header\">{runDisplayName}</span>}\n        breadcrumbs={breadcrumbs}\n        /* prettier-ignore */\n      >\n        <OverflowMenu\n          menu={[\n            {\n              id: 'overflow-rename-button',\n              onClick: handleRenameRunClick,\n              itemName: (\n                <FormattedMessage defaultMessage=\"Rename\" description=\"Menu item to rename an experiment run\" />\n              ),\n            },\n            ...(handleDeleteRunClick\n              ? [\n                  {\n                    id: 'overflow-delete-button',\n                    onClick: handleDeleteRunClick,\n                    itemName: (\n                      <FormattedMessage defaultMessage=\"Delete\" description=\"Menu item to delete an experiment run\" />\n                    ),\n                  },\n                ]\n              : []),\n          ]}\n        />\n\n        {renderRegisterModelButton()}\n      </PageHeader>\n      <RunViewModeSwitch />\n    </div>\n  );\n};\n","import { Tag, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { RunInfoEntity } from '../../../types';\nimport { RunStatusIcon } from '../../RunStatusIcon';\nimport { FormattedMessage } from 'react-intl';\nimport type { MlflowRunStatus } from '../../../../graphql/__generated__/graphql';\n\n/**\n * Displays run status cell in run detail overview.\n */\nexport const RunViewStatusBox = ({ status }: { status: RunInfoEntity['status'] | MlflowRunStatus | null }) => {\n  const { theme } = useDesignSystemTheme();\n  const getTagColor = () => {\n    if (status === 'FINISHED') {\n      return theme.isDarkMode ? theme.colors.green800 : theme.colors.green100;\n    }\n    if (status === 'KILLED' || status === 'FAILED') {\n      return theme.isDarkMode ? theme.colors.red800 : theme.colors.red100;\n    }\n    if (status === 'SCHEDULED' || status === 'RUNNING') {\n      return theme.isDarkMode ? theme.colors.blue800 : theme.colors.blue100;\n    }\n\n    return undefined;\n  };\n\n  const getStatusLabel = () => {\n    if (status === 'FINISHED') {\n      return (\n        <Typography.Text color=\"success\">\n          <FormattedMessage\n            defaultMessage=\"Finished\"\n            description=\"Run page > Overview > Run status cell > Value for finished state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'KILLED') {\n      return (\n        <Typography.Text color=\"error\">\n          <FormattedMessage\n            defaultMessage=\"Killed\"\n            description=\"Run page > Overview > Run status cell > Value for killed state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'FAILED') {\n      return (\n        <Typography.Text color=\"error\">\n          <FormattedMessage\n            defaultMessage=\"Failed\"\n            description=\"Run page > Overview > Run status cell > Value for failed state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'RUNNING') {\n      return (\n        <Typography.Text color=\"info\">\n          <FormattedMessage\n            defaultMessage=\"Running\"\n            description=\"Run page > Overview > Run status cell > Value for running state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'SCHEDULED') {\n      return (\n        <Typography.Text color=\"info\">\n          <FormattedMessage\n            defaultMessage=\"Scheduled\"\n            description=\"Run page > Overview > Run status cell > Value for scheduled state\"\n          />\n        </Typography.Text>\n      );\n    }\n    return status;\n  };\n\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewstatusbox.tsx_81\"\n      css={{ backgroundColor: getTagColor() }}\n    >\n      {status && <RunStatusIcon status={status} />}{' '}\n      <Typography.Text css={{ marginLeft: theme.spacing.sm }}>{getStatusLabel()}</Typography.Text>\n    </Tag>\n  );\n};\n","import { Link } from '../../../../common/utils/RoutingUtils';\nimport Utils from '../../../../common/utils/Utils';\nimport Routes from '../../../routes';\nimport type { RunInfoEntity } from '../../../types';\nimport type { KeyValueEntity } from '../../../../common/types';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\nexport const RunViewUserLinkBox = ({\n  runInfo,\n  tags,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n}) => {\n  const user = Utils.getUser(runInfo, tags);\n  return <Link to={Routes.searchRunsByUser(runInfo?.experimentId ?? '', user)}>{user}</Link>;\n};\n","import {\n  Empty,\n  Input,\n  Overflow,\n  SearchIcon,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport type { LoggedModelProto, MetricEntitiesByName, MetricEntity, RunInfoEntity } from '../../../types';\nimport { compact, flatMap, groupBy, isEmpty, keyBy, mapValues, sum, values } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { RunPageTabName } from '../../../constants';\nimport { FormattedMessage, defineMessages, useIntl } from 'react-intl';\nimport { isSystemMetricKey } from '../../../utils/MetricsUtils';\nimport type { ColumnDef, Table as TableDef } from '@tanstack/react-table';\nimport { flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\nimport { isUndefined } from 'lodash';\nimport { useExperimentTrackingDetailsPageLayoutStyles } from '../../../hooks/useExperimentTrackingDetailsPageLayoutStyles';\n\nconst { systemMetricsLabel, modelMetricsLabel } = defineMessages({\n  systemMetricsLabel: {\n    defaultMessage: 'System metrics',\n    description: 'Run page > Overview > Metrics table > System charts section > title',\n  },\n  modelMetricsLabel: {\n    defaultMessage: 'Model metrics',\n    description: 'Run page > Overview > Metrics table > Model charts section > title',\n  },\n});\n\nconst metricKeyMatchesFilter =\n  (filter: string) =>\n  ({ key }: MetricEntity) =>\n    key.toLowerCase().includes(filter.toLowerCase());\n\ninterface MetricEntityWithLoggedModels extends MetricEntity {\n  loggedModels?: LoggedModelProto[];\n}\n\nconst RunViewMetricsTableSection = ({\n  metricsList,\n  runInfo,\n  header,\n  table,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  metricsList: MetricEntityWithLoggedModels[];\n  header?: React.ReactNode;\n  table: TableDef<MetricEntityWithLoggedModels>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [{ column: keyColumn }, ...otherColumns] = table.getLeafHeaders();\n\n  const valueColumn = otherColumns.find((column) => column.id === 'value')?.column;\n\n  const anyRowHasModels = metricsList.some(({ loggedModels }) => !isEmpty(loggedModels));\n  const modelColumn = otherColumns.find((column) => column.id === 'models')?.column;\n\n  return metricsList.length ? (\n    <>\n      {header && (\n        <TableRow>\n          <TableCell css={{ flex: 1, backgroundColor: theme.colors.backgroundSecondary }}>\n            <Typography.Text bold>\n              {header} ({metricsList.length})\n            </Typography.Text>\n          </TableCell>\n        </TableRow>\n      )}\n      {metricsList.map(\n        ({\n          // Get metric key and value to display in table\n          key,\n          value,\n          loggedModels,\n        }) => (\n          <TableRow key={key}>\n            <TableCell\n              style={{\n                flex: keyColumn.getCanResize() ? keyColumn.getSize() / 100 : undefined,\n              }}\n            >\n              <Link\n                to={Routes.getRunPageTabRoute(\n                  runInfo.experimentId ?? '',\n                  runInfo.runUuid ?? '',\n                  RunPageTabName.MODEL_METRIC_CHARTS,\n                )}\n              >\n                {key}\n              </Link>\n            </TableCell>\n            <TableCell\n              css={{\n                flex: valueColumn?.getCanResize() ? valueColumn.getSize() / 100 : undefined,\n              }}\n            >\n              {value.toString()}\n            </TableCell>\n            {anyRowHasModels && (\n              <TableCell\n                css={{\n                  flex: modelColumn?.getCanResize() ? modelColumn.getSize() / 100 : undefined,\n                }}\n              >\n                {!isEmpty(loggedModels) ? (\n                  <Overflow>\n                    {loggedModels?.map((model) => (\n                      <Link\n                        key={model.info?.model_id}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        to={Routes.getExperimentLoggedModelDetailsPage(\n                          model.info?.experiment_id ?? '',\n                          model.info?.model_id ?? '',\n                        )}\n                      >\n                        {model.info?.name}\n                      </Link>\n                    ))}\n                  </Overflow>\n                ) : (\n                  '-'\n                )}\n              </TableCell>\n            )}\n          </TableRow>\n        ),\n      )}\n    </>\n  ) : null;\n};\n\n/**\n * Displays table with metrics key/values in run detail overview.\n */\nexport const RunViewMetricsTable = ({\n  latestMetrics,\n  runInfo,\n  loggedModels,\n}: {\n  latestMetrics: MetricEntitiesByName;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  loggedModels?: LoggedModelProto[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { detailsPageTableStyles, detailsPageNoEntriesStyles } = useExperimentTrackingDetailsPageLayoutStyles();\n  const intl = useIntl();\n  const [filter, setFilter] = useState('');\n\n  /**\n   * Aggregate logged models by metric key.\n   * This is used to display the models associated with each metric in the table.\n   */\n  const loggedModelsByMetricKey = useMemo(() => {\n    if (!loggedModels) {\n      return {};\n    }\n    const metricsWithModels = compact(\n      flatMap(loggedModels, (model) => model.data?.metrics?.map(({ key }) => ({ key, model }))),\n    );\n    const groupedMetrics = groupBy(metricsWithModels, 'key');\n    return mapValues(groupedMetrics, (group) => group.map(({ model }) => model));\n  }, [loggedModels]);\n\n  /**\n   * Enrich the metric list with related logged models.\n   */\n  const metricValues = useMemo<MetricEntityWithLoggedModels[]>(() => {\n    const metricList = values(latestMetrics);\n\n    if (isEmpty(loggedModelsByMetricKey)) {\n      return metricList;\n    }\n    return metricList.map((metric) => ({\n      ...metric,\n      loggedModels: loggedModelsByMetricKey[metric.key] ?? [],\n    }));\n  }, [latestMetrics, loggedModelsByMetricKey]);\n\n  const anyRowHasModels = metricValues.some(({ loggedModels }) => !isEmpty(loggedModels));\n\n  const modelColumnDefs: ColumnDef<MetricEntityWithLoggedModels>[] = useMemo(\n    () => [\n      {\n        id: 'models',\n        header: intl.formatMessage({\n          defaultMessage: 'Models',\n          description: 'Run page > Overview > Metrics table > Models column header',\n        }),\n        accessorKey: 'models',\n        enableResizing: true,\n      },\n    ],\n    [intl],\n  );\n\n  const columns = useMemo(() => {\n    const columnDefs: ColumnDef<MetricEntityWithLoggedModels>[] = [\n      {\n        id: 'key',\n        accessorKey: 'key',\n        header: () => (\n          <FormattedMessage\n            defaultMessage=\"Metric\"\n            description=\"Run page > Overview > Metrics table > Key column header\"\n          />\n        ),\n        enableResizing: true,\n        size: 240,\n      },\n      {\n        id: 'value',\n        header: () => (\n          <FormattedMessage\n            defaultMessage=\"Value\"\n            description=\"Run page > Overview > Metrics table > Value column header\"\n          />\n        ),\n        accessorKey: 'value',\n        enableResizing: true,\n      },\n    ];\n\n    if (anyRowHasModels) {\n      columnDefs.push(...modelColumnDefs);\n    }\n\n    return columnDefs;\n  }, [anyRowHasModels, modelColumnDefs]);\n\n  // Break down metric lists into system and model segments. If no system (or model) metrics\n  // are detected, return a single segment.\n  const metricSegments = useMemo(() => {\n    const systemMetrics = metricValues.filter(({ key }) => isSystemMetricKey(key));\n    const modelMetrics = metricValues.filter(({ key }) => !isSystemMetricKey(key));\n    const isSegmented = systemMetrics.length > 0 && modelMetrics.length > 0;\n    if (!isSegmented) {\n      return [{ header: undefined, metrics: metricValues.filter(metricKeyMatchesFilter(filter)) }];\n    }\n    return [\n      {\n        header: intl.formatMessage(systemMetricsLabel),\n        metrics: systemMetrics.filter(metricKeyMatchesFilter(filter)),\n      },\n      {\n        header: intl.formatMessage(modelMetricsLabel),\n        metrics: modelMetrics.filter(metricKeyMatchesFilter(filter)),\n      },\n    ];\n  }, [filter, metricValues, intl]);\n\n  const table = useReactTable<MetricEntity>({\n    data: metricValues,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (row) => row.key,\n    enableColumnResizing: true,\n    columnResizeMode: 'onChange',\n    columns,\n  });\n\n  const renderTableContent = () => {\n    if (!metricValues.length) {\n      return (\n        <div css={detailsPageNoEntriesStyles}>\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage=\"No metrics recorded\"\n                description=\"Run page > Overview > Metrics table > No metrics recorded\"\n              />\n            }\n          />\n        </div>\n      );\n    }\n\n    const areAllResultsFiltered = sum(metricSegments.map(({ metrics }) => metrics.length)) < 1;\n\n    return (\n      <>\n        <div css={{ marginBottom: theme.spacing.sm }}>\n          <Input\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewmetricstable.tsx_186\"\n            prefix={<SearchIcon />}\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Search metrics',\n              description: 'Run page > Overview > Metrics table > Filter input placeholder',\n            })}\n            value={filter}\n            onChange={(e) => setFilter(e.target.value)}\n            allowClear\n          />\n        </div>\n\n        <Table\n          scrollable\n          empty={\n            areAllResultsFiltered ? (\n              <div>\n                <Empty\n                  description={\n                    <FormattedMessage\n                      defaultMessage=\"No metrics match the search filter\"\n                      description=\"Message displayed when no metrics match the search filter in the run details page details metrics table\"\n                    />\n                  }\n                />\n              </div>\n            ) : null\n          }\n          css={detailsPageTableStyles}\n        >\n          <TableRow isHeader>\n            {table.getLeafHeaders().map((header) => (\n              <TableHeader\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewmetricstable.tsx_312\"\n                key={header.id}\n                header={header}\n                column={header.column}\n                setColumnSizing={table.setColumnSizing}\n                isResizing={header.column.getIsResizing()}\n                style={{\n                  flex: header.column.getCanResize() ? header.column.getSize() / 100 : undefined,\n                }}\n              >\n                {flexRender(header.column.columnDef.header, header.getContext())}\n              </TableHeader>\n            ))}\n          </TableRow>\n          {metricSegments.map((segment, index) => (\n            <RunViewMetricsTableSection\n              key={segment.header || index}\n              metricsList={segment.metrics}\n              runInfo={runInfo}\n              header={segment.header}\n              table={table}\n            />\n          ))}\n        </Table>\n      </>\n    );\n  };\n  return (\n    <div\n      css={{\n        flex: '0 0 auto',\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n      }}\n    >\n      <Typography.Title level={4} css={{ flexShrink: 0 }}>\n        <FormattedMessage\n          defaultMessage=\"Metrics ({length})\"\n          description=\"Run page > Overview > Metrics table > Section title\"\n          values={{ length: metricValues.filter(metricKeyMatchesFilter(filter)).length }}\n        />\n      </Typography.Title>\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.borderDecorative}`,\n          borderRadius: theme.general.borderRadiusBase,\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          overflow: 'hidden',\n        }}\n      >\n        {renderTableContent()}\n      </div>\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport type { ReduxState, ThunkDispatch } from '../../../../redux-types';\nimport { useEffect, useMemo } from 'react';\nimport { getRunApi } from '../../../actions';\nimport { ParagraphSkeleton } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { FormattedMessage } from 'react-intl';\nimport { shouldEnableGraphQLRunDetailsPage } from '../../../../common/utils/FeatureUtils';\nimport { useGetRunQuery } from '../hooks/useGetRunQuery';\n\nexport const RunViewParentRunBox = ({ parentRunUuid }: { parentRunUuid: string }) => {\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const parentRunInfoRedux = useSelector(({ entities }: ReduxState) => {\n    return entities.runInfosByUuid[parentRunUuid];\n  });\n\n  const parentRunInfoGraphql = useGetRunQuery({\n    runUuid: parentRunUuid,\n    disabled: !shouldEnableGraphQLRunDetailsPage(),\n  });\n\n  const parentRunInfo = useMemo(() => {\n    return shouldEnableGraphQLRunDetailsPage() ? parentRunInfoGraphql?.data?.info : parentRunInfoRedux;\n  }, [parentRunInfoGraphql, parentRunInfoRedux]);\n\n  useEffect(() => {\n    // Don't call REST API if GraphQL is enabled\n    if (shouldEnableGraphQLRunDetailsPage()) {\n      return;\n    }\n    if (!parentRunInfo) {\n      dispatch(getRunApi(parentRunUuid));\n    }\n  }, [dispatch, parentRunUuid, parentRunInfo]);\n\n  if (!parentRunInfo) {\n    return (\n      <ParagraphSkeleton\n        loading\n        label={\n          <FormattedMessage\n            defaultMessage=\"Parent run name loading\"\n            description=\"Run page > Overview > Parent run name loading\"\n          />\n        }\n      />\n    );\n  }\n\n  if (!parentRunInfo.experimentId || !parentRunInfo.runUuid) {\n    return null;\n  }\n\n  return (\n    <Link to={Routes.getRunPageRoute(parentRunInfo.experimentId, parentRunInfo.runUuid)}>{parentRunInfo.runName}</Link>\n  );\n};\n","import { Button, PencilIcon, Spinner, Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { shouldUseSharedTaggingUI } from '../../../../common/utils/FeatureUtils';\nimport { useEditKeyValueTagsModal } from '../../../../common/hooks/useEditKeyValueTagsModal';\nimport { useTagAssignmentModal } from '../../../../common/hooks/useTagAssignmentModal';\nimport type { KeyValueEntity } from '../../../../common/types';\nimport { KeyValueTag } from '../../../../common/components/KeyValueTag';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { keys, values } from 'lodash';\nimport { useDispatch } from 'react-redux';\nimport type { ThunkDispatch } from '../../../../redux-types';\nimport { setRunTagsBulkApi, saveRunTagsApi } from '../../../actions';\nimport { useMemo, useState } from 'react';\nimport { isUserFacingTag } from '../../../../common/utils/TagUtils';\n\n/**\n * Displays run tags cell in run detail overview.\n */\nexport const RunViewTagsBox = ({\n  runUuid,\n  tags,\n  onTagsUpdated,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  onTagsUpdated: () => void;\n}) => {\n  const sharedTaggingUIEnabled = shouldUseSharedTaggingUI();\n\n  const [isSavingTags, setIsSavingTags] = useState(false);\n\n  const { theme } = useDesignSystemTheme();\n  const dispatch = useDispatch<ThunkDispatch>();\n  const intl = useIntl();\n\n  // Get keys and tag entities while excluding system tags\n  const [visibleTagKeys, visibleTagEntities] = useMemo(\n    () => [keys(tags).filter(isUserFacingTag), values(tags).filter(({ key }) => isUserFacingTag(key))],\n    [tags],\n  );\n\n  const tagsKeyValueMap: KeyValueEntity[] = visibleTagEntities.map(({ key, value }) => ({ key, value }));\n\n  const { TagAssignmentModal, showTagAssignmentModal } = useTagAssignmentModal({\n    componentIdPrefix: 'mlflow.run-view-tags-box',\n    initialTags: tagsKeyValueMap,\n    isLoading: isSavingTags,\n    onSubmit: (newTags: KeyValueEntity[], deletedTags: KeyValueEntity[]) => {\n      setIsSavingTags(true);\n      return dispatch(saveRunTagsApi(runUuid, newTags, deletedTags)).then(() => {\n        setIsSavingTags(false);\n      });\n    },\n    onSuccess: onTagsUpdated,\n  });\n\n  const { EditTagsModal, showEditTagsModal, isLoading } = useEditKeyValueTagsModal({\n    valueRequired: true,\n    allAvailableTags: visibleTagKeys,\n    saveTagsHandler: async (_, existingTags, newTags) =>\n      dispatch(setRunTagsBulkApi(runUuid, existingTags, newTags)).then(onTagsUpdated),\n  });\n\n  const showEditModal = () => {\n    if (sharedTaggingUIEnabled) {\n      showTagAssignmentModal();\n      return;\n    }\n\n    showEditTagsModal({ tags: visibleTagEntities });\n  };\n\n  const editTagsLabel = intl.formatMessage({\n    defaultMessage: 'Edit tags',\n    description: \"Run page > Overview > Tags cell > 'Edit' button label\",\n  });\n\n  return (\n    <div\n      css={{\n        paddingTop: theme.spacing.xs,\n        paddingBottom: theme.spacing.xs,\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        '> *': {\n          marginRight: '0 !important',\n        },\n        gap: theme.spacing.xs,\n      }}\n    >\n      {tagsKeyValueMap.length < 1 ? (\n        <Button\n          componentId=\"mlflow.run_details.overview.tags.add_button\"\n          size=\"small\"\n          type=\"tertiary\"\n          onClick={showEditModal}\n        >\n          <FormattedMessage\n            defaultMessage=\"Add tags\"\n            description=\"Run page > Overview > Tags cell > 'Add' button label\"\n          />\n        </Button>\n      ) : (\n        <>\n          {tagsKeyValueMap.map((tag) => (\n            <KeyValueTag tag={tag} key={`${tag.key}-${tag.value}`} enableFullViewModal css={{ marginRight: 0 }} />\n          ))}\n          <Tooltip componentId=\"mlflow.run_details.overview.tags.edit_button.tooltip\" content={editTagsLabel}>\n            <Button\n              componentId=\"mlflow.run_details.overview.tags.edit_button\"\n              aria-label={editTagsLabel}\n              size=\"small\"\n              icon={<PencilIcon />}\n              onClick={showEditModal}\n            />\n          </Tooltip>\n        </>\n      )}\n      {isLoading && <Spinner size=\"small\" />}\n      {/** Old modal for editing tags */}\n      {EditTagsModal}\n      {/** New modal for editing tags, using shared tagging UI */}\n      {TagAssignmentModal}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { EditableNote } from '../../../../common/components/EditableNote';\nimport type { KeyValueEntity } from '../../../../common/types';\nimport { NOTE_CONTENT_TAG } from '../../../utils/NoteUtils';\nimport { Button, PencilIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useDispatch } from 'react-redux';\nimport type { ThunkDispatch } from '../../../../redux-types';\nimport { setTagApi } from '../../../actions';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\n/**\n * Displays editable description section in run detail overview.\n */\nexport const RunViewDescriptionBox = ({\n  runUuid,\n  tags,\n  onDescriptionChanged,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  onDescriptionChanged: () => void | Promise<void>;\n}) => {\n  const noteContent = tags[NOTE_CONTENT_TAG]?.value || '';\n\n  const [showNoteEditor, setShowNoteEditor] = useState(false);\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const handleSubmitEditNote = (markdown: string) =>\n    dispatch(setTagApi(runUuid, NOTE_CONTENT_TAG, markdown))\n      .then(onDescriptionChanged)\n      .then(() => setShowNoteEditor(false));\n  const handleCancelEditNote = () => setShowNoteEditor(false);\n\n  const isEmpty = !noteContent;\n\n  return (\n    <div css={{ marginBottom: theme.spacing.md }}>\n      <Typography.Title level={4} css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n        <FormattedMessage\n          defaultMessage=\"Description\"\n          description=\"Run page > Overview > Description section > Section title\"\n        />\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdescriptionbox.tsx_46\"\n          size=\"small\"\n          type=\"tertiary\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'Edit description',\n            description: 'Run page > Overview > Description section > Edit button label',\n          })}\n          onClick={() => setShowNoteEditor(true)}\n          icon={<PencilIcon />}\n        />\n      </Typography.Title>\n      {isEmpty && !showNoteEditor && (\n        <Typography.Hint>\n          <FormattedMessage\n            defaultMessage=\"No description\"\n            description=\"Run page > Overview > Description section > Empty value placeholder\"\n          />\n        </Typography.Hint>\n      )}\n      {(!isEmpty || showNoteEditor) && (\n        <EditableNote\n          defaultMarkdown={noteContent}\n          onSubmit={handleSubmitEditNote}\n          onCancel={handleCancelEditNote}\n          showEditor={showNoteEditor}\n        />\n      )}\n    </div>\n  );\n};\n","import { Overflow, Tag, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../../common/static/registered-model-grey-ok.svg';\nimport type { RunPageModelVersionSummary } from '../hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\n\n/**\n * Displays list of registered models in run detail overview.\n * TODO: expand with logged models after finalizing design\n */\nexport const RunViewRegisteredModelsBox = ({\n  registeredModelVersionSummaries,\n}: {\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Overflow>\n      {registeredModelVersionSummaries?.map((modelSummary) => (\n        <Link\n          key={modelSummary.displayedName}\n          to={modelSummary.link}\n          css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }}\n        >\n          <RegisteredModelOkIcon /> {modelSummary.displayedName}{' '}\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewregisteredmodelsbox.tsx_40\"\n            css={{ cursor: 'pointer' }}\n          >\n            v{modelSummary.version}\n          </Tag>\n        </Link>\n      ))}\n    </Overflow>\n  );\n};\n","import type { QueryFunctionContext, UseQueryOptions } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { useQuery } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport type { PromptVersionsForRunResponse, RegisteredPromptDetailsResponse, RegisteredPromptVersion } from '../types';\nimport { RegisteredPromptsApi } from '../api';\n\nconst queryFn = async ({ queryKey }: QueryFunctionContext<PromptVersionsForRunQueryKey>) => {\n  const [, { runUuid }] = queryKey;\n  return RegisteredPromptsApi.getPromptVersionsForRun(runUuid);\n};\n\ntype PromptVersionsForRunQueryKey = ['run_uuid', { runUuid: string }];\n\nexport const usePromptVersionsForRunQuery = (\n  { runUuid }: { runUuid: string },\n  options: UseQueryOptions<\n    PromptVersionsForRunResponse,\n    Error,\n    PromptVersionsForRunResponse,\n    PromptVersionsForRunQueryKey\n  > = {},\n) => {\n  const queryResult = useQuery<\n    PromptVersionsForRunResponse,\n    Error,\n    PromptVersionsForRunResponse,\n    PromptVersionsForRunQueryKey\n  >(['run_uuid', { runUuid }], {\n    queryFn,\n    retry: false,\n    ...options,\n  });\n\n  return {\n    data: queryResult.data,\n    error: queryResult.error ?? undefined,\n    isLoading: queryResult.isLoading,\n    refetch: queryResult.refetch,\n  };\n};\n","import { ParagraphSkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { KeyValueEntity } from '@mlflow/mlflow/src/common/types';\n\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport { usePromptVersionsForRunQuery } from '../../../pages/prompts/hooks/usePromptVersionsForRunQuery';\nimport Routes from '../../../routes';\nimport { parseLinkedPromptsFromRunTags } from '../../../pages/prompts/utils';\n\nexport const RunViewRegisteredPromptsBox = ({\n  tags,\n  runUuid,\n}: {\n  tags: Record<string, KeyValueEntity>;\n  runUuid: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  // This part is for supporting prompt versions created using mlflow < 3.1.0\n  const { data, error, isLoading } = usePromptVersionsForRunQuery({ runUuid });\n  const promptVersionsFromPromptTags = data?.model_versions || [];\n  const promptVersionsFromRunTags = parseLinkedPromptsFromRunTags(tags);\n  const promptVersions = [...promptVersionsFromPromptTags, ...promptVersionsFromRunTags];\n\n  if (isLoading) {\n    return <ParagraphSkeleton />;\n  }\n\n  if (error || !promptVersions || promptVersions.length === 0) {\n    return <Typography.Hint css={{ padding: `${theme.spacing.xs}px 0px` }}>—</Typography.Hint>;\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        gap: theme.spacing.sm,\n        flexWrap: 'wrap',\n        padding: `${theme.spacing.xs}px 0px`,\n      }}\n    >\n      {promptVersions.map((promptVersion, index) => {\n        const to = Routes.getPromptDetailsPageRoute(encodeURIComponent(promptVersion.name));\n        const displayText = `${promptVersion.name} (v${promptVersion.version})`;\n        return (\n          <Typography.Text key={displayText} css={{ whiteSpace: 'nowrap' }}>\n            <Link to={to}>{displayText}</Link>\n            {index < promptVersions.length - 1 && ','}\n          </Typography.Text>\n        );\n      })}\n    </div>\n  );\n};\n","import { ModelsIcon, Overflow, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport type { RunInfoEntity } from '../../../types';\nimport { type LoggedModelProto } from '../../../types';\nimport Routes from '../../../routes';\nimport { first } from 'lodash';\nimport { FormattedMessage } from 'react-intl';\nimport { useMemo } from 'react';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\n/**\n * Displays list of registered models in run detail overview.\n */\nexport const RunViewLoggedModelsBox = ({\n  loggedModels,\n  loggedModelsV3,\n  runInfo,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  loggedModelsV3: LoggedModelProto[];\n  loggedModels: {\n    artifactPath: string;\n    flavors: string[];\n    utcTimeCreated: number;\n  }[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { experimentId, runUuid } = runInfo;\n\n  const getModelFlavorName = (flavors: string[]) => {\n    return (\n      first(flavors) || (\n        <FormattedMessage\n          defaultMessage=\"Model\"\n          description=\"Run page > Overview > Logged models > Unknown model flavor\"\n        />\n      )\n    );\n  };\n\n  // Check if list has models with same flavor names.\n  // If true, display artifact path in dropdown menu to reduce ambiguity.\n  const shouldDisplayArtifactPaths = useMemo(() => {\n    const flavors = loggedModels.map((model) => getModelFlavorName(model.flavors));\n    const uniqueFlavors = new Set(flavors);\n    return uniqueFlavors.size !== flavors.length;\n  }, [loggedModels]);\n\n  return (\n    <Overflow>\n      {loggedModels.map((model, index) => {\n        return (\n          <Link\n            to={Routes.getRunPageRoute(experimentId ?? '', runUuid ?? '', model.artifactPath)}\n            key={model.artifactPath}\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: theme.spacing.sm,\n              cursor: 'pointer',\n              height: shouldDisplayArtifactPaths && index > 0 ? theme.general.heightBase : theme.general.heightSm,\n            }}\n          >\n            <ModelsIcon />\n            <div>\n              {getModelFlavorName(model.flavors)}\n              {shouldDisplayArtifactPaths && index > 0 && <Typography.Hint>{model.artifactPath}</Typography.Hint>}\n            </div>\n          </Link>\n        );\n      })}\n      {loggedModelsV3.map((model, index) => {\n        return (\n          <Link\n            to={Routes.getExperimentLoggedModelDetailsPageRoute(experimentId ?? '', model.info?.model_id ?? '')}\n            key={model.info?.model_id ?? index}\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: theme.spacing.sm,\n              cursor: 'pointer',\n              height: shouldDisplayArtifactPaths && index > 0 ? theme.general.heightBase : theme.general.heightSm,\n            }}\n          >\n            <ModelsIcon />\n            <div>{model.info?.name}</div>\n          </Link>\n        );\n      })}\n    </Overflow>\n  );\n};\n","import {\n  BranchIcon,\n  CopyIcon,\n  GitCommitIcon,\n  Tag,\n  LegacyTooltip,\n  Typography,\n  useDesignSystemTheme,\n  Popover,\n} from '@databricks/design-system';\nimport Utils from '../../../../common/utils/Utils';\nimport type { KeyValueEntity } from '../../../../common/types';\nimport { MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG } from '../../../constants';\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\nimport { ExperimentSourceTypeIcon } from '../../ExperimentSourceTypeIcon';\n\nexport const RunViewSourceBox = ({\n  runUuid,\n  tags,\n  search,\n  className,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  search: string;\n  className?: string;\n}) => {\n  const branchName = tags?.[MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG]?.value;\n  const commitHash = tags?.[Utils.gitCommitTag]?.value;\n  const runSource = Utils.renderSource(tags, search, runUuid, branchName);\n\n  const { theme } = useDesignSystemTheme();\n  return runSource ? (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        gap: theme.spacing.sm,\n        paddingTop: theme.spacing.sm,\n        paddingBottom: theme.spacing.sm,\n        flexWrap: 'wrap',\n      }}\n      className={className}\n    >\n      <ExperimentSourceTypeIcon\n        sourceType={tags[Utils.sourceTypeTag]?.value}\n        css={{ color: theme.colors.actionPrimaryBackgroundDefault }}\n      />\n      {runSource}{' '}\n      {branchName && (\n        <LegacyTooltip title={branchName}>\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewsourcebox.tsx_48\"\n            css={{ marginRight: 0 }}\n          >\n            <div css={{ display: 'flex', gap: 4, whiteSpace: 'nowrap' }}>\n              <BranchIcon /> {branchName}\n            </div>\n          </Tag>\n        </LegacyTooltip>\n      )}\n      {commitHash && (\n        <Popover.Root componentId=\"mlflow.run_details.overview.source.commit_hash_popover\">\n          <Popover.Trigger asChild>\n            <Tag\n              componentId=\"mlflow.run_details.overview.source.commit_hash\"\n              css={{ marginRight: 0, '&>div': { paddingRight: 0 } }}\n            >\n              <div css={{ display: 'flex', gap: theme.spacing.xs, whiteSpace: 'nowrap', alignContent: 'center' }}>\n                <GitCommitIcon />\n                {commitHash.slice(0, 7)}\n              </div>\n            </Tag>\n          </Popover.Trigger>\n          <Popover.Content align=\"start\">\n            <Popover.Arrow />\n            <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n              {commitHash}\n              <CopyButton showLabel={false} size=\"small\" type=\"tertiary\" copyText={commitHash} icon={<CopyIcon />} />\n            </div>\n          </Popover.Content>\n        </Popover.Root>\n      )}\n    </div>\n  ) : (\n    <Typography.Hint>—</Typography.Hint>\n  );\n};\n","import {\n  Alert,\n  Button,\n  ColumnsIcon,\n  getShadowScrollStyles,\n  Spacer,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport type { Theme } from '@emotion/react';\nimport { useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useCombinedRunInputsOutputsModels } from '../../../hooks/logged-models/useCombinedRunInputsOutputsModels';\nimport type { LoggedModelProto, RunInfoEntity } from '../../../types';\nimport { ExperimentLoggedModelListPageTable } from '../../experiment-logged-models/ExperimentLoggedModelListPageTable';\nimport {\n  ExperimentLoggedModelListPageKnownColumns,\n  useExperimentLoggedModelListPageTableColumns,\n} from '../../experiment-logged-models/hooks/useExperimentLoggedModelListPageTableColumns';\nimport { ExperimentLoggedModelOpenDatasetDetailsContextProvider } from '../../experiment-logged-models/hooks/useExperimentLoggedModelOpenDatasetDetails';\nimport type {\n  UseGetRunQueryResponseInputs,\n  UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from '../hooks/useGetRunQuery';\nimport { ExperimentLoggedModelListPageColumnSelector } from '../../experiment-logged-models/ExperimentLoggedModelListPageColumnSelector';\n\nconst supportedAttributeColumnKeys = [\n  ExperimentLoggedModelListPageKnownColumns.RelationshipType,\n  ExperimentLoggedModelListPageKnownColumns.Step,\n  ExperimentLoggedModelListPageKnownColumns.Name,\n  ExperimentLoggedModelListPageKnownColumns.Status,\n  ExperimentLoggedModelListPageKnownColumns.CreationTime,\n  ExperimentLoggedModelListPageKnownColumns.RegisteredModels,\n  ExperimentLoggedModelListPageKnownColumns.Dataset,\n];\n\nexport const RunViewLoggedModelsTable = ({\n  inputs,\n  outputs,\n  runInfo,\n  loggedModelsV3,\n  isLoadingLoggedModels = false,\n  loggedModelsError,\n}: {\n  inputs?: UseGetRunQueryResponseInputs;\n  outputs?: UseGetRunQueryResponseOutputs;\n  runInfo?: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  loggedModelsV3: LoggedModelProto[];\n  isLoadingLoggedModels?: boolean;\n  loggedModelsError?: Error;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const { models: loggedModels } = useCombinedRunInputsOutputsModels(inputs, outputs, runInfo, loggedModelsV3);\n\n  const [columnVisibility, setColumnVisibility] = useState<Record<string, boolean>>({});\n\n  const { columnDefs } = useExperimentLoggedModelListPageTableColumns({\n    loggedModels: loggedModels,\n    columnVisibility,\n    disablePinnedColumns: true,\n    disableOrderBy: true,\n    supportedAttributeColumnKeys,\n  });\n\n  return (\n    <div css={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n      <div css={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\n        <Typography.Title level={4} css={{ flexShrink: 0 }}>\n          <FormattedMessage\n            defaultMessage=\"Logged models ({length})\"\n            description=\"A header for a table of logged models displayed on the run page. The 'length' variable is being replaced with the number of displayed logged models.\"\n            values={{ length: loggedModels.length }}\n          />\n        </Typography.Title>\n        <ExperimentLoggedModelListPageColumnSelector\n          columnDefs={columnDefs}\n          onUpdateColumns={setColumnVisibility}\n          columnVisibility={columnVisibility}\n          customTrigger={<Button componentId=\"mlflow.logged_model.list.columns\" icon={<ColumnsIcon />} />}\n        />\n      </div>\n      <Spacer size=\"sm\" shrinks={false} />\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.border}`,\n          borderRadius: theme.general.borderRadiusBase,\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          overflow: 'hidden',\n        }}\n      >\n        {loggedModelsError instanceof Error && loggedModelsError.message && (\n          <>\n            <Alert\n              type=\"error\"\n              description={loggedModelsError.message}\n              message={\n                <FormattedMessage\n                  defaultMessage=\"Error loading logged models\"\n                  description=\"Error message displayed in the experiment run details page when loading logged models fails\"\n                />\n              }\n              closable={false}\n              componentId=\"mlflow.run_page.logged_model.list.error\"\n            />\n            <Spacer size=\"sm\" shrinks={false} />\n          </>\n        )}\n        <ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n          <ExperimentLoggedModelListPageTable\n            columnDefs={columnDefs}\n            loggedModels={loggedModels}\n            columnVisibility={columnVisibility}\n            isLoading={isLoadingLoggedModels}\n            isLoadingMore={false}\n            moreResultsAvailable={false}\n            disableLoadMore\n            css={getTableTheme(theme)}\n            displayShowExampleButton={false}\n          />\n        </ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n      </div>\n    </div>\n  );\n};\n\nconst getTableTheme = (theme: Theme) => ({\n  '&.ag-theme-balham': {\n    '--ag-border-color': theme.colors.border,\n    '--ag-row-border-color': theme.colors.border,\n    '--ag-foreground-color': theme.colors.textPrimary,\n    '--ag-background-color': 'transparent',\n    '--ag-odd-row-background-color': 'transparent',\n    '--ag-row-hover-color': theme.colors.actionDefaultBackgroundHover,\n    '--ag-selected-row-background-color': theme.colors.actionDefaultBackgroundPress,\n    '--ag-header-foreground-color': theme.colors.textPrimary,\n    '--ag-header-background-color': theme.colors.backgroundPrimary,\n    '--ag-modal-overlay-background-color': theme.colors.overlayOverlay,\n    '.ag-header-row.ag-header-row-column-group': {\n      '--ag-header-foreground-color': theme.colors.textPrimary,\n    },\n    borderTop: 0,\n    fontSize: theme.typography.fontSizeBase,\n    '.ag-center-cols-viewport': {\n      ...getShadowScrollStyles(theme, {\n        orientation: 'horizontal',\n      }),\n    },\n  },\n});\n","import { compact, uniq, uniqBy } from 'lodash';\nimport { useMemo } from 'react';\nimport type {\n  UseGetRunQueryResponseInputs,\n  UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from '../../components/run-page/hooks/useGetRunQuery';\nimport type { LoggedModelProto, RunInfoEntity } from '../../types';\n\ntype LoggedModelProtoWithRunDirection = LoggedModelProto & { direction: 'input' | 'output'; step?: string };\n\nconst filterMetricsByMatchingRunId = (runUuid?: string | null) => (loggedModel: LoggedModelProtoWithRunDirection) => {\n  if (loggedModel.data?.metrics) {\n    return {\n      ...loggedModel,\n      data: {\n        ...loggedModel.data,\n        metrics: loggedModel.data.metrics.filter((metric) => !runUuid || metric.run_id === runUuid),\n      },\n    };\n  }\n  return loggedModel;\n};\n\nexport const useCombinedRunInputsOutputsModels = (\n  inputs?: UseGetRunQueryResponseInputs,\n  outputs?: UseGetRunQueryResponseOutputs,\n  runInfo?: RunInfoEntity | UseGetRunQueryResponseRunInfo,\n  loggedModelsV3?: LoggedModelProto[],\n) => {\n  const inputLoggedModels = useMemo(() => {\n    const inputModelIds = compact(uniq(inputs?.modelInputs?.map((modelInput) => modelInput.modelId)));\n    return inputModelIds.map<LoggedModelProtoWithRunDirection | undefined>((model_id) => {\n      const model = loggedModelsV3?.find((model) => model.info?.model_id === model_id);\n      if (!model) return undefined;\n      return { ...model, direction: 'input' as const };\n    });\n  }, [inputs?.modelInputs, loggedModelsV3]);\n\n  const outputLoggedModels = useMemo(() => {\n    const outputModelIds = compact(uniq(outputs?.modelOutputs?.map((modelOutput) => modelOutput.modelId)));\n    return outputModelIds.map<LoggedModelProtoWithRunDirection | undefined>((model_id) => {\n      const model = loggedModelsV3?.find((model) => model.info?.model_id === model_id);\n\n      const correspondingOutputEntry = outputs?.modelOutputs?.find(({ modelId }) => modelId === model?.info?.model_id);\n\n      if (!model) return undefined;\n      return { ...model, direction: 'output' as const, step: correspondingOutputEntry?.step ?? undefined };\n    });\n  }, [outputs?.modelOutputs, loggedModelsV3]);\n\n  const modelsWithDirection = useMemo(() => {\n    return (\n      uniqBy(\n        compact([...inputLoggedModels, ...outputLoggedModels]).map(filterMetricsByMatchingRunId(runInfo?.runUuid)),\n        (modelData) => modelData.info?.model_id,\n      ) ?? []\n    );\n  }, [inputLoggedModels, outputLoggedModels, runInfo]);\n\n  return { models: modelsWithDirection };\n};\n","import { Overflow, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useState } from 'react';\nimport type { RunDatasetWithTags, RunInfoEntity } from '../../../types';\nimport type { KeyValueEntity } from '../../../../common/types';\nimport type { DatasetWithRunType } from '../../experiment-page/components/runs/ExperimentViewDatasetDrawer';\nimport { ExperimentViewDatasetDrawer } from '../../experiment-page/components/runs/ExperimentViewDatasetDrawer';\nimport { ExperimentViewDatasetWithContext } from '../../experiment-page/components/runs/ExperimentViewDatasetWithContext';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\n/**\n * Displays run datasets section in run detail overview.\n */\nexport const RunViewDatasetBoxV2 = ({\n  tags,\n  runInfo,\n  datasets,\n}: {\n  tags: Record<string, KeyValueEntity>;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  datasets: RunDatasetWithTags[];\n}) => {\n  const [selectedDatasetWithRun, setSelectedDatasetWithRun] = useState<DatasetWithRunType | null>(null);\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const { theme } = useDesignSystemTheme();\n\n  if (!datasets || !datasets.length) {\n    return null;\n  }\n\n  const datasetClicked = (dataset: RunDatasetWithTags) => {\n    setSelectedDatasetWithRun({\n      datasetWithTags: dataset,\n      runData: {\n        experimentId: runInfo.experimentId ?? undefined,\n        runUuid: runInfo.runUuid ?? '',\n        runName: runInfo.runName ?? undefined,\n        datasets: datasets,\n        tags: tags,\n      },\n    });\n    setIsDrawerOpen(true);\n  };\n\n  return (\n    <>\n      <Overflow>\n        {datasets.map((datasetWithTags) => (\n          // eslint-disable-next-line react/jsx-key\n          <Typography.Link\n            componentId=\"mlflow.run_details.datasets_box.dataset_link\"\n            css={{\n              textAlign: 'left',\n              '.anticon': {\n                fontSize: theme.general.iconFontSize,\n              },\n            }}\n            onClick={() => datasetClicked(datasetWithTags)}\n          >\n            <ExperimentViewDatasetWithContext datasetWithTags={datasetWithTags} displayTextAsLink css={{ margin: 0 }} />\n          </Typography.Link>\n        ))}\n      </Overflow>\n      {selectedDatasetWithRun && (\n        <ExperimentViewDatasetDrawer\n          isOpen={isDrawerOpen}\n          setIsOpen={setIsDrawerOpen}\n          selectedDatasetWithRun={selectedDatasetWithRun}\n          setSelectedDatasetWithRun={setSelectedDatasetWithRun}\n        />\n      )}\n    </>\n  );\n};\n","import { Button, FileIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport type { AsideSections } from '@databricks/web-shared/utils';\nimport { KeyValueProperty, NoneCell } from '@databricks/web-shared/utils';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport type { LoggedModelProto, RunDatasetWithTags, RunInfoEntity } from '../../../types';\nimport type { KeyValueEntity } from '../../../../common/types';\nimport type { UseGetRunQueryResponseRunInfo } from './useGetRunQuery';\nimport Utils from '../../../../common/utils/Utils';\nimport { RunViewTagsBox } from '../overview/RunViewTagsBox';\nimport { RunViewUserLinkBox } from '../overview/RunViewUserLinkBox';\nimport { DetailsOverviewCopyableIdBox } from '../../DetailsOverviewCopyableIdBox';\nimport { RunViewStatusBox } from '../overview/RunViewStatusBox';\nimport { RunViewParentRunBox } from '../overview/RunViewParentRunBox';\nimport { EXPERIMENT_PARENT_ID_TAG } from '../../experiment-page/utils/experimentPage.common-utils';\nimport { RunViewDatasetBoxV2 } from '../overview/RunViewDatasetBoxV2';\nimport { RunViewSourceBox } from '../overview/RunViewSourceBox';\nimport { Link, useLocation } from '../../../../common/utils/RoutingUtils';\nimport { RunViewLoggedModelsBox } from '../overview/RunViewLoggedModelsBox';\nimport { useMemo } from 'react';\nimport type { RunPageModelVersionSummary } from './useUnifiedRegisteredModelVersionsSummariesForRun';\nimport { RunViewRegisteredModelsBox } from '../overview/RunViewRegisteredModelsBox';\nimport Routes from '../../../routes';\nimport { RunViewRegisteredPromptsBox } from '../overview/RunViewRegisteredPromptsBox';\n\nenum RunDetailsPageMetadataSections {\n  DETAILS = 'DETAILS',\n  DATASETS = 'DATASETS',\n  TAGS = 'TAGS',\n  REGISTERED_MODELS = 'REGISTERED_MODELS',\n}\n\nexport const useRunDetailsPageOverviewSectionsV2 = ({\n  runUuid,\n  runInfo,\n  tags,\n  onTagsUpdated,\n  datasets,\n  shouldRenderLoggedModelsBox,\n  loggedModelsV3,\n  registeredModelVersionSummaries,\n}: {\n  runUuid: string;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n  onTagsUpdated: () => void;\n  datasets?: RunDatasetWithTags[];\n  shouldRenderLoggedModelsBox?: boolean;\n  loggedModelsV3: LoggedModelProto[];\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}): AsideSections => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const { search } = useLocation();\n  const loggedModelsFromTags = useMemo(() => Utils.getLoggedModelsFromTags(tags), [tags]);\n\n  const parentRunIdTag = tags[EXPERIMENT_PARENT_ID_TAG];\n\n  const renderPromptMetadataRow = () => {\n    return (\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Registered prompts',\n          description: 'Run page > Overview > Run prompts section label',\n        })}\n        value={<RunViewRegisteredPromptsBox tags={tags} runUuid={runUuid} />}\n      />\n    );\n  };\n\n  const detailsContent = runInfo && (\n    <>\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Created at',\n          description: 'Run page > Overview > Run start time section label',\n        })}\n        value={runInfo.startTime ? Utils.formatTimestamp(runInfo.startTime, intl) : <NoneCell />}\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Created by',\n          description: 'Run page > Overview > Run author section label',\n        })}\n        value={<RunViewUserLinkBox runInfo={runInfo} tags={tags} />}\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Experiment ID',\n          description: 'Run page > Overview > experiment ID section label',\n        })}\n        value={\n          <DetailsOverviewCopyableIdBox\n            value={runInfo?.experimentId ?? ''}\n            element={\n              runInfo?.experimentId ? (\n                <Link to={Routes.getExperimentPageRoute(runInfo.experimentId)}>{runInfo?.experimentId}</Link>\n              ) : undefined\n            }\n          />\n        }\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Status',\n          description: 'Run page > Overview > Run status section label',\n        })}\n        value={<RunViewStatusBox status={runInfo.status} />}\n      />\n\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Run ID',\n          description: 'Run page > Overview > Run ID section label',\n        })}\n        value={<DetailsOverviewCopyableIdBox value={runInfo.runUuid ?? ''} />}\n      />\n\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Duration',\n          description: 'Run page > Overview > Run duration section label',\n        })}\n        value={Utils.getDuration(runInfo.startTime, runInfo.endTime)}\n      />\n\n      {parentRunIdTag && (\n        <KeyValueProperty\n          keyValue={intl.formatMessage({\n            defaultMessage: 'Parent run',\n            description: 'Run page > Overview > Parent run',\n          })}\n          value={<RunViewParentRunBox parentRunUuid={parentRunIdTag.value} />}\n        />\n      )}\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Source',\n          description: 'Run page > Overview > Run source section label',\n        })}\n        value={\n          <RunViewSourceBox\n            tags={tags}\n            search={search}\n            runUuid={runUuid}\n            css={{\n              paddingTop: theme.spacing.xs,\n              paddingBottom: theme.spacing.xs,\n            }}\n          />\n        }\n      />\n      {shouldRenderLoggedModelsBox && (\n        <KeyValueProperty\n          keyValue={intl.formatMessage({\n            defaultMessage: 'Logged models',\n            description: 'Run page > Overview > Run models section label',\n          })}\n          value={\n            <RunViewLoggedModelsBox\n              // Pass the run info and logged models\n              runInfo={runInfo}\n              loggedModels={loggedModelsFromTags}\n              loggedModelsV3={loggedModelsV3}\n            />\n          }\n        />\n      )}\n      {renderPromptMetadataRow()}\n    </>\n  );\n\n  return [\n    {\n      id: RunDetailsPageMetadataSections.DETAILS,\n      title: intl.formatMessage({\n        defaultMessage: 'About this run',\n        description: 'Title for the details/metadata section on the run details page',\n      }),\n      content: detailsContent,\n    },\n    {\n      id: RunDetailsPageMetadataSections.DATASETS,\n      title: intl.formatMessage({\n        defaultMessage: 'Datasets',\n        description: 'Title for the datasets section on the run details page',\n      }),\n      content: datasets?.length ? (\n        <RunViewDatasetBoxV2 tags={tags} runInfo={runInfo} datasets={datasets} />\n      ) : (\n        <NoneCell />\n      ),\n    },\n    {\n      id: RunDetailsPageMetadataSections.TAGS,\n      title: intl.formatMessage({\n        defaultMessage: 'Tags',\n        description: 'Title for the tags section on the run details page',\n      }),\n      content: <RunViewTagsBox runUuid={runInfo.runUuid ?? ''} tags={tags} onTagsUpdated={onTagsUpdated} />,\n    },\n    {\n      id: RunDetailsPageMetadataSections.REGISTERED_MODELS,\n      title: intl.formatMessage({\n        defaultMessage: 'Registered models',\n        description: 'Title for the registered models section on the run details page',\n      }),\n      content:\n        registeredModelVersionSummaries?.length > 0 ? (\n          <RunViewRegisteredModelsBox registeredModelVersionSummaries={registeredModelVersionSummaries} />\n        ) : (\n          <NoneCell />\n        ),\n    },\n  ];\n};\n","import { FormattedMessage, useIntl } from 'react-intl';\nimport { useMemo } from 'react';\n\nimport { Button, FileIcon, Spacer, Spinner, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport Utils from '../../../common/utils/Utils';\nimport { useLocation } from '../../../common/utils/RoutingUtils';\nimport { EXPERIMENT_PARENT_ID_TAG } from '../experiment-page/utils/experimentPage.common-utils';\n\nimport { RunViewStatusBox } from './overview/RunViewStatusBox';\nimport { RunViewUserLinkBox } from './overview/RunViewUserLinkBox';\nimport { DetailsOverviewParamsTable } from '../DetailsOverviewParamsTable';\nimport { RunViewMetricsTable } from './overview/RunViewMetricsTable';\nimport { RunViewDatasetBox } from './overview/RunViewDatasetBox';\nimport { RunViewParentRunBox } from './overview/RunViewParentRunBox';\nimport { RunViewTagsBox } from './overview/RunViewTagsBox';\nimport { RunViewDescriptionBox } from './overview/RunViewDescriptionBox';\nimport { DetailsOverviewMetadataRow } from '../DetailsOverviewMetadataRow';\nimport { RunViewRegisteredModelsBox } from './overview/RunViewRegisteredModelsBox';\nimport { RunViewRegisteredPromptsBox } from './overview/RunViewRegisteredPromptsBox';\nimport { RunViewLoggedModelsBox } from './overview/RunViewLoggedModelsBox';\nimport { RunViewSourceBox } from './overview/RunViewSourceBox';\nimport { DetailsOverviewMetadataTable } from '@mlflow/mlflow/src/experiment-tracking/components/DetailsOverviewMetadataTable';\nimport type { LoggedModelProto } from '../../types';\nimport { ExperimentKind } from '../../constants';\nimport { useExperimentLoggedModelRegisteredVersions } from '../experiment-logged-models/hooks/useExperimentLoggedModelRegisteredVersions';\nimport { DetailsOverviewCopyableIdBox } from '../DetailsOverviewCopyableIdBox';\nimport type { RunInfoEntity } from '../../types';\nimport type {\n  UseGetRunQueryResponseInputs,\n  UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from './hooks/useGetRunQuery';\nimport type { MetricEntitiesByName, RunDatasetWithTags } from '../../types';\nimport type { KeyValueEntity } from '../../../common/types';\nimport { type RunPageModelVersionSummary } from './hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\nimport { isEmpty, uniqBy } from 'lodash';\nimport { RunViewLoggedModelsTable } from './overview/RunViewLoggedModelsTable';\nimport { DetailsPageLayout } from '../../../common/components/details-page-layout/DetailsPageLayout';\nimport { useRunDetailsPageOverviewSectionsV2 } from './hooks/useRunDetailsPageOverviewSectionsV2';\n\nconst EmptyValue = () => <Typography.Hint>—</Typography.Hint>;\n\nexport const RunViewOverview = ({\n  runUuid,\n  onRunDataUpdated,\n  tags,\n  runInfo,\n  datasets,\n  params,\n  latestMetrics,\n  runInputs,\n  runOutputs,\n  registeredModelVersionSummaries: registeredModelVersionSummariesForRun,\n  loggedModelsV3 = [],\n  isLoadingLoggedModels = false,\n  loggedModelsError,\n  experimentKind,\n}: {\n  runUuid: string;\n  onRunDataUpdated: () => void | Promise<any>;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n  latestMetrics: MetricEntitiesByName;\n  runInputs?: UseGetRunQueryResponseInputs;\n  runOutputs?: UseGetRunQueryResponseOutputs;\n  datasets?: RunDatasetWithTags[];\n  params: Record<string, KeyValueEntity>;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n  loggedModelsV3?: LoggedModelProto[];\n  isLoadingLoggedModels?: boolean;\n  loggedModelsError?: Error;\n  experimentKind?: ExperimentKind;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { search } = useLocation();\n  const intl = useIntl();\n\n  const loggedModelsFromTags = useMemo(() => Utils.getLoggedModelsFromTags(tags), [tags]);\n  const parentRunIdTag = tags[EXPERIMENT_PARENT_ID_TAG];\n  const containsLoggedModelsFromInputsOutputs = !isEmpty(runInputs?.modelInputs) || !isEmpty(runOutputs?.modelOutputs);\n  const shouldRenderLoggedModelsBox = !containsLoggedModelsFromInputsOutputs;\n  const shouldRenderLinkedPromptsTable = experimentKind === ExperimentKind.GENAI_DEVELOPMENT;\n\n  // We have two flags for controlling the visibility of the \"logged models\" section:\n  // - `shouldRenderLoggedModelsBox` determines if \"logged models\" section should be rendered.\n  //   It is hidden if any IAv3 logged models are detected in inputs/outputs, in this case we're\n  //   displaying a big table instead.\n  // - `shouldDisplayContentsOfLoggedModelsBox` determines if the contents of the \"logged models\"\n  //   section should be displayed. It is hidden if there are no logged models to display.\n  const shouldDisplayContentsOfLoggedModelsBox = loggedModelsFromTags?.length > 0 || loggedModelsV3?.length > 0;\n  const { modelVersions: loggedModelsV3RegisteredModels } = useExperimentLoggedModelRegisteredVersions({\n    loggedModels: loggedModelsV3,\n  });\n\n  /**\n   * We have to query multiple sources for registered model versions (logged models API, models API, UC)\n   * and it's possible to end up with duplicates.\n   * We can dedupe them using `link` field, which should be unique for each model.\n   */\n  const registeredModelVersionSummaries = uniqBy(\n    [...registeredModelVersionSummariesForRun, ...loggedModelsV3RegisteredModels],\n    (model) => model?.link,\n  );\n\n  const renderPromptMetadataRow = () => {\n    return (\n      <DetailsOverviewMetadataRow\n        title={\n          <FormattedMessage\n            defaultMessage=\"Registered prompts\"\n            description=\"Run page > Overview > Run prompts section label\"\n          />\n        }\n        value={<RunViewRegisteredPromptsBox tags={tags} runUuid={runUuid} />}\n      />\n    );\n  };\n\n  const renderDetails = () => {\n    return (\n      <DetailsOverviewMetadataTable>\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Created at\"\n              description=\"Run page > Overview > Run start time section label\"\n            />\n          }\n          value={runInfo.startTime ? Utils.formatTimestamp(runInfo.startTime, intl) : <EmptyValue />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Created by\"\n              description=\"Run page > Overview > Run author section label\"\n            />\n          }\n          value={<RunViewUserLinkBox runInfo={runInfo} tags={tags} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Experiment ID\"\n              description=\"Run page > Overview > experiment ID section label\"\n            />\n          }\n          value={<DetailsOverviewCopyableIdBox value={runInfo?.experimentId ?? ''} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage defaultMessage=\"Status\" description=\"Run page > Overview > Run status section label\" />\n          }\n          value={<RunViewStatusBox status={runInfo.status} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={<FormattedMessage defaultMessage=\"Run ID\" description=\"Run page > Overview > Run ID section label\" />}\n          value={<DetailsOverviewCopyableIdBox value={runInfo.runUuid ?? ''} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Duration\"\n              description=\"Run page > Overview > Run duration section label\"\n            />\n          }\n          value={Utils.getDuration(runInfo.startTime, runInfo.endTime)}\n        />\n        {parentRunIdTag && (\n          <DetailsOverviewMetadataRow\n            title={<FormattedMessage defaultMessage=\"Parent run\" description=\"Run page > Overview > Parent run\" />}\n            value={<RunViewParentRunBox parentRunUuid={parentRunIdTag.value} />}\n          />\n        )}\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Datasets used\"\n              description=\"Run page > Overview > Run datasets section label\"\n            />\n          }\n          value={\n            datasets?.length ? <RunViewDatasetBox tags={tags} runInfo={runInfo} datasets={datasets} /> : <EmptyValue />\n          }\n        />\n        <DetailsOverviewMetadataRow\n          title={<FormattedMessage defaultMessage=\"Tags\" description=\"Run page > Overview > Run tags section label\" />}\n          value={<RunViewTagsBox runUuid={runInfo.runUuid ?? ''} tags={tags} onTagsUpdated={onRunDataUpdated} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage defaultMessage=\"Source\" description=\"Run page > Overview > Run source section label\" />\n          }\n          value={<RunViewSourceBox tags={tags} search={search} runUuid={runUuid} />}\n        />\n        {shouldRenderLoggedModelsBox && (\n          <DetailsOverviewMetadataRow\n            title={\n              <FormattedMessage\n                defaultMessage=\"Logged models\"\n                description=\"Run page > Overview > Run models section label\"\n              />\n            }\n            value={\n              isLoadingLoggedModels ? (\n                <Spinner />\n              ) : shouldDisplayContentsOfLoggedModelsBox ? (\n                <RunViewLoggedModelsBox\n                  // Pass the run info and logged models\n                  runInfo={runInfo}\n                  loggedModels={loggedModelsFromTags}\n                  // Provide loggedModels from IA v3\n                  loggedModelsV3={loggedModelsV3}\n                />\n              ) : (\n                <EmptyValue />\n              )\n            }\n          />\n        )}\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Registered models\"\n              description=\"Run page > Overview > Run models section label\"\n            />\n          }\n          value={\n            registeredModelVersionSummaries?.length > 0 ? (\n              <RunViewRegisteredModelsBox registeredModelVersionSummaries={registeredModelVersionSummaries} />\n            ) : (\n              <EmptyValue />\n            )\n          }\n        />\n        {renderPromptMetadataRow()}\n      </DetailsOverviewMetadataTable>\n    );\n  };\n\n  const renderParams = () => {\n    return <DetailsOverviewParamsTable params={params} />;\n  };\n\n  const detailsSectionsV2 = useRunDetailsPageOverviewSectionsV2({\n    runUuid,\n    runInfo,\n    tags,\n    onTagsUpdated: onRunDataUpdated,\n    datasets,\n    loggedModelsV3,\n    shouldRenderLoggedModelsBox,\n    registeredModelVersionSummaries,\n  });\n  const usingSidebarLayout = true;\n  return (\n    <DetailsPageLayout\n      css={{ flex: 1, alignSelf: 'flex-start' }}\n      // Enable sidebar layout based on feature flag\n      usingSidebarLayout={usingSidebarLayout}\n      secondarySections={detailsSectionsV2}\n    >\n      <RunViewDescriptionBox runUuid={runUuid} tags={tags} onDescriptionChanged={onRunDataUpdated} />\n      {!usingSidebarLayout && (\n        <>\n          <Typography.Title level={4}>\n            <FormattedMessage defaultMessage=\"Details\" description=\"Run page > Overview > Details section title\" />\n          </Typography.Title>\n          {renderDetails()}\n        </>\n      )}\n      <div\n        // Use different grid setup for unified details page layout\n        css={[\n          usingSidebarLayout ? { flexDirection: 'column' } : { minHeight: 360, maxHeight: 760 },\n          { display: 'flex', gap: theme.spacing.lg, overflow: 'hidden' },\n        ]}\n      >\n        <RunViewMetricsTable latestMetrics={latestMetrics} runInfo={runInfo} loggedModels={loggedModelsV3} />\n        {renderParams()}\n      </div>\n      {containsLoggedModelsFromInputsOutputs && (\n        <>\n          {!usingSidebarLayout && <Spacer />}\n          <div css={{ minHeight: 360, maxHeight: 760, overflow: 'hidden', display: 'flex' }}>\n            <RunViewLoggedModelsTable\n              loggedModelsV3={loggedModelsV3}\n              isLoadingLoggedModels={isLoadingLoggedModels}\n              inputs={runInputs}\n              outputs={runOutputs}\n              runInfo={runInfo}\n              loggedModelsError={loggedModelsError}\n            />\n          </div>\n        </>\n      )}\n      {!usingSidebarLayout && <Spacer />}\n    </DetailsPageLayout>\n  );\n};\n","import Routes from '../routes';\nimport { ErrorView } from '../../common/components/ErrorView';\n\ntype Props = {\n  runId: string;\n};\n\nexport function RunNotFoundView({ runId }: Props) {\n  return (\n    <ErrorView\n      statusCode={404}\n      subMessage={`Run ID ${runId} does not exist`}\n      fallbackHomePageReactRoute={Routes.rootRoute}\n    />\n  );\n}\n","import type { MetricHistoryByName, RunInfoEntity } from '../../types';\nimport {\n  containsMultipleRunsTooltipData,\n  RunsChartsTooltipMode,\n  type RunsChartsTooltipBodyProps,\n} from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { isSystemMetricKey } from '../../utils/MetricsUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { isUndefined } from 'lodash';\nimport type {\n  RunsCompareMultipleTracesTooltipData,\n  RunsMetricsSingleTraceTooltipData,\n} from '../runs-charts/components/RunsMetricsLinePlot';\nimport type { RunsMetricsBarPlotHoverData } from '../runs-charts/components/RunsMetricsBarPlot';\nimport { RunsMultipleTracesTooltipBody } from '../runs-charts/components/RunsMultipleTracesTooltipBody';\nimport { Spacer, Typography } from '@databricks/design-system';\n\n/**\n * Tooltip body displayed when hovering over run view metric charts\n */\nexport const RunViewChartTooltipBody = ({\n  contextData: { metricsForRun },\n  hoverData,\n  chartData: { metricKey },\n  isHovering,\n  mode,\n}: RunsChartsTooltipBodyProps<\n  { metricsForRun: MetricHistoryByName },\n  { metricKey: string },\n  RunsMetricsBarPlotHoverData | RunsMetricsSingleTraceTooltipData | RunsCompareMultipleTracesTooltipData\n>) => {\n  const singleTraceHoverData = containsMultipleRunsTooltipData(hoverData) ? hoverData.hoveredDataPoint : hoverData;\n  const intl = useIntl();\n\n  if (\n    mode === RunsChartsTooltipMode.MultipleTracesWithScanline &&\n    containsMultipleRunsTooltipData(hoverData) &&\n    isHovering\n  ) {\n    return <RunsMultipleTracesTooltipBody hoverData={hoverData} />;\n  }\n\n  if (!singleTraceHoverData?.metricEntity) {\n    return null;\n  }\n\n  const { timestamp, step, value } = singleTraceHoverData.metricEntity;\n\n  const metricContainsHistory = metricsForRun?.[metricKey]?.length > 1;\n  const isSystemMetric = isSystemMetricKey(metricKey);\n  const displayTimestamp = metricContainsHistory && isSystemMetric && !isUndefined(timestamp);\n  const displayStep = metricContainsHistory && !isSystemMetric && !isUndefined(step);\n\n  return (\n    <div>\n      {displayStep && (\n        <div css={styles.valueField}>\n          <strong>\n            <FormattedMessage defaultMessage=\"Step\" description=\"Run page > Charts tab > Chart tooltip > Step label\" />:\n          </strong>{' '}\n          {step}\n        </div>\n      )}\n      {displayTimestamp && (\n        <div css={styles.valueField}>\n          <strong>\n            <FormattedMessage\n              defaultMessage=\"Timestamp\"\n              description=\"Run page > Charts tab > Chart tooltip > Timestamp label\"\n            />\n            :\n          </strong>{' '}\n          {Utils.formatTimestamp(timestamp, intl)}\n        </div>\n      )}\n      {value && (\n        <div>\n          <Typography.Text bold>{metricKey}</Typography.Text>\n          <Spacer size=\"xs\" />\n          <Typography.Text>{value}</Typography.Text>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst styles = {\n  valueField: {\n    whiteSpace: 'nowrap' as const,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n};\n","import { TableSkeleton, ToggleButton, useDesignSystemTheme } from '@databricks/design-system';\nimport { compact, mapValues, values } from 'lodash';\nimport type { ReactNode } from 'react';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport type { ReduxState } from '../../../redux-types';\nimport type { MetricEntitiesByName, RunInfoEntity } from '../../types';\nimport type { KeyValueEntity } from '../../../common/types';\n\nimport { RunsChartsTooltipWrapper } from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { RunViewChartTooltipBody } from './RunViewChartTooltipBody';\nimport { RunsChartType, RunsChartsCardConfig } from '../runs-charts/runs-charts.types';\nimport type { RunsChartsRunData } from '../runs-charts/components/RunsCharts.common';\nimport { RunsChartsLineChartXAxisType } from '../runs-charts/components/RunsCharts.common';\nimport type { ExperimentRunsChartsUIConfiguration } from '../experiment-page/models/ExperimentPageUIState';\nimport { RunsChartsSectionAccordion } from '../runs-charts/components/sections/RunsChartsSectionAccordion';\nimport { RunsChartsConfigureModal } from '../runs-charts/components/RunsChartsConfigureModal';\nimport {\n  RunsChartsUIConfigurationContextProvider,\n  useConfirmChartCardConfigurationFn,\n  useInsertRunsChartsFn,\n  useRemoveRunsChartFn,\n  useReorderRunsChartsFn,\n} from '../runs-charts/hooks/useRunsChartsUIConfiguration';\nimport {\n  LOG_IMAGE_TAG_INDICATOR,\n  MLFLOW_MODEL_METRIC_NAME,\n  MLFLOW_SYSTEM_METRIC_NAME,\n  MLFLOW_SYSTEM_METRIC_PREFIX,\n} from '../../constants';\nimport LocalStorageUtils from '../../../common/utils/LocalStorageUtils';\nimport { RunsChartsFullScreenModal } from '../runs-charts/components/RunsChartsFullScreenModal';\nimport { useIsTabActive } from '../../../common/hooks/useIsTabActive';\nimport { shouldEnableRunDetailsPageAutoRefresh } from '../../../common/utils/FeatureUtils';\nimport { usePopulateImagesByRunUuid } from '../experiment-page/hooks/usePopulateImagesByRunUuid';\nimport type { UseGetRunQueryResponseRunInfo } from './hooks/useGetRunQuery';\nimport { RunsChartsGlobalChartSettingsDropdown } from '../runs-charts/components/RunsChartsGlobalChartSettingsDropdown';\nimport { RunsChartsDraggableCardsGridContextProvider } from '../runs-charts/components/RunsChartsDraggableCardsGridContext';\nimport { RunsChartsFilterInput } from '../runs-charts/components/RunsChartsFilterInput';\n\ninterface RunViewMetricChartsProps {\n  metricKeys: string[];\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  /**\n   * Whether to display model or system metrics. This affects labels and tooltips.\n   */\n  mode: 'model' | 'system';\n\n  latestMetrics?: MetricEntitiesByName;\n  tags?: Record<string, KeyValueEntity>;\n  params?: Record<string, KeyValueEntity>;\n}\n\n/**\n * Component displaying metric charts for a single run\n */\nconst RunViewMetricChartsImpl = ({\n  runInfo,\n  metricKeys,\n  mode,\n  chartUIState,\n  updateChartsUIState,\n  latestMetrics = {},\n  params = {},\n  tags = {},\n}: RunViewMetricChartsProps & {\n  chartUIState: ExperimentRunsChartsUIConfiguration;\n  updateChartsUIState: (\n    stateSetter: (state: ExperimentRunsChartsUIConfiguration) => ExperimentRunsChartsUIConfiguration,\n  ) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [search, setSearch] = useState('');\n  const { formatMessage } = useIntl();\n\n  const { compareRunCharts, compareRunSections, chartsSearchFilter } = chartUIState;\n\n  // For the draggable grid layout, we filter visible cards on this level\n  const visibleChartCards = useMemo(() => {\n    return compareRunCharts?.filter((chart) => !chart.deleted) ?? [];\n  }, [compareRunCharts]);\n\n  const [fullScreenChart, setFullScreenChart] = useState<\n    | {\n        config: RunsChartsCardConfig;\n        title: string | ReactNode;\n        subtitle: ReactNode;\n      }\n    | undefined\n  >(undefined);\n\n  const metricsForRun = useSelector(({ entities }: ReduxState) => {\n    return mapValues(entities.sampledMetricsByRunUuid[runInfo.runUuid ?? ''], (metricsByRange) => {\n      return compact(\n        values(metricsByRange)\n          .map(({ metricsHistory }) => metricsHistory)\n          .flat(),\n      );\n    });\n  });\n\n  const tooltipContextValue = useMemo(() => ({ runInfo, metricsForRun }), [runInfo, metricsForRun]);\n\n  const { imagesByRunUuid } = useSelector((state: ReduxState) => ({\n    imagesByRunUuid: state.entities.imagesByRunUuid,\n  }));\n\n  const [configuredCardConfig, setConfiguredCardConfig] = useState<RunsChartsCardConfig | null>(null);\n\n  const reorderCharts = useReorderRunsChartsFn();\n\n  const addNewChartCard = (metricSectionId: string) => (type: RunsChartType) =>\n    setConfiguredCardConfig(RunsChartsCardConfig.getEmptyChartCardByType(type, false, undefined, metricSectionId));\n\n  const insertCharts = useInsertRunsChartsFn();\n\n  const startEditChart = (chartCard: RunsChartsCardConfig) => setConfiguredCardConfig(chartCard);\n\n  const removeChart = useRemoveRunsChartFn();\n\n  const confirmChartCardConfiguration = useConfirmChartCardConfigurationFn();\n\n  const submitForm = (configuredCard: Partial<RunsChartsCardConfig>) => {\n    confirmChartCardConfiguration(configuredCard);\n\n    // Hide the modal\n    setConfiguredCardConfig(null);\n  };\n\n  // Create a single run data object to be used in charts\n  const chartData: RunsChartsRunData[] = useMemo(\n    () => [\n      {\n        displayName: runInfo.runName ?? '',\n        metrics: latestMetrics,\n        params,\n        tags,\n        images: imagesByRunUuid[runInfo.runUuid ?? ''] || {},\n        metricHistory: {},\n        uuid: runInfo.runUuid ?? '',\n        color: theme.colors.primary,\n        runInfo,\n      },\n    ],\n    [runInfo, latestMetrics, params, tags, imagesByRunUuid, theme],\n  );\n\n  useEffect(() => {\n    if ((!compareRunSections || !compareRunCharts) && chartData.length > 0) {\n      const { resultChartSet, resultSectionSet } = RunsChartsCardConfig.getBaseChartAndSectionConfigs({\n        runsData: chartData,\n        enabledSectionNames: [mode === 'model' ? MLFLOW_MODEL_METRIC_NAME : MLFLOW_SYSTEM_METRIC_NAME],\n        // Filter only model or system metrics\n        filterMetricNames: (name) => {\n          const isSystemMetric = name.startsWith(MLFLOW_SYSTEM_METRIC_PREFIX);\n          return mode === 'model' ? !isSystemMetric : isSystemMetric;\n        },\n      });\n\n      updateChartsUIState((current) => ({\n        ...current,\n        compareRunCharts: resultChartSet,\n        compareRunSections: resultSectionSet,\n      }));\n    }\n  }, [compareRunCharts, compareRunSections, chartData, mode, updateChartsUIState]);\n\n  /**\n   * Update charts with the latest metrics if new are found\n   */\n  useEffect(() => {\n    updateChartsUIState((current) => {\n      if (!current.compareRunCharts || !current.compareRunSections) {\n        return current;\n      }\n      const { resultChartSet, resultSectionSet, isResultUpdated } = RunsChartsCardConfig.updateChartAndSectionConfigs({\n        compareRunCharts: current.compareRunCharts,\n        compareRunSections: current.compareRunSections,\n        runsData: chartData,\n        isAccordionReordered: current.isAccordionReordered,\n        // Filter only model or system metrics\n        filterMetricNames: (name) => {\n          const isSystemMetric = name.startsWith(MLFLOW_SYSTEM_METRIC_PREFIX);\n          return mode === 'model' ? !isSystemMetric : isSystemMetric;\n        },\n      });\n\n      if (!isResultUpdated) {\n        return current;\n      }\n      return {\n        ...current,\n        compareRunCharts: resultChartSet,\n        compareRunSections: resultSectionSet,\n      };\n    });\n  }, [chartData, updateChartsUIState, mode]);\n\n  const isTabActive = useIsTabActive();\n  const autoRefreshEnabled = chartUIState.autoRefreshEnabled && shouldEnableRunDetailsPageAutoRefresh() && isTabActive;\n\n  // Determine if run contains images logged by `mlflow.log_image()`\n  const containsLoggedImages = Boolean(tags[LOG_IMAGE_TAG_INDICATOR]);\n\n  usePopulateImagesByRunUuid({\n    runUuids: [runInfo.runUuid ?? ''],\n    runUuidsIsActive: [runInfo.status === 'RUNNING'],\n    autoRefreshEnabled,\n    enabled: containsLoggedImages,\n  });\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n      }}\n    >\n      <div\n        css={{\n          paddingBottom: theme.spacing.md,\n          display: 'flex',\n          gap: theme.spacing.sm,\n          flex: '0 0 auto',\n        }}\n      >\n        <RunsChartsFilterInput chartsSearchFilter={chartsSearchFilter} />\n        {shouldEnableRunDetailsPageAutoRefresh() && (\n          <ToggleButton\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewmetricchartsv2.tsx_244\"\n            pressed={chartUIState.autoRefreshEnabled}\n            onPressedChange={(pressed) => {\n              updateChartsUIState((current) => ({ ...current, autoRefreshEnabled: pressed }));\n            }}\n          >\n            {formatMessage({\n              defaultMessage: 'Auto-refresh',\n              description: 'Run page > Charts tab > Auto-refresh toggle button',\n            })}\n          </ToggleButton>\n        )}\n        <RunsChartsGlobalChartSettingsDropdown\n          metricKeyList={metricKeys}\n          globalLineChartConfig={chartUIState.globalLineChartConfig}\n          updateUIState={updateChartsUIState}\n        />\n      </div>\n      <div\n        css={{\n          flex: 1,\n          overflow: 'auto',\n        }}\n      >\n        <RunsChartsTooltipWrapper contextData={tooltipContextValue} component={RunViewChartTooltipBody}>\n          <RunsChartsDraggableCardsGridContextProvider visibleChartCards={visibleChartCards}>\n            <RunsChartsSectionAccordion\n              compareRunSections={compareRunSections}\n              compareRunCharts={visibleChartCards}\n              reorderCharts={reorderCharts}\n              insertCharts={insertCharts}\n              chartData={chartData}\n              startEditChart={startEditChart}\n              removeChart={removeChart}\n              addNewChartCard={addNewChartCard}\n              search={chartsSearchFilter ?? ''}\n              supportedChartTypes={[RunsChartType.LINE, RunsChartType.BAR, RunsChartType.IMAGE]}\n              setFullScreenChart={setFullScreenChart}\n              autoRefreshEnabled={autoRefreshEnabled}\n              globalLineChartConfig={chartUIState.globalLineChartConfig}\n              groupBy={null}\n            />\n          </RunsChartsDraggableCardsGridContextProvider>\n        </RunsChartsTooltipWrapper>\n      </div>\n      {configuredCardConfig && (\n        <RunsChartsConfigureModal\n          chartRunData={chartData}\n          metricKeyList={metricKeys}\n          paramKeyList={[]}\n          config={configuredCardConfig}\n          onSubmit={submitForm}\n          onCancel={() => setConfiguredCardConfig(null)}\n          groupBy={null}\n          supportedChartTypes={[RunsChartType.LINE, RunsChartType.BAR, RunsChartType.IMAGE]}\n          globalLineChartConfig={chartUIState.globalLineChartConfig}\n        />\n      )}\n      <RunsChartsFullScreenModal\n        fullScreenChart={fullScreenChart}\n        onCancel={() => setFullScreenChart(undefined)}\n        chartData={chartData}\n        tooltipContextValue={tooltipContextValue}\n        tooltipComponent={RunViewChartTooltipBody}\n        autoRefreshEnabled={autoRefreshEnabled}\n        groupBy={null}\n      />\n    </div>\n  );\n};\n\nexport const RunViewMetricCharts = (props: RunViewMetricChartsProps) => {\n  const persistenceIdentifier = `${props.runInfo.runUuid}-${props.mode}`;\n\n  const localStore = useMemo(\n    () => LocalStorageUtils.getStoreForComponent('RunPage', persistenceIdentifier),\n    [persistenceIdentifier],\n  );\n\n  const [chartUIState, updateChartsUIState] = useState<ExperimentRunsChartsUIConfiguration>(() => {\n    const defaultChartState: ExperimentRunsChartsUIConfiguration = {\n      isAccordionReordered: false,\n      compareRunCharts: undefined,\n      compareRunSections: undefined,\n      // Auto-refresh is enabled by default only if the flag is set\n      autoRefreshEnabled: shouldEnableRunDetailsPageAutoRefresh(),\n      globalLineChartConfig: {\n        xAxisKey: RunsChartsLineChartXAxisType.STEP,\n        lineSmoothness: 0,\n        selectedXAxisMetricKey: '',\n      },\n    };\n    try {\n      const persistedChartState = localStore.getItem('chartUIState');\n\n      if (!persistedChartState) {\n        return defaultChartState;\n      }\n      return JSON.parse(persistedChartState);\n    } catch {\n      return defaultChartState;\n    }\n  });\n\n  useEffect(() => {\n    localStore.setItem('chartUIState', JSON.stringify(chartUIState));\n  }, [chartUIState, localStore]);\n\n  return (\n    <RunsChartsUIConfigurationContextProvider updateChartsUIState={updateChartsUIState}>\n      <RunViewMetricChartsImpl {...props} chartUIState={chartUIState} updateChartsUIState={updateChartsUIState} />\n    </RunsChartsUIConfigurationContextProvider>\n  );\n};\n\nconst RunViewMetricChartsSkeleton = ({ className }: { className?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        flex: 1,\n        display: 'grid',\n        gridTemplateColumns: '1fr 1fr 1fr',\n        gridTemplateRows: '200px',\n        gap: theme.spacing.md,\n      }}\n      className={className}\n    >\n      {new Array(6).fill(null).map((_, index) => (\n        <TableSkeleton key={index} lines={5} seed={index.toString()} />\n      ))}\n    </div>\n  );\n};\n","import { useMemo } from 'react';\nimport { useGetLoggedModelsQuery } from '../../../hooks/logged-models/useGetLoggedModelsQuery';\nimport type { UseGetRunQueryResponseInputs, UseGetRunQueryResponseOutputs } from '../../run-page/hooks/useGetRunQuery';\nimport { compact, isEmpty, uniq } from 'lodash';\n\nexport const useLoggedModelsForExperimentRunV2 = ({\n  runInputs,\n  runOutputs,\n  enabled = true,\n}: {\n  runInputs?: UseGetRunQueryResponseInputs;\n  runOutputs?: UseGetRunQueryResponseOutputs;\n  enabled?: boolean;\n}) => {\n  const modelIds = useMemo(() => {\n    const inputs = runInputs?.modelInputs ?? [];\n    const outputs = runOutputs?.modelOutputs ?? [];\n    const allModels = [...inputs, ...outputs];\n    const modelIds = uniq(compact(allModels.map(({ modelId }) => modelId)));\n\n    if (isEmpty(modelIds)) {\n      return undefined;\n    }\n\n    return modelIds;\n  }, [runInputs, runOutputs]);\n\n  const isHookEnabled = enabled && !isEmpty(modelIds);\n\n  const {\n    data: loggedModelsData,\n    isLoading,\n    error,\n  } = useGetLoggedModelsQuery(\n    {\n      modelIds,\n    },\n    {\n      enabled: isHookEnabled,\n    },\n  );\n\n  return { models: loggedModelsData, isLoading: isHookEnabled && isLoading, error };\n};\n","import { DangerIcon, Empty, ParagraphSkeleton, TitleSkeleton, useDesignSystemTheme } from '@databricks/design-system';\nimport { useSelector } from 'react-redux';\nimport invariant from 'invariant';\nimport { useMemo, useState } from 'react';\n\nimport { PageContainer } from '../../../common/components/PageContainer';\nimport { useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { RunPageTabName } from '../../constants';\nimport { RenameRunModal } from '../modals/RenameRunModal';\nimport { RunViewArtifactTab } from './RunViewArtifactTab';\nimport { RunViewHeader } from './RunViewHeader';\nimport { RunViewOverview } from './RunViewOverview';\nimport { useRunDetailsPageData } from './hooks/useRunDetailsPageData';\nimport { useRunViewActiveTab } from './useRunViewActiveTab';\nimport type { ReduxState } from '../../../redux-types';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\nimport { RunNotFoundView } from '../RunNotFoundView';\nimport { ErrorCodes } from '../../../common/constants';\nimport NotFoundPage from '../NotFoundPage';\nimport { RunViewEvaluationsTab } from '../evaluations/RunViewEvaluationsTab';\nimport { FormattedMessage } from 'react-intl';\nimport { isSystemMetricKey } from '../../utils/MetricsUtils';\nimport DeleteRunModal from '../modals/DeleteRunModal';\nimport Routes from '../../routes';\nimport { RunViewMetricCharts } from './RunViewMetricCharts';\nimport {\n  shouldEnableGraphQLRunDetailsPage,\n  shouldUseGetLoggedModelsBatchAPI,\n} from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport { getGraphQLErrorMessage } from '../../../graphql/get-graphql-error';\nimport { useLoggedModelsForExperimentRun } from '../experiment-page/hooks/useLoggedModelsForExperimentRun';\nimport { useLoggedModelsForExperimentRunV2 } from '../experiment-page/hooks/useLoggedModelsForExperimentRunV2';\nimport { getExperimentKindFromTags } from '../../utils/ExperimentKindUtils';\n\nconst RunPageLoadingState = () => (\n  <PageContainer>\n    <TitleSkeleton\n      loading\n      label={<FormattedMessage defaultMessage=\"Run page loading\" description=\"Run page > Loading state\" />}\n    />\n    {[...Array(3).keys()].map((i) => (\n      <ParagraphSkeleton key={i} seed={`s-${i}`} />\n    ))}\n  </PageContainer>\n);\n\nexport const RunPage = () => {\n  const { runUuid, experimentId } = useParams<{\n    runUuid: string;\n    experimentId: string;\n  }>();\n  const navigate = useNavigate();\n  const { theme } = useDesignSystemTheme();\n  const [renameModalVisible, setRenameModalVisible] = useState(false);\n  const [deleteModalVisible, setDeleteModalVisible] = useState(false);\n\n  invariant(runUuid, '[RunPage] Run UUID route param not provided');\n  invariant(experimentId, '[RunPage] Experiment ID route param not provided');\n\n  // After invariant checks, we can safely cast these as non-null\n  const safeRunUuid = runUuid as string;\n  const safeExperimentId = experimentId as string;\n\n  const {\n    experiment,\n    error,\n    latestMetrics,\n    loading,\n    params,\n    refetchRun,\n    runInfo,\n    tags,\n    experimentFetchError,\n    runFetchError,\n    apiError,\n    datasets,\n    runInputs,\n    runOutputs,\n    registeredModelVersionSummaries,\n  } = useRunDetailsPageData({\n    experimentId: safeExperimentId,\n    runUuid: safeRunUuid,\n  });\n\n  const hasRunData = Boolean(runInfo);\n\n  const [modelMetricKeys, systemMetricKeys] = useMemo<[string[], string[]]>(() => {\n    if (!latestMetrics) {\n      return [[], []];\n    }\n\n    return [\n      Object.keys(latestMetrics).filter((metricKey) => !isSystemMetricKey(metricKey)),\n      Object.keys(latestMetrics).filter((metricKey) => isSystemMetricKey(metricKey)),\n    ];\n  }, [latestMetrics]);\n\n  const { comparedExperimentIds = [], hasComparedExperimentsBefore = false } = useSelector(\n    (state: ReduxState) => state.comparedExperiments || {},\n  );\n\n  const activeTab = useRunViewActiveTab();\n\n  const isUsingGetLoggedModelsApi = shouldUseGetLoggedModelsBatchAPI();\n\n  const loggedModelsForRun = useLoggedModelsForExperimentRun(\n    safeExperimentId,\n    safeRunUuid,\n    runInputs,\n    runOutputs,\n    !isUsingGetLoggedModelsApi,\n  );\n  const loggedModelsForRunV2 = useLoggedModelsForExperimentRunV2({\n    runInputs,\n    runOutputs,\n    enabled: isUsingGetLoggedModelsApi,\n  });\n\n  const {\n    error: loggedModelsError,\n    isLoading: isLoadingLoggedModels,\n    models: loggedModelsV3,\n  } = isUsingGetLoggedModelsApi ? loggedModelsForRunV2 : loggedModelsForRun;\n\n  const renderActiveTab = () => {\n    if (!runInfo) {\n      return null;\n    }\n    const renderEvaluationTab = () => (\n      <RunViewEvaluationsTab\n        runUuid={safeRunUuid}\n        runTags={tags}\n        experimentId={safeExperimentId}\n        runDisplayName={Utils.getRunDisplayName(runInfo, safeRunUuid)}\n      />\n    );\n    switch (activeTab) {\n      case RunPageTabName.MODEL_METRIC_CHARTS:\n        return (\n          <RunViewMetricCharts\n            key=\"model\"\n            mode=\"model\"\n            metricKeys={modelMetricKeys}\n            runInfo={runInfo}\n            latestMetrics={latestMetrics}\n            tags={tags}\n            params={params}\n          />\n        );\n\n      case RunPageTabName.SYSTEM_METRIC_CHARTS:\n        return (\n          <RunViewMetricCharts\n            key=\"system\"\n            mode=\"system\"\n            metricKeys={systemMetricKeys}\n            runInfo={runInfo}\n            latestMetrics={latestMetrics}\n            tags={tags}\n            params={params}\n          />\n        );\n      case RunPageTabName.EVALUATIONS:\n        return renderEvaluationTab();\n      case RunPageTabName.ARTIFACTS:\n        return (\n          <RunViewArtifactTab\n            runUuid={safeRunUuid}\n            runTags={tags}\n            runOutputs={runOutputs}\n            experimentId={safeExperimentId}\n            artifactUri={runInfo.artifactUri ?? undefined}\n          />\n        );\n      case RunPageTabName.TRACES:\n        return renderEvaluationTab();\n    }\n\n    return (\n      <RunViewOverview\n        runInfo={runInfo}\n        tags={tags}\n        params={params}\n        latestMetrics={latestMetrics}\n        runUuid={safeRunUuid}\n        onRunDataUpdated={refetchRun}\n        runInputs={runInputs}\n        runOutputs={runOutputs}\n        datasets={datasets}\n        registeredModelVersionSummaries={registeredModelVersionSummaries}\n        loggedModelsV3={loggedModelsV3}\n        isLoadingLoggedModels={isLoadingLoggedModels}\n        loggedModelsError={loggedModelsError ?? undefined}\n        experimentKind={getExperimentKindFromTags(experiment?.tags)}\n      />\n    );\n  };\n\n  // Use full height page with scrollable tab area only for non-xs screens\n  const useFullHeightPage = useMediaQuery(`(min-width: ${theme.responsive.breakpoints.sm}px)`);\n\n  const initialLoading = loading && (!runInfo || !experiment);\n\n  // Handle \"run not found\" error\n  if (\n    // For REST API:\n    (runFetchError instanceof ErrorWrapper && runFetchError.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST) ||\n    // For GraphQL:\n    apiError?.code === ErrorCodes.RESOURCE_DOES_NOT_EXIST ||\n    (error && getGraphQLErrorMessage(error).match(/not found$/))\n  ) {\n    return <RunNotFoundView runId={safeRunUuid} />;\n  }\n\n  // Handle experiment not found error\n  if (\n    experimentFetchError instanceof ErrorWrapper &&\n    experimentFetchError.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST\n  ) {\n    return <NotFoundPage />;\n  }\n\n  // Catch-all for legacy REST API errors\n  if (runFetchError || experimentFetchError) {\n    return null;\n  }\n\n  // Catch-all for GraphQL errors\n  if (\n    shouldEnableGraphQLRunDetailsPage() &&\n    (error || apiError) &&\n    // We display the error only if we have no run data, as it's possible\n    // to get partial results due to failure in a nested resolver\n    !hasRunData\n  ) {\n    return (\n      <div css={{ marginTop: theme.spacing.lg }}>\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"Can't load run details\"\n              description=\"Run page > error loading page title\"\n            />\n          }\n          description={getGraphQLErrorMessage(apiError ?? error)}\n          image={<DangerIcon />}\n        />\n      </div>\n    );\n  }\n\n  // Display spinner/skeleton for the initial data load\n  if (initialLoading || !runInfo || !experiment) {\n    return <RunPageLoadingState />;\n  }\n\n  return (\n    <>\n      <PageContainer usesFullHeight={useFullHeightPage}>\n        {/* Header fixed on top */}\n        <RunViewHeader\n          comparedExperimentIds={comparedExperimentIds}\n          experiment={experiment}\n          handleRenameRunClick={() => setRenameModalVisible(true)}\n          handleDeleteRunClick={() => setDeleteModalVisible(true)}\n          hasComparedExperimentsBefore={hasComparedExperimentsBefore}\n          runDisplayName={Utils.getRunDisplayName(runInfo, safeRunUuid)}\n          runTags={tags}\n          runParams={params}\n          runUuid={safeRunUuid}\n          runOutputs={runOutputs}\n          artifactRootUri={runInfo?.artifactUri ?? undefined}\n          registeredModelVersionSummaries={registeredModelVersionSummaries}\n          isLoading={loading || isLoadingLoggedModels}\n        />\n        {/* Scroll tab contents independently within own container */}\n        <div css={{ flex: 1, overflow: 'auto', marginBottom: theme.spacing.sm, display: 'flex' }}>\n          {renderActiveTab()}\n        </div>\n      </PageContainer>\n      <RenameRunModal\n        runUuid={safeRunUuid}\n        onClose={() => setRenameModalVisible(false)}\n        runName={runInfo.runName ?? ''}\n        isOpen={renameModalVisible}\n        onSuccess={refetchRun}\n      />\n      <DeleteRunModal\n        selectedRunIds={[safeRunUuid]}\n        onClose={() => setDeleteModalVisible(false)}\n        isOpen={deleteModalVisible}\n        onSuccess={() => {\n          navigate(Routes.getExperimentPageRoute(safeExperimentId));\n        }}\n      />\n    </>\n  );\n};\n\nexport default RunPage;\n","import { useMemo } from 'react';\nimport { useSearchLoggedModelsQuery } from '../../../hooks/logged-models/useSearchLoggedModelsQuery';\nimport type { UseGetRunQueryResponseInputs, UseGetRunQueryResponseOutputs } from '../../run-page/hooks/useGetRunQuery';\nimport { compact, isEmpty, uniq } from 'lodash';\n\nexport const useLoggedModelsForExperimentRun = (\n  experimentId: string,\n  runId: string,\n  runInputs?: UseGetRunQueryResponseInputs,\n  runOutputs?: UseGetRunQueryResponseOutputs,\n  enabled = true,\n) => {\n  const searchQuery = useMemo(() => {\n    const inputs = runInputs?.modelInputs ?? [];\n    const outputs = runOutputs?.modelOutputs ?? [];\n    const allModels = [...inputs, ...outputs];\n    const modelIds = uniq(compact(allModels.map(({ modelId }) => modelId)));\n\n    if (isEmpty(modelIds)) {\n      return undefined;\n    }\n\n    return `attributes.model_id IN (${modelIds.map((id) => `'${id}'`).join(',')})`;\n  }, [runInputs, runOutputs]);\n\n  const isHookEnabled = enabled && Boolean(searchQuery);\n\n  const {\n    data: loggedModelsData,\n    isLoading,\n    error,\n  } = useSearchLoggedModelsQuery(\n    { experimentIds: [experimentId], searchQuery },\n    {\n      enabled: isHookEnabled,\n    },\n  );\n\n  return {\n    // We explicitly check if the hook is supposed to be enabled before returning data,\n    // otherwise react-query might erroneously return data from the cache.\n    models: isHookEnabled ? loggedModelsData : undefined,\n    // Same goes for `isLoading` which sometimes returns `true` despite the hook being disabled.\n    isLoading: isHookEnabled && isLoading,\n    error,\n  };\n};\n","import { ApolloError } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\n\ninterface CommonGraphQLApiError {\n  code: string | null;\n  message: string | null;\n}\n\nexport const getGraphQLErrorMessage = (error?: CommonGraphQLApiError | ApolloError | Error | any) => {\n  if (!error) {\n    return undefined;\n  }\n  if (error instanceof ApolloError) {\n    if (error.graphQLErrors.length > 0) {\n      return error.graphQLErrors.map((e) => e.message || e.toString()).join(', ');\n    }\n  }\n\n  if ('message' in error) {\n    return error.message;\n  }\n\n  return error.toString();\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\n\nexport function TagAssignmentRowContainer({ children }: { children: React.ReactNode }) {\n  const { theme } = useDesignSystemTheme();\n  return <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>{children}</div>;\n}\n","import invariant from 'invariant';\nimport { createContext, useContext } from 'react';\nimport type { FieldValues, ArrayPath, FieldArray } from 'react-hook-form';\n\nimport type { UseTagAssignmentFormReturn } from '../hooks/useTagAssignmentForm';\n\nexport const TagAssignmentContext = createContext<UseTagAssignmentFormReturn | null>(null);\n\nexport function TagAssignmentContextProvider<\n  T extends FieldValues = FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n>({ children, ...props }: { children: React.ReactNode } & UseTagAssignmentFormReturn<T, K, V>) {\n  return <TagAssignmentContext.Provider value={props as any}>{children}</TagAssignmentContext.Provider>;\n}\n\nexport function useTagAssignmentContext<\n  T extends FieldValues = FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n>() {\n  const context = useContext(TagAssignmentContext as React.Context<UseTagAssignmentFormReturn<T, K, V> | null>);\n  invariant(context, 'useTagAssignmentContext must be used within a TagAssignmentRoot');\n  return context;\n}\n","import invariant from 'invariant';\nimport type { ArrayPath, FieldArray, FieldValues } from 'react-hook-form';\nimport { FormProvider, useFormContext } from 'react-hook-form';\n\nimport { TagAssignmentRowContainer } from './TagAssignmentUI/TagAssignmentRowContainer';\nimport { TagAssignmentContextProvider } from '../context/TagAssignmentContextProvider';\nimport type { UseTagAssignmentFormReturn } from '../hooks/useTagAssignmentForm';\n\nexport function TagAssignmentRoot<\n  T extends FieldValues = FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n>({ children, ...props }: { children: React.ReactNode } & UseTagAssignmentFormReturn<T, K, V>) {\n  const formCtx = useFormContext();\n\n  const Component = (\n    <TagAssignmentContextProvider {...props}>\n      <TagAssignmentRowContainer>{children}</TagAssignmentRowContainer>\n    </TagAssignmentContextProvider>\n  );\n\n  if (formCtx) {\n    return Component;\n  }\n\n  invariant(props.form, 'Nest your component on a FormProvider or pass a form prop');\n\n  return <FormProvider {...props.form}>{Component}</FormProvider>;\n}\n","import invariant from 'invariant';\nimport React from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nexport function TagAssignmentRow({ children }: { children: React.ReactNode }) {\n  const { theme } = useDesignSystemTheme();\n\n  const stableChildren = React.Children.toArray(children);\n  invariant(stableChildren.length <= 3, 'TagAssignmentRow must have 3 children or less');\n\n  const parsedChildren = Array(3)\n    .fill(null)\n    .map((_, i) => stableChildren[i] ?? <span key={i} style={{ width: theme.general.heightSm }} />); // Sync width with only icon button width\n\n  return (\n    <div css={{ display: 'grid', gridTemplateColumns: '1fr 1fr min-content', gap: theme.spacing.sm }}>\n      {parsedChildren}\n    </div>\n  );\n}\n","import { Typography } from '@databricks/design-system';\n\nexport function TagAssignmentLabel({ children }: { children: React.ReactNode }) {\n  return <Typography.Text bold>{children}</Typography.Text>;\n}\n","import { forwardRef } from 'react';\n\nimport type { InputProps, InputRef } from '@databricks/design-system';\nimport { FormUI, Input } from '@databricks/design-system';\n\ninterface TagAssignmentInputProps extends InputProps {\n  errorMessage?: string;\n}\n\nexport const TagAssignmentInput: React.ForwardRefExoticComponent<\n  TagAssignmentInputProps & React.RefAttributes<InputRef>\n> = forwardRef<InputRef, TagAssignmentInputProps>(({ errorMessage, ...otherProps }: TagAssignmentInputProps, ref) => {\n  return (\n    <div css={{ flex: 1 }}>\n      <Input validationState={errorMessage ? 'error' : 'info'} {...otherProps} ref={ref} />\n      {errorMessage && <FormUI.Message message={errorMessage} type=\"error\" />}\n    </div>\n  );\n});\n","// Do not modify this file\n\nimport React from 'react';\nimport type { ControllerProps, FieldValues, Path, UseControllerProps } from 'react-hook-form';\nimport { Controller } from 'react-hook-form';\n\nimport { TagAssignmentInput } from './TagAssignmentField/TagAssignmentInput';\nimport { useTagAssignmentContext } from '../context/TagAssignmentContextProvider';\n\ninterface TagAssignmentKeyProps<T extends FieldValues> {\n  index: number;\n  rules?: UseControllerProps<T>['rules'];\n  render?: ControllerProps<T>['render'];\n}\n\nexport function TagAssignmentKey<T extends FieldValues>({ index, rules, render }: TagAssignmentKeyProps<T>) {\n  const { name, keyProperty, getTagsValues, emptyValue, appendIfPossible } = useTagAssignmentContext<T>();\n\n  return (\n    <Controller\n      name={`${name}.${index}.${keyProperty}` as Path<T>}\n      rules={rules}\n      render={({ field, fieldState, formState }) => {\n        const legacyChange = field.onChange;\n\n        function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n          legacyChange(e);\n\n          const tags = getTagsValues();\n          if (!tags?.at(-1)?.[keyProperty]) return;\n          appendIfPossible(emptyValue, { shouldFocus: false });\n        }\n        field.onChange = handleChange;\n\n        if (render) {\n          return render({ field, fieldState, formState });\n        }\n\n        return (\n          <TagAssignmentInput\n            componentId=\"TagAssignmentKey.Default.Input\"\n            errorMessage={fieldState.error?.message}\n            {...field}\n          />\n        );\n      }}\n    />\n  );\n}\n","// Do not modify this file\n\nimport type { ControllerProps, FieldValues, Path } from 'react-hook-form';\nimport { Controller } from 'react-hook-form';\n\nimport { TagAssignmentInput } from './TagAssignmentField/TagAssignmentInput';\nimport { useTagAssignmentContext } from '../context/TagAssignmentContextProvider';\n\ninterface TagAssignmentValueProps<T extends FieldValues> {\n  rules?: ControllerProps<T>['rules'];\n  index: number;\n  render?: ControllerProps<T>['render'];\n}\n\nexport function TagAssignmentValue<T extends FieldValues>({ rules, index, render }: TagAssignmentValueProps<T>) {\n  const { name, valueProperty } = useTagAssignmentContext<T>();\n\n  return (\n    <Controller\n      rules={rules}\n      name={`${name}.${index}.${valueProperty}` as Path<T>}\n      render={({ field, fieldState, formState }) => {\n        if (render) {\n          return render({ field, fieldState, formState });\n        }\n\n        return (\n          <TagAssignmentInput\n            componentId=\"TagAssignmentValue.Default.Input\"\n            errorMessage={fieldState.error?.message}\n            {...field}\n          />\n        );\n      }}\n    />\n  );\n}\n","import type { ButtonProps } from '@databricks/design-system';\nimport { Button, TrashIcon } from '@databricks/design-system';\n\nexport function TagAssignmentRemoveButtonUI(props: Omit<ButtonProps, 'icon'>) {\n  return <Button icon={<TrashIcon />} {...props} />;\n}\n","import type { ButtonProps } from '@databricks/design-system';\n\nimport { TagAssignmentRemoveButtonUI } from './TagAssignmentUI/TagAssignmentRemoveButtonUI';\nimport { useTagAssignmentContext } from '../context/TagAssignmentContextProvider';\n\nexport interface TagAssignmentRemoveButtonProps extends Omit<ButtonProps, 'onClick' | 'icon'> {\n  index: number;\n}\n\nexport function TagAssignmentRemoveButton({ index, ...props }: TagAssignmentRemoveButtonProps) {\n  const { removeOrUpdate } = useTagAssignmentContext();\n\n  return <TagAssignmentRemoveButtonUI onClick={() => removeOrUpdate(index)} {...props} />;\n}\n","import invariant from 'invariant';\nimport { useCallback, useState } from 'react';\nimport type { ArrayPath, FieldArray, FieldArrayMethodProps, FieldValues, Path } from 'react-hook-form';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\n\nimport { useIntl } from 'react-intl';\nimport type { IntlShape } from 'react-intl';\n\nimport type { UseTagAssignmentProps } from './useTagAssignmentForm';\n\nfunction getTagAssignmentRules(maxLength: number | undefined, intl: IntlShape) {\n  if (maxLength === undefined) return undefined;\n  if (maxLength === 0) {\n    invariant(false, 'maxLength must be greater than 0');\n  }\n  return {\n    maxLength: {\n      value: maxLength,\n      message: intl.formatMessage(\n        {\n          defaultMessage: `You can set a maximum of {maxLength} values`,\n          description:\n            'Error message when trying to submit a key-value pair form with more than the maximum allowed values',\n        },\n        {\n          maxLength,\n        },\n      ),\n    },\n  };\n}\n\ntype UseTagAssignmentFieldArrayProps<\n  T extends FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n> = Pick<UseTagAssignmentProps<T, K, V>, 'name' | 'maxLength' | 'emptyValue' | 'form' | 'keyProperty'>;\n\n/**\n * Alternative to useTagAssignmentForm that only provides a wrapper around RHF's useFieldArray without any\n * side effects to initialize the form state.\n *\n * As with useFieldArray, the caller is expected to manage the form state themselves using these methods.\n * For conformance to the unified tagging pattern, there are 2 key things you are responsible for:\n *   1. Initialize the form state with an empty tag\n *   2. Call appendIfPossible when the user inputs something into the last tag key field\n */\nexport function useTagAssignmentFieldArray<\n  T extends FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n>({ name, maxLength, emptyValue, form, keyProperty }: UseTagAssignmentFieldArrayProps<T, K, V>) {\n  const intl = useIntl();\n\n  const formCtx = useFormContext<T>();\n  const shouldUseFormContext = Boolean(formCtx) && !form;\n  const internalForm = shouldUseFormContext ? formCtx : form;\n\n  invariant(internalForm, 'Nest your component on a FormProvider or pass a form prop');\n\n  const [_emptyValue] = useState(emptyValue);\n  const {\n    append: originalAppend,\n    update,\n    remove: originalRemove,\n    ...fieldArrayMethods\n  } = useFieldArray<T, K>({\n    name,\n    control: internalForm.control,\n    rules: getTagAssignmentRules(maxLength, intl),\n  });\n\n  const { getValues } = internalForm;\n\n  const getTagsValues = useCallback(() => {\n    return getValues(name as Path<T>) as V[] | undefined;\n  }, [getValues, name]);\n\n  const appendIfPossible = useCallback(\n    (value: V | V[], options: FieldArrayMethodProps) => {\n      const tags = getTagsValues();\n      if (maxLength && tags && tags.length >= maxLength) return;\n      originalAppend(value, options);\n    },\n    [getTagsValues, maxLength, originalAppend],\n  );\n\n  const removeOrUpdate = useCallback(\n    (index: number) => {\n      const tags = getTagsValues();\n      if (tags && index === tags.length - 1) {\n        return update(index, _emptyValue);\n      }\n      const lastTag = tags?.at(-1);\n      if (lastTag?.[keyProperty]) {\n        originalRemove(index);\n        originalAppend(_emptyValue, { shouldFocus: false });\n        return;\n      }\n      originalRemove(index);\n    },\n    [_emptyValue, getTagsValues, keyProperty, originalAppend, originalRemove, update],\n  );\n\n  return {\n    form: internalForm,\n    ...fieldArrayMethods,\n    originalAppend,\n    update,\n    originalRemove,\n    appendIfPossible,\n    removeOrUpdate,\n    getTagsValues,\n  };\n}\n\nexport type UseTagAssignmentFieldArrayReturn<\n  T extends FieldValues = FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n> = ReturnType<typeof useTagAssignmentFieldArray<T, K, V>>;\n","import invariant from 'invariant';\nimport { useEffect, useState } from 'react';\nimport type { ArrayPath, FieldArray, FieldValues, Path, PathValue, UseFormReturn } from 'react-hook-form';\nimport { useFormContext } from 'react-hook-form';\n\nimport { useTagAssignmentFieldArray } from './useTagAssignmentFieldArray';\n\nexport interface UseTagAssignmentProps<\n  T extends FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n> {\n  name: K;\n  maxLength?: number;\n  emptyValue: V;\n  loading?: boolean;\n  defaultValues?: V[];\n  form?: UseFormReturn<T>;\n  keyProperty: keyof V extends string ? keyof V : never;\n  valueProperty: keyof V extends string ? keyof V : never;\n}\n\nexport function useTagAssignmentForm<\n  T extends FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n>({\n  name,\n  maxLength,\n  emptyValue,\n  defaultValues,\n  loading,\n  form,\n  keyProperty,\n  valueProperty,\n}: UseTagAssignmentProps<T, K, V>) {\n  const [_emptyValue] = useState(emptyValue);\n\n  const formCtx = useFormContext<T>();\n  const shouldUseFormContext = Boolean(formCtx) && !form;\n  const internalForm = shouldUseFormContext ? formCtx : form;\n\n  invariant(internalForm, 'Nest your component on a FormProvider or pass a form prop');\n  invariant(!(defaultValues && shouldUseFormContext), 'Define defaultValues at form context level');\n\n  const { setValue } = internalForm;\n\n  const fieldArrayMethods = useTagAssignmentFieldArray({\n    name,\n    maxLength,\n    emptyValue,\n    form: internalForm,\n    keyProperty,\n  });\n  const getTagsValues = fieldArrayMethods.getTagsValues;\n\n  useEffect(() => {\n    if (loading) return;\n    if (defaultValues) {\n      const newValues = [...defaultValues];\n      if (!maxLength || (maxLength && newValues.length < maxLength)) {\n        newValues.push(_emptyValue);\n      }\n      setValue(name as Path<T>, newValues as PathValue<T, Path<T>>);\n      return;\n    }\n\n    if (shouldUseFormContext) {\n      const existentValues = getTagsValues() ?? [];\n      if (!maxLength || (maxLength && existentValues.length < maxLength)) {\n        existentValues.push(_emptyValue);\n      }\n      setValue(name as Path<T>, existentValues as PathValue<T, Path<T>>);\n      return;\n    }\n\n    setValue(name as Path<T>, [_emptyValue] as PathValue<T, Path<T>>);\n  }, [defaultValues, setValue, loading, maxLength, name, _emptyValue, shouldUseFormContext, getTagsValues]);\n\n  return {\n    ...fieldArrayMethods,\n    form: internalForm,\n    maxLength,\n    emptyValue,\n    name,\n    keyProperty,\n    valueProperty,\n  };\n}\n\nexport type UseTagAssignmentFormReturn<\n  T extends FieldValues = FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n> = ReturnType<typeof useTagAssignmentForm<T, K, V>>;\n","import {\n  useTagAssignmentForm,\n  TagAssignmentRoot,\n  TagAssignmentRow,\n  TagAssignmentLabel,\n  TagAssignmentKey,\n  TagAssignmentValue,\n  TagAssignmentRemoveButton,\n} from '@databricks/web-shared/unified-tagging';\nimport type { UseFormReturn } from 'react-hook-form';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport type { KeyValueEntity } from '../types';\n\nconst keyProperty = 'key';\nconst valueProperty = 'value';\n\ninterface Props {\n  name: string;\n  form: UseFormReturn<any>;\n  initialTags?: KeyValueEntity[];\n}\n\n/**\n * A component used for displaying the unified tagging form.\n */\nexport const UnifiedTaggingForm = ({ form, name, initialTags }: Props) => {\n  const intl = useIntl();\n\n  const tagsForm = useTagAssignmentForm({\n    name,\n    emptyValue: { key: '', value: '' },\n    keyProperty,\n    valueProperty,\n    form,\n    defaultValues: initialTags,\n  });\n\n  return (\n    <TagAssignmentRoot {...tagsForm}>\n      <TagAssignmentRow>\n        <TagAssignmentLabel>\n          <FormattedMessage defaultMessage=\"Key\" description=\"Tag assignment modal > Key label\" />\n        </TagAssignmentLabel>\n        <TagAssignmentLabel>\n          <FormattedMessage defaultMessage=\"Value\" description=\"Tag assignment modal > Value label\" />\n        </TagAssignmentLabel>\n      </TagAssignmentRow>\n\n      {tagsForm.fields.map((field, index) => {\n        return (\n          <TagAssignmentRow key={field.id}>\n            <TagAssignmentKey\n              index={index}\n              rules={{\n                validate: {\n                  unique: (value) => {\n                    const tags = tagsForm.getTagsValues();\n                    if (tags?.findIndex((tag) => tag[keyProperty] === value) !== index) {\n                      return intl.formatMessage({\n                        defaultMessage: 'Key must be unique',\n                        description: 'Error message for unique key in tag assignment modal',\n                      });\n                    }\n                    return true;\n                  },\n                  required: (value) => {\n                    const tags = tagsForm.getTagsValues();\n                    if (tags?.at(index)?.[valueProperty] && !value) {\n                      return intl.formatMessage({\n                        defaultMessage: 'Key is required if value is present',\n                        description: 'Error message for required key in tag assignment modal',\n                      });\n                    }\n                    return true;\n                  },\n                },\n              }}\n            />\n            <TagAssignmentValue index={index} />\n            <TagAssignmentRemoveButton index={index} componentId=\"endpoint-tags-section.remove-button\" />\n          </TagAssignmentRow>\n        );\n      })}\n    </TagAssignmentRoot>\n  );\n};\n","import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Modal, Button, Alert, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport type { FieldValues } from 'react-hook-form';\nimport type { KeyValueEntity } from '../types';\nimport { UnifiedTaggingForm } from '../components/UnifiedTaggingForm';\n\ninterface Params {\n  componentIdPrefix: string;\n  title?: React.ReactNode;\n  isLoading?: boolean;\n  visible?: boolean;\n  initialTags?: KeyValueEntity[];\n  error?: string;\n  onSubmit: (newTags: KeyValueEntity[], deletedTags: KeyValueEntity[]) => Promise<any>;\n  onSuccess?: () => void;\n  onClose?: () => void;\n}\n\nconst keyProperty = 'key' as const;\nconst valueProperty = 'value' as const;\nconst formName = 'tags';\n\nconst emptyValue = { key: '', value: '' };\n\nexport const useTagAssignmentModal = ({\n  componentIdPrefix,\n  title,\n  visible,\n  initialTags,\n  isLoading = false,\n  error,\n  onSubmit,\n  onSuccess,\n  onClose,\n}: Params) => {\n  const baseComponentId = `${componentIdPrefix}.tag-assignment-modal`;\n\n  const [isVisible, setIsVisible] = useState(false);\n  const { theme } = useDesignSystemTheme();\n  const form = useForm<{ tags: KeyValueEntity[] }>({ mode: 'onChange' });\n\n  const showTagAssignmentModal = () => {\n    setIsVisible(true);\n  };\n\n  const hideTagAssignmentModal = () => {\n    setIsVisible(false);\n    form.reset({ [formName]: [emptyValue] });\n    onClose?.();\n  };\n\n  const handleSubmit = (data: FieldValues) => {\n    const tags: KeyValueEntity[] = data[formName].filter((tag: FieldValues) => Boolean(tag[keyProperty]));\n    const newTags =\n      tags.filter(\n        (tag) =>\n          !initialTags?.some((t) => t[keyProperty] === tag[keyProperty] && t[valueProperty] === tag[valueProperty]),\n      ) ?? [];\n    const deletedTags =\n      initialTags?.filter(\n        (tag) => !tags.some((t) => t[keyProperty] === tag[keyProperty] && t[valueProperty] === tag[valueProperty]),\n      ) ?? [];\n\n    onSubmit(newTags, deletedTags).then(() => {\n      hideTagAssignmentModal();\n      onSuccess?.();\n    });\n  };\n\n  const defaultTitleNode = (\n    <FormattedMessage defaultMessage=\"Add tags\" description=\"Tag assignment modal > Title of the add tags modal\" />\n  );\n\n  const TagAssignmentModal = (\n    <Modal\n      componentId={`${baseComponentId}`}\n      title={title ?? defaultTitleNode}\n      visible={visible ?? isVisible}\n      destroyOnClose\n      onCancel={hideTagAssignmentModal}\n      footer={\n        <>\n          <Button\n            componentId={`${baseComponentId}.submit-button`}\n            onClick={hideTagAssignmentModal}\n            disabled={isLoading}\n          >\n            <FormattedMessage defaultMessage=\"Cancel\" description=\"Tag assignment modal > Cancel button\" />\n          </Button>\n          <Button\n            componentId={`${baseComponentId}.submit-button`}\n            type=\"primary\"\n            onClick={form.handleSubmit(handleSubmit)}\n            loading={isLoading}\n            disabled={isLoading}\n          >\n            <FormattedMessage defaultMessage=\"Save\" description=\"Tag assignment modal > Save button\" />\n          </Button>\n        </>\n      }\n    >\n      {error && (\n        <Alert\n          type=\"error\"\n          message={error}\n          componentId={`${baseComponentId}.error`}\n          closable={false}\n          css={{ marginBottom: theme.spacing.sm }}\n        />\n      )}\n      <UnifiedTaggingForm name={formName} form={form} initialTags={initialTags} />\n    </Modal>\n  );\n\n  return {\n    TagAssignmentModal,\n    showTagAssignmentModal,\n    hideTagAssignmentModal,\n  };\n};\n\nexport type { Params as TagAssignmentModalParams };\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { PageWrapper, Spacer } from '@databricks/design-system';\n\ntype OwnProps = {\n  usesFullHeight?: boolean;\n  children?: React.ReactNode;\n};\n\n// @ts-expect-error TS(2565): Property 'defaultProps' is used before being assig... Remove this comment to see the full error message\ntype Props = OwnProps & typeof PageContainer.defaultProps;\n\nexport function PageContainer(props: Props) {\n  const { usesFullHeight, ...restProps } = props;\n  return (\n    // @ts-expect-error TS(2322): Type '{ height: string; display: string; flexDirec... Remove this comment to see the full error message\n    <PageWrapper css={usesFullHeight ? styles.useFullHeightLayout : styles.wrapper}>\n      {/* @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message */}\n      <Spacer css={styles.fixedSpacer} />\n      {usesFullHeight ? props.children : <div {...restProps} css={styles.container} />}\n    </PageWrapper>\n  );\n}\n\nPageContainer.defaultProps = {\n  usesFullHeight: false,\n};\n\nconst styles = {\n  useFullHeightLayout: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    '&:last-child': {\n      flexGrow: 1,\n    },\n  },\n  wrapper: { flex: 1 },\n  fixedSpacer: {\n    // Ensure spacer's fixed height regardless of flex\n    flexShrink: 0,\n  },\n  container: {\n    width: '100%',\n    flexGrow: 1,\n    paddingBottom: 24,\n  },\n};\n","import React, { Component } from 'react';\n\nclass NotFoundPage extends Component {\n  render() {\n    return <div>Resource not found.</div>;\n  }\n}\n\nexport default NotFoundPage;\n"],"names":["RunViewArtifactTab","runTags","experimentId","runOutputs","artifactUri","runUuid","theme","useDesignSystemTheme","useFullHeightPage","useMediaQuery","responsive","breakpoints","sm","_jsx","css","_css","flex","overflow","display","paddingBottom","spacing","md","position","children","ArtifactPage","useAutoHeight","artifactRootUri","useRunViewActiveTab","tabParam","useParams","RunPageTabName","MODEL_METRIC_CHARTS","SYSTEM_METRIC_CHARTS","EVALUATIONS","TRACES","match","ARTIFACTS","OVERVIEW","TABS_WITHOUT_MARGIN","RunViewModeSwitch","navigate","useNavigate","currentTab","removeTabMargin","setRemoveTabMargin","useState","includes","_jsxs","LegacyTabs","activeKey","onChange","newTabKey","Routes","getRunPageTabRoute","getRunPageRoute","tabBarStyle","margin","TabPane","tab","FormattedMessage","id","defaultMessage","_ref","name","styles","_ref2","LoggedModelsDropdownContent","models","onRegisterClick","renderSection","title","sectionModels","DropdownMenu","Group","Label","map","model","registeredModelSummary","first","registeredModelVersionSummaries","Item","componentId","onClick","marginRight","last","path","split","HintColumn","Link","target","to","Button","type","size","e","stopPropagation","endIcon","NewWindowIcon","absolutePath","status","displayedName","version","link","IconWrapper","RegisteredModelOkIcon","ModelVersionStatusIcons","Tag","registeredModels","filter","length","unregisteredModels","_Fragment","Separator","RunViewHeaderRegisterModelButton","loggedModelPaths","useMemo","Utils","getLoggedModelsFromTags","artifactPath","orderBy","source","_model$registeredMode","parseInt","selectedModelToRegister","setSelectedModelToRegister","modelsRegistered","RegisterModel","modelPath","modelRelativePath","disabled","showButton","modalVisible","onCloseModal","Root","modal","LegacyTooltip","placement","values","registeredCount","loggedCount","Trigger","asChild","ChevronDownIcon","Content","align","singleModel","registeredModelVersionSummary","marginLeft","buttonType","RunViewHeader","hasComparedExperimentsBefore","comparedExperimentIds","experiment","runDisplayName","runParams","handleRenameRunClick","handleDeleteRunClick","isLoading","_experiment$experimen","shouldRouteToEvaluations","_experiment$tags","_experiment$tags$find","isGenAIExperiment","tags","find","tag","key","EXPERIMENT_KIND_TAG_KEY","value","ExperimentKind","GENAI_DEVELOPMENT","hasModelOutputs","modelOutputs","experimentPageTabRoute","getExperimentPageTabRoute","ExperimentPageTabName","EvaluationRuns","Runs","breadcrumbs","getCompareExperimentsPageRoute","numExperiments","push","PageHeader","OverflowMenu","menu","itemName","renderRegisterModelButton","_experiment$experimen2","RunViewStatusBox","backgroundColor","isDarkMode","colors","green800","green100","red800","red100","blue800","blue100","RunStatusIcon","Typography","Text","color","RunViewUserLinkBox","runInfo","_runInfo$experimentId","user","getUser","searchRunsByUser","systemMetricsLabel","modelMetricsLabel","defineMessages","metricKeyMatchesFilter","toLowerCase","RunViewMetricsTableSection","metricsList","header","table","_otherColumns$find","_otherColumns$find2","column","keyColumn","otherColumns","getLeafHeaders","valueColumn","anyRowHasModels","some","loggedModels","isEmpty","modelColumn","TableRow","TableCell","backgroundSecondary","bold","_runInfo$runUuid","style","getCanResize","getSize","undefined","toString","Overflow","_model$info","_model$info$experimen","_model$info2","_model$info$model_id","_model$info3","_model$info4","rel","getExperimentLoggedModelDetailsPage","info","experiment_id","model_id","RunViewMetricsTable","latestMetrics","detailsPageTableStyles","detailsPageNoEntriesStyles","useExperimentTrackingDetailsPageLayoutStyles","intl","useIntl","setFilter","loggedModelsByMetricKey","metricsWithModels","compact","flatMap","_model$data","_model$data$metrics","data","metrics","groupedMetrics","groupBy","mapValues","group","metricValues","metricList","metric","_loggedModelsByMetric","modelColumnDefs","formatMessage","accessorKey","enableResizing","columns","columnDefs","metricSegments","systemMetrics","isSystemMetricKey","modelMetrics","useReactTable","getCoreRowModel","getRowId","row","enableColumnResizing","columnResizeMode","Title","level","padding","border","borderDecorative","borderRadius","general","borderRadiusBase","flexDirection","renderTableContent","Empty","description","areAllResultsFiltered","sum","marginBottom","Input","prefix","SearchIcon","placeholder","allowClear","Table","scrollable","empty","isHeader","TableHeader","setColumnSizing","isResizing","getIsResizing","flexRender","columnDef","getContext","segment","index","RunViewParentRunBox","parentRunUuid","dispatch","useDispatch","parentRunInfoRedux","useSelector","entities","runInfosByUuid","parentRunInfoGraphql","useGetRunQuery","shouldEnableGraphQLRunDetailsPage","parentRunInfo","_parentRunInfoGraphql","useEffect","getRunApi","runName","ParagraphSkeleton","loading","label","RunViewTagsBox","onTagsUpdated","sharedTaggingUIEnabled","shouldUseSharedTaggingUI","isSavingTags","setIsSavingTags","visibleTagKeys","visibleTagEntities","keys","isUserFacingTag","tagsKeyValueMap","TagAssignmentModal","showTagAssignmentModal","useTagAssignmentModal","componentIdPrefix","initialTags","onSubmit","newTags","deletedTags","saveRunTagsApi","then","onSuccess","EditTagsModal","showEditTagsModal","useEditKeyValueTagsModal","valueRequired","allAvailableTags","saveTagsHandler","async","_","existingTags","setRunTagsBulkApi","showEditModal","editTagsLabel","paddingTop","xs","flexWrap","alignItems","gap","KeyValueTag","enableFullViewModal","Tooltip","content","icon","PencilIcon","Spinner","RunViewDescriptionBox","onDescriptionChanged","_tags$NOTE_CONTENT_TA","noteContent","NOTE_CONTENT_TAG","showNoteEditor","setShowNoteEditor","Hint","EditableNote","defaultMarkdown","markdown","setTagApi","onCancel","handleCancelEditNote","showEditor","RunViewRegisteredModelsBox","modelSummary","queryFn","queryKey","RegisteredPromptsApi","getPromptVersionsForRun","RunViewRegisteredPromptsBox","error","usePromptVersionsForRunQuery","options","_queryResult$error","queryResult","useQuery","retry","refetch","promptVersions","model_versions","parseLinkedPromptsFromRunTags","promptVersion","getPromptDetailsPageRoute","encodeURIComponent","displayText","RunViewLoggedModelsBox","loggedModelsV3","getModelFlavorName","flavors","shouldDisplayArtifactPaths","Set","cursor","height","heightBase","heightSm","ModelsIcon","_model$info$model_id2","getExperimentLoggedModelDetailsPageRoute","_ref3","RunViewSourceBox","search","className","_tags$MLFLOW_RUN_GIT_","_tags$Utils$gitCommit","_tags$Utils$sourceTyp","branchName","MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG","commitHash","gitCommitTag","runSource","renderSource","ExperimentSourceTypeIcon","sourceType","sourceTypeTag","actionPrimaryBackgroundDefault","BranchIcon","Popover","whiteSpace","alignContent","GitCommitIcon","slice","Arrow","CopyButton","showLabel","copyText","CopyIcon","supportedAttributeColumnKeys","ExperimentLoggedModelListPageKnownColumns","RelationshipType","Step","Name","Status","CreationTime","RegisteredModels","Dataset","RunViewLoggedModelsTable","inputs","outputs","isLoadingLoggedModels","loggedModelsError","useCombinedRunInputsOutputsModels","inputLoggedModels","_inputs$modelInputs","uniq","modelInputs","modelInput","modelId","direction","outputLoggedModels","_outputs$modelOutputs","modelOutput","_outputs$modelOutputs2","_correspondingOutputE","correspondingOutputEntry","step","_uniqBy","uniqBy","loggedModel","_loggedModel$data","run_id","modelData","_modelData$info","columnVisibility","setColumnVisibility","useExperimentLoggedModelListPageTableColumns","disablePinnedColumns","disableOrderBy","ExperimentLoggedModelListPageColumnSelector","onUpdateColumns","customTrigger","ColumnsIcon","Spacer","shrinks","Error","message","Alert","closable","ExperimentLoggedModelOpenDatasetDetailsContextProvider","ExperimentLoggedModelListPageTable","isLoadingMore","moreResultsAvailable","disableLoadMore","getTableTheme","displayShowExampleButton","textPrimary","actionDefaultBackgroundHover","actionDefaultBackgroundPress","backgroundPrimary","overlayOverlay","borderTop","fontSize","typography","fontSizeBase","getShadowScrollStyles","orientation","RunViewDatasetBoxV2","datasets","selectedDatasetWithRun","setSelectedDatasetWithRun","isDrawerOpen","setIsDrawerOpen","datasetWithTags","textAlign","iconFontSize","dataset","_runInfo$runName","runData","datasetClicked","ExperimentViewDatasetWithContext","displayTextAsLink","ExperimentViewDatasetDrawer","isOpen","setIsOpen","RunDetailsPageMetadataSections","RunViewOverview","onRunDataUpdated","params","runInputs","registeredModelVersionSummariesForRun","experimentKind","useLocation","loggedModelsFromTags","containsLoggedModelsFromInputsOutputs","EXPERIMENT_PARENT_ID_TAG","shouldRenderLoggedModelsBox","modelVersions","loggedModelsV3RegisteredModels","useExperimentLoggedModelRegisteredVersions","detailsSectionsV2","useRunDetailsPageOverviewSectionsV2","_runInfo$runUuid2","parentRunIdTag","detailsContent","KeyValueProperty","keyValue","startTime","formatTimestamp","NoneCell","DetailsOverviewCopyableIdBox","element","getExperimentPageRoute","getDuration","endTime","DETAILS","DATASETS","TAGS","REGISTERED_MODELS","usingSidebarLayout","DetailsPageLayout","secondarySections","lg","DetailsOverviewParamsTable","RunNotFoundView","runId","ErrorView","statusCode","subMessage","fallbackHomePageReactRoute","rootRoute","RunViewChartTooltipBody","contextData","metricsForRun","hoverData","chartData","metricKey","isHovering","mode","_metricsForRun$metric","singleTraceHoverData","containsMultipleRunsTooltipData","hoveredDataPoint","RunsChartsTooltipMode","MultipleTracesWithScanline","RunsMultipleTracesTooltipBody","metricEntity","timestamp","metricContainsHistory","isSystemMetric","displayTimestamp","isUndefined","displayStep","valueField","textOverflow","RunViewMetricChartsImpl","metricKeys","chartUIState","updateChartsUIState","_runInfo$runUuid4","setSearch","compareRunCharts","compareRunSections","chartsSearchFilter","visibleChartCards","_compareRunCharts$fil","chart","deleted","fullScreenChart","setFullScreenChart","sampledMetricsByRunUuid","metricsByRange","metricsHistory","flat","tooltipContextValue","imagesByRunUuid","state","configuredCardConfig","setConfiguredCardConfig","reorderCharts","useReorderRunsChartsFn","insertCharts","useInsertRunsChartsFn","removeChart","useRemoveRunsChartFn","confirmChartCardConfiguration","useConfirmChartCardConfigurationFn","_runInfo$runUuid3","displayName","images","metricHistory","uuid","primary","resultChartSet","resultSectionSet","RunsChartsCardConfig","getBaseChartAndSectionConfigs","runsData","enabledSectionNames","MLFLOW_MODEL_METRIC_NAME","MLFLOW_SYSTEM_METRIC_NAME","filterMetricNames","startsWith","MLFLOW_SYSTEM_METRIC_PREFIX","current","isResultUpdated","updateChartAndSectionConfigs","isAccordionReordered","isTabActive","useIsTabActive","autoRefreshEnabled","shouldEnableRunDetailsPageAutoRefresh","containsLoggedImages","Boolean","LOG_IMAGE_TAG_INDICATOR","usePopulateImagesByRunUuid","runUuids","runUuidsIsActive","enabled","RunsChartsFilterInput","ToggleButton","pressed","onPressedChange","RunsChartsGlobalChartSettingsDropdown","metricKeyList","globalLineChartConfig","updateUIState","RunsChartsTooltipWrapper","component","RunsChartsDraggableCardsGridContextProvider","RunsChartsSectionAccordion","startEditChart","chartCard","addNewChartCard","metricSectionId","getEmptyChartCardByType","supportedChartTypes","RunsChartType","LINE","BAR","IMAGE","RunsChartsConfigureModal","chartRunData","paramKeyList","config","configuredCard","RunsChartsFullScreenModal","tooltipComponent","RunViewMetricCharts","props","persistenceIdentifier","localStore","LocalStorageUtils","getStoreForComponent","defaultChartState","xAxisKey","RunsChartsLineChartXAxisType","STEP","lineSmoothness","selectedXAxisMetricKey","persistedChartState","getItem","JSON","parse","setItem","stringify","RunsChartsUIConfigurationContextProvider","RunPageLoadingState","PageContainer","TitleSkeleton","Array","i","seed","RunPage","_runInfo$artifactUri2","renameModalVisible","setRenameModalVisible","deleteModalVisible","setDeleteModalVisible","invariant","safeRunUuid","safeExperimentId","refetchRun","experimentFetchError","runFetchError","apiError","useRunDetailsPageData","hasRunData","modelMetricKeys","systemMetricKeys","Object","comparedExperiments","activeTab","isUsingGetLoggedModelsApi","shouldUseGetLoggedModelsBatchAPI","loggedModelsForRun","useLoggedModelsForExperimentRun","searchQuery","_runInputs$modelInput","_runOutputs$modelOutp","allModels","modelIds","join","isHookEnabled","loggedModelsData","useSearchLoggedModelsQuery","experimentIds","loggedModelsForRunV2","useLoggedModelsForExperimentRunV2","useGetLoggedModelsQuery","initialLoading","ErrorWrapper","getErrorCode","ErrorCodes","RESOURCE_DOES_NOT_EXIST","code","getGraphQLErrorMessage","NotFoundPage","marginTop","image","DangerIcon","usesFullHeight","getRunDisplayName","renderActiveTab","_runInfo$artifactUri","renderEvaluationTab","RunViewEvaluationsTab","getExperimentKindFromTags","RenameRunModal","onClose","DeleteRunModal","selectedRunIds","ApolloError","graphQLErrors","TagAssignmentRowContainer","TagAssignmentContext","createContext","TagAssignmentContextProvider","Provider","useTagAssignmentContext","context","useContext","TagAssignmentRoot","formCtx","useFormContext","Component","form","FormProvider","TagAssignmentRow","stableChildren","React","toArray","parsedChildren","fill","_stableChildren$i","width","gridTemplateColumns","TagAssignmentLabel","TagAssignmentInput","forwardRef","errorMessage","otherProps","ref","validationState","FormUI","Message","TagAssignmentKey","rules","render","keyProperty","getTagsValues","emptyValue","appendIfPossible","Controller","field","fieldState","formState","_fieldState$error","legacyChange","_tags$at","at","shouldFocus","TagAssignmentValue","valueProperty","TagAssignmentRemoveButtonUI","TrashIcon","TagAssignmentRemoveButton","removeOrUpdate","getTagAssignmentRules","maxLength","useTagAssignmentForm","defaultValues","_emptyValue","shouldUseFormContext","internalForm","setValue","fieldArrayMethods","append","originalAppend","update","remove","originalRemove","useFieldArray","control","getValues","useCallback","lastTag","useTagAssignmentFieldArray","newValues","_getTagsValues","existentValues","UnifiedTaggingForm","tagsForm","fields","validate","unique","findIndex","required","formName","visible","baseComponentId","isVisible","setIsVisible","useForm","hideTagAssignmentModal","reset","defaultTitleNode","Modal","destroyOnClose","footer","handleSubmit","_tags$filter","_initialTags$filter","t","restProps","PageWrapper","useFullHeightLayout","wrapper","fixedSpacer","container","defaultProps","flexGrow","flexShrink"],"sourceRoot":""}