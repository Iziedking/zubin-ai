{"version":3,"file":"static/js/1421.3973388f.chunk.js","mappings":"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","sources":["common/components/AliasSelect.tsx","common/hooks/useEditAliasesModal.tsx","shared/web-shared/copy/CopyActionButton.tsx","experiment-tracking/pages/prompts/components/PromptsListTableVersionCell.tsx","experiment-tracking/components/artifact-view-components/ShowArtifactCodeSnippet.tsx","shared/building_blocks/CopyButton.tsx","experiment-tracking/pages/prompts/hooks/useUpdateRegisteredPromptTags.tsx","experiment-tracking/pages/prompts/components/PromptPageErrorHandler.tsx","experiment-tracking/pages/prompts/hooks/usePromptDetailsQuery.tsx","experiment-tracking/pages/prompts/components/PromptVersionsTableAliasesCell.tsx","experiment-tracking/pages/prompts/components/PromptVersionsDiffSelectorButton.tsx","experiment-tracking/pages/prompts/components/PromptVersionsTable.tsx","experiment-tracking/pages/prompts/hooks/usePromptDetailsPageViewState.tsx","experiment-tracking/pages/prompts/components/PromptVersionRuns.tsx","experiment-tracking/pages/prompts/components/PromptVersionTags.tsx","experiment-tracking/pages/prompts/components/PromptVersionMetadata.tsx","experiment-tracking/pages/prompts/hooks/usePromptRunsInfo.tsx","experiment-tracking/pages/prompts/components/PromptContentPreview.tsx","experiment-tracking/pages/prompts/hooks/useDeletePromptVersionModal.tsx","experiment-tracking/pages/prompts/components/PromptContentCompare.tsx","experiment-tracking/pages/prompts/components/PromptDetailsTagsBox.tsx","experiment-tracking/pages/prompts/components/PromptNotFoundView.tsx","experiment-tracking/pages/prompts/PromptsDetailsPage.tsx","experiment-tracking/pages/prompts/hooks/useDeletePromptModal.tsx","experiment-tracking/pages/prompts/hooks/useUpdatePromptVersionMetadataModal.tsx","common/components/ScrollablePageWrapper.tsx","common/components/AliasTag.tsx","model-registry/components/aliases/ModelVersionTableAliasesCell.tsx","shared/web-shared/snippet/actions/SnippetActionButton.tsx","shared/web-shared/snippet/actions/SnippetCopyAction.tsx","shared/web-shared/snippet/index.tsx"],"sourcesContent":["import type { Dispatch } from 'react';\nimport { useCallback, useState } from 'react';\n\nimport { LegacySelect, useDesignSystemTheme } from '@databricks/design-system';\n\nimport { AliasTag } from './AliasTag';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\n/**\n * A specialized <LegacySelect> component used for adding and removing aliases from model versions\n */\nexport const AliasSelect = ({\n  renderKey,\n  setDraftAliases,\n  existingAliases,\n  draftAliases,\n  version,\n  aliasToVersionMap,\n  disabled,\n}: {\n  renderKey: any;\n  disabled: boolean;\n  setDraftAliases: Dispatch<React.SetStateAction<string[]>>;\n  existingAliases: string[];\n  draftAliases: string[];\n  version: string;\n  aliasToVersionMap: Record<string, string>;\n}) => {\n  const intl = useIntl();\n  const [dropdownVisible, setDropdownVisible] = useState(false);\n\n  const { theme } = useDesignSystemTheme();\n\n  const removeFromEditedAliases = useCallback(\n    (alias: string) => {\n      setDraftAliases((aliases) => aliases.filter((existingAlias) => existingAlias !== alias));\n    },\n    [setDraftAliases],\n  );\n\n  const updateEditedAliases = useCallback(\n    (aliases: string[]) => {\n      const sanitizedAliases = aliases\n        // Remove all characters that are not alphanumeric, underscores or hyphens\n        .map((alias) =>\n          alias\n            .replace(/[^\\w-]/g, '')\n            .toLowerCase()\n            .substring(0, 255),\n        )\n        // After sanitization, filter out invalid aliases\n        // so we won't get empty values\n        .filter((alias) => alias.length > 0);\n\n      // Remove duplicates that might result from varying letter case\n      const uniqueAliases = Array.from(new Set(sanitizedAliases));\n      setDraftAliases(uniqueAliases);\n      setDropdownVisible(false);\n    },\n    [setDraftAliases],\n  );\n\n  return (\n    // For the time being, we will use <LegacySelect /> under the hood,\n    // while <TypeaheadCombobox /> is still in the design phase.\n    <LegacySelect\n      disabled={disabled}\n      filterOption={(val, opt) => opt?.value.toLowerCase().startsWith(val.toLowerCase())}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Enter aliases (champion, challenger, etc)',\n        description: 'Model registry > model version alias select > Alias input placeholder',\n      })}\n      allowClear\n      css={{ width: '100%' }}\n      mode=\"tags\"\n      // There's a bug with current <LegacySelect /> implementation that causes the dropdown\n      // to detach from input vertically when its position on screen changes (in this case, it's\n      // caused by the conflict alerts). A small key={} hack ensures that the component is recreated\n      // and the dropdown is repositioned each time the alerts below are changed.\n      key={JSON.stringify(renderKey)}\n      onChange={updateEditedAliases}\n      dangerouslySetAntdProps={{\n        dropdownMatchSelectWidth: true,\n        tagRender: ({ value }) => (\n          <AliasTag\n            compact\n            css={{ marginTop: 2 }}\n            closable\n            onClose={() => removeFromEditedAliases(value.toString())}\n            value={value.toString()}\n          />\n        ),\n      }}\n      onDropdownVisibleChange={setDropdownVisible}\n      open={dropdownVisible}\n      value={draftAliases || []}\n    >\n      {existingAliases.map((alias) => (\n        <LegacySelect.Option key={alias} value={alias} data-testid=\"model-alias-option\">\n          <div key={alias} css={{ display: 'flex', marginRight: theme.spacing.xs }}>\n            <div css={{ flex: 1 }}>{alias}</div>\n            <div>\n              <FormattedMessage\n                defaultMessage=\"This version\"\n                description=\"Model registry > model version alias select > Indicator for alias of selected version\"\n              />\n            </div>\n          </div>\n        </LegacySelect.Option>\n      ))}\n      {Object.entries(aliasToVersionMap)\n        .filter(([, otherVersion]) => otherVersion !== version)\n        .map(([alias, aliasedVersion]) => (\n          <LegacySelect.Option key={alias} value={alias} data-testid=\"model-alias-option\">\n            <div key={alias} css={{ display: 'flex', marginRight: theme.spacing.xs }}>\n              <div css={{ flex: 1 }}>{alias}</div>\n              <div>\n                <FormattedMessage\n                  defaultMessage=\"Version {version}\"\n                  description=\"Model registry > model version alias select > Indicator for alias of a particular version\"\n                  values={{ version: aliasedVersion }}\n                />\n              </div>\n            </div>\n          </LegacySelect.Option>\n        ))}\n    </LegacySelect>\n  );\n};\n","import { isEqual } from 'lodash';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { Alert, Button, LegacyForm, Modal, useDesignSystemTheme } from '@databricks/design-system';\nimport { Typography } from '@databricks/design-system';\nimport { AliasSelect } from '../components/AliasSelect';\nimport { FormattedMessage } from 'react-intl';\n\nimport { ErrorWrapper } from '../utils/ErrorWrapper';\nimport type { AliasMap } from '../types';\n\nconst MAX_ALIASES_PER_MODEL_VERSION = 10;\n\n/**\n * Provides methods to initialize and display modal used to add and remove aliases from the model version\n */\nexport const useEditAliasesModal = ({\n  aliases,\n  onSuccess,\n  onSave,\n  getTitle,\n  description,\n}: {\n  aliases: AliasMap;\n  onSuccess?: () => void;\n  onSave: (currentlyEditedVersion: string, existingAliases: string[], draftAliases: string[]) => Promise<any>;\n  getTitle: (version: string) => React.ReactNode;\n  description?: React.ReactNode;\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [form] = LegacyForm.useForm();\n\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const { theme } = useDesignSystemTheme();\n\n  // We will keep version's existing aliases in `existingAliases` state array\n  const [existingAliases, setExistingAliases] = useState<string[]>([]);\n  // Currently edited aliases will be kept in `draftAliases` state array\n  const [draftAliases, setDraftAliases] = useState<string[]>([]);\n  // Currently edited version\n  const [currentlyEditedVersion, setCurrentlyEditedVersion] = useState<string>('0');\n\n  /**\n   * Function used to invoke the modal and start editing aliases of the particular model version\n   */\n  const showEditAliasesModal = useCallback(\n    (versionNumber: string) => {\n      const modelVersionAliases =\n        aliases.filter(({ version }) => version === versionNumber).map(({ alias }) => alias) || [];\n\n      if (versionNumber) {\n        setExistingAliases(modelVersionAliases);\n        setDraftAliases(modelVersionAliases);\n        setCurrentlyEditedVersion(versionNumber);\n        setShowModal(true);\n      }\n    },\n    [aliases],\n  );\n\n  // // Finds and stores alias values found in other model versions\n  const conflictedAliases = useMemo(() => {\n    const versionsWithAliases = aliases.reduce<{ version: string; aliases: string[] }[]>((aliasMap, aliasEntry) => {\n      if (!aliasMap.some(({ version }) => version === aliasEntry.version)) {\n        return [...aliasMap, { version: aliasEntry.version, aliases: [aliasEntry.alias] }];\n      }\n      aliasMap.find(({ version }) => version === aliasEntry.version)?.aliases.push(aliasEntry.alias);\n      return aliasMap;\n    }, []);\n    const otherVersionMappings = versionsWithAliases.filter(\n      ({ version: otherVersion }) => otherVersion !== currentlyEditedVersion,\n    );\n    return draftAliases\n      .map((alias) => ({\n        alias,\n        otherVersion: otherVersionMappings.find((version) =>\n          version.aliases?.find((alias_name) => alias_name === alias),\n        ),\n      }))\n      .filter(({ otherVersion }) => otherVersion);\n  }, [aliases, draftAliases, currentlyEditedVersion]);\n\n  // Maps particular aliases to versions\n  const aliasToVersionMap = useMemo(\n    () =>\n      aliases.reduce<Record<string, string>>((result, { alias, version }) => {\n        return { ...result, [alias]: version };\n      }, {}) || {},\n    [aliases],\n  );\n\n  const save = () => {\n    setErrorMessage('');\n    setIsLoading(true);\n    onSave(currentlyEditedVersion, existingAliases, draftAliases)\n      .then(() => {\n        setIsLoading(false);\n        setShowModal(false);\n        onSuccess?.();\n      })\n      .catch((e: ErrorWrapper | Error) => {\n        setIsLoading(false);\n        if (e instanceof ErrorWrapper) {\n          const extractedErrorMessage = e.getMessageField() || e.getUserVisibleError().toString() || e.text;\n          setErrorMessage(extractedErrorMessage);\n        } else {\n          setErrorMessage(e.message);\n        }\n      });\n  };\n\n  // Indicates if there is any pending change to the alias set\n  const isPristine = isEqual(existingAliases.slice().sort(), draftAliases.slice().sort());\n  const isExceedingLimit = draftAliases.length > MAX_ALIASES_PER_MODEL_VERSION;\n\n  const isInvalid = isPristine || isExceedingLimit;\n\n  const EditAliasesModal = (\n    <Modal\n      componentId=\"mlflow.edit-aliases-modal\"\n      visible={showModal}\n      footer={\n        <div>\n          <Button componentId=\"mlflow.edit-aliases-modal.cancel-button\" onClick={() => setShowModal(false)}>\n            <FormattedMessage defaultMessage=\"Cancel\" description=\"Alias editor > Cancel editing aliases\" />\n          </Button>\n          <Button\n            componentId=\"mlflow.edit-aliases-modal.save-button\"\n            loading={isLoading}\n            type=\"primary\"\n            disabled={isInvalid}\n            onClick={save}\n          >\n            <FormattedMessage defaultMessage=\"Save aliases\" description=\"Alias editor > Confirm change of aliases\" />\n          </Button>\n        </div>\n      }\n      destroyOnClose\n      title={getTitle(currentlyEditedVersion)}\n      onCancel={() => setShowModal(false)}\n      confirmLoading={false}\n    >\n      <Typography.Paragraph>{description}</Typography.Paragraph>\n      <LegacyForm form={form} layout=\"vertical\">\n        <LegacyForm.Item>\n          <AliasSelect\n            disabled={false}\n            renderKey={conflictedAliases} // todo\n            aliasToVersionMap={aliasToVersionMap}\n            version={currentlyEditedVersion}\n            draftAliases={draftAliases}\n            existingAliases={existingAliases}\n            setDraftAliases={setDraftAliases}\n          />\n        </LegacyForm.Item>\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n          {isExceedingLimit && (\n            <Alert\n              componentId=\"mlflow.edit-aliases-modal.exceeding-limit-alert\"\n              role=\"alert\"\n              message={\n                <FormattedMessage\n                  defaultMessage=\"You are exceeding a limit of {limit} aliases assigned to the single model version\"\n                  description=\"Alias editor > Warning about exceeding aliases limit\"\n                  values={{ limit: MAX_ALIASES_PER_MODEL_VERSION }}\n                />\n              }\n              type=\"error\"\n              closable={false}\n            />\n          )}\n          {conflictedAliases.map(({ alias, otherVersion }) => (\n            <Alert\n              componentId=\"mlflow.edit-aliases-modal.conflicted-alias-alert\"\n              role=\"alert\"\n              key={alias}\n              message={\n                <FormattedMessage\n                  defaultMessage='The \"{alias}\" alias is also being used on version {otherVersion}. Adding it to this version will remove it from version {otherVersion}.'\n                  description=\"Alias editor > Warning about reusing alias from the other version\"\n                  values={{ otherVersion: otherVersion?.version, alias }}\n                />\n              }\n              type=\"info\"\n              closable={false}\n            />\n          ))}\n          {errorMessage && (\n            <Alert\n              componentId=\"mlflow.edit-aliases-modal.error-alert\"\n              role=\"alert\"\n              message={errorMessage}\n              type=\"error\"\n              closable={false}\n            />\n          )}\n        </div>\n      </LegacyForm>\n    </Modal>\n  );\n\n  return { EditAliasesModal, showEditAliasesModal };\n};\n","import React from 'react';\n\nimport type { ButtonProps, TooltipProps } from '@databricks/design-system';\nimport { Button, Tooltip } from '@databricks/design-system';\n\nimport { useCopyController } from './useCopyController';\n\nexport interface CopyActionButtonProps {\n  buttonProps?: Partial<ButtonProps>;\n  componentId?: string;\n  copyText: string;\n  copyTooltip?: string;\n  isInsideInputGroup?: boolean;\n  onCopy?: () => void;\n  tooltipProps?: Partial<TooltipProps>;\n}\n\nexport function CopyActionButton({\n  buttonProps,\n  componentId,\n  copyText,\n  copyTooltip,\n  isInsideInputGroup = false,\n  onCopy,\n  tooltipProps,\n}: CopyActionButtonProps) {\n  const { actionIcon, copy, handleTooltipOpenChange, tooltipOpen, tooltipMessage } = useCopyController(\n    copyText,\n    copyTooltip,\n    onCopy,\n  );\n\n  const button = (\n    <Button\n      aria-label={tooltipMessage}\n      componentId={componentId ?? 'codegen_web-shared_src_copy_copyactionbutton.tsx_17'}\n      icon={actionIcon}\n      onClick={copy}\n      size=\"small\"\n      {...buttonProps}\n    />\n  );\n\n  const inputGroupButton = (\n    <Button\n      aria-label={tooltipMessage}\n      componentId={componentId ?? 'codegen_web-shared_src_copy_copyactionbutton.tsx_17'}\n      onClick={copy}\n      {...buttonProps}\n    >\n      {actionIcon}\n    </Button>\n  );\n\n  return (\n    <Tooltip\n      componentId={\n        componentId ? `${componentId}-tooltip` : 'codegen_web-shared_src_copy_copyactionbutton.tsx_17-tooltip'\n      }\n      content={tooltipMessage}\n      onOpenChange={handleTooltipOpenChange}\n      open={tooltipOpen}\n      {...tooltipProps}\n    >\n      {isInsideInputGroup ? inputGroupButton : button}\n    </Tooltip>\n  );\n}\n","import { Typography } from '@databricks/design-system';\nimport type { ColumnDef } from '@tanstack/react-table';\nimport { FormattedMessage } from 'react-intl';\n\nexport const PromptsListTableVersionCell: ColumnDef<any>['cell'] = ({ row: { original }, getValue }) => {\n  const version = getValue<string>();\n\n  if (!version) {\n    return null;\n  }\n  return (\n    <Typography.Text>\n      <FormattedMessage\n        defaultMessage=\"Version {version}\"\n        description=\"Label for the version of a registered prompt in the registered prompts table\"\n        values={{\n          version,\n        }}\n      />\n    </Typography.Text>\n  );\n};\n","import React from 'react';\nimport { CopyIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\n\nexport const ShowArtifactCodeSnippet = ({ code }: { code: string }): React.ReactElement => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ position: 'relative' }}>\n      <CopyButton\n        css={{ zIndex: 1, position: 'absolute', top: theme.spacing.xs, right: theme.spacing.xs }}\n        showLabel={false}\n        copyText={code}\n        icon={<CopyIcon />}\n      />\n      <CodeSnippet\n        language=\"python\"\n        showLineNumbers={false}\n        style={{\n          padding: theme.spacing.sm,\n          color: theme.colors.textPrimary,\n          backgroundColor: theme.colors.backgroundSecondary,\n          whiteSpace: 'pre-wrap',\n        }}\n        wrapLongLines\n      >\n        {code}\n      </CodeSnippet>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, type ButtonProps, LegacyTooltip } from '@databricks/design-system';\n\ninterface CopyButtonProps extends Partial<ButtonProps> {\n  copyText: string;\n  showLabel?: React.ReactNode;\n  componentId?: string;\n}\n\nexport const CopyButton = ({ copyText, showLabel = true, componentId, ...buttonProps }: CopyButtonProps) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(copyText);\n    setShowTooltip(true);\n    setTimeout(() => {\n      setShowTooltip(false);\n    }, 3000);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <LegacyTooltip\n      title={\n        <FormattedMessage defaultMessage=\"Copied\" description=\"Tooltip text shown when copy operation completes\" />\n      }\n      dangerouslySetAntdProps={{\n        visible: showTooltip,\n      }}\n    >\n      <Button\n        componentId={componentId ?? 'mlflow.shared.copy_button'}\n        type=\"primary\"\n        onClick={handleClick}\n        onMouseLeave={handleMouseLeave}\n        css={{ 'z-index': 1 }}\n        // Define children as a explicit prop so it can be easily overrideable\n        children={\n          showLabel ? <FormattedMessage defaultMessage=\"Copy\" description=\"Button text for copy button\" /> : undefined\n        }\n        {...buttonProps}\n      />\n    </LegacyTooltip>\n  );\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { useEditKeyValueTagsModal } from '../../../../common/hooks/useEditKeyValueTagsModal';\nimport { RegisteredPromptsApi } from '../api';\nimport type { RegisteredPrompt } from '../types';\nimport { useCallback } from 'react';\nimport { diffCurrentAndNewTags, isUserFacingTag } from '../../../../common/utils/TagUtils';\n\ntype UpdateTagsPayload = {\n  promptId: string;\n  toAdd: { key: string; value: string }[];\n  toDelete: { key: string }[];\n};\n\nexport const useUpdateRegisteredPromptTags = ({ onSuccess }: { onSuccess?: () => void }) => {\n  const updateMutation = useMutation<unknown, Error, UpdateTagsPayload>({\n    mutationFn: async ({ toAdd, toDelete, promptId }) => {\n      return Promise.all([\n        ...toAdd.map(({ key, value }) => RegisteredPromptsApi.setRegisteredPromptTag(promptId, key, value)),\n        ...toDelete.map(({ key }) => RegisteredPromptsApi.deleteRegisteredPromptTag(promptId, key)),\n      ]);\n    },\n  });\n\n  const { EditTagsModal, showEditTagsModal, isLoading } = useEditKeyValueTagsModal<\n    Pick<RegisteredPrompt, 'name' | 'tags'>\n  >({\n    valueRequired: true,\n    saveTagsHandler: (prompt, currentTags, newTags) => {\n      const { addedOrModifiedTags, deletedTags } = diffCurrentAndNewTags(currentTags, newTags);\n\n      return new Promise<void>((resolve, reject) => {\n        if (!prompt.name) {\n          return reject();\n        }\n        // Send all requests to the mutation\n        updateMutation.mutate(\n          {\n            promptId: prompt.name,\n            toAdd: addedOrModifiedTags,\n            toDelete: deletedTags,\n          },\n          {\n            onSuccess: () => {\n              resolve();\n              onSuccess?.();\n            },\n            onError: reject,\n          },\n        );\n      });\n    },\n  });\n\n  const showEditPromptTagsModal = useCallback(\n    (prompt: RegisteredPrompt) =>\n      showEditTagsModal({\n        name: prompt.name,\n        tags: prompt.tags.filter((tag) => isUserFacingTag(tag.key)),\n      }),\n    [showEditTagsModal],\n  );\n\n  return { EditTagsModal, showEditPromptTagsModal, isLoading };\n};\n","import { DangerIcon, Empty } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ScrollablePageWrapper } from '../../../../common/components/ScrollablePageWrapper';\n\nexport const PromptPageErrorHandler = ({ error }: { error?: Error }) => {\n  return (\n    <ScrollablePageWrapper css={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <Empty\n        data-testid=\"fallback\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Error\"\n            description=\"Title for error fallback component in prompts management UI\"\n          />\n        }\n        description={\n          error?.message ?? (\n            <FormattedMessage\n              defaultMessage=\"An error occurred while rendering this component.\"\n              description=\"Description for default error message in prompts management UI\"\n            />\n          )\n        }\n        image={<DangerIcon />}\n      />\n    </ScrollablePageWrapper>\n  );\n};\n","import type { QueryFunctionContext, UseQueryOptions } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { useQuery } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport type { RegisteredPromptDetailsResponse } from '../types';\nimport { RegisteredPromptsApi } from '../api';\n\nconst queryFn = async ({ queryKey }: QueryFunctionContext<PromptDetailsQueryKey>) => {\n  const [, { promptName }] = queryKey;\n  const [detailsResponse, versionsResponse] = await Promise.all([\n    RegisteredPromptsApi.getPromptDetails(promptName),\n    RegisteredPromptsApi.getPromptVersions(promptName),\n  ]);\n\n  return {\n    prompt: detailsResponse.registered_model,\n    versions: versionsResponse.model_versions ?? [],\n  };\n};\n\ntype PromptDetailsQueryKey = ['prompt_details', { promptName: string }];\n\nexport const usePromptDetailsQuery = (\n  { promptName }: { promptName: string },\n  options: UseQueryOptions<\n    RegisteredPromptDetailsResponse,\n    Error,\n    RegisteredPromptDetailsResponse,\n    PromptDetailsQueryKey\n  > = {},\n) => {\n  const queryResult = useQuery<\n    RegisteredPromptDetailsResponse,\n    Error,\n    RegisteredPromptDetailsResponse,\n    PromptDetailsQueryKey\n  >(['prompt_details', { promptName }], {\n    queryFn,\n    retry: false,\n    ...options,\n  });\n\n  return {\n    data: queryResult.data,\n    error: queryResult.error ?? undefined,\n    isLoading: queryResult.isLoading,\n    refetch: queryResult.refetch,\n  };\n};\n","import type { ColumnDef } from '@tanstack/react-table';\nimport { ModelVersionTableAliasesCell } from '../../../../model-registry/components/aliases/ModelVersionTableAliasesCell';\nimport type { RegisteredPromptVersion } from '../types';\nimport type { PromptsVersionsTableMetadata } from '../utils';\n\nexport const PromptVersionsTableAliasesCell: ColumnDef<RegisteredPromptVersion>['cell'] = ({\n  getValue,\n  row: { original },\n  table: {\n    options: { meta },\n  },\n}) => {\n  const { showEditAliasesModal, aliasesByVersion, registeredPrompt } = meta as PromptsVersionsTableMetadata;\n\n  const mvAliases = aliasesByVersion[original.version] || [];\n\n  return registeredPrompt ? (\n    <ModelVersionTableAliasesCell\n      modelName={registeredPrompt?.name}\n      version={original.version}\n      aliases={mvAliases}\n      onAddEdit={() => {\n        showEditAliasesModal?.(original.version);\n      }}\n    />\n  ) : null;\n};\n","import { Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\n/**\n * A custom split button to select versions to compare in the prompt details page.\n */\nexport const PromptVersionsDiffSelectorButton = ({\n  isSelectedFirstToCompare,\n  isSelectedSecondToCompare,\n  onSelectFirst,\n  onSelectSecond,\n}: {\n  isSelectedFirstToCompare: boolean;\n  isSelectedSecondToCompare: boolean;\n  onSelectFirst?: () => void;\n  onSelectSecond?: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  return (\n    <div\n      css={{ width: theme.general.buttonHeight, display: 'flex', alignItems: 'center', paddingRight: theme.spacing.sm }}\n    >\n      <div css={{ display: 'flex', height: theme.general.buttonInnerHeight + theme.spacing.xs, gap: 0, flex: 1 }}>\n        <Tooltip\n          componentId=\"mlflow.prompts.details.select_baseline.tooltip\"\n          content={\n            <FormattedMessage\n              defaultMessage=\"Select as baseline version\"\n              description=\"Label for selecting baseline prompt version in the comparison view\"\n            />\n          }\n          delayDuration={0}\n          side=\"left\"\n        >\n          <button\n            onClick={onSelectFirst}\n            role=\"radio\"\n            aria-checked={isSelectedFirstToCompare}\n            aria-label={intl.formatMessage({\n              defaultMessage: 'Select as baseline version',\n              description: 'Label for selecting baseline prompt version in the comparison view',\n            })}\n            css={{\n              flex: 1,\n              border: `1px solid ${\n                isSelectedFirstToCompare\n                  ? theme.colors.actionDefaultBorderFocus\n                  : theme.colors.actionDefaultBorderDefault\n              }`,\n              borderRight: 0,\n              marginLeft: 1,\n              borderTopLeftRadius: theme.borders.borderRadiusMd,\n              borderBottomLeftRadius: theme.borders.borderRadiusMd,\n              backgroundColor: isSelectedFirstToCompare\n                ? theme.colors.actionDefaultBackgroundPress\n                : theme.colors.actionDefaultBackgroundDefault,\n              cursor: 'pointer',\n              '&:hover': {\n                backgroundColor: theme.colors.actionDefaultBackgroundHover,\n              },\n            }}\n          />\n        </Tooltip>\n        <Tooltip\n          componentId=\"mlflow.prompts.details.select_compared.tooltip\"\n          content={\n            <FormattedMessage\n              defaultMessage=\"Select as compared version\"\n              description=\"Label for selecting compared prompt version in the comparison view\"\n            />\n          }\n          delayDuration={0}\n          side=\"right\"\n        >\n          <button\n            onClick={onSelectSecond}\n            role=\"radio\"\n            aria-checked={isSelectedSecondToCompare}\n            aria-label={intl.formatMessage({\n              defaultMessage: 'Select as compared version',\n              description: 'Label for selecting compared prompt version in the comparison view',\n            })}\n            css={{\n              flex: 1,\n              border: `1px solid ${\n                isSelectedSecondToCompare\n                  ? theme.colors.actionDefaultBorderFocus\n                  : theme.colors.actionDefaultBorderDefault\n              }`,\n              borderLeft: `1px solid ${\n                isSelectedFirstToCompare || isSelectedSecondToCompare\n                  ? theme.colors.actionDefaultBorderFocus\n                  : theme.colors.actionDefaultBorderDefault\n              }`,\n              borderTopRightRadius: theme.borders.borderRadiusMd,\n              borderBottomRightRadius: theme.borders.borderRadiusMd,\n              backgroundColor: isSelectedSecondToCompare\n                ? theme.colors.actionDefaultBackgroundPress\n                : theme.colors.actionDefaultBackgroundDefault,\n              cursor: 'pointer',\n              '&:hover': {\n                backgroundColor: theme.colors.actionDefaultBackgroundHover,\n              },\n            }}\n          />\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n","import {\n  ChevronRightIcon,\n  Empty,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  TableSkeletonRows,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport type { ColumnDef } from '@tanstack/react-table';\nimport { flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';\nimport { useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Utils from '../../../../common/utils/Utils';\nimport { ModelVersionTableAliasesCell } from '../../../../model-registry/components/aliases/ModelVersionTableAliasesCell';\nimport type { RegisteredPrompt, RegisteredPromptVersion } from '../types';\nimport { PromptVersionsTableMode } from '../utils';\nimport { PromptsListTableVersionCell } from './PromptsListTableVersionCell';\nimport { PromptVersionsTableAliasesCell } from './PromptVersionsTableAliasesCell';\nimport { PromptVersionsDiffSelectorButton } from './PromptVersionsDiffSelectorButton';\n\ntype PromptVersionsTableColumnDef = ColumnDef<RegisteredPromptVersion>;\n\nexport const PromptVersionsTable = ({\n  promptVersions,\n  onUpdateComparedVersion,\n  isLoading,\n  onUpdateSelectedVersion,\n  comparedVersion,\n  selectedVersion,\n  mode,\n  registeredPrompt,\n  showEditAliasesModal,\n  aliasesByVersion,\n}: {\n  promptVersions?: RegisteredPromptVersion[];\n  isLoading: boolean;\n  selectedVersion?: string;\n  comparedVersion?: string;\n  onUpdateSelectedVersion: (version: string) => void;\n  onUpdateComparedVersion: (version: string) => void;\n  mode: PromptVersionsTableMode;\n  registeredPrompt?: RegisteredPrompt;\n  showEditAliasesModal?: (versionNumber: string) => void;\n  aliasesByVersion: Record<string, string[]>;\n}) => {\n  const intl = useIntl();\n\n  const { theme } = useDesignSystemTheme();\n  const columns = useMemo(() => {\n    const resultColumns: PromptVersionsTableColumnDef[] = [\n      {\n        id: 'version',\n        header: intl.formatMessage({\n          defaultMessage: 'Version',\n          description: 'Header for the version column in the registered prompts table',\n        }),\n        accessorKey: 'version',\n        cell: PromptsListTableVersionCell,\n      },\n    ];\n\n    if (mode === PromptVersionsTableMode.TABLE) {\n      resultColumns.push({\n        id: 'creation_timestamp',\n        header: intl.formatMessage({\n          defaultMessage: 'Registered at',\n          description: 'Header for the registration time column in the registered prompts table',\n        }),\n        accessorFn: ({ creation_timestamp }) => Utils.formatTimestamp(creation_timestamp, intl),\n      });\n\n      resultColumns.push({\n        id: 'commit_message',\n        header: intl.formatMessage({\n          defaultMessage: 'Commit message',\n          description: 'Header for the commit message column in the registered prompts table',\n        }),\n        accessorKey: 'description',\n      });\n      resultColumns.push({\n        id: 'aliases',\n        header: intl.formatMessage({\n          defaultMessage: 'Aliases',\n          description: 'Header for the aliases column in the registered prompts table',\n        }),\n        accessorKey: 'aliases',\n        cell: PromptVersionsTableAliasesCell,\n      });\n    }\n\n    return resultColumns;\n  }, [mode, intl]);\n\n  const table = useReactTable({\n    data: promptVersions ?? [],\n    getRowId: (row) => row.version,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    meta: { showEditAliasesModal, aliasesByVersion, registeredPrompt },\n  });\n\n  const getEmptyState = () => {\n    if (!isLoading && promptVersions?.length === 0) {\n      return (\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"No prompt versions created\"\n              description=\"A header for the empty state in the prompt versions table\"\n            />\n          }\n          description={\n            <FormattedMessage\n              defaultMessage='Use \"Create prompt version\" button in order to create a new prompt version'\n              description=\"Guidelines for the user on how to create a new prompt version in the prompt versions table\"\n            />\n          }\n        />\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <div css={{ flex: 1, overflow: 'hidden' }}>\n      <Table scrollable empty={getEmptyState()} aria-label=\"Prompt versions table\">\n        <TableRow isHeader>\n          {table.getLeafHeaders().map((header) => (\n            <TableHeader componentId=\"mlflow.prompts.versions.table.header\" key={header.id}>\n              {flexRender(header.column.columnDef.header, header.getContext())}\n            </TableHeader>\n          ))}\n        </TableRow>\n        {isLoading ? (\n          <TableSkeletonRows table={table} />\n        ) : (\n          table.getRowModel().rows.map((row) => {\n            const isSelectedSingle =\n              [PromptVersionsTableMode.PREVIEW].includes(mode) && selectedVersion === row.original.version;\n\n            const isSelectedFirstToCompare =\n              [PromptVersionsTableMode.COMPARE].includes(mode) && selectedVersion === row.original.version;\n\n            const isSelectedSecondToCompare =\n              [PromptVersionsTableMode.COMPARE].includes(mode) && comparedVersion === row.original.version;\n\n            const getColor = () => {\n              if (isSelectedSingle) {\n                return theme.colors.actionDefaultBackgroundPress;\n              } else if (isSelectedFirstToCompare) {\n                return theme.colors.actionDefaultBackgroundHover;\n              } else if (isSelectedSecondToCompare) {\n                return theme.colors.actionDefaultBackgroundHover;\n              }\n              return 'transparent';\n            };\n\n            const showCursorForEntireRow = mode === PromptVersionsTableMode.PREVIEW;\n            return (\n              <TableRow\n                key={row.id}\n                css={{\n                  height: theme.general.heightBase,\n                  backgroundColor: getColor(),\n                  cursor: showCursorForEntireRow ? 'pointer' : 'default',\n                }}\n                onClick={() => {\n                  if (mode !== PromptVersionsTableMode.PREVIEW) {\n                    return;\n                  }\n                  onUpdateSelectedVersion(row.original.version);\n                }}\n              >\n                {row.getAllCells().map((cell) => (\n                  <TableCell key={cell.id} css={{ alignItems: 'center' }}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                ))}\n                {isSelectedSingle && (\n                  <div\n                    css={{\n                      width: theme.spacing.md * 2,\n                      display: 'flex',\n                      alignItems: 'center',\n                      paddingRight: theme.spacing.sm,\n                    }}\n                  >\n                    <ChevronRightIcon />\n                  </div>\n                )}\n                {mode === PromptVersionsTableMode.COMPARE && (\n                  <PromptVersionsDiffSelectorButton\n                    onSelectFirst={() => onUpdateSelectedVersion(row.original.version)}\n                    onSelectSecond={() => onUpdateComparedVersion(row.original.version)}\n                    isSelectedFirstToCompare={isSelectedFirstToCompare}\n                    isSelectedSecondToCompare={isSelectedSecondToCompare}\n                  />\n                )}\n              </TableRow>\n            );\n          })\n        )}\n      </Table>\n    </div>\n  );\n};\n","import { useCallback, useReducer } from 'react';\nimport { PromptVersionsTableMode } from '../utils';\nimport { first } from 'lodash';\nimport type { RegisteredPromptDetailsResponse } from '../types';\n\nconst promptDetailsViewStateReducer = (\n  state: {\n    mode: PromptVersionsTableMode;\n    selectedVersion?: string;\n    comparedVersion?: string;\n  },\n  action:\n    | { type: 'setTableMode' }\n    | { type: 'switchSides' }\n    | { type: 'setPreviewMode'; selectedVersion?: string }\n    | { type: 'setCompareMode'; selectedVersion?: string; comparedVersion?: string }\n    | { type: 'setSelectedVersion'; selectedVersion: string }\n    | { type: 'setComparedVersion'; comparedVersion: string },\n) => {\n  if (action.type === 'setTableMode') {\n    return { ...state, mode: PromptVersionsTableMode.TABLE };\n  }\n  if (action.type === 'switchSides') {\n    return { ...state, selectedVersion: state.comparedVersion, comparedVersion: state.selectedVersion };\n  }\n  if (action.type === 'setPreviewMode') {\n    return { ...state, mode: PromptVersionsTableMode.PREVIEW, selectedVersion: action.selectedVersion };\n  }\n  if (action.type === 'setCompareMode') {\n    return {\n      ...state,\n      mode: PromptVersionsTableMode.COMPARE,\n      selectedVersion: action.selectedVersion,\n      comparedVersion: action.comparedVersion,\n    };\n  }\n  if (action.type === 'setSelectedVersion') {\n    return { ...state, selectedVersion: action.selectedVersion };\n  }\n  if (action.type === 'setComparedVersion') {\n    return { ...state, comparedVersion: action.comparedVersion };\n  }\n  return state;\n};\n\nexport const usePromptDetailsPageViewState = (promptDetailsData?: RegisteredPromptDetailsResponse) => {\n  const [viewState, dispatchViewMode] = useReducer(promptDetailsViewStateReducer, {\n    mode: PromptVersionsTableMode.PREVIEW,\n  });\n\n  const setTableMode = useCallback(() => {\n    dispatchViewMode({ type: 'setTableMode' });\n  }, []);\n  const setPreviewMode = useCallback(\n    (versionEntity?: { version: string }) => {\n      const firstVersion = (versionEntity ?? first(promptDetailsData?.versions))?.version;\n      dispatchViewMode({ type: 'setPreviewMode', selectedVersion: firstVersion });\n    },\n    [promptDetailsData],\n  );\n  const setSelectedVersion = useCallback((selectedVersion: string) => {\n    dispatchViewMode({ type: 'setSelectedVersion', selectedVersion });\n  }, []);\n  const setComparedVersion = useCallback((comparedVersion: string) => {\n    dispatchViewMode({ type: 'setComparedVersion', comparedVersion });\n  }, []);\n  const setCompareMode = useCallback(() => {\n    // Last (highest) version will be the compared version\n    const comparedVersion = first(promptDetailsData?.versions)?.version;\n    // The one immediately before the last version will be the baseline version\n    const baselineVersion = promptDetailsData?.versions[1]?.version;\n    dispatchViewMode({ type: 'setCompareMode', selectedVersion: baselineVersion, comparedVersion });\n  }, [promptDetailsData]);\n\n  const switchSides = useCallback(() => dispatchViewMode({ type: 'switchSides' }), []);\n\n  if (\n    first(promptDetailsData?.versions) &&\n    viewState.mode === PromptVersionsTableMode.PREVIEW &&\n    !viewState.selectedVersion\n  ) {\n    setPreviewMode(first(promptDetailsData?.versions));\n  }\n\n  return {\n    viewState,\n    setTableMode,\n    setPreviewMode,\n    setCompareMode,\n    switchSides,\n    setSelectedVersion,\n    setComparedVersion,\n  };\n};\n","import { useState } from 'react';\nimport { Button, ParagraphSkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { isNil } from 'lodash';\n\nexport const PromptVersionRuns = ({\n  isLoadingRuns,\n  runIds,\n  runInfoMap,\n}: {\n  isLoadingRuns: boolean;\n  runIds: string[];\n  runInfoMap: Record<string, any>;\n}) => {\n  const [showAll, setShowAll] = useState(false);\n  const { theme } = useDesignSystemTheme();\n\n  const displayThreshold = 3;\n  const visibleCount = showAll ? runIds.length : Math.min(displayThreshold, runIds.length || 0);\n  const hasMore = runIds.length > displayThreshold;\n\n  return (\n    <>\n      <Typography.Text bold>\n        <FormattedMessage\n          defaultMessage=\"MLflow runs:\"\n          description=\"A label for the associated MLflow runs in the prompt details page\"\n        />\n      </Typography.Text>\n\n      <div>\n        {isLoadingRuns ? (\n          <ParagraphSkeleton css={{ width: 100 }} />\n        ) : (\n          <>\n            <div style={{ display: 'flex', flexWrap: 'wrap', gap: theme.spacing.sm }}>\n              {runIds.slice(0, visibleCount).map((runId, index) => {\n                const runInfo = runInfoMap[runId];\n\n                if (!isNil(runInfo?.experimentId) && runInfo?.runUuid && runInfo?.runName) {\n                  const { experimentId, runUuid, runName } = runInfo;\n                  return (\n                    // eslint-disable-next-line react/jsx-key\n                    <Typography.Text>\n                      <Link to={Routes.getRunPageRoute(experimentId, runUuid)}>{runName}</Link>\n                      {index < visibleCount - 1 && ','}\n                    </Typography.Text>\n                  );\n                } else {\n                  // eslint-disable-next-line react/jsx-key\n                  return <span>{runInfo?.runName || runInfo?.runUuid}</span>;\n                }\n              })}\n              {hasMore && (\n                <Button\n                  componentId=\"mlflow.prompts.details.runs.show_more\"\n                  size=\"small\"\n                  type=\"link\"\n                  onClick={() => setShowAll(!showAll)}\n                >\n                  {showAll ? (\n                    <FormattedMessage\n                      defaultMessage=\"Show less\"\n                      description=\"Label for a link that shows less tags when clicked\"\n                    />\n                  ) : (\n                    <FormattedMessage\n                      defaultMessage=\"{count} more...\"\n                      description=\"Label for a link that renders the remaining tags when clicked\"\n                      values={{ count: runIds.length - visibleCount }}\n                    />\n                  )}\n                </Button>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport { Button, PencilIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nimport { KeyValueTag } from '@mlflow/mlflow/src/common/components/KeyValueTag';\nimport type { KeyValueEntity } from '../../../../common/types';\nimport { isNil } from 'lodash';\n\nexport const PromptVersionTags = ({\n  tags,\n  onEditVersionMetadata,\n}: {\n  tags: KeyValueEntity[];\n  onEditVersionMetadata?: () => void;\n}) => {\n  const [showAll, setShowAll] = useState(false);\n  const { theme } = useDesignSystemTheme();\n\n  const displayThreshold = 3;\n  const visibleCount = showAll ? tags.length : Math.min(displayThreshold, tags.length || 0);\n  const hasMore = tags.length > displayThreshold;\n  const shouldAllowEditingMetadata = !isNil(onEditVersionMetadata);\n\n  const editButton =\n    tags.length > 0 ? (\n      <Button\n        componentId=\"mlflow.prompts.details.version.edit_tags\"\n        size=\"small\"\n        icon={<PencilIcon />}\n        onClick={onEditVersionMetadata}\n      />\n    ) : (\n      <Button\n        componentId=\"mlflow.prompts.details.version.add_tags\"\n        size=\"small\"\n        type=\"link\"\n        onClick={onEditVersionMetadata}\n      >\n        <FormattedMessage\n          defaultMessage=\"Add\"\n          description=\"Model registry > model version table > metadata column > 'add' button label\"\n        />\n      </Button>\n    );\n\n  return (\n    <>\n      <Typography.Text bold>\n        <FormattedMessage\n          defaultMessage=\"Metadata:\"\n          description=\"A key-value pair for the metadata in the prompt details page\"\n        />\n      </Typography.Text>\n      <div>\n        <>\n          <div style={{ display: 'flex', flexWrap: 'wrap', gap: theme.spacing.xs }}>\n            {tags.slice(0, visibleCount).map((tag) => (\n              <KeyValueTag css={{ margin: 0 }} key={tag.key} tag={tag} />\n            ))}\n            {shouldAllowEditingMetadata && editButton}\n            {!shouldAllowEditingMetadata && tags.length === 0 && <Typography.Hint>—</Typography.Hint>}\n            {hasMore && (\n              <Button\n                componentId=\"mlflow.prompts.details.version.tags.show_more\"\n                size=\"small\"\n                type=\"link\"\n                onClick={() => setShowAll(!showAll)}\n              >\n                {showAll ? (\n                  <FormattedMessage\n                    defaultMessage=\"Show less\"\n                    description=\"Label for a link that shows less tags when clicked\"\n                  />\n                ) : (\n                  <FormattedMessage\n                    defaultMessage=\"{count} more...\"\n                    description=\"Label for a link that renders the remaining tags when clicked\"\n                    values={{ count: tags.length - visibleCount }}\n                  />\n                )}\n              </Button>\n            )}\n          </div>\n        </>\n      </div>\n    </>\n  );\n};\n","import { ParagraphSkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { ModelVersionTableAliasesCell } from '../../../../model-registry/components/aliases/ModelVersionTableAliasesCell';\nimport type { RegisteredPrompt, RegisteredPromptVersion } from '../types';\nimport Utils from '../../../../common/utils/Utils';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { usePromptRunsInfo } from '../hooks/usePromptRunsInfo';\nimport { REGISTERED_PROMPT_SOURCE_RUN_IDS } from '../utils';\nimport { useCallback, useMemo } from 'react';\nimport { PromptVersionRuns } from './PromptVersionRuns';\nimport { isUserFacingTag } from '@mlflow/mlflow/src/common/utils/TagUtils';\nimport { KeyValueTag } from '@mlflow/mlflow/src/common/components/KeyValueTag';\nimport { PromptVersionTags } from './PromptVersionTags';\n\nconst MAX_VISIBLE_TAGS = 3;\n\nexport const PromptVersionMetadata = ({\n  registeredPromptVersion,\n  registeredPrompt,\n  showEditAliasesModal,\n  onEditVersion,\n  showEditPromptVersionMetadataModal,\n  aliasesByVersion,\n  isBaseline,\n}: {\n  registeredPrompt?: RegisteredPrompt;\n  registeredPromptVersion?: RegisteredPromptVersion;\n  showEditAliasesModal?: (versionNumber: string) => void;\n  onEditVersion?: (vesrion: RegisteredPromptVersion) => void;\n  showEditPromptVersionMetadataModal?: (version: RegisteredPromptVersion) => void;\n  aliasesByVersion: Record<string, string[]>;\n  isBaseline?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const runIds = useMemo(() => {\n    const tagValue = registeredPromptVersion?.tags?.find((tag) => tag.key === REGISTERED_PROMPT_SOURCE_RUN_IDS)?.value;\n    if (!tagValue) {\n      return [];\n    }\n    return tagValue.split(',').map((runId) => runId.trim());\n  }, [registeredPromptVersion]);\n\n  const { isLoading: isLoadingRuns, runInfoMap } = usePromptRunsInfo(runIds ? runIds : []);\n\n  if (!registeredPrompt || !registeredPromptVersion) {\n    return null;\n  }\n\n  const visibleTagList = registeredPromptVersion?.tags?.filter((tag) => isUserFacingTag(tag.key)) || [];\n\n  const versionElement = (\n    <FormattedMessage\n      defaultMessage=\"Version {version}\"\n      values={{ version: registeredPromptVersion.version }}\n      description=\"A label for the version number in the prompt details page\"\n    />\n  );\n\n  const onEditVersionMetadata = showEditPromptVersionMetadataModal\n    ? () => {\n        showEditPromptVersionMetadataModal(registeredPromptVersion);\n      }\n    : undefined;\n\n  return (\n    <div\n      css={{\n        display: 'grid',\n        gridTemplateColumns: '120px 1fr',\n        gridAutoRows: `minmax(${theme.typography.lineHeightLg}, auto)`,\n        alignItems: 'flex-start',\n        rowGap: theme.spacing.xs,\n        columnGap: theme.spacing.sm,\n      }}\n    >\n      {onEditVersion && (\n        <>\n          <Typography.Text bold>Version:</Typography.Text>\n          <Typography.Text>\n            <Typography.Link\n              componentId=\"mlflow.prompts.details.version.goto\"\n              onClick={() => onEditVersion(registeredPromptVersion)}\n            >\n              {versionElement}\n            </Typography.Link>{' '}\n            {isBaseline && (\n              <FormattedMessage\n                defaultMessage=\"(baseline)\"\n                description=\"A label displayed next to baseline version in the prompt versions comparison view\"\n              />\n            )}\n          </Typography.Text>\n        </>\n      )}\n      <Typography.Text bold>\n        <FormattedMessage\n          defaultMessage=\"Registered at:\"\n          description=\"A label for the registration timestamp in the prompt details page\"\n        />\n      </Typography.Text>\n      <Typography.Text>{Utils.formatTimestamp(registeredPromptVersion.creation_timestamp)}</Typography.Text>\n      <Typography.Text bold>\n        <FormattedMessage\n          defaultMessage=\"Aliases:\"\n          description=\"A label for the aliases list in the prompt details page\"\n        />\n      </Typography.Text>\n      <div>\n        <ModelVersionTableAliasesCell\n          css={{ maxWidth: 'none' }}\n          modelName={registeredPrompt.name}\n          version={registeredPromptVersion.version}\n          aliases={aliasesByVersion[registeredPromptVersion.version] || []}\n          onAddEdit={() => {\n            showEditAliasesModal?.(registeredPromptVersion.version);\n          }}\n        />\n      </div>\n      {registeredPromptVersion.description && (\n        <>\n          <Typography.Text bold>\n            <FormattedMessage\n              defaultMessage=\"Commit message:\"\n              description=\"A label for the commit message in the prompt details page\"\n            />\n          </Typography.Text>\n          <Typography.Text>{registeredPromptVersion.description}</Typography.Text>\n        </>\n      )}\n      <PromptVersionTags onEditVersionMetadata={onEditVersionMetadata} tags={visibleTagList} />\n      {(isLoadingRuns || runIds.length > 0) && (\n        <PromptVersionRuns isLoadingRuns={isLoadingRuns} runIds={runIds} runInfoMap={runInfoMap} />\n      )}\n    </div>\n  );\n};\n","import type { QueryFunctionContext } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { useQueries } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { transformGetRunResponse } from '../../../sdk/FieldNameTransformers';\nimport { MlflowService } from '../../../sdk/MlflowService';\nimport type { GetRunApiResponse } from '../../../types';\n\ntype UseRegisteredModelRelatedRunNamesQueryKey = ['prompt_associated_runs', string];\n\nexport const usePromptRunsInfo = (runUuids: string[] = []) => {\n  const queryResults = useQueries({\n    queries: runUuids.map((runUuid) => ({\n      queryKey: ['prompt_associated_runs', runUuid] as UseRegisteredModelRelatedRunNamesQueryKey,\n      queryFn: async ({\n        queryKey: [, runUuid],\n      }: QueryFunctionContext<UseRegisteredModelRelatedRunNamesQueryKey>): Promise<GetRunApiResponse | null> => {\n        try {\n          const data = await MlflowService.getRun({ run_id: runUuid });\n          return transformGetRunResponse(data);\n        } catch (e) {\n          return null;\n        }\n      },\n    })),\n  });\n\n  // Create a map of run_id to run info\n  const runInfoMap: Record<string, any | undefined> = {};\n\n  queryResults.forEach((queryResult, index) => {\n    const runUuid = runUuids[index];\n    runInfoMap[runUuid] = queryResult.data?.run?.info;\n  });\n\n  return {\n    isLoading: runUuids.length > 0 && queryResults.some((queryResult) => queryResult.isLoading),\n    runInfoMap,\n  };\n};\n","import {\n  Button,\n  Modal,\n  PlayIcon,\n  Spacer,\n  TrashIcon,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useMemo, useState } from 'react';\nimport {\n  getChatPromptMessagesFromValue,\n  getPromptContentTagValue,\n  isChatPrompt,\n  PROMPT_TYPE_CHAT,\n  PROMPT_TYPE_TEXT,\n} from '../utils';\nimport type { RegisteredPrompt, RegisteredPromptVersion } from '../types';\nimport { PromptVersionMetadata } from './PromptVersionMetadata';\nimport { FormattedMessage } from 'react-intl';\nimport { uniq } from 'lodash';\nimport { useDeletePromptVersionModal } from '../hooks/useDeletePromptVersionModal';\nimport { ShowArtifactCodeSnippet } from '../../../components/artifact-view-components/ShowArtifactCodeSnippet';\nimport { ModelTraceExplorerChatMessage } from '@mlflow/mlflow/src/shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatMessage';\nimport type { ModelTraceChatMessage } from '@mlflow/mlflow/src/shared/web-shared/model-trace-explorer/ModelTrace.types';\n\nconst PROMPT_VARIABLE_REGEX = /\\{\\{\\s*(.*?)\\s*\\}\\}/g;\n\nexport const PromptContentPreview = ({\n  promptVersion,\n  onUpdatedContent,\n  onDeletedVersion,\n  aliasesByVersion,\n  registeredPrompt,\n  showEditAliasesModal,\n  showEditPromptVersionMetadataModal,\n}: {\n  promptVersion?: RegisteredPromptVersion;\n  onUpdatedContent?: () => Promise<any>;\n  onDeletedVersion?: () => Promise<any>;\n  aliasesByVersion: Record<string, string[]>;\n  registeredPrompt?: RegisteredPrompt;\n  showEditAliasesModal?: (versionNumber: string) => void;\n  showEditPromptVersionMetadataModal: (promptVersion: RegisteredPromptVersion) => void;\n}) => {\n  const value = useMemo(() => (promptVersion ? getPromptContentTagValue(promptVersion) : ''), [promptVersion]);\n  const isChatPromptType = useMemo(() => isChatPrompt(promptVersion), [promptVersion]);\n  const parsedMessages = useMemo(\n    () => (isChatPromptType ? getChatPromptMessagesFromValue(value) : undefined),\n    [isChatPromptType, value],\n  );\n\n  const { DeletePromptModal, openModal: openDeleteModal } = useDeletePromptVersionModal({\n    promptVersion,\n    onSuccess: () => onDeletedVersion?.(),\n  });\n\n  const [showUsageExample, setShowUsageExample] = useState(false);\n\n  // Find all variables in the prompt content\n  const variableNames = useMemo(() => {\n    if (!value) {\n      return [];\n    }\n\n    const variables: string[] = [];\n    const source = isChatPromptType ? parsedMessages?.map((m) => m.content).join('\\n') || '' : value;\n\n    let match;\n    while ((match = PROMPT_VARIABLE_REGEX.exec(source)) !== null) {\n      variables.push(match[1]);\n    }\n\n    // Sanity check for tricky cases like nested brackets. If the variable name contains\n    // a bracket, we consider it as a parsing error and render a placeholder instead.\n    if (variables.some((variable) => variable.includes('{') || variable.includes('}'))) {\n      return null;\n    }\n\n    return uniq(variables);\n  }, [value, isChatPromptType, parsedMessages]);\n  const codeSnippetContent = buildCodeSnippetContent(\n    promptVersion,\n    variableNames,\n    isChatPromptType ? PROMPT_TYPE_CHAT : undefined,\n  );\n\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        flex: 1,\n        padding: theme.spacing.md,\n        paddingTop: 0,\n        borderRadius: theme.borders.borderRadiusSm,\n        overflow: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <div css={{ display: 'flex', justifyContent: 'space-between' }}>\n        <Typography.Title level={3}>Viewing version {promptVersion?.version}</Typography.Title>\n        <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n          <Button\n            componentId=\"mlflow.prompts.details.delete_version\"\n            icon={<TrashIcon />}\n            type=\"primary\"\n            danger\n            onClick={openDeleteModal}\n          >\n            <FormattedMessage\n              defaultMessage=\"Delete version\"\n              description=\"A label for a button to delete prompt version on the prompt details page\"\n            />\n          </Button>\n          <Button\n            componentId=\"mlflow.prompts.details.preview.use\"\n            icon={<PlayIcon />}\n            onClick={() => setShowUsageExample(true)}\n          >\n            <FormattedMessage\n              defaultMessage=\"Use\"\n              description=\"A label for a button to display the modal with the usage example of the prompt\"\n            />\n          </Button>\n        </div>\n      </div>\n      <Spacer shrinks={false} />\n      <PromptVersionMetadata\n        aliasesByVersion={aliasesByVersion}\n        registeredPrompt={registeredPrompt}\n        registeredPromptVersion={promptVersion}\n        showEditAliasesModal={showEditAliasesModal}\n        showEditPromptVersionMetadataModal={showEditPromptVersionMetadataModal}\n      />\n      <Spacer shrinks={false} />\n      <div\n        css={{\n          backgroundColor: isChatPromptType ? undefined : theme.colors.backgroundSecondary,\n          padding: theme.spacing.md,\n          overflow: 'auto',\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.sm,\n        }}\n      >\n        {isChatPromptType && parsedMessages ? (\n          parsedMessages.map((msg: any, index: number) => (\n            <ModelTraceExplorerChatMessage\n              key={index}\n              message={\n                {\n                  ...msg,\n                  content: msg.content,\n                } as ModelTraceChatMessage\n              }\n            />\n          ))\n        ) : (\n          <Typography.Text\n            css={{\n              whiteSpace: 'pre-wrap',\n            }}\n          >\n            {value || 'Empty'}\n          </Typography.Text>\n        )}\n      </div>\n      <Modal\n        componentId=\"mlflow.prompts.details.preview.usage_example_modal\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Usage example\"\n            description=\"A title of the modal showing the usage example of the prompt\"\n          />\n        }\n        visible={showUsageExample}\n        onCancel={() => setShowUsageExample(false)}\n        cancelText={\n          <FormattedMessage\n            defaultMessage=\"Dismiss\"\n            description=\"A label for the button to dismiss the modal with the usage example of the prompt\"\n          />\n        }\n      >\n        <ShowArtifactCodeSnippet\n          code={buildCodeSnippetContent(promptVersion, variableNames, isChatPromptType ? PROMPT_TYPE_CHAT : undefined)}\n        />{' '}\n      </Modal>\n      {DeletePromptModal}\n    </div>\n  );\n};\n\nconst buildCodeSnippetContent = (\n  promptVersion: RegisteredPromptVersion | undefined,\n  variables: string[] | null,\n  promptType: string = PROMPT_TYPE_TEXT,\n) => {\n  let codeSnippetContent = `from openai import OpenAI\nimport mlflow\nclient = OpenAI(api_key=\"<YOUR_API_KEY>\")\n\n# Set MLflow tracking URI\nmlflow.set_tracking_uri(\"<YOUR_TRACKING_URI>\")\n\n# Example of loading and using the prompt\nprompt = mlflow.genai.load_prompt(\"prompts:/${promptVersion?.name}/${promptVersion?.version}\")`;\n\n  // Null variables mean that there was a parsing error\n  if (variables === null) {\n    if (promptType === PROMPT_TYPE_CHAT) {\n      codeSnippetContent += `\n\n# Replace the variables with the actual values\nvariables = {\n   \"key\": \"value\",\n   ...\n}\n\nmessages = prompt.format(**variables)\nresponse = client.chat.completions.create(\n    messages=messages,\n    model=\"gpt-4o-mini\",\n)`;\n    } else {\n      codeSnippetContent += `\n\n# Replace the variables with the actual values\nvariables = {\n   \"key\": \"value\",\n   ...\n}\n\nresponse = client.chat.completions.create(\n    messages=[{\n        \"role\": \"user\",\n        \"content\": prompt.format(**variables),\n    }],\n    model=\"gpt-4o-mini\",\n)`;\n    }\n  } else if (promptType === PROMPT_TYPE_CHAT) {\n    codeSnippetContent += `\nmessages = prompt.format_messages(${variables.map((name) => `${name}=\"<${name}>\"`).join(', ')})\nresponse = client.chat.completions.create(\n    messages=messages,\n    model=\"gpt-4o-mini\",\n)`;\n  } else {\n    codeSnippetContent += `\nresponse = client.chat.completions.create(\n    messages=[{\n        \"role\": \"user\",\n        \"content\": prompt.format(${variables.map((name) => `${name}=\"<${name}>\"`).join(', ')}),\n    }],\n    model=\"gpt-4o-mini\",\n)`;\n  }\n\n  codeSnippetContent += `\\n\\nprint(response.choices[0].message.content)`;\n  return codeSnippetContent;\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { Modal } from '@databricks/design-system';\nimport { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport type { RegisteredPromptVersion } from '../types';\nimport { RegisteredPromptsApi } from '../api';\n\nexport const useDeletePromptVersionModal = ({\n  promptVersion,\n  onSuccess,\n}: {\n  promptVersion?: RegisteredPromptVersion;\n  onSuccess?: () => void | Promise<any>;\n}) => {\n  const [open, setOpen] = useState(false);\n\n  const { mutate } = useMutation<\n    unknown,\n    Error,\n    {\n      promptName: string;\n      version: string;\n    }\n  >({\n    mutationFn: async ({ promptName, version }) => {\n      await RegisteredPromptsApi.deleteRegisteredPromptVersion(promptName, version);\n    },\n  });\n\n  const modalElement = (\n    <Modal\n      componentId=\"mlflow.prompts.delete_version_modal\"\n      visible={open}\n      onCancel={() => setOpen(false)}\n      title={\n        <FormattedMessage\n          defaultMessage=\"Delete prompt version\"\n          description=\"A header for the delete prompt version modal\"\n        />\n      }\n      okText={\n        <FormattedMessage\n          defaultMessage=\"Delete\"\n          description=\"A label for the confirm button in the delete prompt version modal\"\n        />\n      }\n      okButtonProps={{ danger: true }}\n      onOk={async () => {\n        if (!promptVersion?.name) {\n          setOpen(false);\n          return;\n        }\n        mutate(\n          {\n            promptName: promptVersion.name,\n            version: promptVersion.version,\n          },\n          {\n            onSuccess: () => {\n              onSuccess?.();\n              setOpen(false);\n            },\n          },\n        );\n        setOpen(false);\n      }}\n      cancelText={\n        <FormattedMessage\n          defaultMessage=\"Cancel\"\n          description=\"A label for the cancel button in the delete prompt version modal\"\n        />\n      }\n    >\n      <FormattedMessage\n        defaultMessage=\"Are you sure you want to delete the prompt version?\"\n        description=\"A content for the delete prompt version confirmation modal\"\n      />\n    </Modal>\n  );\n\n  const openModal = () => setOpen(true);\n\n  return { DeletePromptModal: modalElement, openModal };\n};\n","import { Button, ExpandMoreIcon, Spacer, Tooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useMemo } from 'react';\nimport { getChatPromptMessagesFromValue, getPromptContentTagValue } from '../utils';\nimport type { RegisteredPrompt, RegisteredPromptVersion } from '../types';\nimport { PromptVersionMetadata } from './PromptVersionMetadata';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { diffWords } from '../diff';\n\nexport const PromptContentCompare = ({\n  baselineVersion,\n  comparedVersion,\n  onSwitchSides,\n  onEditVersion,\n  registeredPrompt,\n  aliasesByVersion,\n  showEditAliasesModal,\n}: {\n  baselineVersion?: RegisteredPromptVersion;\n  comparedVersion?: RegisteredPromptVersion;\n  onSwitchSides: () => void;\n  onEditVersion: (version?: RegisteredPromptVersion) => void;\n  registeredPrompt?: RegisteredPrompt;\n  aliasesByVersion: Record<string, string[]>;\n  showEditAliasesModal?: (versionNumber: string) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const baselineValue = useMemo(\n    () => (baselineVersion ? getPromptContentTagValue(baselineVersion) : ''),\n    [baselineVersion],\n  );\n  const comparedValue = useMemo(\n    () => (comparedVersion ? getPromptContentTagValue(comparedVersion) : ''),\n    [comparedVersion],\n  );\n\n  const baselineMessages = useMemo(() => getChatPromptMessagesFromValue(baselineValue), [baselineValue]);\n  const comparedMessages = useMemo(() => getChatPromptMessagesFromValue(comparedValue), [comparedValue]);\n\n  const stringifyChat = (messages: ReturnType<typeof getChatPromptMessagesFromValue>, fallback?: string) => {\n    if (messages) {\n      // Add an extra newline between each message for better diff readability\n      return messages.map((m: any) => `${m.role}: ${m.content}`).join('\\n\\n');\n    }\n    return fallback ?? '';\n  };\n\n  const baselineDisplay = stringifyChat(baselineMessages, baselineValue);\n  const comparedDisplay = stringifyChat(comparedMessages, comparedValue);\n\n  const diff = useMemo(\n    () => diffWords(baselineDisplay ?? '', comparedDisplay ?? '') ?? [],\n    [baselineDisplay, comparedDisplay],\n  );\n\n  const colors = useMemo(\n    () => ({\n      addedBackground: theme.isDarkMode ? theme.colors.green700 : theme.colors.green300,\n      removedBackground: theme.isDarkMode ? theme.colors.red700 : theme.colors.red300,\n    }),\n    [theme],\n  );\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        padding: theme.spacing.md,\n        paddingTop: 0,\n        borderRadius: theme.borders.borderRadiusSm,\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <div css={{ display: 'flex', justifyContent: 'space-between' }}>\n        <Typography.Title level={3}>\n          <FormattedMessage\n            defaultMessage=\"Comparing version {baseline} with version {compared}\"\n            description=\"Label for comparing prompt versions in the prompt comparison view. Variables {baseline} and {compared} are numeric version numbers being compared.\"\n            values={{\n              baseline: baselineVersion?.version,\n              compared: comparedVersion?.version,\n            }}\n          />\n        </Typography.Title>\n      </div>\n      <Spacer shrinks={false} />\n      <div css={{ display: 'flex' }}>\n        <div css={{ flex: 1 }}>\n          <PromptVersionMetadata\n            aliasesByVersion={aliasesByVersion}\n            onEditVersion={onEditVersion}\n            registeredPrompt={registeredPrompt}\n            registeredPromptVersion={baselineVersion}\n            showEditAliasesModal={showEditAliasesModal}\n            isBaseline\n          />\n        </div>\n        <div css={{ paddingLeft: theme.spacing.sm, paddingRight: theme.spacing.sm }}>\n          <div css={{ width: theme.general.heightSm }} />\n        </div>\n        <div css={{ flex: 1 }}>\n          <PromptVersionMetadata\n            aliasesByVersion={aliasesByVersion}\n            onEditVersion={onEditVersion}\n            registeredPrompt={registeredPrompt}\n            registeredPromptVersion={comparedVersion}\n            showEditAliasesModal={showEditAliasesModal}\n          />\n        </div>\n      </div>\n      <Spacer shrinks={false} />\n      <div css={{ display: 'flex', flex: 1, overflow: 'auto', alignItems: 'flex-start' }}>\n        <div\n          css={{\n            backgroundColor: theme.colors.backgroundSecondary,\n            padding: theme.spacing.md,\n            flex: 1,\n          }}\n        >\n          <Typography.Text\n            css={{\n              whiteSpace: 'pre-wrap',\n            }}\n          >\n            {baselineDisplay || 'Empty'}\n          </Typography.Text>\n        </div>\n        <div css={{ paddingLeft: theme.spacing.sm, paddingRight: theme.spacing.sm }}>\n          <Tooltip\n            componentId=\"mlflow.prompts.details.switch_sides.tooltip\"\n            content={\n              <FormattedMessage\n                defaultMessage=\"Switch sides\"\n                description=\"A label for button used to switch prompt versions when in side-by-side comparison view\"\n              />\n            }\n            side=\"top\"\n          >\n            <Button\n              aria-label={intl.formatMessage({\n                defaultMessage: 'Switch sides',\n                description: 'A label for button used to switch prompt versions when in side-by-side comparison view',\n              })}\n              componentId=\"mlflow.prompts.details.switch_sides\"\n              icon={<ExpandMoreIcon css={{ svg: { rotate: '90deg' } }} />}\n              onClick={onSwitchSides}\n            />\n          </Tooltip>\n        </div>\n\n        <div\n          css={{\n            backgroundColor: theme.colors.backgroundSecondary,\n            padding: theme.spacing.md,\n            flex: 1,\n          }}\n        >\n          <Typography.Text\n            css={{\n              whiteSpace: 'pre-wrap',\n            }}\n          >\n            {diff.map((part, index) => (\n              <span\n                key={index}\n                css={{\n                  backgroundColor: part.added\n                    ? colors.addedBackground\n                    : part.removed\n                    ? colors.removedBackground\n                    : undefined,\n                  textDecoration: part.removed ? 'line-through' : 'none',\n                }}\n              >\n                {part.value}\n              </span>\n            ))}\n          </Typography.Text>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import type { RegisteredPrompt } from '../types';\nimport { Button, PencilIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useUpdateRegisteredPromptTags } from '../hooks/useUpdateRegisteredPromptTags';\nimport { isUserFacingTag } from '../../../../common/utils/TagUtils';\nimport { KeyValueTag } from '../../../../common/components/KeyValueTag';\n\nexport const PromptsListTableTagsBox = ({\n  promptEntity,\n  onTagsUpdated,\n}: {\n  promptEntity?: RegisteredPrompt;\n  onTagsUpdated?: () => void;\n}) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const { EditTagsModal, showEditPromptTagsModal } = useUpdateRegisteredPromptTags({ onSuccess: onTagsUpdated });\n\n  const visibleTagList = promptEntity?.tags.filter((tag) => isUserFacingTag(tag.key)) || [];\n  const containsTags = visibleTagList.length > 0;\n\n  return (\n    <div\n      css={{\n        paddingTop: theme.spacing.xs,\n        paddingBottom: theme.spacing.xs,\n\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        '> *': {\n          marginRight: '0 !important',\n        },\n        gap: theme.spacing.xs,\n      }}\n    >\n      {visibleTagList?.map((tag) => (\n        <KeyValueTag key={tag.key} tag={tag} />\n      ))}\n      <Button\n        componentId=\"mlflow.prompts.details.tags.edit\"\n        size=\"small\"\n        icon={!containsTags ? undefined : <PencilIcon />}\n        onClick={() => promptEntity && showEditPromptTagsModal(promptEntity)}\n        aria-label={intl.formatMessage({\n          defaultMessage: 'Edit tags',\n          description: 'Label for the edit tags button on the registered prompt details page\"',\n        })}\n        children={\n          !containsTags ? (\n            <FormattedMessage\n              defaultMessage=\"Add tags\"\n              description=\"Label for the add tags button on the registered prompt details page\"\n            />\n          ) : undefined\n        }\n        type=\"tertiary\"\n      />\n      {EditTagsModal}\n    </div>\n  );\n};\n","import { ErrorView } from '@mlflow/mlflow/src/common/components/ErrorView';\nimport Routes from '../../../routes';\n\ninterface Props {\n  promptName: string;\n}\n\nexport function PromptNotFoundView({ promptName }: Props) {\n  return (\n    <ErrorView\n      statusCode={404}\n      subMessage={`Prompt name '${promptName}' does not exist`}\n      fallbackHomePageReactRoute={Routes.promptsPageRoute}\n    />\n  );\n}\n","import invariant from 'invariant';\nimport { useDispatch } from 'react-redux';\nimport { usePromptDetailsQuery } from './hooks/usePromptDetailsQuery';\nimport { Link, useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport { ScrollablePageWrapper } from '../../../common/components/ScrollablePageWrapper';\nimport {\n  Breadcrumb,\n  Button,\n  ColumnsIcon,\n  DropdownMenu,\n  GenericSkeleton,\n  Header,\n  OverflowIcon,\n  SegmentedControlButton,\n  SegmentedControlGroup,\n  Spacer,\n  TableIcon,\n  TableSkeleton,\n  useDesignSystemTheme,\n  ZoomMarqueeSelection,\n} from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { PromptVersionsTableMode } from './utils';\nimport { useMemo } from 'react';\nimport Routes from '../../routes';\nimport { CreatePromptModalMode, useCreatePromptModal } from './hooks/useCreatePromptModal';\nimport { useDeletePromptModal } from './hooks/useDeletePromptModal';\nimport { PromptVersionsTable } from './components/PromptVersionsTable';\nimport { useEditAliasesModal } from '../../../common/hooks/useEditAliasesModal';\nimport { usePromptDetailsPageViewState } from './hooks/usePromptDetailsPageViewState';\nimport { PromptContentPreview } from './components/PromptContentPreview';\nimport { PromptContentCompare } from './components/PromptContentCompare';\nimport { withErrorBoundary } from '../../../common/utils/withErrorBoundary';\nimport ErrorUtils from '../../../common/utils/ErrorUtils';\nimport { PromptPageErrorHandler } from './components/PromptPageErrorHandler';\nimport { first, isEmpty } from 'lodash';\nimport { PromptsListTableTagsBox } from './components/PromptDetailsTagsBox';\nimport { PromptNotFoundView } from './components/PromptNotFoundView';\nimport { useUpdatePromptVersionMetadataModal } from './hooks/useUpdatePromptVersionMetadataModal';\nimport type { ThunkDispatch } from '../../../redux-types';\nimport { setModelVersionAliasesApi } from '../../../model-registry/actions';\n\nconst getAliasesModalTitle = (version: string) => (\n  <FormattedMessage\n    defaultMessage=\"Add/edit alias for prompt version {version}\"\n    description=\"Title for the edit aliases modal on the registered prompt details page\"\n    values={{ version }}\n  />\n);\n\nconst PromptsDetailsPage = () => {\n  const { promptName } = useParams<{ promptName: string }>();\n  const { theme } = useDesignSystemTheme();\n  const navigate = useNavigate();\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  invariant(promptName, 'Prompt name should be defined');\n\n  const { data: promptDetailsData, refetch, isLoading, error: promptLoadError } = usePromptDetailsQuery({ promptName });\n\n  const { CreatePromptModal, openModal: openCreateVersionModal } = useCreatePromptModal({\n    mode: CreatePromptModalMode.CreatePromptVersion,\n    registeredPrompt: promptDetailsData?.prompt,\n    latestVersion: first(promptDetailsData?.versions),\n    onSuccess: async ({ promptVersion }) => {\n      await refetch();\n      if (promptVersion) {\n        setPreviewMode({ version: promptVersion });\n      }\n    },\n  });\n\n  const { DeletePromptModal, openModal: openDeleteModal } = useDeletePromptModal({\n    registeredPrompt: promptDetailsData?.prompt,\n    onSuccess: () => navigate(Routes.promptsPageRoute),\n  });\n\n  const { EditPromptVersionMetadataModal, showEditPromptVersionMetadataModal } = useUpdatePromptVersionMetadataModal({\n    onSuccess: refetch,\n  });\n\n  const {\n    setCompareMode,\n    setPreviewMode,\n    setTableMode,\n    switchSides,\n    viewState,\n    setSelectedVersion,\n    setComparedVersion,\n  } = usePromptDetailsPageViewState(promptDetailsData);\n\n  const { mode } = viewState;\n\n  const isEmptyVersions = !isLoading && !promptDetailsData?.versions.length;\n\n  const showPreviewPane =\n    !isLoading && !isEmptyVersions && [PromptVersionsTableMode.PREVIEW, PromptVersionsTableMode.COMPARE].includes(mode);\n\n  const selectedVersionEntity = promptDetailsData?.versions.find(\n    ({ version }) => version === viewState.selectedVersion,\n  );\n\n  const comparedVersionEntity = promptDetailsData?.versions.find(\n    ({ version }) => version === viewState.comparedVersion,\n  );\n\n  const aliasesByVersion = useMemo(() => {\n    const result: Record<string, string[]> = {};\n    promptDetailsData?.prompt?.aliases?.forEach(({ alias, version }) => {\n      if (!result[version]) {\n        result[version] = [];\n      }\n      result[version].push(alias);\n    });\n    return result;\n  }, [promptDetailsData]);\n\n  const { EditAliasesModal, showEditAliasesModal } = useEditAliasesModal({\n    aliases: promptDetailsData?.prompt?.aliases ?? [],\n    onSuccess: refetch,\n    getTitle: getAliasesModalTitle,\n    onSave: async (currentlyEditedVersion: string, existingAliases: string[], draftAliases: string[]) =>\n      dispatch(\n        setModelVersionAliasesApi(\n          promptDetailsData?.prompt?.name ?? '',\n          currentlyEditedVersion,\n          existingAliases,\n          draftAliases,\n        ),\n      ),\n    description: (\n      <FormattedMessage\n        // TODO: add a documentation link (\"Learn more\")\n        defaultMessage=\"Aliases allow you to assign a mutable, named reference to a particular prompt version.\"\n        description=\"Description for the edit aliases modal on the registered prompt details page\"\n      />\n    ),\n  });\n\n  // If the load error occurs, show not found page\n  if (promptLoadError) {\n    return <PromptNotFoundView promptName={promptName} />;\n  }\n\n  const breadcrumbs = (\n    <Breadcrumb>\n      <Breadcrumb.Item>\n        <Link to={Routes.promptsPageRoute}>Prompts</Link>\n      </Breadcrumb.Item>\n    </Breadcrumb>\n  );\n\n  if (isLoading) {\n    return (\n      <ScrollablePageWrapper>\n        <PromptsDetailsPage.Skeleton breadcrumbs={breadcrumbs} />\n      </ScrollablePageWrapper>\n    );\n  }\n\n  return (\n    <ScrollablePageWrapper css={{ overflow: 'hidden', display: 'flex', flexDirection: 'column' }}>\n      <Spacer shrinks={false} />\n      <Header\n        breadcrumbs={breadcrumbs}\n        title={promptDetailsData?.prompt?.name}\n        buttons={\n          <>\n            <DropdownMenu.Root>\n              <DropdownMenu.Trigger asChild>\n                <Button\n                  componentId=\"mlflow.prompts.details.actions\"\n                  icon={<OverflowIcon />}\n                  aria-label=\"More actions\"\n                />\n              </DropdownMenu.Trigger>\n              <DropdownMenu.Content>\n                <DropdownMenu.Item componentId=\"mlflow.prompts.details.actions.delete\" onClick={openDeleteModal}>\n                  <FormattedMessage\n                    defaultMessage=\"Delete\"\n                    description=\"Label for the delete prompt action on the registered prompt details page\"\n                  />\n                </DropdownMenu.Item>\n              </DropdownMenu.Content>\n            </DropdownMenu.Root>\n            <Button componentId=\"mlflow.prompts.details.create\" type=\"primary\" onClick={openCreateVersionModal}>\n              <FormattedMessage\n                defaultMessage=\"Create prompt version\"\n                description=\"Label for the create prompt action on the registered prompt details page\"\n              />\n            </Button>\n          </>\n        }\n      />\n      <PromptsListTableTagsBox onTagsUpdated={refetch} promptEntity={promptDetailsData?.prompt} />\n      <Spacer shrinks={false} />\n      <div css={{ flex: 1, display: 'flex', overflow: 'hidden' }}>\n        <div css={{ flex: showPreviewPane ? '0 0 320px' : 1, display: 'flex', flexDirection: 'column' }}>\n          <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n            <SegmentedControlGroup\n              name=\"mlflow.prompts.details.mode\"\n              componentId=\"mlflow.prompts.details.mode\"\n              value={mode}\n              disabled={isLoading}\n            >\n              <SegmentedControlButton value={PromptVersionsTableMode.PREVIEW} onClick={() => setPreviewMode()}>\n                <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n                  <ZoomMarqueeSelection />\n                  <FormattedMessage\n                    defaultMessage=\"Preview\"\n                    description=\"Label for the preview mode on the registered prompt details page\"\n                  />\n                </div>\n              </SegmentedControlButton>\n              <SegmentedControlButton value={PromptVersionsTableMode.TABLE} onClick={setTableMode}>\n                <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n                  <TableIcon />{' '}\n                  <FormattedMessage\n                    defaultMessage=\"List\"\n                    description=\"Label for the list mode on the registered prompt details page\"\n                  />\n                </div>\n              </SegmentedControlButton>\n              <SegmentedControlButton\n                disabled={Boolean(!promptDetailsData?.versions.length || promptDetailsData?.versions.length < 2)}\n                value={PromptVersionsTableMode.COMPARE}\n                onClick={setCompareMode}\n              >\n                <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n                  <ColumnsIcon />{' '}\n                  <FormattedMessage\n                    defaultMessage=\"Compare\"\n                    description=\"Label for the compare mode on the registered prompt details page\"\n                  />\n                </div>\n              </SegmentedControlButton>\n            </SegmentedControlGroup>\n          </div>\n          <Spacer shrinks={false} size=\"sm\" />\n          <PromptVersionsTable\n            isLoading={isLoading}\n            registeredPrompt={promptDetailsData?.prompt}\n            promptVersions={promptDetailsData?.versions}\n            selectedVersion={viewState.selectedVersion}\n            comparedVersion={viewState.comparedVersion}\n            showEditAliasesModal={showEditAliasesModal}\n            aliasesByVersion={aliasesByVersion}\n            onUpdateSelectedVersion={setSelectedVersion}\n            onUpdateComparedVersion={setComparedVersion}\n            mode={mode}\n          />\n        </div>\n        {showPreviewPane && (\n          <div css={{ flex: 1, display: 'flex', flexDirection: 'column' }}>\n            <div css={{ borderLeft: `1px solid ${theme.colors.border}`, flex: 1, overflow: 'hidden', display: 'flex' }}>\n              {mode === PromptVersionsTableMode.PREVIEW && (\n                <PromptContentPreview\n                  promptVersion={selectedVersionEntity}\n                  onUpdatedContent={refetch}\n                  onDeletedVersion={async () => {\n                    await refetch().then(({ data }) => {\n                      if (!isEmpty(data?.versions) && data?.versions[0].version) {\n                        setSelectedVersion(data?.versions[0].version);\n                      } else {\n                        setTableMode();\n                      }\n                    });\n                  }}\n                  aliasesByVersion={aliasesByVersion}\n                  showEditAliasesModal={showEditAliasesModal}\n                  registeredPrompt={promptDetailsData?.prompt}\n                  showEditPromptVersionMetadataModal={showEditPromptVersionMetadataModal}\n                />\n              )}\n              {mode === PromptVersionsTableMode.COMPARE && (\n                <PromptContentCompare\n                  baselineVersion={selectedVersionEntity}\n                  comparedVersion={comparedVersionEntity}\n                  onSwitchSides={switchSides}\n                  onEditVersion={setPreviewMode}\n                  showEditAliasesModal={showEditAliasesModal}\n                  registeredPrompt={promptDetailsData?.prompt}\n                  aliasesByVersion={aliasesByVersion}\n                />\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n      <Spacer shrinks={false} />\n      {EditAliasesModal}\n      {CreatePromptModal}\n      {DeletePromptModal}\n      {EditPromptVersionMetadataModal}\n    </ScrollablePageWrapper>\n  );\n};\n\nPromptsDetailsPage.Skeleton = function PromptsDetailsPageSkeleton({ breadcrumbs }: { breadcrumbs?: React.ReactNode }) {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <>\n      <Spacer shrinks={false} />\n      <Header\n        breadcrumbs={breadcrumbs}\n        title={<GenericSkeleton css={{ height: theme.general.heightBase, width: 200 }} />}\n        buttons={<GenericSkeleton css={{ height: theme.general.heightBase, width: 120 }} />}\n      />\n      <Spacer shrinks={false} />\n      <TableSkeleton lines={4} />\n      <Spacer shrinks={false} />\n      <div css={{ display: 'flex', gap: theme.spacing.lg }}>\n        <div css={{ flex: '0 0 320px' }}>\n          <TableSkeleton lines={6} />\n        </div>\n        <div css={{ flex: 1 }}>\n          <TableSkeleton lines={4} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default withErrorBoundary(\n  ErrorUtils.mlflowServices.EXPERIMENTS,\n  PromptsDetailsPage,\n  undefined,\n  PromptPageErrorHandler,\n);\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { Modal } from '@databricks/design-system';\nimport { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport type { RegisteredPrompt } from '../types';\nimport { RegisteredPromptsApi } from '../api';\n\nexport const useDeletePromptModal = ({\n  registeredPrompt,\n  onSuccess,\n}: {\n  registeredPrompt?: RegisteredPrompt;\n  onSuccess?: () => void | Promise<any>;\n}) => {\n  const [open, setOpen] = useState(false);\n\n  const { mutate } = useMutation<\n    unknown,\n    Error,\n    {\n      promptName: string;\n    }\n  >({\n    mutationFn: async ({ promptName }) => {\n      await RegisteredPromptsApi.deleteRegisteredPrompt(promptName);\n    },\n  });\n\n  const modalElement = (\n    <Modal\n      componentId=\"mlflow.prompts.delete_modal\"\n      visible={open}\n      onCancel={() => setOpen(false)}\n      title={<FormattedMessage defaultMessage=\"Delete prompt\" description=\"A header for the delete prompt modal\" />}\n      okText={\n        <FormattedMessage\n          defaultMessage=\"Delete\"\n          description=\"A label for the confirm button in the delete prompt modal\"\n        />\n      }\n      okButtonProps={{ danger: true }}\n      onOk={async () => {\n        if (!registeredPrompt?.name) {\n          setOpen(false);\n          return;\n        }\n        mutate(\n          {\n            promptName: registeredPrompt.name,\n          },\n          {\n            onSuccess: () => {\n              onSuccess?.();\n              setOpen(false);\n            },\n          },\n        );\n        setOpen(false);\n      }}\n      cancelText={\n        <FormattedMessage\n          defaultMessage=\"Cancel\"\n          description=\"A label for the cancel button in the delete prompt modal\"\n        />\n      }\n    >\n      <FormattedMessage\n        defaultMessage=\"Are you sure you want to delete the prompt?\"\n        description=\"A content for the delete prompt confirmation modal\"\n      />\n    </Modal>\n  );\n\n  const openModal = () => setOpen(true);\n\n  return { DeletePromptModal: modalElement, openModal };\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { useEditKeyValueTagsModal } from '../../../../common/hooks/useEditKeyValueTagsModal';\nimport { RegisteredPromptsApi } from '../api';\nimport type { RegisteredPromptVersion } from '../types';\nimport { useCallback } from 'react';\nimport { diffCurrentAndNewTags, isUserFacingTag } from '../../../../common/utils/TagUtils';\nimport { FormattedMessage } from 'react-intl';\n\ntype UpdatePromptVersionMetadataPayload = {\n  promptName: string;\n  promptVersion: string;\n  toAdd: { key: string; value: string }[];\n  toDelete: { key: string }[];\n};\n\nexport const useUpdatePromptVersionMetadataModal = ({ onSuccess }: { onSuccess?: () => void }) => {\n  const updateMutation = useMutation<unknown, Error, UpdatePromptVersionMetadataPayload>({\n    mutationFn: async ({ toAdd, toDelete, promptName, promptVersion }) => {\n      return Promise.all([\n        ...toAdd.map(({ key, value }) =>\n          RegisteredPromptsApi.setRegisteredPromptVersionTag(promptName, promptVersion, key, value),\n        ),\n        ...toDelete.map(({ key }) =>\n          RegisteredPromptsApi.deleteRegisteredPromptVersionTag(promptName, promptVersion, key),\n        ),\n      ]);\n    },\n  });\n\n  const {\n    EditTagsModal: EditPromptVersionMetadataModal,\n    showEditTagsModal,\n    isLoading,\n  } = useEditKeyValueTagsModal<Pick<RegisteredPromptVersion, 'name' | 'version' | 'tags'>>({\n    title: (\n      <FormattedMessage\n        defaultMessage=\"Add/Edit Prompt Version Metadata\"\n        description=\"Title for a modal that allows the user to add or edit metadata tags on prompt versions.\"\n      />\n    ),\n    valueRequired: true,\n    saveTagsHandler: (promptVersion, currentTags, newTags) => {\n      const { addedOrModifiedTags, deletedTags } = diffCurrentAndNewTags(currentTags, newTags);\n\n      return new Promise<void>((resolve, reject) => {\n        if (!promptVersion.name) {\n          return reject();\n        }\n        // Send all requests to the mutation\n        updateMutation.mutate(\n          {\n            promptName: promptVersion.name,\n            promptVersion: promptVersion.version,\n            toAdd: addedOrModifiedTags,\n            toDelete: deletedTags,\n          },\n          {\n            onSuccess: () => {\n              resolve();\n              onSuccess?.();\n            },\n            onError: reject,\n          },\n        );\n      });\n    },\n  });\n\n  const showEditPromptVersionMetadataModal = useCallback(\n    (promptVersion: RegisteredPromptVersion) =>\n      showEditTagsModal({\n        name: promptVersion.name,\n        version: promptVersion.version,\n        tags: promptVersion.tags?.filter((tag) => isUserFacingTag(tag.key)),\n      }),\n    [showEditTagsModal],\n  );\n\n  return { EditPromptVersionMetadataModal, showEditPromptVersionMetadataModal, isLoading };\n};\n","import { PageWrapper } from '@databricks/design-system';\n\n/**\n * Wraps the page content in the scrollable container so e.g. constrained tables behave correctly.\n */\nexport const ScrollablePageWrapper = ({ children, className }: { children: React.ReactNode; className?: string }) => {\n  return (\n    <PageWrapper css={{ height: '100%' }} className={className}>\n      {children}\n    </PageWrapper>\n  );\n};\n","import { Tag, useDesignSystemTheme } from '@databricks/design-system';\nimport type { TagProps } from '@databricks/design-system';\n\ntype ModelVersionAliasTagProps = { value: string; compact?: boolean } & Pick<\n  TagProps,\n  'closable' | 'onClose' | 'className'\n>;\n\n// When displayed in compact mode (e.g. within <Select>), constrain the width to 160 pixels\nconst COMPACT_MODE_MAX_WIDTH = 160;\nconst REGULAR_MAX_WIDTH = 300;\nconst TAG_SYMBOL = '@';\n\nexport const AliasTag = ({ value, closable, onClose, className, compact = false }: ModelVersionAliasTagProps) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversionaliastag.tsx_23\"\n      css={{\n        fontWeight: theme.typography.typographyBoldFontWeight,\n        marginRight: theme.spacing.xs,\n      }}\n      className={className}\n      closable={closable}\n      onClose={onClose}\n      title={value}\n    >\n      <span\n        css={{\n          display: 'block',\n          whiteSpace: 'nowrap',\n          maxWidth: compact ? COMPACT_MODE_MAX_WIDTH : REGULAR_MAX_WIDTH,\n          textOverflow: 'ellipsis',\n          overflow: 'hidden',\n        }}\n      >\n        {TAG_SYMBOL}&nbsp;{value}\n      </span>\n    </Tag>\n  );\n};\n","import { Button, PencilIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { AliasTag } from '../../../common/components/AliasTag';\nimport { FormattedMessage } from 'react-intl';\n\ninterface ModelVersionTableAliasesCellProps {\n  aliases?: string[];\n  modelName: string;\n  version: string;\n  onAddEdit: () => void;\n  className?: string;\n}\n\nexport const ModelVersionTableAliasesCell = ({\n  aliases = [],\n  onAddEdit,\n  className,\n}: ModelVersionTableAliasesCellProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        maxWidth: 300,\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'flex-start',\n        '> *': {\n          marginRight: '0 !important',\n        },\n        rowGap: theme.spacing.xs / 2,\n        columnGap: theme.spacing.xs,\n      }}\n      className={className}\n    >\n      {aliases.length < 1 ? (\n        <Button\n          componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversiontablealiasescell.tsx_30\"\n          size=\"small\"\n          type=\"link\"\n          onClick={onAddEdit}\n        >\n          <FormattedMessage\n            defaultMessage=\"Add\"\n            description=\"Model registry > model version table > aliases column > 'add' button label\"\n          />\n        </Button>\n      ) : (\n        <>\n          {aliases.map((alias) => (\n            <AliasTag value={alias} key={alias} css={{ marginTop: theme.spacing.xs / 2 }} />\n          ))}\n          <Button\n            componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversiontablealiasescell.tsx_41\"\n            size=\"small\"\n            icon={<PencilIcon />}\n            onClick={onAddEdit}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n","import { css } from '@emotion/react';\nimport type { ReactNode } from 'react';\nimport React from 'react';\n\nimport type { ButtonProps } from '@databricks/design-system';\nimport { Button, LegacyTooltip } from '@databricks/design-system';\n\ntype SnippetActionButtonProps = Pick<ButtonProps, 'icon' | 'onClick' | 'href' | 'rel' | 'target'> & {\n  tooltipMessage: NonNullable<ReactNode>;\n};\n\nexport default function SnippetActionButton({ tooltipMessage, ...buttonProps }: SnippetActionButtonProps) {\n  const style = css({\n    zIndex: 1, // required for action buttons to be visible and float\n  });\n  return (\n    <LegacyTooltip title={tooltipMessage}>\n      <Button\n        componentId=\"codegen_web-shared_src_snippet_actions_snippetactionbutton.tsx_33\"\n        {...buttonProps}\n        css={style}\n      />\n    </LegacyTooltip>\n  );\n}\n","import React from 'react';\n\nimport type { ButtonProps } from '@databricks/design-system';\nimport { useCopyController } from '@databricks/web-shared/copy';\n\nimport SnippetActionButton from './SnippetActionButton';\n\nexport interface SnippetCopyActionProps extends ButtonProps {\n  /**\n   * The text to be copied into clipboard when action button is clicked.\n   */\n  copyText: string;\n  onClick?: (e: React.MouseEvent) => void;\n}\n\nexport function SnippetCopyAction({ copyText, onClick, ...props }: SnippetCopyActionProps) {\n  const { actionIcon, tooltipMessage, copy } = useCopyController(copyText);\n\n  return (\n    <SnippetActionButton\n      tooltipMessage={tooltipMessage}\n      icon={actionIcon}\n      onClick={(e) => {\n        copy();\n        onClick?.(e);\n      }}\n      {...props}\n    />\n  );\n}\n","import { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport go from 'react-syntax-highlighter/dist/cjs/languages/prism/go';\nimport java from 'react-syntax-highlighter/dist/cjs/languages/prism/java';\nimport javascript from 'react-syntax-highlighter/dist/cjs/languages/prism/javascript';\nimport json from 'react-syntax-highlighter/dist/cjs/languages/prism/json';\nimport python from 'react-syntax-highlighter/dist/cjs/languages/prism/python';\nimport yaml from 'react-syntax-highlighter/dist/cjs/languages/prism/yaml';\nimport sql from 'react-syntax-highlighter/dist/cjs/languages/prism/sql';\n\nSyntaxHighlighter.registerLanguage('sql', sql);\nSyntaxHighlighter.registerLanguage('java', java);\nSyntaxHighlighter.registerLanguage('python', python);\nSyntaxHighlighter.registerLanguage('go', go);\nSyntaxHighlighter.registerLanguage('javascript', javascript);\nSyntaxHighlighter.registerLanguage('yaml', yaml);\nSyntaxHighlighter.registerLanguage('json', json);\n\nimport duotoneDarkStyle from './theme/databricks-duotone-dark';\nimport lightStyle from './theme/databricks-light';\nimport type { CSSProperties, ReactNode } from 'react';\nimport { pick } from 'lodash';\nexport type CodeSnippetTheme = 'duotoneDark' | 'light';\nexport const buttonBackgroundColorDark = 'rgba(140, 203, 255, 0)';\nexport const buttonColorDark = 'rgba(255, 255, 255, 0.84)';\nexport const buttonHoverColorDark = '#8ccbffcc';\nexport const buttonHoverBackgroundColorDark = 'rgba(140, 203, 255, 0.08)';\nexport const duboisAlertBackgroundColor = '#fff0f0';\nexport const snippetPadding = '24px';\nconst themesStyles: Record<CodeSnippetTheme, any> = {\n  light: lightStyle,\n  duotoneDark: duotoneDarkStyle,\n};\n\nexport type CodeSnippetLanguage = 'sql' | 'java' | 'python' | 'javascript' | 'go' | 'yaml' | 'text' | 'json';\n\nexport interface CodeSnippetProps {\n  /**\n   * The code string\n   */\n  children: string;\n  /**\n   * The actions that are displayed on the right top corner of the component\n   *  see `./actions` for built-in actions\n   */\n  actions?: NonNullable<ReactNode> | NonNullable<ReactNode>[];\n  /**\n   * The theme, default theme is `light`\n   */\n  theme?: CodeSnippetTheme;\n  /**\n   * Language of the code (`children`)\n   */\n  language: CodeSnippetLanguage;\n  /**\n   * Custom styles (passed to the internal `<pre>`)\n   */\n  style?: CSSProperties;\n  /**\n   * Whether to show line numbers on the left or not\n   */\n  showLineNumbers?: boolean;\n  /**\n   * Custom styles for line numbers\n   */\n  lineNumberStyle?: CSSProperties;\n  /**\n   * Boolean to specify whether to style the <code> block with white-space: pre-wrap or white-space: pre\n   */\n  wrapLongLines?: boolean;\n  /**\n   * Boolean that determines whether or not each line of code should be wrapped in a parent element\n   */\n  wrapLines?: boolean;\n  /**\n   * Props to pass to the line elements\n   */\n  lineProps?: React.HTMLProps<HTMLElement> | undefined;\n  /**\n   * Custom tag to use for the `<pre>` element\n   */\n  PreTag?: keyof JSX.IntrinsicElements | React.ComponentType<React.PropsWithChildren<any>> | undefined;\n}\n\n/**\n * `CodeSnippet` is used for highlighting code, use this instead of\n */\nexport function CodeSnippet({\n  theme = 'light',\n  language,\n  actions,\n  style,\n  children,\n  showLineNumbers,\n  lineNumberStyle,\n  wrapLongLines,\n  wrapLines,\n  PreTag,\n}: CodeSnippetProps) {\n  const customStyle = {\n    border: 'none',\n    borderRadius: 0,\n    margin: 0,\n    padding: snippetPadding,\n    ...style,\n  };\n  return (\n    <SyntaxHighlighter\n      showLineNumbers={showLineNumbers}\n      lineNumberStyle={lineNumberStyle}\n      language={language}\n      style={themesStyles[theme]}\n      customStyle={customStyle}\n      codeTagProps={{\n        style: pick(style, 'backgroundColor'),\n      }}\n      wrapLongLines={wrapLongLines}\n      wrapLines={wrapLines}\n      PreTag={PreTag}\n    >\n      {children}\n    </SyntaxHighlighter>\n  );\n}\n\nexport * from './actions/SnippetCopyAction';\n"],"names":["_ref","name","styles","_ref2","_ref3","_ref4","AliasSelect","renderKey","setDraftAliases","existingAliases","draftAliases","version","aliasToVersionMap","disabled","intl","useIntl","dropdownVisible","setDropdownVisible","useState","theme","useDesignSystemTheme","removeFromEditedAliases","useCallback","alias","aliases","filter","existingAlias","updateEditedAliases","sanitizedAliases","map","replace","toLowerCase","substring","length","uniqueAliases","Array","from","Set","_jsxs","LegacySelect","filterOption","val","opt","value","startsWith","placeholder","formatMessage","id","defaultMessage","allowClear","css","mode","onChange","dangerouslySetAntdProps","dropdownMatchSelectWidth","tagRender","_jsx","AliasTag","compact","closable","onClose","toString","onDropdownVisibleChange","open","children","Option","_css","display","marginRight","spacing","xs","FormattedMessage","Object","entries","otherVersion","aliasedVersion","values","JSON","stringify","useEditAliasesModal","onSuccess","onSave","getTitle","description","isLoading","setIsLoading","showModal","setShowModal","form","LegacyForm","useForm","errorMessage","setErrorMessage","setExistingAliases","currentlyEditedVersion","setCurrentlyEditedVersion","showEditAliasesModal","versionNumber","modelVersionAliases","conflictedAliases","useMemo","otherVersionMappings","reduce","aliasMap","aliasEntry","_aliasMap$find","some","find","push","_version$aliases","alias_name","result","isPristine","isEqual","slice","sort","isExceedingLimit","isInvalid","EditAliasesModal","Modal","componentId","visible","footer","Button","onClick","loading","type","save","then","catch","e","ErrorWrapper","extractedErrorMessage","getMessageField","getUserVisibleError","text","message","destroyOnClose","title","onCancel","confirmLoading","Typography","Paragraph","layout","Item","flexDirection","gap","Alert","role","limit","CopyActionButton","buttonProps","copyText","copyTooltip","isInsideInputGroup","onCopy","tooltipProps","actionIcon","copy","handleTooltipOpenChange","tooltipOpen","tooltipMessage","useCopyController","button","icon","size","inputGroupButton","Tooltip","content","onOpenChange","PromptsListTableVersionCell","row","original","getValue","Text","ShowArtifactCodeSnippet","code","CopyButton","zIndex","position","top","right","showLabel","CopyIcon","CodeSnippet","language","showLineNumbers","style","padding","sm","color","colors","textPrimary","backgroundColor","backgroundSecondary","whiteSpace","wrapLongLines","showTooltip","setShowTooltip","LegacyTooltip","handleClick","navigator","clipboard","writeText","setTimeout","onMouseLeave","handleMouseLeave","undefined","useUpdateRegisteredPromptTags","updateMutation","useMutation","mutationFn","async","toAdd","toDelete","promptId","Promise","all","key","RegisteredPromptsApi","setRegisteredPromptTag","deleteRegisteredPromptTag","EditTagsModal","showEditTagsModal","useEditKeyValueTagsModal","valueRequired","saveTagsHandler","prompt","currentTags","newTags","addedOrModifiedTags","deletedTags","diffCurrentAndNewTags","resolve","reject","mutate","onError","showEditPromptTagsModal","tags","tag","isUserFacingTag","PromptPageErrorHandler","error","_error$message","ScrollablePageWrapper","Empty","image","DangerIcon","queryFn","queryKey","_versionsResponse$mod","promptName","detailsResponse","versionsResponse","getPromptDetails","getPromptVersions","registered_model","versions","model_versions","PromptVersionsTableAliasesCell","table","options","meta","aliasesByVersion","registeredPrompt","mvAliases","ModelVersionTableAliasesCell","modelName","onAddEdit","PromptVersionsDiffSelectorButton","isSelectedFirstToCompare","isSelectedSecondToCompare","onSelectFirst","onSelectSecond","width","general","buttonHeight","alignItems","paddingRight","height","buttonInnerHeight","flex","delayDuration","side","border","actionDefaultBorderFocus","actionDefaultBorderDefault","borderRight","marginLeft","borderTopLeftRadius","borders","borderRadiusMd","borderBottomLeftRadius","actionDefaultBackgroundPress","actionDefaultBackgroundDefault","cursor","actionDefaultBackgroundHover","borderLeft","borderTopRightRadius","borderBottomRightRadius","PromptVersionsTable","promptVersions","onUpdateComparedVersion","onUpdateSelectedVersion","comparedVersion","selectedVersion","columns","resultColumns","header","accessorKey","cell","PromptVersionsTableMode","TABLE","accessorFn","creation_timestamp","Utils","formatTimestamp","useReactTable","data","getRowId","getCoreRowModel","Table","scrollable","empty","TableRow","isHeader","getLeafHeaders","TableHeader","flexRender","column","columnDef","getContext","TableSkeletonRows","getRowModel","rows","isSelectedSingle","PREVIEW","includes","COMPARE","showCursorForEntireRow","heightBase","getAllCells","TableCell","md","ChevronRightIcon","promptDetailsViewStateReducer","state","action","PromptVersionRuns","isLoadingRuns","runIds","runInfoMap","showAll","setShowAll","visibleCount","Math","min","hasMore","_Fragment","bold","ParagraphSkeleton","flexWrap","runId","index","runInfo","isNil","experimentId","runUuid","runName","Link","to","Routes","getRunPageRoute","count","PromptVersionTags","onEditVersionMetadata","shouldAllowEditingMetadata","editButton","PencilIcon","KeyValueTag","Hint","PromptVersionMetadata","registeredPromptVersion","onEditVersion","showEditPromptVersionMetadataModal","isBaseline","_registeredPromptVers3","_registeredPromptVers","_registeredPromptVers2","tagValue","REGISTERED_PROMPT_SOURCE_RUN_IDS","split","trim","usePromptRunsInfo","runUuids","queryResults","useQueries","queries","MlflowService","getRun","run_id","transformGetRunResponse","forEach","queryResult","_queryResult$data","_queryResult$data$run","run","info","visibleTagList","versionElement","gridTemplateColumns","gridAutoRows","typography","lineHeightLg","rowGap","columnGap","PROMPT_VARIABLE_REGEX","PromptContentPreview","promptVersion","onUpdatedContent","onDeletedVersion","getPromptContentTagValue","isChatPromptType","isChatPrompt","parsedMessages","getChatPromptMessagesFromValue","DeletePromptModal","openModal","openDeleteModal","useDeletePromptVersionModal","setOpen","deleteRegisteredPromptVersion","okText","okButtonProps","danger","onOk","cancelText","showUsageExample","setShowUsageExample","variableNames","variables","source","m","join","match","exec","variable","uniq","buildCodeSnippetContent","PROMPT_TYPE_CHAT","paddingTop","borderRadius","borderRadiusSm","overflow","Title","level","TrashIcon","PlayIcon","Spacer","shrinks","msg","ModelTraceExplorerChatMessage","promptType","PROMPT_TYPE_TEXT","codeSnippetContent","_ref5","_ref6","_ref7","_ref8","PromptContentCompare","baselineVersion","onSwitchSides","baselineValue","comparedValue","baselineMessages","comparedMessages","stringifyChat","messages","fallback","baselineDisplay","comparedDisplay","diff","_diffWords","diffWords","addedBackground","isDarkMode","green700","green300","removedBackground","red700","red300","baseline","compared","paddingLeft","heightSm","ExpandMoreIcon","part","added","removed","textDecoration","PromptsListTableTagsBox","promptEntity","onTagsUpdated","containsTags","paddingBottom","PromptNotFoundView","ErrorView","statusCode","subMessage","fallbackHomePageReactRoute","promptsPageRoute","getAliasesModalTitle","PromptsDetailsPage","_promptDetailsData$pr3","_promptDetailsData$pr4","_promptDetailsData$pr7","useParams","navigate","useNavigate","dispatch","useDispatch","invariant","promptDetailsData","refetch","promptLoadError","usePromptDetailsQuery","_queryResult$error","useQuery","retry","CreatePromptModal","openCreateVersionModal","useCreatePromptModal","CreatePromptModalMode","CreatePromptVersion","latestVersion","first","setPreviewMode","useDeletePromptModal","deleteRegisteredPrompt","EditPromptVersionMetadataModal","useUpdatePromptVersionMetadataModal","setRegisteredPromptVersionTag","deleteRegisteredPromptVersionTag","_promptVersion$tags","setCompareMode","setTableMode","switchSides","viewState","setSelectedVersion","setComparedVersion","dispatchViewMode","useReducer","versionEntity","firstVersion","_first","_promptDetailsData$ve","usePromptDetailsPageViewState","isEmptyVersions","showPreviewPane","selectedVersionEntity","comparedVersionEntity","_promptDetailsData$pr","_promptDetailsData$pr2","_promptDetailsData$pr5","_promptDetailsData$pr6","setModelVersionAliasesApi","breadcrumbs","Breadcrumb","Skeleton","Header","buttons","DropdownMenu","Root","Trigger","asChild","OverflowIcon","Content","SegmentedControlGroup","SegmentedControlButton","ZoomMarqueeSelection","TableIcon","Boolean","ColumnsIcon","isEmpty","GenericSkeleton","TableSkeleton","lines","lg","withErrorBoundary","ErrorUtils","mlflowServices","EXPERIMENTS","className","PageWrapper","Tag","fontWeight","typographyBoldFontWeight","maxWidth","textOverflow","marginTop","SnippetActionButton","SnippetCopyAction","props","SyntaxHighlighter","registerLanguage","sql","java","python","go","javascript","yaml","json","snippetPadding","themesStyles","light","lightStyle","duotoneDark","duotoneDarkStyle","actions","lineNumberStyle","wrapLines","PreTag","customStyle","margin","codeTagProps","pick"],"sourceRoot":""}