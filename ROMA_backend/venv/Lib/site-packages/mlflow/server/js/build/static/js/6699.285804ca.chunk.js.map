{"version":3,"file":"static/js/6699.285804ca.chunk.js","mappings":"sJAEO,MAAMA,EAAsBC,GAC7B,aAAcA,EACTA,EAAWC,SAASC,MAGzB,UAAWF,EAAWG,YACjBH,EAAWG,YAAYD,MAGzBF,EAAWG,YAAYC,iBAAiBF,K,gMCYjD,IAAAG,EAAA,CAAAC,KAAA,UAAAC,OAAA,kCAAAC,EAAA,CAAAF,KAAA,UAAAC,OAAA,0DAAAE,EAAA,CAAAH,KAAA,SAAAC,OAAA,6BAuGA,OA/FwCG,EAAAA,EAAAA,aAGtC,EAAGC,eAAcC,YAAWC,eAAcC,YAAWC,eAAcC,aAAYC,iBAAiBC,KAAS,IAADC,EACxG,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,WAAS,GACvCC,GAAeC,EAAAA,EAAAA,QAAuB,MACtCC,EAAyD,QAA3CN,GAAGO,EAAAA,EAAAA,IAAkB,CAAER,IAAKK,WAAe,IAAAJ,OAAA,EAAxCA,EAA0CQ,MAE3DC,GAA0B,OAAdH,QAAc,IAAdA,EAAAA,EAAkBI,KAAYZ,EAE1Ca,GAAQN,EAAAA,EAAAA,QAAOb,IACf,MAAEoB,IAAUC,EAAAA,EAAAA,KAEZC,GAAcC,EAAAA,EAAAA,cAGjBC,IACKV,IACFK,EAAMM,QAAUD,EAAeV,EACjC,GAEF,CAACA,IAcH,OAXAY,EAAAA,EAAAA,qBAAoBnB,GAAK,MACvBe,mBAGFK,EAAAA,EAAAA,kBAAgB,KAEVb,GACFZ,GAAa0B,EAAAA,EAAAA,OAAMd,EAAiBK,EAAMM,QAASrB,EAAca,GACnE,GACC,CAACH,EAAgBG,EAAUb,EAAcE,EAAeJ,KAGzD2B,EAAAA,EAAAA,IAAA,OACEtB,IAAKK,EACLkB,IAAGjC,EAKDkC,SAAA,CAEDtB,IACCuB,EAAAA,EAAAA,GAACC,EAAAA,GAAM,CACLrC,OAAMF,KAOVsC,EAAAA,EAAAA,GAACE,EAAAA,aAAY,CACXC,KAAK,IACLnB,MAAOf,EACP6B,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQC,KAAM,OAAOrC,OAAe,IACpDsC,QACEP,EAAAA,EAAAA,GAAA,OAAKF,IAAGhC,EAAqCiC,UAC3CC,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHI,SAAU,WACVxB,MAAOI,EAAMqB,QAAQC,GACrBC,YAAavB,EAAMqB,QAAQG,GAC3BC,UAAW,OACXC,OAAQ,YACRC,gBAAiB,gBACjBC,OAAQ,EACR,SAAU,CACRD,gBAAiB,oBAEpB,QAIPE,SAAUA,CAACC,GAAKC,WACd,MAAMC,GAAcxB,EAAAA,EAAAA,OAAMuB,EAAKnC,MAAOZ,EAAca,GACpDf,EAAakD,GACTtC,IACFK,EAAMM,QAAU2B,EAActC,EAChC,EAEFuC,cAAeA,IAAM3C,GAAc,GACnC4C,aAAcA,IAAM5C,GAAc,GAClC6C,eAAgB,CAACnD,EAAcc,KAC/BsC,eAAgB,CAACvC,EAAUC,KAAUa,SAEpC5B,IAEFE,IACG,I,sBC/GyB,IAAAX,EAAA,CAAAC,KAAA,SAAAC,OAAA,oCAoFnC,MAhFoC6D,EAClCC,eACAC,kBACAC,YACAC,wBACAC,gCAYA,MAAOC,EAAaC,IAAkBrD,EAAAA,EAAAA,UAAS+C,GACzCO,GAA2BC,EAAAA,EAAAA,IAAqBP,EAAiB,MACjE,MAAEvC,IAAUC,EAAAA,EAAAA,KAElB,OACEQ,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,MACfC,eAAgB,gBAChBC,IAAKjD,EAAMqB,QAAQC,IACpB,IAACX,SAAA,EAEFC,EAAAA,EAAAA,GAACsC,EAAAA,EAAK,CACJC,YAAY,2CACZC,YAAU,EACVC,YAAY,SACZlF,MAAOwE,EACPW,QAASA,KACPf,EAAgB,IAChBK,EAAe,GAAG,EAEpBW,SAAWzB,IACTc,EAAed,EAAE0B,OAAOrF,OACxB0E,EAAyBf,EAAE0B,OAAOrF,MAAMsF,cAAc,EAExDC,QAAQ9C,EAAAA,EAAAA,GAAC+C,EAAAA,EAAU,IACnBjD,IAAGpC,IAKJkE,EAAUoB,QACTnD,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,MACfxB,WAAYvB,EAAMqB,QAAQG,GAC1BqC,YAAa7D,EAAMqB,QAAQC,GAC3BwC,WAAY,UACb,IAACnD,SAAA,EAEFF,EAAAA,EAAAA,IAACsD,EAAAA,EAAWC,KAAI,CAACtD,KAAGM,EAAAA,EAAAA,IAAE,CAAEiD,WAAY,SAAUJ,YAAa7D,EAAMqB,QAAQC,IAAI,IAACX,SAAA,CAC3E6B,EAAU0B,kBAAoB,EAAE,MAAI1B,EAAU2B,iBAEjDvD,EAAAA,EAAAA,GAACwD,EAAAA,EAAM,CACL,cAAY,oBACZC,MAAMzD,EAAAA,EAAAA,GAAC0D,EAAAA,cAAa,IACpBC,QAAS7B,EACTS,YAAY,mDAEdvC,EAAAA,EAAAA,GAACwD,EAAAA,EAAM,CACL,cAAY,oBACZC,MAAMzD,EAAAA,EAAAA,GAAC4D,EAAAA,gBAAe,IACtBD,QAAS9B,EACTU,YAAY,uDAId,ECpFH,MAAMsB,EAAuB3E,IAGvB4E,EACL,EADKA,EAEH,EAFGA,EAGN,EA2CMC,EAA6EC,IACxF,MAAMC,EAAyB,GACzBC,EAAoBC,IAAkC,IAADC,EACpDD,IAGLF,EAAkBI,KAAKF,GACD,QAAtBC,EAAAD,EAAcpE,gBAAQ,IAAAqE,GAAtBA,EAAwBE,QAAQJ,GAAiB,EAInD,OADAF,EAAMM,QAAQJ,GACPD,CAAiB,EAGbM,EAA0BA,CACrCP,EACAQ,EAActF,OAEd,MAAMuF,EAAoC,CAAC,EAErCC,EAAWA,CAACP,EAA8BQ,KAAmB,IAADC,GAC3DT,GAAiBQ,EAAQH,IAG9BC,EAASN,EAAcU,KAAOV,EACR,QAAtBS,EAAAT,EAAcpE,gBAAQ,IAAA6E,GAAtBA,EAAwBN,SAASQ,GAAaJ,EAASI,EAAOH,EAAQ,KAAG,EAI3E,OADAX,EAAMM,QAAQI,EAAU,GACjBD,CAAQ,EAiCJM,EAAqBC,IAEhC,GAAwB,IAApBA,EACF,MAAO,KACF,GAAIA,GAAmB,IAAU,CAGtC,MAAO,IADkBA,EAAkB,IAAM,IACtBC,QAAQ,KACrC,CAAO,GAAID,GAAmB,IAAK,CAIjC,MAAO,IADkBA,EAAkB,KAChBC,QAAQ,KACrC,CAGE,MAAO,IADiBD,EAAkB,KAChBC,QAAQ,MACpC,EAGWC,EAAsBA,CAACC,EAA0BC,KAAkC,IAADC,EAC7F,OAAIF,EAAKN,MAAQO,EACR,GAGY,QAAdC,EAACF,EAAKpF,gBAAQ,IAAAsF,EAAAA,EAAI,IAAIC,WAAWR,GAAUI,EAAoBJ,EAAOM,IAAiB,GAAE,EAGrFG,EAA8BJ,IAAsC,IAADK,EAC9E,IAAKL,EAAKpF,UAAsC,KAAb,QAAbyF,EAAAL,EAAKpF,gBAAQ,IAAAyF,OAAA,EAAbA,EAAeC,QACnC,OAAO,EAGT,MAAMC,EAAcP,EAAKpF,SAAS4F,IAAIJ,GACtC,OAAOK,KAAKC,OAAOH,GAAe,CAAC,ECjIxBI,GAAqCC,EAAAA,EAAAA,eAA2C,CAC3FC,SAAU,KACVC,QAAS,CAAC,EACVC,WAAY,UACZC,cAAeA,OACfC,kBAAcC,EACdC,gBAAiBA,OACjBC,UAAW,UACXC,aAAcA,OACdC,uBAAuB,EACvBC,yBAA0BA,OAC1BC,yBAAyB,EACzBC,2BAA4BA,OAC5BC,wBAAwB,IAGbC,EAAiCA,KACrCC,EAAAA,EAAAA,YAAWjB,GAGPkB,EAAsCA,EACjDC,aACAC,oBACAC,yBAIAN,yBACA9G,eAOK,IAADrC,EAAA0J,EAAAC,EACJ,MAAMrB,GAAWsB,EAAAA,EAAAA,UAAQ,KAAMC,EAAAA,EAAAA,IAAsBN,IAAa,CAACA,IAC7DhB,GAAUqB,EAAAA,EAAAA,UAAQ,IAAOtB,EAAWzB,EAAwB,CAACyB,IAAa,CAAC,GAAI,CAACA,IAChFwB,GAAuBC,EAAAA,EAAAA,IAAmBzB,EAAUmB,GACpDO,EAAsD,QAAnChK,EAAuB,OAApB8J,QAAoB,IAApBA,EAAAA,EAAwBxB,SAAQ,IAAAtI,EAAAA,OAAI2I,EAC1DsB,GAA0D,QAAzCP,EAAoB,OAAnBM,QAAmB,IAAnBA,GAAgC,QAAbL,EAAnBK,EAAqBE,mBAAW,IAAAP,OAAb,EAAnBA,EAAkC5B,cAAM,IAAA2B,EAAAA,EAAI,GAAK,EACnES,IAAsBC,EAAAA,EAAAA,OAAc,OAAR9B,QAAQ,IAARA,OAAQ,EAARA,EAAU+B,WAAYD,EAAAA,EAAAA,OAAc,OAAR9B,QAAQ,IAARA,OAAQ,EAARA,EAAUgC,UAEjE9B,EAAYC,IAAiBxH,EAAAA,EAAAA,UACjB,OAAjBuI,QAAiB,IAAjBA,EAAAA,EAAsBW,EAAqB,UAAY,WAElDzB,EAAcE,IAAmB3H,EAAAA,EAAAA,UAAyC+I,GAC3EO,GAAmBC,EAAAA,EAAAA,IAAoB9B,IACtCG,EAAWC,IAAgB7H,EAAAA,EAAAA,UAAgCsJ,IAC3DxB,EAAuBC,IAA4B/H,EAAAA,EAAAA,WAAS,IAC5DgI,EAAyBC,IAA8BjI,EAAAA,EAAAA,UAASgJ,IAEvEQ,EAAAA,EAAAA,YAAU,KACR,MAAMF,GAAmBC,EAAAA,EAAAA,IAAoB9B,GAC7CI,EAAayB,EAAiB,GAC7B,CAAC7B,IAEJ,MAAM7I,GAAQ+J,EAAAA,EAAAA,UACZ,MACEtB,WACAC,UACAC,aACAC,gBACAI,YACAC,eACAJ,eACAE,kBACAG,wBACAC,2BACAC,0BACAC,6BACAC,4BAEF,CACEX,EACAD,EACAM,EACAP,EACAI,EACAK,EACAC,EACAC,EACAC,EACAC,IAIJ,OACE7G,EAAAA,EAAAA,GAAC8F,EAAmCsC,SAAQ,CAAC7K,MAAOA,EAAMwC,SAAEA,GAAuD,EC3EjHsI,EAAkBrF,IACtB,OAAQA,EAAMsF,SACZ,IAAK,SACL,IAAK,UAML,QAEE,MAAO,UANT,IAAK,aACH,MAAO,aACT,IAAK,SACH,MAAO,SAIX,EAGWC,EAAsBA,EACjCC,WACApC,eACAE,kBACAE,eACAiC,kBACAC,qBAqBI,IAADC,EACH,MAAOjH,EAAcC,IAAmBhD,EAAAA,EAAAA,UAAiB,KAClDiK,EAAiBC,IAAsBlK,EAAAA,EAAAA,WAA0B,IA/DvC6J,KACjC,MAAMM,EAAgD,CAAC,EAInDN,IACmBO,EAAAA,EAAAA,SAAQhF,EAA6C,CAACyE,IAAW7C,KAAKR,GAASA,EAAK6D,QAC5F1E,SAAS2E,IACpBH,EAAqBG,IAAY,CAAI,IAIzC,MAAO,CACLC,aAAa,EACbC,gBAAgB,EAChBL,uBACD,EA+C6EM,CAA0BZ,MACjGa,EAAkBC,IAAuB3K,EAAAA,EAAAA,UAAS,IACnD,kBAAE4K,EAAiB,QAAEC,IAAYlC,EAAAA,EAAAA,UAAQ,KACzCQ,EAAAA,EAAAA,OAAMU,GACD,CACLe,kBAAmB,GACnBC,QAAS,KAINC,EAAAA,EAAAA,IAAWjB,EAAU9G,EAAckH,IAKzC,CAAS,OAARJ,QAAQ,IAARA,OAAQ,EAARA,EAAU3D,IAAKnD,EAAckH,EAAiBF,IAE5CzC,GAAUqB,EAAAA,EAAAA,UAAQ,IACf/C,EAAwBgF,IAC9B,CAACA,IAEEG,GAAcnK,EAAAA,EAAAA,cACjBoK,IACC,GAAIA,GAAiBH,EAAQ/D,QAAUkE,EAAgB,EACrD,OAEFL,EAAoBK,GACpB,MAAM3G,EAAQwG,EAAQG,GACtBrD,EAAgBtD,EAAM4G,MACtBpD,EAAa6B,EAAerF,IAE5B,MAAM6G,EF4CwBC,EAAC3E,EAA0Bc,KAC7D,MAAM4D,EAAU,IAAIE,IAEpB,IAAIC,EAAc7E,EAClB,KAAO6E,GAAeA,EAAYC,UAChCJ,EAAQK,IAAIF,EAAYC,UACxBD,EAAc/D,EAAQ+D,EAAYC,UAGpC,OAAOJ,CAAO,EErDMC,CAAqB9G,EAAM4G,KAAM3D,GACjDwC,GAAiB0B,GAER,IAAIJ,IAAI,IAAII,KAAiBN,KACpC,GAEJ,CAACL,EAASlD,EAAiBE,EAAcP,EAASwC,IAG9C5G,GAAwBtC,EAAAA,EAAAA,cAAY,KACxCmK,EAAYL,EAAmB,EAAE,GAChC,CAACA,EAAkBK,IAEhB5H,GAA4BvC,EAAAA,EAAAA,cAAY,KAC5CmK,EAAYL,EAAmB,EAAE,GAChC,CAACA,EAAkBK,IAyCtB,OAvCA/J,EAAAA,EAAAA,kBAAgB,KACd,GAAiC,IAA7B4J,EAAkB9D,OAQtB,GAAuB,IAAnB+D,EAAQ/D,OAuBZ6D,EAAoB,GACpBhD,EAAgBkD,EAAQ,GAAGI,MAC3BpD,EAAa6B,EAAemB,EAAQ,SAzBpC,CAA2B,IAADY,EAGxB,MAAMC,EAAmC,QAApBD,EAAe,OAAZhE,QAAY,IAAZA,OAAY,EAAZA,EAAcvB,WAAG,IAAAuF,EAAAA,EAAI,GAC7C,GAAMC,KAAmBpE,EASvBK,EAAgBL,EAAQoE,QATS,CACjC,MAAMC,EAAUf,EAAkB,GAClCjD,EAAgBgE,GAChB9D,EAAoB,OAAP8D,QAAO,IAAPA,GAAAA,EAASC,aAAe,OAAS,UAChD,CAYF,CAKwC,GAGvC,CAAChB,EAAmBC,EAASlD,IAEzB,CACL1E,UAAW,CACToB,MAAgC,QAA3B2F,EAAEa,EAAQH,UAAiB,IAAAV,EAAAA,EAAI,KACpCpF,aAAciG,EAAQ/D,OACtBnC,kBAAmB+F,GAErB3H,aAAcA,EAAamB,cAAc2H,OACzC7I,kBACAiH,kBACAC,qBACAU,oBACA1H,wBACAC,4BACD,E,qCC9KI,MAAM2I,EAA4CA,EACvDC,QACAhJ,eACAiJ,oBAMA,MAAM,MAAEvL,IAAUC,EAAAA,EAAAA,KACZuL,GAAsBrL,EAAAA,EAAAA,cAAa4F,IACnC,OAAJA,QAAI,IAAJA,GAAAA,EAAM0F,eAAe,CAAEC,MAAO,UAAWC,OAAQ,WAAY,GAC5D,IAEGC,EAAaN,EAAM7H,cACzB,IAAKmI,EAAWC,SAASvJ,GACvB,OAAO1B,EAAAA,EAAAA,GAAA,OAAAD,SAAM2K,IAGf,MAAMQ,EAAWF,EAAWG,QAAQzJ,GAC9B0J,EAASF,EAAWxJ,EAAa+D,OACjC1E,EAAkB4J,EAAgBvL,EAAMiM,OAAOC,EAAAA,GAA0BlM,EAAMiM,OAAOE,EAAAA,GAE5F,OACE1L,EAAAA,EAAAA,IAAA,OAAAE,SAAA,CACG2K,EAAMc,MAAM,EAAGN,IAChBlL,EAAAA,EAAAA,GAAA,QAAMzB,IAAKoM,EAAgBC,EAAsB,KAAM9K,KAAGM,EAAAA,EAAAA,IAAE,CAAEW,kBAAiB0K,gBAAiB,IAAI,IAAC1L,SAClG2K,EAAMc,MAAMN,EAAUE,KAExBV,EAAMc,MAAMJ,KACT,ECxBV,SAASM,EAAqBC,EAAuBC,GACnD,OAAIA,IAIAD,EACKE,EAAAA,GAAsBC,SAGxBD,EAAAA,GAAsBE,KAC/B,CAEA,SAASC,EAAyBC,GAChC,OAAQA,GACN,KAAKJ,EAAAA,GAAsBE,KACzB,MAAO,OACT,KAAKF,EAAAA,GAAsBK,KACzB,MAAO,OACT,KAAKL,EAAAA,GAAsBC,SACzB,MAAO,WACT,KAAKD,EAAAA,GAAsBM,OACzB,MAAO,SAEb,CAAC,IAAAzO,EAAA,CAAAC,KAAA,SAAAC,OAAA,qBAAAC,EAAA,CAAAF,KAAA,UAAAC,OAAA,4EAAAE,EAAA,CAAAH,KAAA,SAAAC,OAAA,sDAAAwO,EAAA,CAAAzO,KAAA,SAAAC,OAAA,+BAEM,SAASyO,GAA8B,MAC5C3B,EAAK,OACL4B,EAAM,KACNC,EAAI,aACJ7K,EAAe,GAAE,YACjB8K,EAAc,KAAI,oBAClBC,GAAsB,EAAK,kBAC3Bb,IAYE,IAADc,EACD,MAAMC,GAAarF,EAAAA,EAAAA,UAAQ,IAAMyE,KAAKa,MAAML,IAAO,CAACA,IAC9CZ,GAAekB,EAAAA,EAAAA,UAASF,IACxB,MAAEvN,IAAUC,EAAAA,EAAAA,MAEX4M,EAAYa,IAAiBnO,EAAAA,EAAAA,UAClC+M,EAAqBC,EAAcC,IAE/BmB,EAAeN,GAA+C,QAA5BC,EAAgB,OAAXF,QAAW,IAAXA,OAAW,EAAXA,EAAaQ,kBAAU,IAAAN,GAAAA,EAC9DO,EAA+BtB,IAAiBjK,EAOtD,OAJAyG,EAAAA,EAAAA,YAAU,KACR2E,EAAcpB,EAAqBC,EAAcC,GAAmB,GACnE,CAACD,EAAcC,KAGhB5L,EAAAA,EAAAA,GAAA,OACEF,IAAGpC,EAEDqC,UAEFF,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACH8M,aAAc9N,EAAM+N,QAAQC,eAC5BC,OAAQ,aAAajO,EAAMiM,OAAOgC,SAClCC,SAAU,UACX,IAACvN,SAAA,EAEA2K,GAASuC,KACTpN,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,MACfC,eAAgB,gBAChBc,WAAY,SACZqK,QAASnO,EAAMqB,QAAQC,IACxB,IAACX,SAAA,EAGFC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWqK,MAAK,CACf1N,IAAGjC,EAMH4P,MAAO,EACPC,MAAM,YACNC,gBAAc,EAAA5N,UAEdC,EAAAA,EAAAA,GAACyK,EAAyC,CACxCC,MAAOA,EACPhJ,aAAcA,EACdiJ,cAAeoC,OAGnB/M,EAAAA,EAAAA,GAAA,OAAKF,IAAGhC,EAAkEiC,SACvEkN,IACCpN,EAAAA,EAAAA,IAAC+N,EAAAA,aAAaC,KAAI,CAAA9N,SAAA,EAChBC,EAAAA,EAAAA,GAAC4N,EAAAA,aAAaE,QAAO,CAACC,SAAO,EAAAhO,UAC3BC,EAAAA,EAAAA,GAACgO,EAAAA,IAAG,CACFzL,YAAY,sDACZzC,IAAGsM,EAGDrM,UAGFF,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAE6N,YAAa7O,EAAMqB,QAAQG,GAAIqC,YAAa7D,EAAMqB,QAAQG,GAAIE,OAAQ,WAAW,IAACf,SAAA,EAC5FC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACjC,KAAK,KAAKuM,MAAM,YAAW3N,SACzCiM,EAAyBC,MAE5BjM,EAAAA,EAAAA,GAAC4D,EAAAA,gBAAe,YAItB/D,EAAAA,EAAAA,IAAC+N,EAAAA,aAAaM,QAAO,CAAAnO,SAAA,EACnBC,EAAAA,EAAAA,GAAC4N,EAAAA,aAAaO,WAAU,CACtB5L,YAAY,wDACZhF,MAAO0O,EACPmC,cAAgB7Q,GAAUuP,EAAcvP,GAAgCwC,SAEvEsO,OAAOC,OAAOzC,EAAAA,IAAuBlG,KAAK4I,GACrCA,IAAS1C,EAAAA,GAAsBM,OAC1B,MAGPtM,EAAAA,EAAAA,IAAC+N,EAAAA,aAAaY,UAAS,CAAYjR,MAAOgR,EAAKxO,SAAA,EAC7CC,EAAAA,EAAAA,GAAC4N,EAAAA,aAAaa,cAAa,IAC1BzC,EAAyBuC,KAFCA,QAOnCvO,EAAAA,EAAAA,GAAC4N,EAAAA,aAAac,MAAK,gBAO/B1O,EAAAA,EAAAA,GAAC2O,EAAAA,EAAiC,CAChCpC,KAAMA,EACN7K,aAAcA,EACd8K,YAAaA,EACbC,oBAAqBA,EACrBR,WAAYA,QAKtB,CChKO,SAAS2C,GAAgC,WAC9CC,EAAU,aACVnN,EAAY,YACZ8K,IAMA,MAAM,MAAEpN,IAAUC,EAAAA,EAAAA,MACZ,WAAEyP,GAAeD,EACjBE,GAAqBC,EAAAA,EAAAA,MAAKF,GAAYrJ,OAAS,EAC/CwJ,IAAqBnH,EAAAA,EAAAA,OAAM0E,IAAgBA,EAAY5C,KAAK/E,MAAQgK,EAAWhK,IAErF,OAAKkK,IAAsBjH,EAAAA,EAAAA,OAAMgH,IAE7B9O,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAE8O,UAAW9P,EAAMqB,QAAQ0O,IAAI,IAACpP,UACxCC,EAAAA,EAAAA,GAACoP,EAAAA,MAAK,CACJC,aACErP,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,6BAUzBxP,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfE,IAAKjD,EAAMqB,QAAQC,GACnB6M,QAASnO,EAAMqB,QAAQ0O,IACxB,IAACpP,SAEDsO,OAAOoB,QAAQX,GAAYnJ,KAAI,EAAEd,EAAKtH,MACrCyC,EAAAA,EAAAA,GAACqM,EAA6B,CAE5B3B,MAAO7F,EACP0H,KAAMR,KAAK2D,UAAUnS,EAAO,KAAM,GAClCmE,aAAcA,EACd8K,YAAaA,EACbC,oBAAqBwC,GAA6C,eAAxBzC,EAAYlE,SAA4BkE,EAAY3H,MAAQA,GALjGA,MAUf,CCrDO,SAAS8K,GAAgC,UAC9CC,EAAS,gBACTC,EAAe,WACfC,IAMA,MAAM,MAAE1Q,IAAUC,EAAAA,EAAAA,MAEZ,KAAE2J,EAAI,YAAEqG,EAAaU,KAAMC,GAAeH,EAE1CI,EAAoBjH,GAAQqG,GAAeW,EAE3CE,EAAeD,EACjB,CACEE,oBAAqB/Q,EAAM+N,QAAQiD,eACnCC,qBAAsBjR,EAAM+N,QAAQiD,eACpCE,aAAc,aAAalR,EAAMiM,OAAOgC,UAE1C,CACEH,aAAc9N,EAAM+N,QAAQiD,gBAGlC,OACEvQ,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfnD,MAAO,OACPkO,aAAc9N,EAAM+N,QAAQiD,eAC5B/C,OAAQ,aAAajO,EAAMiM,OAAOgC,UACnC,IAACtN,SAAA,EAEFF,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,MACfe,WAAY,SACZnC,gBAAiB3B,EAAMiM,OAAOkF,oBAC9BhD,QAAS,GAAGnO,EAAMqB,QAAQC,QAAQtB,EAAMqB,QAAQ0O,OAChD9M,IAAKjD,EAAMqB,QAAQC,MAChBwP,GACJ,IAACnQ,SAAA,EAEFC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWqK,MAAK,CAACG,gBAAc,EAAC6C,MAAO,CAAEnN,WAAY,SAAUoN,aAAc,WAAYnD,SAAU,UAAWvN,SAC5G6P,IAEFE,IACC9P,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACuK,gBAAc,EAACD,MAAM,QAAO3N,UAC3CC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,kBAMtBS,IACCpQ,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACTqQ,oBAAqB,WACrBC,iBAAkB,OAClBtO,IAAKjD,EAAMqB,QAAQ0O,GACnB5B,QAAS,GAAGnO,EAAMqB,QAAQC,QAAQtB,EAAMqB,QAAQ0O,QACjD,IAACpP,SAAA,CAEDiJ,IACCnJ,EAAAA,EAAAA,IAAA+Q,EAAAA,GAAA,CAAA7Q,SAAA,EACEC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACuK,gBAAc,EAACkD,MAAI,EAAA9Q,UAClCC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,YAInBxP,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACuK,gBAAc,EAACmD,MAAI,EAAA/Q,SACjCiJ,OAINqG,IACCxP,EAAAA,EAAAA,IAAA+Q,EAAAA,GAAA,CAAA7Q,SAAA,EACEC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACuK,gBAAc,EAACkD,MAAI,EAAA9Q,UAClCC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,mBAInBxP,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACuK,gBAAc,EAAA5N,SAAEsP,OAGpCW,IACCnQ,EAAAA,EAAAA,IAAA+Q,EAAAA,GAAA,CAAA7Q,SAAA,EACEC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACuK,gBAAc,EAACkD,MAAI,EAAA9Q,UAClCC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,mBAInBxP,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,MAAOE,IAAKjD,EAAMqB,QAAQC,GAAIqQ,SAAU,QAAQ,IAAChR,SAC1FiQ,EAAWrK,KAAKpI,IACfyC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACuK,gBAAc,EAACmD,MAAI,EAAA/Q,SACjCxC,GADuCA,eAW5D,CC/GO,SAASyT,GAA2B,KAAEC,IAAuC,IAADC,EAAAC,EAAAC,EACjF,MAAM,MAAEhS,IAAUC,EAAAA,EAAAA,MACXgS,EAAUC,IAAe3S,EAAAA,EAAAA,WAAS,GAEnC0Q,EAAc4B,EAAKM,SAASlC,YAC5BQ,EAA0C,QAA3BqB,EAAGD,EAAKM,SAASC,kBAAU,IAAAN,OAAA,EAAxBA,EAA0BO,WAC5CC,EAAmD,QAArCP,EAA2B,QAA3BC,EAAGH,EAAKM,SAASC,kBAAU,IAAAJ,OAAA,EAAxBA,EAA0BO,gBAAQ,IAAAR,EAAAA,EAAI,GAIvDS,EAAevC,GAAeQ,EAE9BgC,EAAcD,EAChB,CAAE,SAAU,CAAE7Q,gBAAiB3B,EAAMiM,OAAOyG,0BAA2BhR,OAAQ,YAC/E,CAAC,EAEL,OACEjB,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfnD,MAAO,OACPkO,aAAc9N,EAAM+N,QAAQiD,eAC5B/C,OAAQ,aAAajO,EAAMiM,OAAOgC,SAClCtM,gBAAiB3B,EAAMiM,OAAO0G,mBAC/B,IACD,cAAY,iCAAgChS,SAAA,EAE5CF,EAAAA,EAAAA,IAAA,OACEmS,KAAK,SACLlS,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,MACfE,IAAKjD,EAAMqB,QAAQC,GACnBwC,WAAY,SACZoN,aAAcsB,GAAgBP,EAAW,aAAajS,EAAMiM,OAAOgC,SAAW,OAC9EE,QAASnO,EAAMqB,QAAQC,MACpBmR,GACJ,IACDlO,QAASA,IAAM2N,GAAaD,GAC5B,cAAY,wCAAuCtR,SAAA,CAElD6R,IAAiBP,GAAWrR,EAAAA,EAAAA,GAAC4D,EAAAA,gBAAe,KAAM5D,EAAAA,EAAAA,GAACiS,EAAAA,EAAgB,MACpEjS,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CACdyN,MAAI,EACJlD,gBAAc,EACd6C,MAAO,CAAEnN,WAAY,SAAUoN,aAAc,WAAYnD,SAAU,UAAWvN,SAE7EkR,EAAKM,SAAS5T,UAGlBiU,GAAgBP,IACfxR,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEmN,QAASnO,EAAMqB,QAAQC,IAAI,IAACX,SAAA,CACrCsP,IACCrP,EAAAA,EAAAA,GAACmD,EAAAA,EAAW+O,UAAS,CACnB1B,MAAO,CAAEnN,WAAY,WAAY8O,aAAc/S,EAAMqB,QAAQC,GAAI6M,QAAS,OAAOnO,EAAMqB,QAAQG,QAASb,SAEvGkR,EAAKM,SAASlC,cAGlBQ,IACC7P,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,SAAUE,IAAKjD,EAAMqB,QAAQC,IAAI,IAACX,SAC3EsO,OAAOW,KAAKa,GAAiBlK,KAAKd,IACjC7E,EAAAA,EAAAA,GAAC2P,EAA+B,CAE9BC,UAAW/K,EACXgL,gBAAiBA,EAAgBhL,GACjCiL,WAAY4B,EAAezG,SAASpG,IAH/BA,YAYvB,C,eC5EO,SAASuN,GAA+B,SAAEC,IAC/C,MAAM,MAAEjT,IAAUC,EAAAA,EAAAA,KAElB,OAAIyI,EAAAA,EAAAA,OAAMuK,GACD,MAIPrS,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfE,IAAKjD,EAAMqB,QAAQC,IACpB,IAACX,SAEDsS,EAAS1M,KAAI,CAAC2M,EAASC,KACtBvS,EAAAA,EAAAA,GAACwS,EAAAA,EAA6B,CAAaF,QAASA,GAAhBC,MAI5C,CCzBwH,IAAA7U,EAAA,CAAAC,KAAA,UAAAC,OAAA,cAEjH,MAAM6U,GAAuCA,EAClDC,aACAhI,QACA3K,WACA4S,cAAa,EACbC,gBAQA,MAAOvB,EAAUC,IAAe3S,EAAAA,EAAAA,WAAS,IACnC,MAAES,IAAUC,EAAAA,EAAAA,KAClB,OACEQ,EAAAA,EAAAA,IAAA,OACE+S,UAAWA,EACX9S,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACf+K,aAAc9N,EAAM+N,QAAQiD,gBAC7B,IAACrQ,SAAA,EAEFF,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACH8C,WAAY,SACZ7C,QAAS,OACT8B,cAAe,MACfE,IAAKjD,EAAMqB,QAAQG,GACnB2M,QAASoF,EAAavT,EAAMqB,QAAQC,GAAK,EACzCmS,WAAYF,EAAavT,EAAMiM,OAAOkF,yBAAsBlK,EAC5D8J,oBAAqB/Q,EAAM+N,QAAQiD,eACnCC,qBAAsBjR,EAAM+N,QAAQiD,eACpC0C,uBAAwBzB,EAAW,EAAIjS,EAAM+N,QAAQiD,eACrD2C,wBAAyB1B,EAAW,EAAIjS,EAAM+N,QAAQiD,eACtD/C,OAAQsF,EAAa,aAAavT,EAAMiM,OAAOgC,cAAWhH,EAC1D8L,aAAcQ,EAAa,EAAIvT,EAAMqB,QAAQC,IAC9C,IAACX,SAAA,EAEFC,EAAAA,EAAAA,GAACwD,EAAAA,EAAM,CACLrC,KAAK,QACLoB,YAAa,sCAAsCmQ,IACnD1J,KAAK,WACLvF,KAAM4N,GAAWrR,EAAAA,EAAAA,GAAC4D,EAAAA,gBAAe,KAAM5D,EAAAA,EAAAA,GAACiS,EAAAA,EAAgB,IACxDtO,QAASA,IAAM2N,GAAaD,MAE9BrR,EAAAA,EAAAA,GAACmD,EAAAA,EAAWqK,MAAK,CAACG,gBAAc,EAACF,MAAO,EAAG3N,IAAGpC,EAAoBqC,SAC/D2K,OAGJ2G,IACCrR,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHiN,OAAQsF,EAAa,aAAavT,EAAMiM,OAAOgC,cAAWhH,EAC1D2M,UAAW,OACXF,uBAAwBH,EAAavT,EAAM+N,QAAQiD,oBAAiB/J,EACpE0M,wBAAyBJ,EAAavT,EAAM+N,QAAQiD,oBAAiB/J,EACrEkH,QAASoF,EAAavT,EAAMqB,QAAQC,GAAK,GAC1C,IAACX,SAEDA,MAGD,EC5DH,SAASkT,IAA0B,aACxC1I,EAAY,UACZ2I,IAKA,MAAM,MAAE9T,IAAUC,EAAAA,EAAAA,KAElB,OACEQ,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACH+S,UAAW,OACX5F,QAASnO,EAAMqB,QAAQ0O,IACxB,IACD,cAAY,gCAA+BpP,SAAA,CAE1CmT,IACClT,EAAAA,EAAAA,GAACyS,GAAoC,CACnC3S,KAAGM,EAAAA,EAAAA,IAAE,CAAE+R,aAAc/S,EAAMqB,QAAQC,IAAI,IACvCgK,OACE1K,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,UAInBkD,WAAW,WAAU3S,UAErBC,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,SAAUE,IAAKjD,EAAMqB,QAAQC,IAAI,IAACX,SAC3EmT,EAAUvN,KAAKsL,IACdjR,EAAAA,EAAAA,GAACgR,EAA0B,CAA0BC,KAAMA,GAA1BA,EAAKM,SAAS5T,aAMvDqC,EAAAA,EAAAA,GAACyS,GAAoC,CACnC/H,OACE1K,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,aAInBkD,WAAW,WAAU3S,UAErBC,EAAAA,EAAAA,GAACoS,EAA8B,CAACC,SAAU9H,QAIlD,CChD+F,IAAA7M,GAAA,CAAAC,KAAA,UAAAC,OAAA,+FAAAC,GAAA,CAAAF,KAAA,SAAAC,OAAA,4EAExF,SAASwV,IAAkC,WAChDvE,EAAU,UACV+D,EAAS,aACTlR,EAAY,YACZ8K,IAOA,MAAM,MAAEpN,IAAUC,EAAAA,EAAAA,KACZgU,GAAY/L,EAAAA,EAAAA,UAAQ,KAAMgM,EAAAA,EAAAA,IAA+B,OAAVzE,QAAU,IAAVA,OAAU,EAAVA,EAAY9G,SAAS,CAAC8G,IACrE0E,GAAajM,EAAAA,EAAAA,UAAQ,KAAMgM,EAAAA,EAAAA,IAA+B,OAAVzE,QAAU,IAAVA,OAAU,EAAVA,EAAY7G,UAAU,CAAC6G,IAE7E,IAAI/G,EAAAA,EAAAA,OAAM+G,GACR,OAAO,KAGT,MAAM2E,EAAiBH,EAAU5N,OAAS,EACpCgO,EAAkBF,EAAW9N,OAAS,EAEtCwJ,IAAqBnH,EAAAA,EAAAA,OAAM0E,IAAgBA,EAAY5C,KAAK/E,MAAQgK,EAAWhK,IAErF,OACEhF,EAAAA,EAAAA,IAAA,OAAK,cAAY,yCAAwCE,SAAA,CACtDyT,IACCxT,EAAAA,EAAAA,GAACyS,GAAoC,CACnCE,YAAU,EACV7S,KAAGM,EAAAA,EAAAA,IAAE,CAAE+R,aAAc/S,EAAMqB,QAAQC,IAAI,IACvCgS,WAAW,QACXhI,OACE1K,EAAAA,EAAAA,GAAA,OACEF,IAAGpC,GAMDqC,UAEFC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,aAIpBzP,UAEDC,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,SAAUE,IAAKjD,EAAMqB,QAAQC,IAAI,IAACX,SAC3EsT,EAAU1N,KAAI,EAAGd,MAAKtH,SAASgV,KAC9BvS,EAAAA,EAAAA,GAACqM,EAA6B,CAE5B3B,MAAO7F,EACP0H,KAAMhP,EACNmE,aAAcA,EACd8K,YAAaA,EACbC,oBAAqBwC,GAA6C,WAAxBzC,EAAYlE,SAAwBkE,EAAY3H,MAAQA,GAL7FA,GAAO0N,SAWrBkB,IACCzT,EAAAA,EAAAA,GAACyS,GAAoC,CACnCE,YAAU,EACVD,WAAW,SACXhI,OACE1K,EAAAA,EAAAA,GAAA,OAAKF,IAAGjC,GAA4FkC,UAClGC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,cAIpBzP,UAEDC,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,SAAUE,IAAKjD,EAAMqB,QAAQC,IAAI,IAACX,SAC3EwT,EAAW5N,KAAI,EAAGd,MAAKtH,YACtByC,EAAAA,EAAAA,GAACqM,EAA6B,CAE5B3B,MAAO7F,EACP0H,KAAMhP,EACNmE,aAAcA,EACd8K,YAAaA,EACbC,oBAAqBwC,GAA6C,YAAxBzC,EAAYlE,SAAyBkE,EAAY3H,MAAQA,GAL9FA,WAarB,C,2BCjGA,MAEM6O,GAAsBC,GAC1BA,EACI,CACErG,SAAU,SACVmD,aAAc,WACdpN,WAAY,UAEd,CAAEA,WAAY,UAKPuQ,GAAcA,EACzBC,UACAC,YACAC,YAjBuB,GAkBvB9U,WAAW,IACX2T,gBAQA,MAAM,kBAAEoB,EAAiB,oBAAEC,GAmBtB,SACLpP,EACAtH,EACAwW,GAEA,MAAMG,EAAarP,EAAIY,OAASlI,EAAMkI,OAChC0O,EAActP,EAAIY,OAASlI,EAAMkI,OACjC2O,EAAgBD,EAAc5W,EAAMkI,OAASZ,EAAIY,OAGvD,OAAIyO,GAAcH,EAAkB,CAAEC,mBAAmB,EAAOC,qBAAqB,GAEjFG,EAAgBL,EAAY,EAAU,CAAEC,mBAAmB,EAAMC,qBAAqB,GAGnF,CACLD,kBAAmBG,EACnBF,qBAAsBE,EAE1B,CAtCqDE,CAAgCR,EAASC,EAAWC,GAEvG,OACE/T,EAAAA,EAAAA,GAACsU,GAAAA,EAAO,CAAC/R,YAAY,0DAA0DgS,QAAS,GAAGV,MAAYC,IAAY/T,UACjHC,EAAAA,EAAAA,GAACgO,EAAAA,IAAG,CAACzL,YAAY,4CAA4CqQ,UAAWA,EAAU7S,UAChFF,EAAAA,EAAAA,IAAA,QAAMC,KAAGM,EAAAA,EAAAA,IAAE,CAAEnB,WAAUoB,QAAS,eAAe,IAACN,SAAA,EAC9CC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACyN,MAAI,EAAC/Q,IAAK4T,GAAmBM,GAAoB7S,KAAK,KAAIpB,SACxE8T,IACe,SAElB7T,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACtD,IAAK4T,GAAmBO,GAAsB9S,KAAK,KAAIpB,SACrE+T,UAIC,EC3C6C,IAAApW,GAAA,CAAAC,KAAA,UAAAC,OAAA,sCAEpD,SAAS4W,IAAwC,KACtDC,EAAI,aACJC,EAAY,YACZpD,EAAW,iBACXqD,IAOA,MAAM,MAAEvV,IAAUC,EAAAA,EAAAA,KAElB,OACEQ,EAAAA,EAAAA,IAAA,OAAKC,IAAGpC,GAA+CqC,SAAA,EACrDC,EAAAA,EAAAA,GAAA,OACEgS,KAAK,SACLrO,QAASA,KACP2N,GAAY,GACI,OAAhBqD,QAAgB,IAAhBA,GAAAA,EAAmB,WAAW,EAEhC7U,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,MACfe,WAAY,SACZpC,OAAQ,UACRyM,QAAS,GAAGnO,EAAMqB,QAAQC,QAAQtB,EAAMqB,QAAQ0O,OAChDyF,OAAQxV,EAAMyV,WAAWC,eACzBC,UAAW,cACX,UAAW,CACThU,gBAAiB3B,EAAMiM,OAAOkF,sBAEjC,IAACxQ,UAEFC,EAAAA,EAAAA,GAACgV,EAAAA,iBAAgB,OAEnBhV,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEmN,QAASnO,EAAMqB,QAAQ0O,GAAI8F,cAAe,GAAG,IAAClV,UACxDC,EAAAA,EAAAA,GAACkV,GAAAA,EAAqB,CAAAnV,SAAE0U,OAE1BzU,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEmN,QAASnO,EAAMqB,QAAQ0O,GAAIgG,WAAY,GAAG,IAACpV,SACpD2U,EAAa/O,KAAI,EAAGd,MAAKtH,YACxByC,EAAAA,EAAAA,GAAC4T,GAAW,CAAWC,QAAShP,EAAKiP,UAAWvW,GAA9BsH,QAGtB7E,EAAAA,EAAAA,GAACwD,EAAAA,EAAM,CACL1D,KAAGM,EAAAA,EAAAA,IAAE,CAAEpB,MAAO,OAAQuO,QAASnO,EAAMqB,QAAQC,IAAI,IACjD6B,YAAY,0DACZkB,MAAMzD,EAAAA,EAAAA,GAAC0D,EAAAA,cAAa,IACpBsF,KAAK,WACLrF,QAASA,IAAM2N,GAAY,GAAOvR,UAElCC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,iBAMzB,CC9D2D,IAAA9R,GAAA,CAAAC,KAAA,SAAAC,OAAA,YAAAC,GAAA,CAAAF,KAAA,UAAAC,OAAA,wBAAAE,GAAA,CAAAH,KAAA,UAAAC,OAAA,+BAEpD,SAASwX,IAA2C,KACzDX,EAAI,aACJC,EAAY,YACZpD,EAAW,iBACXqD,IAOA,MAAM,MAAEvV,IAAUC,EAAAA,EAAAA,KAElB,OACEQ,EAAAA,EAAAA,IAAA,OACEmS,KAAK,SACLrO,QAASA,KACP2N,GAAY,GACI,OAAhBqD,QAAgB,IAAhBA,GAAAA,EAAmB,SAAS,EAE9B7U,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,MACfoL,QAAS,GAAGnO,EAAMqB,QAAQC,QAAQtB,EAAMqB,QAAQ0O,OAChD9M,IAAKjD,EAAMqB,QAAQC,GACnBwC,WAAY,SACZd,eAAgB,gBAChBtB,OAAQ,UACR,UAAW,CACTC,gBAAiB3B,EAAMiM,OAAOkF,sBAEjC,IAACxQ,SAAA,EAEFF,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,MACfE,IAAKjD,EAAMqB,QAAQC,GACnBwC,WAAY,SACZmS,SAAU,EACVC,WAAY,GACb,IAACvV,SAAA,EAEFC,EAAAA,EAAAA,GAACgV,EAAAA,iBAAgB,KACjBhV,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACmS,UAAQ,EAACpU,KAAK,KAAIpB,SAChC0U,QAGL5U,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,MACfE,IAAKjD,EAAMqB,QAAQC,IACpB,IAACX,SAAA,CAED2U,EAAajP,OAAS,GACrBzF,EAAAA,EAAAA,GAAC4T,GAAW,CAAC9T,IAAGpC,GAAiBmW,QAASa,EAAa,GAAG7P,IAAKiP,UAAWY,EAAa,GAAGnX,QACxF,KACHmX,EAAajP,OAAS,GACrBzF,EAAAA,EAAAA,GAACsU,GAAAA,EAAO,CACN/R,YAAY,sDACZgS,QAASG,EAAalJ,MAAM,GAAG7F,KAAI,EAAGd,MAAKtH,YACzCyC,EAAAA,EAAAA,GAAA,QAAgBF,IAAGjC,GAA8BkC,SAC9C,GAAG8E,MAAQtH,KADHsH,KAGV9E,UAEHF,EAAAA,EAAAA,IAACmO,EAAAA,IAAG,CAACzL,YAAY,wCAAwCzC,IAAGhC,GAAsCiC,SAAA,CAAC,IAC/F2U,EAAajP,OAAS,OAG1B,UAIZ,CCzEO,SAAS+P,IAAoC,KAClDf,EAAI,SACJgB,IAKA,MAAOpE,EAAUC,IAAe3S,EAAAA,EAAAA,WAAS,GACnC+V,GAAepB,EAAAA,EAAAA,IAAqBmC,GAE1C,OAAOpE,GACLrR,EAAAA,EAAAA,GAACwU,GACC,CACAC,KAAMA,EACNC,aAAcA,EACdpD,YAAaA,KAGftR,EAAAA,EAAAA,GAACoV,GACC,CACAX,KAAMA,EACNC,aAAcA,EACdpD,YAAaA,GAGnB,CCvBoD,IAAA5T,GAAA,CAAAC,KAAA,SAAAC,OAAA,mCAAAC,GAAA,CAAAF,KAAA,SAAAC,OAAA,mCAE7C,SAAS8X,IAAmC,qBACjDC,EAAoB,wBACpBC,IAKA,MAAM,MAAExW,IAAUC,EAAAA,EAAAA,KAElB,OACEQ,EAAAA,EAAAA,IAACgW,EAAAA,sBAAqB,CACpB,cAAY,0CACZlY,KAAK,cACLwD,KAAK,QACLoB,YAAa,0DAA0DoT,IACvEpY,MAAOoY,EACPhT,SAAWmT,IACTF,EAAwBE,EAAMlT,OAAOrF,MAAM,EAC3CwC,SAAA,EAEFC,EAAAA,EAAAA,GAAC+V,EAAAA,uBAAsB,CAAC,cAAY,+CAA+CxY,OAAO,EAAMwC,UAC9FC,EAAAA,EAAAA,GAACsU,GAAAA,EAAO,CACN/R,YAAY,0DACZgS,SACEvU,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,cAGlBzP,UAEDC,EAAAA,EAAAA,GAAA,OAAKF,IAAGpC,GAA4CqC,UAClDC,EAAAA,EAAAA,GAACgW,EAAAA,YAAW,CAAClW,KAAGM,EAAAA,EAAAA,IAAE,CAAE6V,SAAU7W,EAAMyV,WAAWqB,YAAY,aAIjElW,EAAAA,EAAAA,GAAC+V,EAAAA,uBAAsB,CAAC,cAAY,6CAA6CxY,OAAK,EAAAwC,UACpFC,EAAAA,EAAAA,GAACsU,GAAAA,EAAO,CACN/R,YAAY,wDACZgS,SACEvU,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,sBAGlBzP,UAEDC,EAAAA,EAAAA,GAAA,OAAKF,IAAGjC,GAA4CkC,UAClDC,EAAAA,EAAAA,GAACmW,EAAAA,MAAK,CAACrW,KAAGM,EAAAA,EAAAA,IAAE,CAAE6V,SAAU7W,EAAMyV,WAAWqB,YAAY,cAMjE,CCnD2F,IAAAxY,GAAA,CAAAC,KAAA,UAAAC,OAAA,+FAEpF,SAASwY,IAAoC,WAClDvH,EAAU,UACV+D,EAAS,aACTlR,EAAY,YACZ8K,IAOA,MAAM,MAAEpN,IAAUC,EAAAA,EAAAA,MACXsW,EAAsBC,IAA2BjX,EAAAA,EAAAA,WAAS,GAC3D0U,GAAY/L,EAAAA,EAAAA,UAAQ,KAAMgM,EAAAA,EAAAA,IAAqBzE,EAAW9G,SAAS,CAAC8G,IAEpE7G,EAAU6G,EAAW7G,QAErBwL,EAAiBH,EAAU5N,OAAS,EAKpCwJ,IAAqBnH,EAAAA,EAAAA,OAAM0E,IAAgBA,EAAY5C,KAAK/E,MAAQgK,EAAWhK,IAC/EwR,EAA6BpH,GAA6C,YAAxBzC,EAAYlE,QAEpE,OACEzI,EAAAA,EAAAA,IAAA,OAAK+S,UAAWA,EAAW,cAAY,2CAA0C7S,SAAA,CAC9EyT,IACCxT,EAAAA,EAAAA,GAACyS,GAAoC,CACnCC,WAAW,QACX5S,KAAGM,EAAAA,EAAAA,IAAE,CAAE+R,aAAc/S,EAAMqB,QAAQC,IAAI,IACvCgK,OACE1K,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,WAGlBzP,UAEDC,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,SAAUE,IAAKjD,EAAMqB,QAAQC,IAAI,IAACX,SAC3EsT,EAAU1N,KAAI,EAAGd,MAAKtH,SAASgV,KAC9BvS,EAAAA,EAAAA,GAACqM,EAA6B,CAE5B3B,MAAO7F,EACP0H,KAAMhP,EACNmE,aAAcA,EACd8K,YAAaA,EACbC,oBAAqBwC,GAA6C,WAAxBzC,EAAYlE,SAAwBkE,EAAY3H,MAAQA,GAL7FA,GAAO0N,UAYtBvS,EAAAA,EAAAA,GAACyS,GAAoC,CACnCC,WAAW,SACXhI,OACE7K,EAAAA,EAAAA,IAAA,OACEC,IAAGpC,GAMDqC,SAAA,EAEFF,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,MAAOE,IAAKjD,EAAMqB,QAAQC,IAAI,IAACX,SAAA,EACzEC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,eAGjBxP,EAAAA,EAAAA,GAACgO,EAAAA,IAAG,CAACzL,YAAY,6CAA4CxC,SAAEiI,EAAQvC,aAEvE4Q,IACArW,EAAAA,EAAAA,GAAC0V,GAAkC,CACjCC,qBAAsBA,EACtBC,wBAAyBA,OAIhC7V,SAEA4V,IAAyBU,GACxBrW,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHiN,OAAQ,aAAajO,EAAMiM,OAAOgC,SAClCH,aAAc9N,EAAMkX,cAAclG,gBACnC,IAACrQ,SAEDiI,EAAQrC,KAAI,CAAC4Q,EAAUC,KACtBxW,EAAAA,EAAAA,GAAA,OAEEF,KAAGM,EAAAA,EAAAA,IAAE,CAAEkQ,aAAckG,IAAQxO,EAAQvC,OAAS,EAAI,aAAarG,EAAMiM,OAAOgC,SAAW,IAAI,IAACtN,UAE5FC,EAAAA,EAAAA,GAACwV,GAAmC,CAElCf,KAAM8B,EAASE,aACfhB,SAAUc,EAASd,UAFde,IAJFA,QAYXxW,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHiN,OAAQ,aAAajO,EAAMiM,OAAOgC,SAClCH,aAAc9N,EAAMkX,cAAclG,eAClC7C,QAASnO,EAAMqB,QAAQ0O,IACxB,IAACpP,UAEFC,EAAAA,EAAAA,GAACqM,EAA6B,CAC5B3B,MAAM,GACN6B,KAAMR,KAAK2D,UAAU1H,EAAS,KAAM,GACpCtG,aAAcA,EACd8K,YAAaA,EACbC,oBAAqBwC,GAA6C,YAAxBzC,EAAYlE,gBAOpE,CC7HO,SAASoO,IAA6B,WAC3C7H,EAAU,UACV+D,EAAS,aACTlR,EAAY,YACZ8K,IAOA,MAAM,MAAEpN,IAAUC,EAAAA,EAAAA,KAElB,QAAKyI,EAAAA,EAAAA,OAAM+G,KAAe8H,EAAAA,EAAAA,IAA0B9H,IAEhD7O,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACH+S,UAAW,OACX5F,QAASnO,EAAMqB,QAAQ0O,IACxB,IACDyD,UAAWA,EACX,cAAY,mCAAkC7S,UAE9CC,EAAAA,EAAAA,GAACoW,GAAmC,CAClCvH,WAAYA,EACZ+D,UAAWA,EACXlR,aAAcA,EACd8K,YAAaA,OAOnBxM,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACH+S,UAAW,OACX5F,QAASnO,EAAMqB,QAAQ0O,IACxB,IACDyD,UAAWA,EACX,cAAY,mCAAkC7S,UAE9CC,EAAAA,EAAAA,GAACoT,GAAiC,CAChCvE,WAAYA,EACZ+D,UAAWA,EACXlR,aAAcA,EACd8K,YAAaA,KAIrB,CCjDO,SAASoK,IAA4B,WAC1C/H,EAAU,aACVnN,EAAY,YACZ8K,IAMA,MAAM,MAAEpN,IAAUC,EAAAA,EAAAA,MACZ,OAAEwX,GAAWhI,EACbI,IAAqBnH,EAAAA,EAAAA,OAAM0E,IAAgBA,EAAY5C,KAAK/E,MAAQgK,EAAWhK,IAErF,OAAKiS,MAAMC,QAAQF,IAA6B,IAAlBA,EAAOpR,QAgBnCzF,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEmN,QAASnO,EAAMqB,QAAQ0O,IAAI,IAACpP,SACrC8W,EAAOlR,KAAI,CAACmQ,EAAOvD,KAClB,MAAMzD,EAAagH,EAAMhH,WACnBpE,EACW,cAAfoL,EAAMnY,MACJkC,EAAAA,EAAAA,IAAA+Q,EAAAA,GAAA,CAAA7Q,SAAA,EACEC,EAAAA,EAAAA,GAACgX,EAAAA,YAAW,CAAClX,KAAGM,EAAAA,EAAAA,IAAE,CAAE6C,YAAa7D,EAAMqB,QAAQC,IAAI,IAAEgN,MAAM,YAC3D1N,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACsK,MAAM,QAAQmD,MAAI,EAAA9Q,SAAC,iBAKtC+V,EAAMnY,KAGV,OAAKmR,GAGH9O,EAAAA,EAAAA,GAACyS,GAAoC,CAEnCC,WAAYoD,EAAMnY,KAClB+M,MAAOA,EACPiI,YAAU,EAAA5S,UAEVC,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,SAAUE,IAAKjD,EAAMqB,QAAQC,IAAI,IAACX,SAC3EsO,OAAOW,KAAKF,GAAYnJ,KAAKsR,IAC5B,MAAMpS,GAAMqS,EAAAA,EAAAA,IAAqBpB,EAAMnY,KAAM4U,EAAO0E,GAEpD,OACEjX,EAAAA,EAAAA,GAACqM,EAA6B,CAE5B3B,MAAOuM,EACP1K,KAAMR,KAAK2D,UAAUZ,EAAWmI,GAAY,KAAM,GAClDvV,aAAcA,EACd8K,YAAaA,EACbC,oBACEwC,GAA6C,WAAxBzC,EAAYlE,SAAwBkE,EAAY3H,MAAQA,EAE/E+G,kBAAmBC,EAAAA,GAAsBK,MARpCrH,EASL,OApBH,GAAGiR,EAAMnY,QAAQ4U,KAJF,IA4BiB,OAzD3CvS,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAE8O,UAAW9P,EAAMqB,QAAQ0O,IAAI,IAACpP,UACxCC,EAAAA,EAAAA,GAACoP,EAAAA,MAAK,CACJC,aACErP,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,uBA0D7B,CCrFO,SAAS2H,IAAwB,MAAEC,IACxC,MAAM,MAAEhY,IAAUC,EAAAA,EAAAA,KAElB,OACEW,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT6C,WAAY,SACZd,eAAgB,SAChB8K,aAAc9N,EAAMyV,WAAWwC,aAC/BzC,OAAQxV,EAAMyV,WAAWwC,aACzBtW,gBAAiB3B,EAAMiM,OAAOiM,qCAC9B/J,QAASnO,EAAMqB,QAAQG,GACvBD,WAAYvB,EAAMqB,QAAQG,GAC1BmU,UAAW,cACZ,IAAChV,UAEFC,EAAAA,EAAAA,GAAA,QAAMF,KAAGM,EAAAA,EAAAA,IAAE,CAAEsN,MAAOtO,EAAMiM,OAAOkM,yBAA0BtB,SAAU,IAAI,IAAClW,SAAEqX,KAGlF,CCnBuF,IAAA1Z,GAAA,CAAAC,KAAA,SAAAC,OAAA,iBAAAC,GAAA,CAAAF,KAAA,SAAAC,OAAA,8CAEhF,MAAM4Z,GAAuBA,KAClC,MAAM,wBAAE7Q,EAAuB,2BAAEC,EAA0B,uBAAEC,GAC3DC,IAEF,OACE9G,EAAAA,EAAAA,GAAC6V,EAAAA,sBAAqB,CACpB/V,IAAGpC,GACHC,KAAK,sDACL4E,YAAY,sDACZhF,MAAOoJ,EACPxF,KAAK,QAAOpB,UAEZC,EAAAA,EAAAA,GAAC+V,EAAAA,uBAAsB,CACrBxY,OAAK,EACLka,UAAW5Q,EACXpD,MAAMzD,EAAAA,EAAAA,GAAC0X,EAAAA,UAAS,IAChB/T,QAASA,IAAgC,OAA1BiD,QAA0B,IAA1BA,OAA0B,EAA1BA,GAA8BD,GAC7C7G,IAAGjC,GAKDkC,UAEA4G,IACA3G,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,mBAKC,E,4BCpB5B,MAMamI,GAAgCA,EAC3Cha,OACAia,UACAC,YACAC,eACAC,yBAQA,MAAM,QAAEC,IAAYC,EAAAA,GAAAA,KACdC,GAAOC,EAAAA,EAAAA,MACPC,EAAcJ,EAAQrS,KAAK0S,IAAM,IAAAC,EAAA,OAAgB,QAAhBA,EAAKD,EAAO1a,YAAI,IAAA2a,EAAAA,EAAI,EAAE,KAEtDC,EAAcC,IAAmB7Z,EAAAA,EAAAA,UAAkC,OACnE8Z,EAAWC,IAAgB/Z,EAAAA,EAAAA,UAAsCqZ,GAElEW,GAAQrR,EAAAA,EAAAA,UAAQ,KACpB,MAAMsR,EAAgB,IAAIH,GAK1B,GAAI9a,IAASya,EAAYnN,SAAStN,GAAO,CACvC,MAAMkb,EAjCclb,KAAY,CACpCA,OACAmb,eAAgB,WAChBC,SAAU,YA8BYC,CAAiBrb,GACnCib,EAAcK,QAAQJ,EACxB,CAEA,OAAOD,CAAa,GACnB,CAACjb,EAAM8a,EAAWL,IAEfc,GAAe3Z,EAAAA,EAAAA,cAClB4Z,IACCX,EAAgBW,GAChBpB,EAAmBoB,GACnBrB,EAAa,KAAK,GAEpB,CAACC,EAAoBD,IAGjBsB,GAAgBC,EAAAA,EAAAA,kBAA0C,CAC9D9W,YAAa,wDACb+W,SAAUtB,EACVW,QACAY,SAAUb,EACVc,aAAa,EACbC,cAAgBlc,IACdqa,EAAQra,GACRua,EAAa,KAAK,EAEpB4B,aAAeC,IAAI,IAAAC,EAAA,OAAe,QAAfA,EAAS,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAMhc,YAAI,IAAAic,EAAAA,EAAI,EAAE,EACxCC,QAASA,CAACF,EAAMG,KAAK,IAAAC,EAAAC,EAAA,OAA4D,QAA5DD,EAAS,OAAJJ,QAAI,IAAJA,GAAU,QAANK,EAAJL,EAAMhc,YAAI,IAAAqc,OAAN,EAAJA,EAAYnX,cAAcoI,SAAS6O,EAAMjX,sBAAc,IAAAkX,GAAAA,CAAS,EAC1FE,UAAW1B,EACXW,eACAgB,oBAAoB,IAGtB,OACEra,EAAAA,EAAAA,IAACsa,EAAAA,sBAAqB,CACpBC,UAAYlZ,IAKI,cAAVA,EAAE2D,KAAiC,eAAV3D,EAAE2D,KAC7B3D,EAAEmZ,iBACJ,EAEF9K,GAAG,wDACH6J,cAAeA,EAAcrZ,SAAA,EAE7BC,EAAAA,EAAAA,GAACsa,EAAAA,uBAAsB,CACrB,cAAY,kCACZ7X,YAAayV,EAAKqC,cAAc,CAAAhL,GAAA,SAC9BC,eAAe,6BAGjBgL,gBAAiB3C,EAAY,aAAUxR,EACvC+S,cAAeA,EACfF,aAAcA,EACduB,aAAcA,KACR9B,EAAMlT,OAAS,GACjByT,EAAaP,EAAM,GACrB,EAEFnW,YAAU,EACVkY,0BAAwB,IAEzB7C,IAAa7X,EAAAA,EAAAA,GAAC2a,EAAAA,OAAOC,QAAO,CAAC5R,KAAK,QAAQsJ,QAASuF,KACpD7X,EAAAA,EAAAA,GAAC6a,EAAAA,sBAAqB,CAACzB,cAAeA,EAAcrZ,SACjD4Y,EAAMhT,KAAI,CAACgU,EAAMpH,KAAK,IAAAuI,EAAAC,EAAAC,EAAA,OACrBhb,EAAAA,EAAAA,GAACib,EAAAA,0BAAyB,CACxB,cAAa,kCAA4C,QAA5CH,EAAsC,OAAJnB,QAAI,IAAJA,OAAI,EAAJA,EAAMhc,YAAI,IAAAmd,EAAAA,EAAI,KAE7DnB,KAAMA,EACNpH,MAAOA,EACP6G,cAAeA,EAAcrZ,SAElB,QAFkBib,EAExB,OAAJrB,QAAI,IAAJA,OAAI,EAAJA,EAAMhc,YAAI,IAAAqd,EAAAA,EAAI,IALV,6BAAuC,QAAvCD,EAAiC,OAAJpB,QAAI,IAAJA,OAAI,EAAJA,EAAMhc,YAAI,IAAAod,EAAAA,EAAI,KAMtB,QAGV,ECzHfG,GAA4B,IAsB5BC,GAAeA,CAACC,EAAWC,EAAgB,IAAIC,QAC1D,MAAMC,EAAU3V,KAAKC,IAAI,EAAGD,KAAK4V,OAAOH,EAAcI,UAAYL,GAAQ,MAC1E,IAAIM,EAAW9V,KAAK4V,MAAMD,EAAU,SAEpC,OAAIG,GAAY,GAEZ1b,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,uDAEflB,OAAQ,CAAEqN,UAAWD,MAI3BA,EAAW9V,KAAK4V,MAAMD,EAAU,QAC5BG,GAAY,GAEZ1b,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,yDAEflB,OAAQ,CAAEqN,UAAWD,MAI3BA,EAAW9V,KAAK4V,MAAMD,EAAU,OAC5BG,GAAY,GAEZ1b,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,qDAEflB,OAAQ,CAAEqN,UAAWD,MAI3BA,EAAW9V,KAAK4V,MAAMD,EAAU,MAC5BG,GAAY,GAEZ1b,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,uDAEflB,OAAQ,CAAEqN,UAAWD,MAI3BA,EAAW9V,KAAK4V,MAAMD,EAAU,IAC5BG,GAAY,GAEZ1b,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,2DAEflB,OAAQ,CAAEqN,UAAWD,MAKzB1b,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,2DAEflB,OAAQ,CAAEqN,UAAWJ,QACrB,EAoBOK,GAAkCA,EAC7C3B,YACAlB,WACA8C,gBAMIA,EACK,CAAEve,SAAU,CAAEC,MAAO0c,IAGb,SAAblB,EACK,CAAEvb,YAAa,CAAEC,iBAAkB,CAAEF,MAAOue,OAAO7B,GAAY8B,qBAAsB,iBAGvF,CAAEve,YAAa,CAAED,MAAO0c,IC3HyD,IAAAvc,GAAA,CAAAC,KAAA,SAAAC,OAAA,4BCAxC,IAAAF,GAAA,CAAAC,KAAA,SAAAC,OAAA,4BCAA,IAAAF,GAAA,CAAAC,KAAA,SAAAC,OAAA,4B,wCCGlD,MAAMoe,GAAUC,MAEhB,SAASC,GAAqBC,GAC5B,QAAgB9V,IAAZ8V,EAGJ,MAA0B,kBAAZA,GAAwBA,aAAmBC,UAAYD,aAAmBE,KACpFF,EACApQ,KAAK2D,UAAUyM,EACrB,CAEO,MAAMG,GAAWC,MAAOC,EAAaC,EAA8C,MAAOC,KAC/F,MAAMC,QAAiBX,GAAQQ,EAAK,CAClCC,SACAC,KAAMR,GAAqBQ,GAC3BE,QAASF,EAAO,CAAE,eAAgB,oBAAuB,CAAC,IAE5D,IAAKC,EAASE,GAAI,CAChB,MAAMC,GAAkBC,EAAAA,GAAAA,IAAqBJ,GAC7C,GAAIG,EAAiB,CACnB,IAEE,MAAMxK,SAAiBqK,EAASK,QAAQ1K,QACxCwK,EAAgBxK,QAAiB,OAAPA,QAAO,IAAPA,EAAAA,EAAWwK,EAAgBxK,OACvD,CAAE,MACA,CAEF,MAAMwK,CACR,CACF,CACA,OAAOH,EAASK,MAAM,ECtBXC,GAAmBA,EAAGd,aACjCG,GAAS,+BAA+BH,EAAQ9e,WAAW6f,uBAAwB,OAAQf,GCcvFgB,GAAyG,CAC7GH,KCvBuBI,EACvB7f,QACA8f,aACAC,WACAC,gBACAC,mBAGE3d,EAAAA,EAAAA,IAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,GAACsC,EAAAA,EAAMmb,SAAQ,CACb,cAAY,8BACZlb,YAAY,iEACZhF,MAAOue,OAAOve,GACdmgB,SAAU,CAAEC,QAAS,EAAGC,QAAS,GACjCxD,UAAYlZ,GAAMA,EAAEmZ,kBACpB1X,SAAWzB,IACToc,EAASpc,EAAE0B,OAAOrF,OAClBggB,EAAc,KAAK,EAErB/C,gBAAiB6C,EAAa,aAAUhX,EACxCoR,SAAU+F,IAEXH,IACCrd,EAAAA,EAAAA,GAAC2a,EAAAA,OAAOC,QAAO,CACbrL,GAAG,+DACH+C,QAAS+K,EACTrU,KAAK,aDFb6U,OHxBuBC,EACvBvgB,QACA8f,aACAC,WACAC,gBACAC,mBAGE3d,EAAAA,EAAAA,IAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,GAACsC,EAAAA,EAAK,CACJ,cAAY,gCACZC,YAAY,4DACZhF,MAAOue,OAAOve,GACd6c,UAAYlZ,GAAMA,EAAEmZ,kBACpB1X,SAAWzB,IACToc,EAASpc,EAAE0B,OAAOrF,OAClBggB,EAAc,KAAK,EAErB9F,SAAU+F,EACVhb,YAAU,IAEX6a,IAAcrd,EAAAA,EAAAA,GAAA,OAAKF,IAAGpC,GAAqCqC,SAAEsd,OGIlEU,QLzB0BC,EAC1BzgB,QACA8f,aACAC,WACAC,gBACAC,mBAGE3d,EAAAA,EAAAA,IAAA,OAAAE,SAAA,EACEF,EAAAA,EAAAA,IAACgW,EAAAA,sBAAqB,CACpB,cAAY,iCACZtT,YAAY,6DACZ5E,KAAK,6DACLJ,MAAOA,EACPka,SAAU+F,EACV7a,SAAWzB,IACToc,EAASpc,EAAE0B,OAAOrF,OAClBggB,EAAc,KAAK,EACnBxd,SAAA,EAEFC,EAAAA,EAAAA,GAAC+V,EAAAA,uBAAsB,CAACxY,OAAK,EAAAwC,SAAC,UAC9BC,EAAAA,EAAAA,GAAC+V,EAAAA,uBAAsB,CAACxY,OAAO,EAAMwC,SAAC,aAEvCsd,IAAcrd,EAAAA,EAAAA,GAAA,OAAKF,IAAGpC,GAAqCqC,SAAEsd,OKGlEY,OJ1B0BC,EAC1B3gB,QACA8f,aACAC,WACAC,gBACAC,mBAGE3d,EAAAA,EAAAA,IAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,GAACsC,EAAAA,EAAK,CACJ,cAAY,gCACZC,YAAY,4DACZhF,MAAOue,OAAOve,GACd6c,UAAYlZ,GAAMA,EAAEmZ,kBACpB1X,SAAWzB,IACToc,EAASpc,EAAE0B,OAAOrF,MAAQ4gB,OAAOjd,EAAE0B,OAAOrF,OAAS,IACnDggB,EAAc,KAAK,EAErBvU,KAAK,SACLyO,SAAU+F,EACVhb,YAAU,IAEX6a,IAAcrd,EAAAA,EAAAA,GAAA,OAAKF,IAAGpC,GAAqCqC,SAAEsd,QIcvDe,IAAuBrgB,EAAAA,EAAAA,aAClC,EAEIsgB,iBACAC,SACAC,UAGAjN,eAEF/S,KACI,IAADigB,EACH,MAAM,MAAEpf,IAAUC,EAAAA,EAAAA,MAEX1B,EAAMia,IAAWjZ,EAAAA,EAAAA,UAAS,KAC1Bma,EAAgB2F,IAAqB9f,EAAAA,EAAAA,UAAqC,aAC1Eoa,EAAU2F,IAAe/f,EAAAA,EAAAA,UAAsC,YAC/DpB,EAAO+f,IAAY3e,EAAAA,EAAAA,WAAoC,IACvDggB,EAAWC,IAAgBjgB,EAAAA,EAAAA,UAAS,KACpCkZ,EAAWC,IAAgBnZ,EAAAA,EAAAA,UAAiC,OAC5D0e,EAAYE,IAAiB5e,EAAAA,EAAAA,UAAiC,MAC/DkgB,IAAmB/W,EAAAA,EAAAA,OAAMuW,GAGzBS,EAAuC,QAAzBN,EAAGrB,GAAapE,UAAS,IAAAyF,EAAAA,EAAIrB,GAAqB,QAEhE,yBAAE4B,EAAwB,UAAEC,GE3DHC,GACjCV,UACAW,YACAC,UACAC,gBAOA,MAAMlH,GAAOC,EAAAA,EAAAA,MACPkH,GAAcC,EAAAA,GAAAA,OACZC,OAAQR,EAAwB,UAAEC,IAAcQ,EAAAA,GAAAA,GAAY,CAClEC,WAAatD,GAAqCc,GAAiB,CAAEd,YACrE+C,UAAWA,KACTG,EAAYK,kBAAkB,CAAEC,SAAU,CAACC,EAAAA,GAA4BrB,KAC9D,OAATW,QAAS,IAATA,GAAAA,GAAa,EAEfC,QAAUU,KACRC,EAAAA,EAAAA,IACE5H,EAAKqC,cACH,CAAAhL,GAAA,SACEC,eAAe,+CAGjB,CACEqQ,MAAOA,aAAiBE,MAAQF,EAAMvN,QAAUwJ,OAAO+D,MAItD,OAAPV,QAAO,IAAPA,GAAAA,EAAUU,EAAM,EAElBT,UAAWA,KACA,OAATA,QAAS,IAATA,GAAAA,GAAa,IAIjB,MAAO,CACLL,2BACAC,YACD,EFkBiDC,CAAoB,CAClEV,UACAa,UAAWA,KACT9N,GAAY,EAAM,IAIhB0O,GAAezgB,EAAAA,EAAAA,cAAYgd,UAAa,IAAD0D,EAC3C,GAAiB,SAAblH,EACF,IAEEhN,KAAKa,MAAMrP,EACb,CAAE,MAAO2D,GAOP,YANAqc,GACEvd,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,yCAKrB,CAGF,IAAKqP,GAA4B,KAATlhB,EAOtB,YANAma,GACE9X,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,yBAOrB,MAAM0Q,EAAWtE,GAAgC,CAC/C3B,UAAW1c,EACXwb,WACA8C,WAA+B,aAAnB/C,IAGRqD,EAAmC,CACvC9e,WAAY,CACV8iB,gBAAiBtB,EAAkBR,EAAiB1gB,EACpDuf,SAAUqB,EACV6B,OAAQ,CACNC,YAAa,QACbC,UAAoB,QAAXL,GAAEM,EAAAA,GAAAA,YAAS,IAAAN,EAAAA,EAAI,IAE1BO,QAASlC,EACTK,eACGuB,IAIPnB,EAAyB5C,EAAQ,GAChC,CACDpD,EACAxb,EACAub,EACA+F,EACAR,EACA1gB,EACA4gB,EACAD,EACAK,EACAI,IAGIhH,GAAqBxY,EAAAA,EAAAA,cAAa8Y,IAEtC,IAAKA,EAOH,OANAT,EAAQ,IACR6G,EAAkB,YAClBC,EAAY,WACZpB,GAAS,GACTsB,EAAa,SACbrB,EAAc,MAShB,OALA3F,EAAQS,EAAO1a,MACf8gB,EAAkBpG,EAAOS,gBACzB4F,EAAYrG,EAAOU,UAGXV,EAAOU,UACb,IAAK,SACL,IAAK,OACHuE,EAAS,IACT,MACF,IAAK,SACHA,EAAS,GACT,MACF,IAAK,UACHA,GAAS,GAEb,GACC,IAEH,OACEzd,EAAAA,EAAAA,IAAA,OACEtB,IAAKA,EACLuB,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfE,IAAKjD,EAAMqB,QAAQG,GACnBsO,UAAW9P,EAAMqB,QAAQC,GACzB2M,OAAQ,aAAajO,EAAMiM,OAAOgC,SAClCE,QAASnO,EAAMqB,QAAQC,GACvBwM,aAAc9N,EAAM+N,QAAQC,gBAC7B,IAACrN,SAAA,EAEFC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACjC,KAAK,KAAKuM,MAAM,YAAW3N,UAC1CC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,uBAInB3P,EAAAA,EAAAA,IAAC4gB,EAAAA,aAAY,CACXlR,GAAG,qDACHhN,YAAY,qDACZhF,MAAOub,EACPrB,SAAUuH,EACVrc,SAAWzB,IACTud,EAAkBvd,EAAE0B,OAAOrF,OAEJ,aAAnB2D,EAAE0B,OAAOrF,OAAqC,SAAbwb,GACnC2F,EAAY,SACd,EACA3e,SAAA,EAEFC,EAAAA,EAAAA,GAAC0gB,EAAAA,mBAAkB,CAACnjB,MAAM,WAAUwC,UAClCC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,gBAEnCxP,EAAAA,EAAAA,GAAC0gB,EAAAA,mBAAkB,CAACnjB,MAAM,cAAawC,UACrCC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,sBAKrBxP,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACtD,KAAGM,EAAAA,EAAAA,IAAE,CAAE8O,UAAW9P,EAAMqB,QAAQG,IAAI,IAAEO,KAAK,KAAKuM,MAAM,YAAW3N,UAChFC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,sBAIlBqP,GACC7e,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAAArD,SAAEse,KAElBre,EAAAA,EAAAA,GAAC2X,GAA6B,CAC5Bha,KAAMA,EACNia,QAASA,EACTG,mBAAoBA,EACpBF,UAAWA,EACXC,aAAcA,KAGlB9X,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACtD,KAAGM,EAAAA,EAAAA,IAAE,CAAE8O,UAAW9P,EAAMqB,QAAQG,IAAI,IAAEO,KAAK,KAAKuM,MAAM,YAAW3N,UAChFC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,iBAInB3P,EAAAA,EAAAA,IAAC4gB,EAAAA,aAAY,CACXlR,GAAG,0DACHhN,YAAY,0DACZhF,MAAOwb,EACPtB,SAAUuH,EACVrc,SAAWzB,IACTwd,EAAYxd,EAAE0B,OAAOrF,OACrBggB,EAAc,KAAK,EACnBxd,SAAA,CAEkB,gBAAnB+Y,IACC9Y,EAAAA,EAAAA,GAAC0gB,EAAAA,mBAAkB,CAACnjB,MAAM,OAAMwC,UAC9BC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,YAGrCxP,EAAAA,EAAAA,GAAC0gB,EAAAA,mBAAkB,CAACnjB,MAAM,SAAQwC,UAChCC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,cAInBxP,EAAAA,EAAAA,GAAC0gB,EAAAA,mBAAkB,CAACnjB,MAAM,UAASwC,UACjCC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,eAInBxP,EAAAA,EAAAA,GAAC0gB,EAAAA,mBAAkB,CAACnjB,MAAM,SAAQwC,UAChCC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,iBAKrBxP,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACtD,KAAGM,EAAAA,EAAAA,IAAE,CAAE8O,UAAW9P,EAAMqB,QAAQG,IAAI,IAAEO,KAAK,KAAKuM,MAAM,YAAW3N,UAChFC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,aAEnCxP,EAAAA,EAAAA,GAAC8e,EAAc,CACbvhB,MAAOA,EACP8f,WAAYA,EACZC,SAAUA,EACVC,cAAeA,EACfC,aAAcwB,KAEhBhf,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACtD,KAAGM,EAAAA,EAAAA,IAAE,CAAE8O,UAAW9P,EAAMqB,QAAQG,IAAI,IAAEO,KAAK,KAAKuM,MAAM,YAAW3N,UAChFC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,iBAInBxP,EAAAA,EAAAA,GAACsC,EAAAA,EAAMmb,SAAQ,CACblb,YAAY,yDACZhF,MAAOohB,EACPjB,SAAU,CAAEC,QAAS,EAAGC,QAAS,GACjCnG,SAAUuH,EACV5E,UAAYlZ,GAAMA,EAAEmZ,kBACpB1X,SAAWzB,GAAM0d,EAAa1d,EAAE0B,OAAOrF,UAEzCsC,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ+B,eAAgB,WAAY8M,UAAW9P,EAAMqB,QAAQG,IAAI,IAACb,SAAA,EACrFC,EAAAA,EAAAA,GAACwD,EAAAA,EAAM,CACLjB,YAAY,uDACZkV,SAAUuH,EACVrb,QAASA,IAAM2N,GAAY,GAAOvR,UAElCC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,cAInBxP,EAAAA,EAAAA,GAACwD,EAAAA,EAAM,CACL1D,KAAGM,EAAAA,EAAAA,IAAE,CAAEO,WAAYvB,EAAMqB,QAAQC,IAAI,IACrCsI,KAAK,UACLzG,YAAY,uDACZoB,QAASqc,EACTW,QAAS3B,EAAUjf,UAEnBC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,kBAGjC,IG9SCoR,GAAyBA,EACpClW,QACA2T,iBACAC,SACAC,cAOA,MAAOlN,EAAUC,IAAe3S,EAAAA,EAAAA,WAAS,GACnCJ,GAAMM,EAAAA,EAAAA,QAAuB,MASnC,OAPAsJ,EAAAA,EAAAA,YAAU,KACJkJ,GAAY9S,EAAIkB,SAElBlB,EAAIkB,QAAQoL,eAAe,CAAEgW,SAAU,SAAU/V,MAAO,SAC1D,GACC,CAACuG,KAGFxR,EAAAA,EAAAA,IAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,GAACwD,EAAAA,EAAM,CACLrC,KAAK,QACLoB,YAAY,iDACZkB,MAAMzD,EAAAA,EAAAA,GAAC8gB,EAAAA,SAAQ,IACfnd,QAASA,IAAM2N,GAAY,GAAMvR,SAEhC2K,IAEF2G,IACCrR,EAAAA,EAAAA,GAACoe,GAAoB,CACnB7f,IAAKA,EACL8f,eAAgBA,EAChBC,OAAQA,EACRC,QAASA,EACTjN,YAAaA,MAGb,ECxCGyP,GAAgCA,EAC3C1jB,aACA2jB,eACAC,yBAKK,IAADhB,EACJ,MAAMpE,EAAa,aAAcxe,EAK3B6jB,IAJgB,QAAZjB,GAAGM,EAAAA,GAAAA,YAAS,IAAAN,EAAAA,EAAI,MAGf5iB,EAAW+iB,OAAOE,WAAczE,GAAgD,UAAlCxe,EAAW+iB,OAAOC,cACzBW,EAElD,OACEnhB,EAAAA,EAAAA,IAAC+N,EAAAA,aAAaC,KAAI,CAAA9N,SAAA,EAChBC,EAAAA,EAAAA,GAAC4N,EAAAA,aAAaE,QAAO,CAACC,SAAO,EAAAhO,UAC3BC,EAAAA,EAAAA,GAACwD,EAAAA,EAAM,CAACjB,YAAY,qDAAqDkB,MAAMzD,EAAAA,EAAAA,GAACmhB,EAAAA,aAAY,IAAKhgB,KAAK,aAExGtB,EAAAA,EAAAA,IAAC+N,EAAAA,aAAaM,QAAO,CAACmH,SAAU,IAAItV,SAAA,CACjCmhB,IACCrhB,EAAAA,EAAAA,IAAC+N,EAAAA,aAAawT,KAAI,CAChB7e,YAAY,qDACZoB,QAASA,IAAkB,OAAZqd,QAAY,IAAZA,OAAY,EAAZA,GAAe,GAAMjhB,SAAA,EAEpCC,EAAAA,EAAAA,GAAC4N,EAAAA,aAAayT,YAAW,CAAAthB,UACvBC,EAAAA,EAAAA,GAACshB,EAAAA,WAAU,OAEbthB,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,aAGrC3P,EAAAA,EAAAA,IAAC+N,EAAAA,aAAawT,KAAI,CAChB7e,YAAY,uDACZoB,QAASA,IAAMsd,GAAmB,GAAMlhB,SAAA,EAExCC,EAAAA,EAAAA,GAAC4N,EAAAA,aAAayT,YAAW,CAAAthB,UACvBC,EAAAA,EAAAA,GAACuhB,EAAAA,UAAS,OAEZvhB,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,mBAGnB,ECvCXgS,GAAwBA,EACnCnkB,aACAokB,iBACAC,wBAMA,MAAMxJ,GAAOC,EAAAA,EAAAA,MACPkH,GAAcC,EAAAA,GAAAA,OAEZC,OAAQoC,EAAwB,UAAE3C,IAAcQ,EAAAA,GAAAA,GAAY,CAClEC,WAAYA,INpBgBmC,GAAGrD,UAASsD,kBAC1CvF,GAAS,+BAA+BiC,iBAAuBsD,IAAgB,UMmB3DD,CAAiB,CAAErD,QAASlhB,EAAW6f,SAAU2E,aAAcxkB,EAAWykB,gBAC5F5C,UAAWA,KACTG,EAAYK,kBAAkB,CAAEC,SAAU,CAACC,EAAAA,GAA4BviB,EAAW6f,WAAY,EAEhGiC,QAAUU,KACRC,EAAAA,EAAAA,IACE5H,EAAKqC,cACH,CAAAhL,GAAA,SACEC,eAAe,+CAGjB,CACEqQ,MAAOA,aAAiBE,MAAQF,EAAMvN,QAAUwJ,OAAO+D,KAG5D,EAEHT,UAAWA,KACTsC,GAAkB,EAAM,IAItBK,GAAexiB,EAAAA,EAAAA,cAAY,KAC/BoiB,GAA0B,GACzB,CAACA,IAEJ,OACE3hB,EAAAA,EAAAA,GAACgiB,GAAAA,EAAK,CACJzf,YAAY,sDACZ0f,QAASR,EACTS,KAAMH,EACNI,cAAe,CAAEC,QAAQ,EAAMzB,QAAS3B,GACxCqD,QAAQriB,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,WACzC8S,SAAUA,KACRZ,GAAkB,EAAM,EAE1Ba,YAAYviB,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,WAC7CgT,eAAgBxD,EAChBtU,OAAO1K,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,sBAAoEzP,UAE5GC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,sDAGX,E,eCxDL,MCAMiT,GAAsBA,EACjCplB,aACA6hB,YACAC,UACAC,gBAOA,MAAMlH,GAAOC,EAAAA,EAAAA,MACPkH,GAAcC,EAAAA,GAAAA,OAEZC,OAAQmD,EAAwB,UAAE1D,IAAcQ,EAAAA,GAAAA,GAAY,CAClEC,WAAatD,GRGewG,GAC9BpE,UACAsD,eACA1F,aAKIG,GAAS,+BAA+BiC,iBAAuBsD,IAAgB,QAAS1F,GQVxFwG,CAAiB,CAAEpE,QAASlhB,EAAW6f,SAAU2E,aAAcxkB,EAAWykB,cAAe3F,YAC3FgD,QAAUU,KACRC,EAAAA,EAAAA,IACE5H,EAAKqC,cACH,CAAAhL,GAAA,SACEC,eAAe,+CAGjB,CACEqQ,MAAOA,aAAiBE,MAAQF,EAAMvN,QAAUwJ,OAAO+D,MAItD,OAAPV,QAAO,IAAPA,GAAAA,EAAUU,EAAM,EAElBX,UAAWA,KACTG,EAAYK,kBAAkB,CAAEC,SAAU,CAACC,EAAAA,GAA4BviB,EAAW6f,YACzE,OAATgC,QAAS,IAATA,GAAAA,GAAa,EAEfE,UAAWA,KACA,OAATA,QAAS,IAATA,GAAAA,GAAa,IAIjB,MAAO,CACLsD,2BACA1D,YACD,ECUU4D,GAAqBA,EAChCvlB,aACA6hB,YACAE,YACAkD,eAMK,IAADrC,EACJ,MAAMpE,EAAa,aAAcxe,EAC3BwlB,GAAezlB,EAAAA,GAAAA,GAAmBC,GAClCylB,EAlDeC,EAACxlB,EAAYse,KAClC,GAAqB,kBAAVte,EAAoB,CAE7B,GAAc,KAAVA,EACF,MAAO,UAGT,GAAIse,EACF,MAAO,SAGT,IAEE,OADA9P,KAAKa,MAAMrP,GACJ,MACT,CAAE,MAAO2D,GAEP,MAAO,QACT,CACF,CAEA,MAAqB,mBAAV3D,GAAwC,kBAAVA,SACzBA,EAET,SAAS,EA2BIwlB,CAAeF,EAAchH,GAC3CmH,EAzBiBzlB,IACF,kBAAVA,EAEFA,GAAS,KAEG,mBAAVA,GAAwC,kBAAVA,EAChCA,EAEF,KAiBc0lB,CAAgBJ,GAC/BK,EAAgB,QAAZjD,GAAGM,EAAAA,GAAAA,YAAS,IAAAN,EAAAA,EAAI,IAEpB,MAAE7gB,IAAUC,EAAAA,EAAAA,MACX0Z,EAAU2F,IAAe/f,EAAAA,EAAAA,UAAsCmkB,IAC/DvlB,EAAO+f,IAAY3e,EAAAA,EAAAA,UAA2CqkB,IAC9DrE,EAAWC,IAAgBjgB,EAAAA,EAAAA,UAAStB,EAAWshB,YAC/CtB,EAAYE,IAAiB5e,EAAAA,EAAAA,UAAiC,OAE/D,yBAAE+jB,EAA0B1D,UAAWmE,GAAeV,GAAoB,CAC9EplB,aACA6hB,YACAE,eAGI,2BAAEgE,EAA4BpE,UAAWqE,GFlFZC,GACnC/E,UACAW,YACAC,UACAC,gBAOA,MAAMlH,GAAOC,EAAAA,EAAAA,MACPkH,GAAcC,EAAAA,GAAAA,OAEZC,OAAQ6D,EAA0B,UAAEpE,IAAcQ,EAAAA,GAAAA,GAAY,CACpEC,WAAYA,EACV8D,gBACAhmB,QACAohB,gBAKK,IAADsB,EACJ,MAAMuD,EAA4B,IAC7BD,KACAhmB,EACHohB,YACAyB,OAAQ,CACNE,UAAoB,QAAXL,GAAEM,EAAAA,GAAAA,YAAS,IAAAN,EAAAA,EAAI,GACxBI,YAAa,SAEfoD,UAAWF,EAAczB,eAErB3F,EAAmC,CACvC9e,YAAYqmB,EAAAA,EAAAA,MAAKF,EAAe,gBAAiB,cAAe,mBAAoB,0BAEtF,OAAOvG,GAAiB,CAAEd,WAAU,EAEtCgD,QAAUU,KACRC,EAAAA,EAAAA,IACE5H,EAAKqC,cACH,CAAAhL,GAAA,SACEC,eAAe,iDAGjB,CACEqQ,MAAOA,aAAiBE,MAAQF,EAAMvN,QAAUwJ,OAAO+D,MAItD,OAAPV,QAAO,IAAPA,GAAAA,EAAUU,EAAM,EAElBX,UAAWA,KACTG,EAAYK,kBAAkB,CAAEC,SAAU,CAACC,EAAAA,GAA4BrB,KAC9D,OAATW,QAAS,IAATA,GAAAA,GAAa,EAEfE,UAAWA,KACA,OAATA,QAAS,IAATA,GAAAA,GAAa,IAIjB,MAAO,CACLgE,6BACApE,YACD,EEiBgEsE,CAAsB,CACrF/E,QAASlhB,EAAW6f,SACpBgC,YACAE,cAGIJ,EAAYmE,GAAcE,EAE1BM,GAAepkB,EAAAA,EAAAA,cAAYgd,UAC/B,GAAiB,SAAbxD,EACF,IACEhN,KAAKa,MAAMrP,EACb,CAAE,MAAO2D,GAOP,YANAqc,GACEvd,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,yCAKrB,CAGF,MAAM0Q,EAAWtE,GAAgC,CAC/C3B,UAAW1c,EACXwb,WACA8C,eAMF,GAAIqH,IAAS7lB,EAAW+iB,OAAOE,WAAczE,EAW3CuH,EAA2B,CACzBG,cAAelmB,EACfE,MAAO2iB,KACHvB,EAAY,CAAEA,aAAc,CAAC,QAdoB,CACvD,MAAMxC,EAAmC,CACvC9e,WAAY,IACP6iB,EACHvB,aAEFiF,aAAgB/H,EAAa,WAAa,eAA7B,cAGf6G,EAAyBvG,EAC3B,CAMA,GACC,CAACpD,EAAUxb,EAAOse,EAAYqH,EAAM7lB,EAAYshB,EAAW+D,EAA0BU,IAExF,OACEvjB,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfE,IAAKjD,EAAMqB,QAAQG,GACnBsO,UAAW9P,EAAMqB,QAAQC,GACzB2M,OAAQ,aAAajO,EAAMiM,OAAOgC,SAClCE,QAASnO,EAAMqB,QAAQC,GACvBwM,aAAc9N,EAAM+N,QAAQC,gBAC7B,IAACrN,SAAA,EAEFC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACtD,KAAGM,EAAAA,EAAAA,IAAE,CAAE8O,UAAW9P,EAAMqB,QAAQG,IAAI,IAAEO,KAAK,KAAKuM,MAAM,YAAW3N,UAChFC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,iBAInB3P,EAAAA,EAAAA,IAAC4gB,EAAAA,aAAY,CACXlR,GAAG,+DACHhN,YAAY,+DACZhF,MAAOwb,EACPtB,SAAUuH,EACVrc,SAAWzB,IACTwd,EAAYxd,EAAE0B,OAAOrF,OACrBggB,EAAc,KAAK,EACnBxd,SAAA,EAEA8b,IACA7b,EAAAA,EAAAA,GAAC0gB,EAAAA,mBAAkB,CAACnjB,MAAM,OAAMwC,UAC9BC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,YAGrCxP,EAAAA,EAAAA,GAAC0gB,EAAAA,mBAAkB,CAACnjB,MAAM,SAAQwC,UAChCC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,cAEnCxP,EAAAA,EAAAA,GAAC0gB,EAAAA,mBAAkB,CAACnjB,MAAM,UAASwC,UACjCC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,eAInBxP,EAAAA,EAAAA,GAAC0gB,EAAAA,mBAAkB,CAACnjB,MAAM,SAAQwC,UAChCC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,iBAGrCxP,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACtD,KAAGM,EAAAA,EAAAA,IAAE,CAAE8O,UAAW9P,EAAMqB,QAAQG,IAAI,IAAEO,KAAK,KAAKuM,MAAM,YAAW3N,UAChFC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,YAErB,SAAbuJ,IACClZ,EAAAA,EAAAA,IAAA+Q,EAAAA,GAAA,CAAA7Q,SAAA,EACEC,EAAAA,EAAAA,GAACsC,EAAAA,EAAMmb,SAAQ,CACblb,YAAY,iEACZhF,MAAOue,OAAOve,GACdsmB,KAAM,EACNzJ,UAAYlZ,GAAMA,EAAEmZ,kBACpB1X,SAAWzB,IACToc,EAASpc,EAAE0B,OAAOrF,OAClBggB,EAAc,KAAK,EAErB/C,gBAAiB6C,EAAa,aAAUhX,EACxCoR,SAAUuH,IAEX3B,IACCrd,EAAAA,EAAAA,GAAC2a,EAAAA,OAAOC,QAAO,CACbrL,GAAG,+DACH+C,QAAS+K,EACTrU,KAAK,aAKC,WAAb+P,IACC/Y,EAAAA,EAAAA,GAACsC,EAAAA,EAAK,CACJC,YAAY,iEACZhF,MAAOue,OAAOve,GACd6c,UAAYlZ,GAAMA,EAAEmZ,kBACpB1X,SAAWzB,IACToc,EAASpc,EAAE0B,OAAOrF,OAClBggB,EAAc,KAAK,EAErB9F,SAAUuH,EACVxc,YAAU,IAGA,YAAbuW,IACClZ,EAAAA,EAAAA,IAACgW,EAAAA,sBAAqB,CACpBtT,YAAY,kEACZ5E,KAAK,kEACLJ,MAAOA,EACPka,SAAUuH,EACVrc,SAAWzB,IACToc,EAASpc,EAAE0B,OAAOrF,OAClBggB,EAAc,KAAK,EACnBxd,SAAA,EAEFC,EAAAA,EAAAA,GAAC+V,EAAAA,uBAAsB,CAACxY,OAAK,EAAAwC,SAAC,UAC9BC,EAAAA,EAAAA,GAAC+V,EAAAA,uBAAsB,CAACxY,OAAO,EAAMwC,SAAC,aAG5B,WAAbgZ,IACC/Y,EAAAA,EAAAA,GAACsC,EAAAA,EAAK,CACJC,YAAY,iEACZhF,MAAOue,OAAOve,GACd6c,UAAYlZ,GAAMA,EAAEmZ,kBACpB1X,SAAWzB,IACToc,EAASpc,EAAE0B,OAAOrF,MAAQ4gB,OAAOjd,EAAE0B,OAAOrF,OAAS,IACnDggB,EAAc,KAAK,EAErBvU,KAAK,SACLyO,SAAUuH,EACVxc,YAAU,KAGdxC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACtD,KAAGM,EAAAA,EAAAA,IAAE,CAAE8O,UAAW9P,EAAMqB,QAAQG,IAAI,IAAEO,KAAK,KAAKuM,MAAM,YAAW3N,UAChFC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,iBAInBxP,EAAAA,EAAAA,GAACsC,EAAAA,EAAMmb,SAAQ,CACblb,YAAY,8DACZhF,MAAOohB,EACPjB,SAAU,CAAEC,QAAS,EAAGC,QAAS,GACjCnG,SAAUuH,EACV5E,UAAYlZ,GAAMA,EAAEmZ,kBACpB1X,SAAWzB,GAAM0d,EAAa1d,EAAE0B,OAAOrF,UAEzCsC,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ+B,eAAgB,WAAY8M,UAAW9P,EAAMqB,QAAQG,IAAI,IAACb,SAAA,EACrFC,EAAAA,EAAAA,GAACwD,EAAAA,EAAM,CACLjB,YAAY,4DACZkV,SAAUuH,EACVrb,QAAS2e,EAASviB,UAElBC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,cAInBxP,EAAAA,EAAAA,GAACwD,EAAAA,EAAM,CACL1D,KAAGM,EAAAA,EAAAA,IAAE,CAAEO,WAAYvB,EAAMqB,QAAQC,IAAI,IACrCsI,KAAK,UACLzG,YAAY,0DACZoB,QAASggB,EACThD,QAAS3B,EAAUjf,UAEnBC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,gBAGjC,E,4BC7RH,MAAMsU,GAAyBA,EAAG3e,WAA0C,IAAD4e,EAChF,MAAM,MAAE3kB,IAAUC,EAAAA,EAAAA,MACZ,gBAAEiH,EAAe,cAAEH,EAAa,yBAAEO,GAA6BI,IAC/Dkd,GAAeC,EAAAA,EAAAA,IAAsB9e,GAAQ,EAEnD,OACEtF,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT6C,WAAY,SACZD,YAAa7D,EAAMqB,QAAQG,GAC3ByB,IAAKjD,EAAMqB,QAAQG,GACnB,UAAW,CACTsjB,eAAgB,YAChBC,oBAAqBH,EACjB5kB,EAAMiM,OAAO+Y,+BACbhlB,EAAMiM,OAAOgZ,yBACjBvjB,OAAQ,YAEX,IACD6C,QAASA,KACP2C,EAAgBnB,GAChBgB,EAAc,UACdO,GAAyB,EAAM,EAC/B3G,SAAA,EAEFC,EAAAA,EAAAA,GAACskB,GAAAA,EAAsB,CACrBN,aAAcA,EACdhb,MAAMub,EAAAA,EAAAA,IAA4B,QAAVR,EAAC5e,EAAK6D,YAAI,IAAA+a,EAAAA,EAAIS,EAAAA,GAAcC,YAEtDzkB,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CACdsK,MAAOsW,EAAe,QAAU,UAChClkB,KAAGM,EAAAA,EAAAA,IAAE,CAAEO,WAAYvB,EAAMqB,QAAQG,GAAI0M,SAAU,SAAUmD,aAAc,WAAYpN,WAAY,UAAU,IAACtD,SAEzGoF,EAAKuF,UAEJ,EChC6E,IAAAhN,GAAA,CAAAC,KAAA,SAAAC,OAAA,iEAAAC,GAAA,CAAAF,KAAA,UAAAC,OAAA,6DAEhF,MAAM8mB,GAAkBA,EAAGlnB,kBAChC,MAAM,MAAE4B,IAAUC,EAAAA,EAAAA,MACXslB,EAAW3D,IAAgBriB,EAAAA,EAAAA,WAAS,IACpCimB,EAAiB3D,IAAsBtiB,EAAAA,EAAAA,WAAS,IACjD,QAAEsH,EAAO,WAAEC,GAAeY,IAE1B+d,EAAiBrnB,EAAYgjB,QAAUva,EAAQzI,EAAYgjB,SAAW,KAGtEsE,EAAoC,YAAf5e,GAA4B2e,EAEjDE,EhBiEkCvnB,KACxC,GAAI,UAAWA,EACb,OAAOA,EAAYD,MAGrB,IAKE,OAAOwO,KAAKa,MAAMpP,EAAYC,iBAAiBF,MACjD,CAAE,MAAO2D,GACP,OAAO1D,EAAYC,iBAAiBF,KACtC,GgB9EoBynB,CAA0BxnB,EAAYA,aAE1D,OACEqC,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHmN,QAASnO,EAAMqB,QAAQC,GAAKtB,EAAMqB,QAAQG,GAC1CuU,WAAY/V,EAAMqB,QAAQC,GAC1B2M,OAAQ,aAAajO,EAAMiM,OAAOgC,SAClCH,aAAc9N,EAAM+N,QAAQiD,eAC5B/P,QAAS,OACT8B,cAAe,SACfE,IAAKjD,EAAMqB,QAAQC,IACpB,IAACX,SAAA,EAEFF,EAAAA,EAAAA,IAAA,OAAKC,IAAGpC,GAA6EqC,SAAA,EACnFC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACyN,MAAI,EAAC/Q,IAAGjC,GAAyEkC,SAC/FvC,EAAY2iB,mBAEfngB,EAAAA,EAAAA,GAAC+gB,GAA6B,CAC5B1jB,WAAYG,EACZwjB,aAAcA,EACdC,mBAAoBA,KAEtBjhB,EAAAA,EAAAA,GAACwhB,GAAqB,CACpBnkB,WAAYG,EACZikB,eAAgBmD,EAChBlD,kBAAmBT,OAGtB0D,GACC3kB,EAAAA,EAAAA,GAAC4iB,GAAkB,CACjBvlB,WAAYG,EACZ0hB,UAAWA,IAAM8B,GAAa,GAC9BsB,SAAUA,IAAMtB,GAAa,MAG/BhhB,EAAAA,EAAAA,GAACilB,GAAAA,EAAuB,CAACF,YAAaA,IAEvCD,IACCjlB,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,SAAUE,IAAKjD,EAAMqB,QAAQG,IAAI,IAACb,SAAA,EAC5EC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACjC,KAAK,KAAKuM,MAAM,YAAW3N,UAC1CC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,YAEnCxP,EAAAA,EAAAA,GAAC8jB,GAAsB,CAAC3e,KAAM0f,SAG9B,EC1DV,IAAAnnB,GAAA,CAAAC,KAAA,UAAAC,OAAA,2DACO,MAAMsnB,GAAyBA,EAAGC,gBACvC,MAAM,MAAE/lB,IAAUC,EAAAA,EAAAA,KAGlB,IAAK8lB,GAA2B,OAAdA,EAChB,OAAO,KAGT,IAAIJ,EACJ,IACEA,EAAchZ,KAAKa,MAAMuY,EAC3B,CAAE,MAAOjkB,GAEP6jB,EAAcI,CAChB,CAEA,IAAIzX,EAAmB,UACnB3N,EAA4BgM,KAAK2D,UAAUqV,EAAa,KAAM,GA8ClE,MA7CoB,QAAhBA,GACFrX,EAAQ,OACR3N,GACEF,EAAAA,EAAAA,IAAA+Q,EAAAA,GAAA,CAAA7Q,SAAA,EACEC,EAAAA,EAAAA,GAAColB,EAAAA,gBAAe,CAACtlB,KAAGM,EAAAA,EAAAA,IAAE,CAAE6C,YAAa7D,EAAMqB,QAAQG,IAAI,OACvDZ,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,YAGZ,OAAhBuV,GACTrX,EAAQ,QACR3N,GACEF,EAAAA,EAAAA,IAAA+Q,EAAAA,GAAA,CAAA7Q,SAAA,EACEC,EAAAA,EAAAA,GAACgX,EAAAA,YAAW,CAAClX,KAAGM,EAAAA,EAAAA,IAAE,CAAE6C,YAAa7D,EAAMqB,QAAQG,IAAI,OACnDZ,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,WAGL,kBAAhBuV,EAChBhlB,EAAWglB,EACc,OAAhBA,GAETrX,EAAQ,QACR3N,GACEF,EAAAA,EAAAA,IAAA+Q,EAAAA,GAAA,CAAA7Q,SAAA,EACEC,EAAAA,EAAAA,GAACqlB,EAAAA,EAAU,CAACvlB,KAAGM,EAAAA,EAAAA,IAAE,CAAE6C,YAAa7D,EAAMqB,QAAQG,IAAI,OAClDZ,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,eAGZ,IAAhBuV,GACTrX,EAAQ,OACR3N,GACEF,EAAAA,EAAAA,IAAA+Q,EAAAA,GAAA,CAAA7Q,SAAA,EACEC,EAAAA,EAAAA,GAAColB,EAAAA,gBAAe,CAACtlB,KAAGM,EAAAA,EAAAA,IAAE,CAAE6C,YAAa7D,EAAMqB,QAAQG,IAAI,OACvDZ,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,cAGZ,IAAhBuV,IACTrX,EAAQ,QACR3N,GACEF,EAAAA,EAAAA,IAAA+Q,EAAAA,GAAA,CAAA7Q,SAAA,EACEC,EAAAA,EAAAA,GAACgX,EAAAA,YAAW,CAAClX,KAAGM,EAAAA,EAAAA,IAAE,CAAE6C,YAAa7D,EAAMqB,QAAQG,IAAI,OACnDZ,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,eAMrCxP,EAAAA,EAAAA,GAACsU,GAAAA,EAAO,CAAC/R,YAAY,sDAAsDgS,QAASxU,EAASA,UAC3FC,EAAAA,EAAAA,GAACgO,EAAAA,IAAG,CACFlO,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,cAAepB,SAAU,OAAQoW,SAAUjW,EAAMqB,QAAQ0O,GAAIlM,YAAa,GAAG,IAC7FV,YAAY,kDACZmL,MAAOA,EAAM3N,UAEbC,EAAAA,EAAAA,GAAA,QACEF,IAAGpC,GAIDqC,SAEDA,OAGG,EC1FDulB,GAAuBA,EAAGlF,aACrC,MAAM,MAAEhhB,IAAUC,EAAAA,EAAAA,KAElB,OACEW,EAAAA,EAAAA,GAACsU,GAAAA,EAAO,CAAC/R,YAAY,qDAAqDgS,QAAS6L,EAAOE,UAAUvgB,UAElGC,EAAAA,EAAAA,GAAA,QACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHkV,WAAY,EACZhI,SAAU,SACVmD,aAAc,WACd8U,SAAU,SACV5kB,WAAYvB,EAAMqB,QAAQC,GAC1B2U,SAAUjW,EAAMqB,QAAQ0O,IACzB,IAACpP,UAEFC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAAArD,UACdC,EAAAA,EAAAA,GAAA,QAAMF,KAAGM,EAAAA,EAAAA,IAAE,CAAEsN,MAAOtO,EAAMiM,OAAOma,SAAS,IAACzlB,SAAEqgB,EAAOE,iBAGhD,ECLZ,IAAA5iB,GAAA,CAAAC,KAAA,SAAAC,OAAA,sDAEK,MAAM6nB,GAAuBA,EAElCC,mBAAkB,EAClBroB,aACA2jB,mBAMA,MAAM,MAAE5hB,IAAUC,EAAAA,EAAAA,MACXulB,EAAiB3D,IAAsBtiB,EAAAA,EAAAA,WAAS,GAEjDgnB,EAxBevF,KACrB,OAAQA,EAAOC,aACb,IAAK,QACH,OAAOuF,EAAAA,SACT,IAAK,YACH,OAAOC,EAAAA,YACT,QACE,OAAOC,EAAAA,SACX,EAgBmBC,CAAc1oB,EAAW+iB,QAE5C,OACEvgB,EAAAA,EAAAA,IAAA,OAAKC,IAAGpC,GAAkEqC,SAAA,CACvE2lB,IACC1lB,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHI,SAAU,WACVwlB,MAAO,EACPC,IAAK,EACLjnB,MAAO,GACP4V,OAAQxV,EAAMyV,WAAWC,eACzBC,UAAW,aACXjC,uBAAwB1T,EAAM+N,QAAQiD,eACtCE,aAAc,aAAalR,EAAMiM,OAAOgC,SACxC6Y,WAAY,aAAa9mB,EAAMiM,OAAOgC,UACvC,OAGLrN,EAAAA,EAAAA,GAAC2lB,EAAU,CACTxkB,KAAM/B,EAAMyV,WAAWsR,WACvBrmB,KAAGM,EAAAA,EAAAA,IAAE,CACHmN,QAAS,EACTxM,gBAAiB3B,EAAMiM,OAAOyG,0BAC9B5E,aAAc9N,EAAM+N,QAAQiZ,kBAC7B,OAEHpmB,EAAAA,EAAAA,GAACslB,GAAoB,CAAClF,OAAQ/iB,EAAW+iB,UACzCvgB,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHO,WAAY,OACZN,QAAS,OACT8B,cAAe,MACfe,WAAY,SACZb,IAAKjD,EAAMqB,QAAQG,IACpB,IAACb,SAAA,CAED1C,EAAWgpB,mBACVrmB,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CACdsK,MAAM,YACNvM,KAAK,KACLrB,KAAGM,EAAAA,EAAAA,IAAE,CACHO,WAAYvB,EAAMqB,QAAQC,GAC1B4M,SAAU,SACVmD,aAAc,WACd8U,SAAU,UACX,IAACxlB,SAEDob,GAAa,IAAIG,KAAKje,EAAWgpB,sBAGtCrmB,EAAAA,EAAAA,GAAC+gB,GAA6B,CAC5B1jB,WAAYA,EACZ2jB,aAAcA,EACdC,mBAAoBA,KAEtBjhB,EAAAA,EAAAA,GAACwhB,GAAqB,CACpBnkB,WAAYA,EACZokB,eAAgBmD,EAChBlD,kBAAmBT,SAGnB,ECxFGqF,GAAoBA,EAAGzG,YAClC,MAAM,MAAEzgB,IAAUC,EAAAA,EAAAA,MACXoiB,EAAgBC,IAAqB/iB,EAAAA,EAAAA,WAAS,GAErD,OACEkB,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,SAAUE,IAAKjD,EAAMqB,QAAQG,IAAI,IAACb,SAAA,EAC5EC,EAAAA,EAAAA,GAACumB,EAAAA,MAAK,CACJvd,KAAK,QACLwd,UAAU,EACVlU,QAASuN,EAAM4G,WACflkB,YAAY,kDACZ8M,aACExP,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,SAAUE,IAAKjD,EAAMqB,QAAQG,IAAI,IAACb,SAAA,EAC5EC,EAAAA,EAAAA,GAAA,QAAAD,SAAO8f,EAAM6G,gBACZ7G,EAAM8G,cACL3mB,EAAAA,EAAAA,GAACmD,EAAAA,EAAWyjB,KAAI,CACdrkB,YAAY,mEACZoB,QAASA,IAAM+d,GAAkB,GAAM3hB,UAEvCC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,4BAQ1BqQ,EAAM8G,cACL3mB,EAAAA,EAAAA,GAACgiB,GAAAA,EAAK,CACJtX,OACE1K,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,sBAInByS,QAASR,EACTlf,YAAY,+DACZskB,OAAQ,KACRvE,SAAUA,IAAMZ,GAAkB,GAAO3hB,UAEzCC,EAAAA,EAAAA,GAACqM,EAA6B,CAC5BE,KAAMR,KAAK2D,UAAUmQ,EAAM8G,aAC3Bjc,MAAM,GACNkB,kBAAmBC,EAAAA,GAAsBK,WAI3C,EChD8C,IAAAxO,GAAA,CAAAC,KAAA,SAAAC,OAAA,wDAKjD,MAAMkpB,GAAsBA,EAAGxpB,eACpC,MAAM,MAAE8B,IAAUC,EAAAA,EAAAA,KACZ9B,EAAQD,EAASA,SAASC,MAEhC,OACEsC,EAAAA,EAAAA,IAAA,OACEC,IAAGpC,GAIDqC,SAAA,EAEFC,EAAAA,EAAAA,GAACylB,GAAoB,CAACC,iBAAiB,EAAOroB,WAAYC,KAC1DuC,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfE,IAAKjD,EAAMqB,QAAQG,GACnBD,WAAY,GACZsN,YAAa7O,EAAMqB,QAAQ0O,GAC3BgG,WAAY/V,EAAMqB,QAAQC,GAC1BuU,cAAe7V,EAAMqB,QAAQ0O,GAC7B4X,aAAc3nB,EAAMqB,QAAQumB,GAC5Bd,WAAY,aAAa9mB,EAAMiM,OAAOgC,UACvC,IAACtN,SAAA,EAEA+H,EAAAA,EAAAA,OAAMxK,EAASA,SAASuiB,QAGxBhgB,EAAAA,EAAAA,IAAA+Q,EAAAA,GAAA,CAAA7Q,SAAA,EACEC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACjC,KAAK,KAAKuM,MAAM,YAAW3N,UAC1CC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,gBAEnCxP,EAAAA,EAAAA,GAAA,OAAAD,UACEC,EAAAA,EAAAA,GAACklB,GAAsB,CAACC,UAAWpZ,KAAK2D,UAAUnS,WAPtDyC,EAAAA,EAAAA,GAACsmB,GAAiB,CAACzG,MAAOviB,EAASA,SAASuiB,QAW7CviB,EAASqhB,YACR9e,EAAAA,EAAAA,IAAA+Q,EAAAA,GAAA,CAAA7Q,SAAA,EACEC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACjC,KAAK,KAAKuM,MAAM,YAAY5N,KAAGM,EAAAA,EAAAA,IAAE,CAAE8O,UAAW9P,EAAMqB,QAAQG,IAAI,IAACb,UAChFC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,iBAInBxP,EAAAA,EAAAA,GAACkV,GAAAA,EAAqB,CAAAnV,SAAEzC,EAASqhB,oBAInC,ECrCGsI,GAAuBA,EAClCxF,iBACAC,oBACApkB,eAMA,MAAM4pB,GAAoB5f,EAAAA,EAAAA,UAAQ,IAvBVjK,KACxB,MAAM8pB,EAAO,IAAIpd,IACXqd,EAAY,GAElB,IAAIC,EAA4ChqB,EAChD,KAAOgqB,IAAsBF,EAAKG,IAAID,EAAkBvF,gBACtDqF,EAAKjd,IAAImd,EAAkBvF,eAC3BsF,EAAU/iB,KAAKgjB,GACfA,EAAoBA,EAAkBE,qBAGxC,OAAOH,CAAS,EAYwBI,CAAiBlqB,IAAW,CAACA,IAErE,OACE0C,EAAAA,EAAAA,GAACgiB,GAAAA,EAAK,CACJzf,YAAY,qDACZ0f,QAASR,EACToF,OAAQ,KACRvE,SAAUA,KACRZ,GAAkB,EAAM,EAE1BhX,OACE1K,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,iBAGlBzP,SAEAmnB,EAAkBvhB,KAAKtI,GACtB,aAAcA,GAAa2C,EAAAA,EAAAA,GAAC8mB,GAAmB,CAAgCxpB,SAAUD,GAApCA,EAAWykB,eAA0C,QAEtG,EC3C2E,IAAApkB,GAAA,CAAAC,KAAA,UAAAC,OAAA,sDAAAC,GAAA,CAAAF,KAAA,UAAAC,OAAA,0CAEhF,MAAM6pB,GAAsBA,EAAGnqB,eACpC,MAAOoqB,EAAuBC,IAA4BhpB,EAAAA,EAAAA,WAAS,IAC7D,MAAES,IAAUC,EAAAA,EAAAA,MACZ,QAAE4G,EAAO,WAAEC,GAAeY,IAE1BvJ,EAAQD,EAASA,SAASC,MAE1BsnB,EAAiBvnB,EAASkjB,QAAUva,EAAQ3I,EAASkjB,SAAW,KAGhEsE,EAAoC,YAAf5e,GAA4B2e,EAEvD,OACEhlB,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,SAAUE,IAAKjD,EAAMqB,QAAQC,GAAIC,WAAYvB,EAAMqB,QAAQumB,IAAI,IAACjnB,SAAA,GACxG+H,EAAAA,EAAAA,OAAMxK,EAASA,SAASuiB,SAAU7f,EAAAA,EAAAA,GAACsmB,GAAiB,CAACzG,MAAOviB,EAASA,SAASuiB,QAC/EiF,IACCjlB,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfE,IAAKjD,EAAMqB,QAAQG,IACpB,IAACb,SAAA,EAEFC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACjC,KAAK,KAAKuM,MAAM,YAAW3N,UAC1CC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,YAEnCxP,EAAAA,EAAAA,GAAC8jB,GAAsB,CAAC3e,KAAM0f,QAGjC/c,EAAAA,EAAAA,OAAMxK,EAASA,SAASuiB,SACvBhgB,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,SAAUE,IAAKjD,EAAMqB,QAAQG,IAAI,IAACb,SAAA,EAC5EC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACjC,KAAK,KAAKuM,MAAM,YAAW3N,UAC1CC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,gBAEnC3P,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQgC,IAAKjD,EAAMqB,QAAQG,IAAI,IAACb,SAAA,EACnDC,EAAAA,EAAAA,GAACklB,GAAsB,CAACC,UAAWpZ,KAAK2D,UAAUnS,KACjDD,EAASiqB,uBACR1nB,EAAAA,EAAAA,IAAA+Q,EAAAA,GAAA,CAAA7Q,SAAA,EACEC,EAAAA,EAAAA,GAAA,QAAM2D,QAASA,IAAMgkB,GAAyB,GAAM5nB,UAClDC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CACdtD,IAAGpC,GAMHgQ,MAAM,YAAW3N,UAEjBC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,kBAKrBxP,EAAAA,EAAAA,GAACinB,GAAoB,CACnBxF,eAAgBiG,EAChBhG,kBAAmBiG,EACnBrqB,SAAUA,aAOrBA,EAASqhB,YACR9e,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,SAAUE,IAAKjD,EAAMqB,QAAQG,IAAI,IAACb,SAAA,EAC5EC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACjC,KAAK,KAAKuM,MAAM,YAAW3N,UAC1CC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,iBAInBxP,EAAAA,EAAAA,GAAA,OAAKF,IAAGjC,GAAkDkC,UACxDC,EAAAA,EAAAA,GAACkV,GAAAA,EAAqB,CAAAnV,SAAEzC,EAASqhB,mBAInC,EClFGiJ,GAAeA,EAAGtqB,eAC7B,MAAM,MAAE8B,IAAUC,EAAAA,EAAAA,MACXslB,EAAW3D,IAAgBriB,EAAAA,EAAAA,WAAS,GAE3C,OACEkB,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfE,IAAKjD,EAAMqB,QAAQG,GACnBqN,YAAa7O,EAAMqB,QAAQumB,GAAK,EAChCrmB,WAAYvB,EAAMqB,QAAQumB,GAAK,EAC/B7R,WAAY/V,EAAMqB,QAAQC,GAC1BuU,cAAe7V,EAAMqB,QAAQC,GAC7BwlB,WAAY,aAAa9mB,EAAMiM,OAAOgC,SACtC7M,SAAU,YACX,IAACT,SAAA,EAEFC,EAAAA,EAAAA,GAACylB,GAAoB,CAACpoB,WAAYC,EAAU0jB,aAAcA,IACzD2D,GACC3kB,EAAAA,EAAAA,GAAC4iB,GAAkB,CACjBvlB,WAAYC,EACZ4hB,UAAWA,IAAM8B,GAAa,GAC9BsB,SAAUA,IAAMtB,GAAa,MAG/BhhB,EAAAA,EAAAA,GAACynB,GAAmB,CAACnqB,SAAUA,MAE7B,EC/BV,MAAMuqB,GAAqBC,IACzB,MAAMC,EAAkB,CACtB,UAAW,CACT/oB,MAAO,GACP4V,OAAQ,KAGZ,OAAQkT,GACN,IAAK,QACH,OAAO9nB,EAAAA,EAAAA,GAAC4lB,EAAAA,SAAQ,CAAC9lB,IAAKioB,IACxB,IAAK,YACH,OAAO/nB,EAAAA,EAAAA,GAAC6lB,EAAAA,YAAW,CAAC/lB,IAAKioB,IAC3B,IAAK,OACH,OAAO/nB,EAAAA,EAAAA,GAAC8lB,EAAAA,SAAQ,CAAChmB,IAAKioB,IACxB,QACE,OAAO,KACX,EACA,IAAArqB,GAAA,CAAAC,KAAA,SAAAC,OAAA,YAEK,MAAMoqB,GAAiCA,EAAGC,gBAC/C,MAAM,MAAE7oB,IAAUC,EAAAA,EAAAA,KAElB,GAAI4oB,EAAUxiB,OAAS,EACrB,OAAO,KAGT,MAAMyiB,GAAeC,EAAAA,EAAAA,SAAQF,GAAY3qB,GAAaA,EAAS8iB,OAAOC,cACtE,OACErgB,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQgC,IAAKjD,EAAMqB,QAAQG,GAAIsC,WAAY,SAAUvC,WAAYvB,EAAMqB,QAAQG,IAAI,IAACb,SACtGsO,OAAOoB,QAAQyY,GAAcviB,KAAI,EAAEmiB,EAAY1Q,MAC9CpX,EAAAA,EAAAA,GAACgO,EAAAA,IAAG,CACFzL,YAAa,qDAAqDulB,IAClEhoB,IAAGpC,GAEDqC,UAGFF,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ6C,WAAY,SAAUb,IAAKjD,EAAMqB,QAAQG,IAAI,IAACb,SAAA,CACxE8nB,GAAkBC,IACnB9nB,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAAArD,SAAEqX,QAJf0Q,MAQL,EC3CwE,IAAApqB,GAAA,CAAAC,KAAA,UAAAC,OAAA,sCAAAC,GAAA,CAAAF,KAAA,SAAAC,OAAA,iBAAAE,GAAA,CAAAH,KAAA,UAAAC,OAAA,sCAG3E,MAAMwqB,GAAqBA,EAChCjD,YACA8C,gBAKA,MAAM,MAAE7oB,IAAUC,EAAAA,EAAAA,MACXgS,EAAUC,IAAe3S,EAAAA,EAAAA,WAAS,GAEzC,OACEkB,EAAAA,EAAAA,IAAA,OAAKC,IAAGpC,GAA+CqC,SAAA,EACrDF,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQgC,IAAKjD,EAAMqB,QAAQG,GAAIsC,WAAY,UAAU,IAACnD,SAAA,EACzEC,EAAAA,EAAAA,GAACwD,EAAAA,EAAM,CACLjB,YAAY,yDACZzC,IAAGjC,GACHsD,KAAK,QACLsC,KAAM4N,GAAWrR,EAAAA,EAAAA,GAAC4D,EAAAA,gBAAe,KAAM5D,EAAAA,EAAAA,GAACiS,EAAAA,EAAgB,IACxDtO,QAASA,IAAM2N,GAAaD,MAE9BrR,EAAAA,EAAAA,GAACklB,GAAsB,CAACC,UAAWA,KACnCnlB,EAAAA,EAAAA,GAACgoB,GAA8B,CAACC,UAAWA,OAE5C5W,IACCrR,EAAAA,EAAAA,GAAA,OACEF,IAAGhC,GAGDiC,SAEDkoB,EAAUtiB,KAAKrI,IAEM,KAAZ,OAARA,QAAQ,IAARA,OAAQ,EAARA,EAAU+qB,OAAkB,MAAOroB,EAAAA,EAAAA,GAAC4nB,GAAY,CAACtqB,SAAUA,GAAeA,EAASwkB,qBAIrF,ECtCgD,IAAApkB,GAAA,CAAAC,KAAA,UAAAC,OAAA,2DAAAC,GAAA,CAAAF,KAAA,SAAAC,OAAA,iBAGnD,MAAM0qB,GAAgBA,EAC3B3qB,OACA4qB,YACAhK,UACAiK,mBAOA,MAAM,MAAEppB,IAAUC,EAAAA,EAAAA,KACZopB,E3BLiC9qB,KACvC,MAAM+qB,EAAQ/qB,EAAK+qB,MAAM,KACzB,OAAqB,IAAjBA,EAAMjjB,OACD9H,EACmB,IAAjB+qB,EAAMjjB,OACRijB,EAAM,GAERA,EAAMld,MAAM,GAAGmd,KAAK,IAAI,E2BFXC,CAAyBjrB,IACtCkrB,EAAgBC,IAAqBnqB,EAAAA,EAAAA,WAAS,GAC/CoqB,EAAW1a,OAAOC,OAAOia,GAC5BS,OACAC,MAAM3rB,KAAcwK,EAAAA,EAAAA,OAAMxK,EAASA,SAASuiB,SAE/C,OACEhgB,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfgQ,aAAc/S,EAAMqB,QAAQC,GAC5B2M,OAAQ,aAAajO,EAAMiM,OAAOgC,SAClCH,aAAc9N,EAAM+N,QAAQiD,eAC5B7C,QAASnO,EAAMqB,QAAQC,GAAKtB,EAAMqB,QAAQG,GAC1CuU,WAAY/V,EAAMqB,QAAQC,GAC1B2B,IAAKjD,EAAMqB,QAAQC,IACpB,IAACX,SAAA,EAEFF,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,MACfe,WAAY,SACZd,eAAgB,gBAChBC,IAAKjD,EAAMqB,QAAQC,IACpB,IAACX,SAAA,EAEFF,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ6C,WAAY,SAAUb,IAAKjD,EAAMqB,QAAQC,GAAIJ,KAAM,EAAG+U,SAAU,GAAG,IAACtV,SAAA,EAC/FC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACyN,MAAI,EAAC/Q,IAAGpC,GAAuEqC,SAC7F0oB,IAEFM,IAAY/oB,EAAAA,EAAAA,GAACqlB,EAAAA,EAAU,CAACvlB,IAAGjC,GAAqB6P,MAAM,eAEzD1N,EAAAA,EAAAA,GAACsU,GAAAA,EAAO,CAACC,QAAQ,mBAAmBhS,YAAY,4DAA2DxC,UACzGC,EAAAA,EAAAA,GAACwD,EAAAA,EAAM,CACLjB,YAAY,2CACZzC,KAAGM,EAAAA,EAAAA,IAAE,CAAEkV,WAAY,EAAGrS,aAAc7D,EAAMqB,QAAQG,IAAI,IACtDO,KAAK,QACLsC,MAAMzD,EAAAA,EAAAA,GAAC8gB,EAAAA,SAAQ,IACfnd,QAASA,IAAMmlB,GAAkB,UAItCza,OAAOoB,QAAQ8Y,GAAW5iB,KAAI,EAAEwf,EAAW8C,MAC1CjoB,EAAAA,EAAAA,GAACooB,GAAkB,CAACjD,UAAWA,EAAW8C,UAAWA,GAAgB9C,KAEtE0D,IACC7oB,EAAAA,EAAAA,GAACoe,GAAoB,CACnBC,eAAgB1gB,EAChB2gB,OAAQkK,EACRjK,QAASA,EACTjN,YAAawX,MAGb,ECjCR,IAAAprB,GAAA,CAAAC,KAAA,SAAAC,OAAA,iEAEK,MAAMsrB,GAAkBA,EAC7BthB,cACA2W,UACAiK,mBAMA,MAAM,MAAEppB,IAAUC,EAAAA,EAAAA,MACZ,2BAAEuH,GAA+BE,KAChCmhB,EAAWkB,IAAgB7hB,EAAAA,EAAAA,UAChC,KAAM8hB,EAAAA,EAAAA,WAAUxhB,GAAcvK,GAAe,aAAcA,KAC3D,CAACuK,IAEGyhB,GAAmB/hB,EAAAA,EAAAA,UAAQ,IA5CX2gB,KACtB,MAAMqB,EAAsD,CAAC,EAyB7D,OAxBArB,EAAU3jB,SAAShH,IACjB,IAAuB,IAAnBA,EAAS+qB,MACX,OAGF,IAAI9qB,EAAQ,KACoB,KAA5BD,EAASA,SAASC,QACpBA,EAAQwO,KAAK2D,UAAUpS,EAASA,SAASC,QAG3C,MAAM,gBAAE4iB,GAAoB7iB,EACvBgsB,EAAWnJ,KACdmJ,EAAWnJ,GAAmB,CAAC,GAGjC,MAAMoJ,EAAQD,EAAWnJ,IACpBrY,EAAAA,EAAAA,OAAMvK,KACJgsB,EAAMhsB,KACTgsB,EAAMhsB,GAAS,IAEjBgsB,EAAMhsB,GAAO8G,KAAK/G,GACpB,IAGK+Q,OAAOoB,QAAQ6Z,GAAYE,UAAS,EAAEC,IAAYC,KAAeD,EAASE,cAAcD,IAAW,EAkBnEE,CAAe3B,IAAY,CAACA,IAC7D4B,EAAqBV,EAAaK,UAAS,CAACxD,EAAM8D,IACtD9D,EAAK7F,gBAAgBwJ,cAAcG,EAAM3J,mBAG3C,OACEtgB,EAAAA,EAAAA,IAAA,OACE,cAAY,mBACZC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfoL,QAASnO,EAAMqB,QAAQC,GACvByU,WAAY/V,EAAMqB,QAAQG,GAC1BgU,OAAQ,OACRsR,WAAY,aAAa9mB,EAAMiM,OAAOgC,SACtC8F,UAAW,SACXkC,SAAU6F,GACVlc,MAAO,OACP+V,UAAW,cACZ,IAAChV,SAAA,EAEFF,EAAAA,EAAAA,IAAA,OAAKC,IAAGpC,GAA6EqC,SAAA,EACnFC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACtD,KAAGM,EAAAA,EAAAA,IAAE,CAAE+R,aAAc/S,EAAMqB,QAAQC,IAAI,IAAEmQ,MAAI,EAAA9Q,UAC5DC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,kBAElC5I,IACC5G,EAAAA,EAAAA,GAACsU,GAAAA,EAAO,CACN/R,YAAY,6DACZgS,SACEvU,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,qBAGlBzP,UAEDC,EAAAA,EAAAA,GAACwD,EAAAA,EAAM,CACL,cAAY,gCACZjB,YAAY,qDACZpB,KAAK,QACLsC,MAAMzD,EAAAA,EAAAA,GAAC+pB,EAAAA,EAAS,IAChBpmB,QAASA,IAAMiD,GAA2B,UAKjDyiB,EAAiB1jB,KAAI,EAAEhI,EAAM4qB,MAC5BvoB,EAAAA,EAAAA,GAACsoB,GAAa,CAAY3qB,KAAMA,EAAM4qB,UAAWA,EAAWhK,QAASA,EAASiK,aAAcA,GAAxE7qB,KAErBksB,EAAmBpkB,OAAS,IAC3B5F,EAAAA,EAAAA,IAAA+Q,EAAAA,GAAA,CAAA7Q,SAAA,EACEC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACsK,MAAM,YAAY5N,KAAGM,EAAAA,EAAAA,IAAE,CAAE+R,aAAc/S,EAAMqB,QAAQC,IAAI,IAACX,UACzEC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,oBAInBxP,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,SAAUE,IAAKjD,EAAMqB,QAAQC,GAAIyR,aAAc/S,EAAMqB,QAAQC,IAAI,IAACX,SAExG8pB,EAAmBlkB,KAAKnI,IACvBwC,EAAAA,EAAAA,GAAC0kB,GAAe,CAAClnB,YAAaA,GAAkBA,EAAYskB,uBAKpE9hB,EAAAA,EAAAA,GAAC4gB,GAAsB,CACrBlW,OACE1K,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,uBAInB8O,OAAQkK,EACRjK,QAASA,MAEP,EC/GV,SAASyL,IAAoC,WAC3Cnb,EAAU,aACVnN,EAAY,YACZ8K,EAAW,UACXjG,EAAS,aACTC,IAQA,MAAM,MAAEpH,IAAUC,EAAAA,EAAAA,MACXpB,EAAWC,IAAgBS,EAAAA,EAAAA,UAAS,KACrCsrB,EAAqC,CAAE3pB,KAAM,EAAG4O,WAAY9P,EAAMqB,QAAQ0O,GAAIgE,UAAW,SACzF,wBAAExM,EAAuB,uBAAEE,GAA2BC,IAE5D,IAAIgB,EAAAA,EAAAA,OAAM+G,GACR,OAAO7O,EAAAA,EAAAA,GAACoP,EAAAA,MAAK,CAACC,YAAY,kDAG5B,MAAM6a,GAAiBjG,EAAAA,EAAAA,IAAsBpV,GACvCmV,EAAekG,EAAiB,EAChCriB,IAAsBC,EAAAA,EAAAA,OAAgB,OAAV+G,QAAU,IAAVA,OAAU,EAAVA,EAAY9G,WAAYD,EAAAA,EAAAA,OAAgB,OAAV+G,QAAU,IAAVA,OAAU,EAAVA,EAAY7G,SAEtEmiB,GACJtqB,EAAAA,EAAAA,IAACuqB,EAAAA,KAAKvc,KAAI,CACRtL,YAAY,8CACZzC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACf7B,KAAM,EACN4lB,WAAY,aAAa9mB,EAAMiM,OAAOgC,SACtCgI,SAAU,IACV7U,SAAU,YACX,IACDjD,MAAOgJ,EACP6H,cAAgBic,GAAgB7jB,EAAa6jB,GAA8BtqB,SAAA,EAE3EC,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHI,SAAU,WACVspB,MAAOnjB,EAA0BvH,EAAMqB,QAAQG,GAAKxB,EAAMqB,QAAQ0O,GAClE8W,IAAK7mB,EAAMqB,QAAQG,IACpB,IAACb,UAEFC,EAAAA,EAAAA,GAACwX,GAAoB,OAEvB3X,EAAAA,EAAAA,IAACuqB,EAAAA,KAAKE,KAAI,CACRxqB,KAAGM,EAAAA,EAAAA,IAAE,CACHmN,QAAS,EACTU,YAAa7O,EAAMqB,QAAQ0O,GAC3B4X,aAAc3nB,EAAMqB,QAAQC,GAC5BqU,UAAW,aACX/V,MAAO,QACR,IAACe,SAAA,CAED8O,EAAWtE,eACVvK,EAAAA,EAAAA,GAACoqB,EAAAA,KAAKtc,QAAO,CAACvQ,MAAM,OAAMwC,UACxBC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,WAGpC3H,IACC7H,EAAAA,EAAAA,GAACoqB,EAAAA,KAAKtc,QAAO,CAACvQ,MAAM,UAASwC,UAC3BC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,wBAOrBxP,EAAAA,EAAAA,GAACoqB,EAAAA,KAAKtc,QAAO,CAACvQ,MAAM,aAAYwC,SAAC,gBACjCF,EAAAA,EAAAA,IAACuqB,EAAAA,KAAKtc,QAAO,CAACvQ,MAAM,SAAQwC,SAAA,CAAC,UACnBikB,IAAgBhkB,EAAAA,EAAAA,GAACmX,GAAuB,CAACC,MAAO8S,UAG3Drb,EAAWtE,eACVvK,EAAAA,EAAAA,GAACoqB,EAAAA,KAAKlc,QAAO,CAACpO,IAAKmqB,EAAc1sB,MAAM,OAAMwC,UAC3CC,EAAAA,EAAAA,GAACiT,GAAyB,CAAC1I,aAAcsE,EAAWtE,aAAc2I,UAAWrE,EAAWqE,eAG5FlT,EAAAA,EAAAA,GAACoqB,EAAAA,KAAKlc,QAAO,CAACpO,IAAKmqB,EAAc1sB,MAAM,UAASwC,UAC9CC,EAAAA,EAAAA,GAAC0W,GAA4B,CAAC7H,WAAYA,EAAYnN,aAAcA,EAAc8K,YAAaA,OAEjGxM,EAAAA,EAAAA,GAACoqB,EAAAA,KAAKlc,QAAO,CAACpO,IAAKmqB,EAAc1sB,MAAM,aAAYwC,UACjDC,EAAAA,EAAAA,GAAC4O,EAA+B,CAC9BC,WAAYA,EACZnN,aAAcA,EACd8K,YAAaA,OAGjBxM,EAAAA,EAAAA,GAACoqB,EAAAA,KAAKlc,QAAO,CAACpO,IAAKmqB,EAAc1sB,MAAM,SAAQwC,UAC7CC,EAAAA,EAAAA,GAAC4W,GAA2B,CAAC/H,WAAYA,EAAYnN,aAAcA,EAAc8K,YAAaA,SAKpG,OAAO3F,GAA0BF,GAC/B3G,EAAAA,EAAAA,GAACuqB,EAA+B,CAC9BvsB,aAvGsB,GAwGtBC,UAAWA,EACXC,aAAcA,EACdC,UAAWgsB,EACX/rB,aA9GgC,IA+GhCC,YACE2B,EAAAA,EAAAA,GAACkpB,GAAe,CACdthB,YAAaiH,EAAWjH,YACxB2W,QAAS1P,EAAW0P,QACpBiK,aAAc3Z,EAAW5E,SAAW6R,OAAOjN,EAAWhK,UAAOwB,IAGjE/H,cAAe4c,KAGjBiP,CAEJ,CAEO,MAAMK,GAAkCC,EAAAA,KAAWT,IClI7CU,GAA2BA,EACtC9hB,kBACAC,yBAKA,MAAM,MAAEzJ,IAAUC,EAAAA,EAAAA,KAElB,OACEQ,EAAAA,EAAAA,IAAC8qB,EAAAA,GAAQ9c,KAAI,CAACtL,YAAY,2DAA0DxC,SAAA,EAClFC,EAAAA,EAAAA,GAAC2qB,EAAAA,GAAQ7c,QAAO,CAACC,SAAO,EAAAhO,UACtBC,EAAAA,EAAAA,GAACwD,EAAAA,EAAM,CACLjB,YAAY,0DACZkB,MAAMzD,EAAAA,EAAAA,GAAC4qB,EAAAA,WAAU,IACjBzpB,KAAK,QAAOpB,UAEZC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,gBAGrCxP,EAAAA,EAAAA,GAAC2qB,EAAAA,GAAQzc,QAAO,CAAC2c,MAAM,QAAO9qB,UAC5BF,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,SAAUE,IAAKjD,EAAMqB,QAAQC,GAAIuU,cAAe7V,EAAMqB,QAAQG,IAAI,IAACb,SAAA,EAC7GC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACyN,MAAI,EAAA9Q,UACnBC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,cAInBxP,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACsK,MAAM,YAAW3N,UAChCC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,gBAIlBnB,OAAOoB,QAAQ7G,EAAgBE,sBAAsBnD,KAAI,EAAEsD,EAAU6hB,MACpE,MAAMrnB,GAAOzD,EAAAA,EAAAA,GAACskB,GAAAA,EAAsB,CAACtb,MAAMub,EAAAA,EAAAA,IAAmBtb,KAC9D,OACEpJ,EAAAA,EAAAA,IAACkrB,EAAAA,SAAQ,CAEPxoB,YAAa,kDAAkD0G,MAAa6hB,IAC5Eta,MAAO,CAAExR,MAAO,QAChBgsB,UAAWF,EACXnoB,SAAUA,IACRkG,EAAmB,IACdD,EACHE,qBAAsB,IACjBF,EAAgBE,qBACnB,CAACG,IAAY6hB,KAGlB/qB,SAAA,CAEA0D,GACDzD,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACtD,KAAGM,EAAAA,EAAAA,IAAE,CAAEO,WAAYvB,EAAMqB,QAAQG,IAAI,IAACb,UACpDkrB,EAAAA,EAAAA,IAA0BhiB,OAhBxBA,EAkBI,KAGfjJ,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACsK,MAAM,YAAW3N,UAChCC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,gBAInB3P,EAAAA,EAAAA,IAACkrB,EAAAA,SAAQ,CACPxoB,YAAa,oDAAoDqG,EAAgBM,cACjFsH,MAAO,CAAExR,MAAO,QAChBgsB,UAAWpiB,EAAgBM,YAC3BvG,SAAUA,IACRkG,EAAmB,IACdD,EACHM,aAAcN,EAAgBM,cAEjCnJ,SAAA,EAEDC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACtD,KAAGM,EAAAA,EAAAA,IAAE,CAAE6C,YAAa7D,EAAMqB,QAAQG,IAAI,IAACb,UACtDC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,6BAInBxP,EAAAA,EAAAA,GAACkrB,EAAAA,YAAW,CACV3oB,YAAY,mDACZgS,SACEvU,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,gFAMvB3P,EAAAA,EAAAA,IAACkrB,EAAAA,SAAQ,CACPxoB,YAAa,oDAAoDqG,EAAgBO,iBACjFqH,MAAO,CAAExR,MAAO,QAChBgsB,UAAWpiB,EAAgBO,eAC3BxG,SAAUA,IACRkG,EAAmB,IACdD,EACHO,gBAAiBP,EAAgBO,iBAEpCpJ,SAAA,EAEDC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACtD,KAAGM,EAAAA,EAAAA,IAAE,CAAE6C,YAAa7D,EAAMqB,QAAQG,IAAI,IAACb,UACtDC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,uBAInBxP,EAAAA,EAAAA,GAACkrB,EAAAA,YAAW,CACV3oB,YAAY,sDACZgS,SACEvU,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,mFAQd,EC1HN2b,GAAqBA,EAChCC,mBACAC,sBACAziB,kBACAC,yBAOA,MAAM,MAAEzJ,IAAUC,EAAAA,EAAAA,KAElB,OACEQ,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHmN,QAAS,GAAGnO,EAAMqB,QAAQG,QAAQxB,EAAMqB,QAAQC,OAChDuU,cAAe,EACf3E,aAAc,aAAalR,EAAMiM,OAAOgC,SACxC0H,UAAW,aACX9G,YAAa7O,EAAMqB,QAAQC,GAC3BwC,WAAY,SACZ7C,QAAS,OACT+B,eAAgB,iBACjB,IAACrC,SAAA,EAEFC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACyN,MAAI,EAAA9Q,UACnBC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,uBAInB3P,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,MAAOE,IAAKjD,EAAMqB,QAAQC,IAAI,IAACX,SAAA,EACzEC,EAAAA,EAAAA,GAAC0qB,GAAwB,CAAC9hB,gBAAiBA,EAAiBC,mBAAoBA,KAChFhJ,EAAAA,EAAAA,IAACgW,EAAAA,sBAAqB,CACpBlY,KAAK,aACLJ,MAAO6tB,EACPzoB,SAAWmT,IACTuV,EAAoBvV,EAAMlT,OAAOrF,MAAM,EAEzC4D,KAAK,QACLoB,YAAY,mDAAkDxC,SAAA,EAE9DC,EAAAA,EAAAA,GAAC+V,EAAAA,uBAAsB,CACrB,cAAY,4BACZtS,MACEzD,EAAAA,EAAAA,GAACsU,GAAAA,EAAO,CACN/R,YAAY,yDACZgS,SACEvU,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,mBAGlBzP,UAEDC,EAAAA,EAAAA,GAACsrB,EAAAA,eAAc,MAGnB/tB,OAAO,KAETyC,EAAAA,EAAAA,GAAC+V,EAAAA,uBAAsB,CACrB,cAAY,4BACZtS,MACEzD,EAAAA,EAAAA,GAACsU,GAAAA,EAAO,CACN/R,YAAY,yDACZgS,SACEvU,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,4BAGlBzP,UAEDC,EAAAA,EAAAA,GAACurB,EAAAA,0BAAyB,MAG9BhuB,OAAK,YAIP,ECxFJiuB,GAAsBA,EAAGC,aAC7B,MAAM,MAAErsB,IAAUC,EAAAA,EAAAA,KACZqsB,EAAcD,EAASrsB,EAAMiM,OAAOma,QAAUpmB,EAAMiM,OAAOgC,OAEjE,OACErN,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHI,SAAU,WACVwlB,KAAM,OACN2F,OAAQ,EAIR3sB,MAAO4sB,EACPhX,OAAQxV,EAAMqB,QAAQ0O,GACtB4F,UAAW,aACX1E,qBAAsBjR,EAAM+N,QAAQiD,eACpC4C,UAAW,aAAa0Y,IACxBG,YAAa,aAAaH,IAC1B1qB,OAAQ8C,GACT,KACD,EAIAgoB,GAAoBA,EAAGL,aAC3B,MAAM,MAAErsB,IAAUC,EAAAA,EAAAA,KACZqsB,EAAcD,EAASrsB,EAAMiM,OAAOma,QAAUpmB,EAAMiM,OAAOgC,OAEjE,OACErN,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHI,SAAU,WACVwlB,KAAM,MACNC,IAAK,EACLjnB,MAAO4sB,EACPhX,OAAQxV,EAAMqB,QAAQ0O,GACtB4F,UAAW,aACXjC,uBAAwB1T,EAAM+N,QAAQiD,eACtCE,aAAc,aAAaob,IAC3BxF,WAAY,aAAawF,IACzB1qB,OAAQyqB,EAAS3nB,EAA4BA,GAC9C,KACD,EAIAioB,GAAoBA,EAAGN,aAC3B,MAAM,MAAErsB,IAAUC,EAAAA,EAAAA,KACZqsB,EAAcD,EAASrsB,EAAMiM,OAAOma,QAAUpmB,EAAMiM,OAAOgC,OAEjE,OACErN,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHI,SAAU,WACVxB,MAAO4sB,EACP5F,KAAM,MACNpR,OvDrDuB,GuDsDvBsR,WAAY,aAAawF,IACzB3W,UAAW,aACX/T,OAAQyqB,EAAS3nB,EAA4BA,GAC9C,KACD,EAQOkoB,GAA4BA,EACvCC,eACAC,kBACAC,gBACAC,cACAC,gBAW6B,IAAzBF,EAAc1mB,QAEdzF,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHpB,MAAO,EACP4V,OvDvFqB,GuDwFrBG,UAAW,aACXvU,SAAU,YACX,IAACT,SAEDqsB,IAAepsB,EAAAA,EAAAA,GAACwrB,GAAmB,CAACC,OAAQS,IAAoBD,OAMrEjsB,EAAAA,EAAAA,GAAA4Q,EAAAA,GAAA,CAAA7Q,SACGosB,EAAcxmB,KAAI,EAAG2mB,eAAcC,YAAY/V,KAI9C3W,EAAAA,EAAAA,IAAA,OAEEC,KAAGM,EAAAA,EAAAA,IAAE,CACHpB,MvD3GqB,GuD4GrB4V,OvD3GmB,GuD4GnBG,UAAW,aACXvU,SAAU,YACX,IAACT,SAAA,CAEDusB,IAECtsB,EAAAA,EAAAA,GAAC+rB,GAAiB,CAACN,OAAQc,IAE5B/V,IAAQ2V,EAAc1mB,OAAS,IAG9B5F,EAAAA,EAAAA,IAAA+Q,EAAAA,GAAA,CAAA7Q,SAAA,EACEC,EAAAA,EAAAA,GAAC8rB,GAAiB,CAACL,OAAQS,IAC1BE,GAAeC,IAAcrsB,EAAAA,EAAAA,GAACwrB,GAAmB,CAACC,OAAQS,IAAoBD,SAjB9EzV,OCxGoD,IAAA9Y,GAAA,CAAAC,KAAA,UAAAC,OAAA,sCAE5D,MAAM4uB,GAA0BA,EACrC5iB,OACA7J,eAIK,IAAD0sB,EACJ,MAAM,MAAErtB,IAAUC,EAAAA,EAAAA,KACZqtB,GAAWnI,EAAAA,EAAAA,IAA4B,QAAVkI,EAAC7iB,EAAKZ,YAAI,IAAAyjB,EAAAA,EAAIjI,EAAAA,GAAcC,SACzDkI,EAAmBvtB,EAAMwtB,WAAaxtB,EAAMiM,OAAOwhB,QAAUztB,EAAMiM,OAAOyhB,QAC1EC,EAAqB3tB,EAAMwtB,WAAaxtB,EAAMiM,OAAO2hB,QAAU5tB,EAAMiM,OAAO4hB,QAElF,OACEjtB,EAAAA,EAAAA,GAACsU,GAAAA,EAAO,CACN/R,YAAY,yDACZ2qB,kBAAkB,EAClB3Y,SACE1U,EAAAA,EAAAA,IAAA,OACEC,IAAGpC,GAGDqC,SAAA,EAEFF,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,MACfE,IAAKjD,EAAMqB,QAAQG,GACnBsC,WAAY,SACZoK,SAAU,SACV6f,UAAW,aACZ,IAACptB,SAAA,EAEFC,EAAAA,EAAAA,GAACskB,GAAAA,EAAsB,CAACtb,KAAM0jB,EAAUU,aAAW,KACnDptB,EAAAA,EAAAA,GAAA,QAAMF,KAAGM,EAAAA,EAAAA,IAAE,CAAEsN,MAAOif,GAAkB,IAAC5sB,SAAE6J,EAAKc,SAC9C1K,EAAAA,EAAAA,GAAA,QACEF,KAAGM,EAAAA,EAAAA,IAAE,CAAEO,WAAYvB,EAAMqB,QAAQG,GAAI8M,MAAOqf,EAAoB9W,SAAU7W,EAAMyV,WAAWsR,YAAY,IAACpmB,SAEvGgF,EAAkB6E,EAAKyjB,IAAMzjB,EAAK0jB,aAGvCztB,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,MAAOuL,MAAOif,GAAkB,IAAC5sB,SAAA,EAC3EC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,WAA6D,IAC7FzK,EAAkB6E,EAAK0jB,OACvB,OACDttB,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SAACC,eAAe,SAAyD,IACzFzK,EAAkB6E,EAAKyjB,WAI9BE,KAAK,QACLtuB,SAAU,IAAIc,SAEbA,GACO,ECjDyE,IAAArC,GAAA,CAAAC,KAAA,UAAAC,OAAA,6EAAAC,GAAA,CAAAF,KAAA,SAAAC,OAAA,oEAEhF,MAAM4vB,GAAmBA,EAC9BroB,OACAsoB,cACAtjB,eACA1B,kBACAilB,iBACAC,eACAC,WACAzB,oBAaK,IAAD9mB,EAAAG,EACJ,MAAM6L,EAAWlH,EAAamd,IAAIniB,EAAKN,MACjC,MAAEzF,IAAUC,EAAAA,EAAAA,KACZ+sB,GAA4B,QAAd/mB,EAACF,EAAKpF,gBAAQ,IAAAsF,EAAAA,EAAI,IAAII,OAAS,GAC7C,2BAAEmB,GAA+BE,IAEjCylB,EAAWkB,IAAgBtoB,EAAKN,IAChCgpB,EAAmB3oB,EAAoBC,EAAM2W,OAAO2R,IAEpDvB,EAAkB2B,GAAoB,EAEtC7J,GAAeC,EAAAA,EAAAA,IAAsB9e,GAAQ,EAE7CpE,EAAkBwrB,EAAWntB,EAAMiM,OAAOyiB,6BAA+B,cAE/E,OACEjuB,EAAAA,EAAAA,IAAA+Q,EAAAA,GAAA,CAAA7Q,SAAA,EACEC,EAAAA,EAAAA,GAACwsB,GAAuB,CAAC5iB,KAAMzE,EAAKpF,UAClCC,EAAAA,EAAAA,GAAA,OACE,cAAa,sBAAsBmF,EAAKN,MACxC/E,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfnD,MAAO,OACP8B,OAAQ,UACRiU,UAAW,aACXhU,kBACA,SAAU,CACRA,gBAAiB3B,EAAMiM,OAAOyiB,8BAEhC,UAAW,CACT/sB,gBAAiB3B,EAAMiM,OAAO0iB,+BAEjC,IACDpqB,QAASA,KACC,OAARiqB,QAAQ,IAARA,GAAAA,EAAWzoB,EAAK,EAChBpF,UAEFC,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,MACfe,WAAY,SAEZqK,QAAS,OAAOnO,EAAMqB,QAAQC,OAC9B0B,eAAgB,gBAChBkL,SAAU,SACVhN,KAAM,GACP,IAACP,UAEFF,EAAAA,EAAAA,IAAA,OAAKC,IAAGpC,GAA+FqC,SAAA,CACpGqsB,GACCpsB,EAAAA,EAAAA,GAACwD,EAAAA,EAAM,CACLrC,KAAK,QACL,cAAa,wBAAwBgE,EAAKN,MAC1C/E,KAAGM,EAAAA,EAAAA,IAAE,CAAEkV,WAAY,EAAGrS,YAAa7D,EAAMqB,QAAQG,IAAI,IACrD6C,KAAM4N,GAAWrR,EAAAA,EAAAA,GAAC4D,EAAAA,gBAAe,KAAM5D,EAAAA,EAAAA,GAACiS,EAAAA,EAAgB,IACxDtO,QAAUmS,IAERA,EAAMuE,kBACN,MAAM2T,EAAkB,IAAIjkB,IAAII,GAC5BkH,EACF2c,EAAgBC,OAAO9oB,EAAKN,KAE5BmpB,EAAgB9jB,IAAI/E,EAAKN,KAE3B4D,EAAgBulB,EAAgB,EAElCzrB,YAAY,6CAGdvC,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEpB,MAAO,GAAIiE,YAAa7D,EAAMqB,QAAQG,IAAI,OAExDZ,EAAAA,EAAAA,GAACgsB,GAAyB,CACxBC,aAAcM,EACdL,gBAAiBA,EACjBC,cAAeA,EACfC,YAAaA,EACbC,WAAYhb,KAEdrR,EAAAA,EAAAA,GAAA,QACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHkV,WAAY,EACZrS,YAAa7D,EAAMqB,QAAQG,GAC3BsM,aAAc9N,EAAM+N,QAAQC,eAC5BC,OAAQ,aACNwgB,GAAoB,EAAIzuB,EAAMiM,OAAOma,QAAUpmB,EAAMiM,OAAOkF,sBAE9DvP,OAAQ8C,GACT,IAAC/D,SAEDoF,EAAK1B,QAERzD,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CACdsK,MAAOsW,EAAe,QAAU,UAChClkB,IAAGjC,GAKDkC,SAEDoF,EAAKuF,QAEPvF,EAAKyC,YAAYnC,OAAS,IACzB5F,EAAAA,EAAAA,IAACmO,EAAAA,IAAG,CACFN,MAAM,SACN,cAAa,kBAAkBvI,EAAKN,MACpCtC,YAAY,+CACZzC,KAAGM,EAAAA,EAAAA,IAAE,CACH8tB,OAAQ,EACRhhB,aAAc9N,EAAM+N,QAAQC,gBAC7B,IACDzJ,QAASA,IAAgC,OAA1BiD,QAA0B,IAA1BA,OAA0B,EAA1BA,GAA6B,GAAM7G,SAAA,EAElDC,EAAAA,EAAAA,GAAC0X,EAAAA,UAAS,KACV1X,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACtD,KAAGM,EAAAA,EAAAA,IAAE,CAAEO,WAAYvB,EAAMqB,QAAQG,IAAI,IAACb,SAAEoF,EAAKyC,YAAYnC,qBAOrF4L,IACc,QADN7L,EACPL,EAAKpF,gBAAQ,IAAAyF,OAAA,EAAbA,EAAeG,KAAI,CAACb,EAAO0R,KAAG,IAAA2X,EAAAC,EAAA,OAC5BpuB,EAAAA,EAAAA,GAACwtB,GAAgB,CAEfroB,KAAML,EACNqF,aAAcA,EACd1B,gBAAiBA,EACjBglB,YAAaA,EACbC,eAAgBA,EAChBC,aAAcA,EACdC,SAAUA,EACVzB,cAAeA,EAAckC,OAAO,CAGlC/B,aAAc9V,GAA4B,QAAtB2X,EAAc,QAAdC,EAACjpB,EAAKpF,gBAAQ,IAAAquB,OAAA,EAAbA,EAAe3oB,cAAM,IAAA0oB,EAAAA,EAAI,GAAK,EAGnD5B,SAAU/V,EAAMqX,KAdb/oB,EAAMD,IAgBX,OAEL,ECjL8D,IAAAnH,GAAA,CAAAC,KAAA,UAAAC,OAAA,oEAE9D,MAAM0wB,GAAwBA,EACnCnpB,OACAsoB,cACAc,aACAvvB,QACA4uB,WACAzjB,eACA1B,sBASK,IAADpD,EACJ,MAAM,MAAEjG,IAAUC,EAAAA,EAAAA,KACZmvB,GAAgB3vB,EAAAA,EAAAA,QAAwB,MACxC4vB,GAAoB5vB,EAAAA,EAAAA,QAAwB,MAE5CkC,EADW0sB,IAAgBtoB,EAAKN,IACHzF,EAAMiM,OAAOyiB,6BAA+B,cACzE1B,GAA4B,QAAd/mB,EAACF,EAAKpF,gBAAQ,IAAAsF,EAAAA,EAAI,IAAII,OAAS,EAC7C4L,EAAWlH,EAAamd,IAAIniB,EAAKN,KAkBvC,OAhBAlF,EAAAA,EAAAA,kBAAgB,KACd,IAAK6uB,EAAc/uB,UAAYgvB,EAAkBhvB,QAC/C,OAGgBmG,KAAKC,IAAI2oB,EAAc/uB,QAAQivB,YAAaD,EAAkBhvB,QAAQivB,aAExE1vB,EAAQI,EAAMqB,QAAQC,IACpC8tB,EAAc/uB,QAAQ+Q,MAAMnQ,QAAU,SACtCouB,EAAkBhvB,QAAQ+Q,MAAMnQ,QAAU,SAE1CmuB,EAAc/uB,QAAQ+Q,MAAMnQ,QAAU,OACtCouB,EAAkBhvB,QAAQ+Q,MAAMnQ,QAAU,SAC5C,GACC,CAACjB,EAAMqB,QAAQC,GAAI1B,KAGpBgB,EAAAA,EAAAA,GAACwsB,GAAuB,CAAC5iB,KAAMzE,EAAKpF,UAClCF,EAAAA,EAAAA,IAAA,OAEEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,MACfrB,OAAQ,UACRiU,UAAW,aACX9G,YAAa7O,EAAMqB,QAAQG,GAC3BmmB,aAAc3nB,EAAMqB,QAAQC,GAC5ByU,WAAY/V,EAAMqB,QAAQG,GAC1BqU,cAAe7V,EAAMqB,QAAQG,GAC7BG,gBAAiBA,EACjBmC,WAAY,SACZ,SAAU,CACRnC,gBAAiB3B,EAAMiM,OAAOyiB,8BAEhC,UAAW,CACT/sB,gBAAiB3B,EAAMiM,OAAO0iB,8BAEhC/sB,OAAQ8C,GACT,IACDH,QAASA,IAAc,OAARiqB,QAAQ,IAARA,OAAQ,EAARA,EAAWzoB,GAAMpF,SAAA,CAE/BqsB,GACCpsB,EAAAA,EAAAA,GAACwD,EAAAA,EAAM,CACLrC,KAAK,QACL,cAAa,iCAAiCgE,EAAKN,MACnD/E,KAAGM,EAAAA,EAAAA,IAAE,CAAEkV,WAAY,EAAGrS,YAAa7D,EAAMqB,QAAQG,IAAI,IACrD6C,KAAM4N,GAAWrR,EAAAA,EAAAA,GAAC4D,EAAAA,gBAAe,KAAM5D,EAAAA,EAAAA,GAACiS,EAAAA,EAAgB,IACxDtO,QAAUmS,IAERA,EAAMuE,kBACN,MAAM2T,EAAkB,IAAIjkB,IAAII,GAC5BkH,EACF2c,EAAgBC,OAAO9oB,EAAKN,KAE5BmpB,EAAgB9jB,IAAI/E,EAAKN,KAE3B4D,EAAgBulB,EAAgB,EAElCzrB,YAAY,sDAGdvC,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEpB,MAAO,GAAIiE,YAAa7D,EAAMqB,QAAQG,IAAI,OAExDZ,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEpB,MAAOuvB,EAAYjZ,WAAY,GAAG,OAC9CtV,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHI,SAAU,WACVxB,QACA4V,OAAQxV,EAAMyV,WAAWC,eACzB/T,gBAAiB3B,EAAMiM,OAAOsjB,QAC9BzhB,aAAc9N,EAAM+N,QAAQC,eAC5BkI,WAAY,GACb,IAACvV,UAEFC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAAArD,UACdC,EAAAA,EAAAA,GAAA,QACEzB,IAAKiwB,EACL1uB,KAAGM,EAAAA,EAAAA,IAAE,CACHO,WAAYvB,EAAMqB,QAAQG,GAC1B8M,MAAOtO,EAAMiM,OAAOujB,MACpBvuB,QAAS,QACV,IAACN,SAEDoF,EAAKuF,aAIZ7K,EAAAA,EAAAA,IAAA,OAAKC,IAAGpC,GAAkFqC,SAAA,EACxFC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAAArD,UACdC,EAAAA,EAAAA,GAAA,QACEzB,IAAKkwB,EACL3uB,KAAGM,EAAAA,EAAAA,IAAE,CACHO,WAAYvB,EAAMqB,QAAQG,GAC1B8M,MAAOtO,EAAMiM,OAAOwjB,aACrB,IAAC9uB,SAEDoF,EAAKuF,WAGV1K,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACtD,KAAGM,EAAAA,EAAAA,IAAE,CAAEO,WAAYvB,EAAMqB,QAAQG,IAAI,IAAE8M,MAAM,YAAW3N,SACtEgF,EAAkBI,EAAKkoB,IAAMloB,EAAKmoB,cAjFlCnoB,EAAKN,MAqFY,ECnF7B,IAAAnH,GAAA,CAAAC,KAAA,UAAAC,OAAA,8EAAAC,GAAA,CAAAF,KAAA,SAAAC,OAAA,qBAAAE,GAAA,CAAAH,KAAA,SAAAC,OAAA,4CAEM,MAAMkxB,GAAwBA,EACnC9qB,QACAypB,cACAG,WACAF,iBACAC,eACAxjB,eACA1B,sBASK,IAADsmB,EAAAvwB,EACJ,MAAM,MAAEY,IAAUC,EAAAA,EAAAA,KACZ2vB,GAAmBnwB,EAAAA,EAAAA,QAAuB,MAC1CowB,EAAsE,QAAtDF,EAA+C,QAA/CvwB,GAAGO,EAAAA,EAAAA,IAAkB,CAAER,IAAKywB,WAAmB,IAAAxwB,OAAA,EAA5CA,EAA8CQ,aAAK,IAAA+vB,EAAAA,EAAI,EAC1EG,GAAgB5nB,EAAAA,EAAAA,UACpB,IAhEJ,SAAuB0e,EAAc8D,EAAeqF,EAAoBC,EAAwB,IAC9F,MAAMC,EAAQvF,EAAQ9D,EACtB,GAAIqJ,GAAS,GAAKF,GAAc,EAAG,MAAO,GAE1C,MAAMG,EAAe1pB,KAAK4V,MAAM2T,EAAaC,GAC7C,GAAIE,EAAe,EAAG,MAAO,GAG7B,MAAMC,EAAcF,EAAQC,EAGtBE,EAAY5pB,KAAK6pB,IAAI,GAAI7pB,KAAK4V,MAAM5V,KAAK8pB,MAAMH,KAC/CI,EAAWJ,EAAcC,EAE/B,IAAII,EACeA,EAAfD,GAAY,EAAkB,EACzBA,GAAY,EAAkB,EAC9BA,GAAY,EAAkB,EACnB,GAEpB,MAAME,EAAeD,EAAeJ,EAK9BM,EAAgBhG,EAAQ,EAAI+F,EAI5BE,EAAkB,GAExB,IAAK,IAAIC,EAHSpqB,KAAKqqB,KAAKjK,EAAO6J,GAAgBA,EAGxBG,GAAQF,EAAeE,GAAQH,EACxDE,EAAM1rB,KAAK8Z,OAAO6R,EAAK/qB,QAAQ,MAGjC,OAAO8qB,CACT,CA4BUG,CAAcxC,EAAgBC,EAAcsB,IAClD,CAACtB,EAAcD,EAAgBuB,IAE3BjJ,EAAOpgB,KAAKuqB,OAAOjB,GAKnBpF,GAASoF,EAAcA,EAAczpB,OAAS,GAAKypB,EAAcA,EAAczpB,OAAS,IAAM,EAE9F2qB,EAASlB,EAAc1jB,MAAM,GAAI,GAEjC6kB,EAA4B9yB,GArCpC,SAAgBA,EAAeyoB,EAAc8D,EAAe9qB,GAC1D,OAASzB,EAAQyoB,IAAS8D,EAAQ9D,GAAShnB,CAC7C,CAmCsDsxB,CAAO/yB,EAAOyoB,EAAM8D,EAAOmF,GAE/E,OACEpvB,EAAAA,EAAAA,IAAA,OACEC,IAAGpC,GAKDqC,SAAA,EAGFC,EAAAA,EAAAA,GAAA,OACEzB,IAAKywB,EACLlvB,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACTrB,MAAO,OACPmD,cAAe,MACfyS,OAAQxV,EAAMyV,WAAWC,eACzB7G,YAlGuB,GAmGvB8Y,aAAc3nB,EAAMqB,QAAQumB,GAC5BjS,UAAW,aACXvU,SAAU,SACVylB,IAAK,EACLllB,gBAAiB3B,EAAMiM,OAAO0G,kBAC9B/Q,OAAQ8C,GACT,IAAC/D,UAEFC,EAAAA,EAAAA,GAAA,OACE,cAAY,mBACZF,IAAGjC,GAEDkC,SAEDqwB,EAAOzqB,KAAK4qB,IACXvwB,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CACdtD,KAAGM,EAAAA,EAAAA,IAAE,CACHI,SAAU,WACVgwB,UAAW,mBACXxK,KAAMqK,EAAyBE,GAC/BltB,WAAY,UACb,IAACtD,SAGDgF,EAAkBwrB,IAFdA,UAQbvwB,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHE,KAAM,EACNmwB,cAAe,OACfzvB,OAAQ8C,GACT,IAAC/D,UAEFC,EAAAA,EAAAA,GAAA,OACEF,IAAGhC,GAIDiC,SAEDqwB,EAAOzqB,KAAK4qB,IACXvwB,EAAAA,EAAAA,GAAA,OAEEF,KAAGM,EAAAA,EAAAA,IAAE,CACHI,SAAU,WACVwlB,KAAMqK,EAAyBE,GApJd,GAqJjB1E,YAAa,aAAazsB,EAAMiM,OAAOgC,SACvCuH,OAAQ,QACT,KANI2b,SAYZvsB,EAAM2B,KAAKR,IACV,MAAMopB,EAAa8B,EAAyBlrB,EAAKmoB,OAC3CtuB,EAAQqxB,EAAyBlrB,EAAKkoB,KAAOkB,EACnD,OACEvuB,EAAAA,EAAAA,GAACsuB,GAAqB,CAEpBb,YAAaA,EACbG,SAAUA,EACVzoB,KAAMA,EACNopB,WAAYA,EACZvvB,MAAOA,EACPmL,aAAcA,EACd1B,gBAAiBA,GAPZtD,EAAKN,IAQV,MAGF,EC7K6E,IAAAnH,GAAA,CAAAC,KAAA,UAAAC,OAAA,iGAAAC,GAAA,CAAAF,KAAA,UAAAC,OAAA,6DAAAE,GAAA,CAAAH,KAAA,UAAAC,OAAA,kDAAAwO,GAAA,CAAAzO,KAAA,SAAAC,OAAA,uCAEhF,MAAM8yB,GAAeA,EAC1BC,YACAvqB,eACAE,kBACAonB,iBACAC,eACAxjB,eACA1B,kBACAG,kBACAC,qBACA+J,gBAaA,MAAM,MAAExT,IAAUC,EAAAA,EAAAA,KAEZuxB,GAAcrxB,EAAAA,EAAAA,cACjB4F,IACgB,OAAfmB,QAAe,IAAfA,GAAAA,EAAkBnB,EAAK,GAEzB,CAEEmB,KAIIG,sBAAuB2kB,EAAkB1kB,yBAA0B2kB,GACzEvkB,IAEI+pB,GAAoBvpB,EAAAA,EAAAA,UACxB,I5Df4CwpB,EAC9C9sB,EACAmG,KAEA,MAAMlG,EAAyB,GACzBC,EAAoBC,IAKkB,IAAD4sB,EAJpC5sB,IAGLF,EAAkBI,KAAKF,GACnBgG,EAAamd,IAAInjB,EAAcU,OACX,QAAtBksB,EAAA5sB,EAAcpE,gBAAQ,IAAAgxB,GAAtBA,EAAwBzsB,QAAQJ,IAClC,EAIF,OADAF,EAAMM,QAAQJ,GACPD,CAAiB,E4DDhB6sB,CAAiCH,EAAWxmB,IAClD,CAACwmB,EAAWxmB,IAGR6mB,GAAc1pB,EAAAA,EAAAA,UAClB,SAAA8C,EAAA,OACEpK,EAAAA,EAAAA,GAAA,OACEF,IAAGpC,GAODqC,SAEDqrB,GACCprB,EAAAA,EAAAA,GAAC8uB,GAAqB,CACpB9qB,MAAO6sB,EACPpD,YAA8B,QAAnBrjB,EAAc,OAAZhE,QAAY,IAAZA,OAAY,EAAZA,EAAcvB,WAAG,IAAAuF,EAAAA,EAAI,GAClCwjB,SAAUgD,EACVlD,eAAgBA,EAChBC,aAAcA,EACdxjB,aAAcA,EACd1B,gBAAiBA,IAGnBkoB,EAAUhrB,KAAKR,IAAI,IAAA8rB,EAAA,OACjBjxB,EAAAA,EAAAA,GAACwtB,GAAgB,CAEfroB,KAAMA,EACNgF,aAAcA,EACd1B,gBAAiBA,EACjBglB,YAA8B,QAAnBwD,EAAc,OAAZ7qB,QAAY,IAAZA,OAAY,EAAZA,EAAcvB,WAAG,IAAAosB,EAAAA,EAAI,GAClCvD,eAAgBA,EAChBC,aAAcA,EACdC,SAAUgD,EACVzE,cAAe,IARVhnB,EAAKN,IASV,KAGF,GAER,CACEumB,EACAyF,EACY,OAAZzqB,QAAY,IAAZA,OAAY,EAAZA,EAAcvB,IACd+rB,EACAlD,EACAC,EACAgD,EACAxmB,EACA1B,IAIJ,OACEzI,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHwU,OAAQ,OACR1H,aAAc9N,EAAMkX,cAAclG,eAClC9C,SAAU,SACVjN,QAAS,QACV,IACDuS,UAAWA,EAAU7S,UAErBC,EAAAA,EAAAA,GAAA,OACEF,IAAGjC,GAKDkC,UAEFF,EAAAA,EAAAA,IAAA,OAAKC,IAAGhC,GAA+DiC,SAAA,EACrEC,EAAAA,EAAAA,GAACmrB,GAAkB,CACjBC,iBAAkBA,EAClBC,oBAAqBA,EACrBziB,gBAAiBA,EACjBC,mBAAoBA,IAErB8nB,EAAUlrB,OAAS,GAClBzF,EAAAA,EAAAA,GAAA,OAAKF,IAAGsM,GAAkDrM,SAAEixB,KAE5DhxB,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHE,KAAM,EACND,QAAS,OACT+B,eAAgB,SAChBmL,QAASnO,EAAMqB,QAAQ0O,GACvBgG,WAAY/V,EAAMqB,QAAQumB,IAC3B,IAACjnB,UAEFC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,iEAOrB,ECpHR,IAAA9R,GAAA,CAAAC,KAAA,SAAAC,OAAA,0DAAAC,GAAA,CAAAF,KAAA,SAAAC,OAAA,UAEK,MAAMszB,GAA+BA,EAC1CjqB,aACA2L,YACAue,iBACAC,mBAMK,IAADC,EAAAC,EACJ,MAAM,MAAElyB,IAAUC,EAAAA,EAAAA,KACZrB,EAnBFuzB,OAAOC,YAAc,IAChB,IAGF,IAgBDC,GAAU5yB,EAAAA,EAAAA,QAA2C,OACpDZ,EAAWC,IAAgBS,EAAAA,EAAAA,UAAS,MAGzCqH,SAAUwC,EAAQ,aAClBpC,EAAY,gBACZE,EAAe,UACfC,EAAS,aACTC,GACEM,KAEE,aAAEqD,EAAY,gBAAE1B,G7D0BoBipB,EAC1CC,EAII,CAAC,KAEL,MAAOxnB,EAAc1B,IAAmB9J,EAAAA,EAAAA,WAA+B,KACrE,GAAIgzB,EAAOhB,UAAW,CACpB,MAAMiB,GAAOtjB,EAAAA,EAAAA,QAAO/J,EAAwBotB,EAAOhB,UAAWgB,EAAOE,qBAAqBlsB,KAAKR,GAASA,EAAKN,MAC7G,OAAO,IAAIkF,IAAI6nB,EACjB,CACA,OAAO,IAAI7nB,GAAK,IAGlB,MAAO,CACLI,eACA1B,kBACD,E6D5CyCipB,CAA6B,CACrEf,UAAWnoB,EAAW,CAACA,GAAY,GAEnCqpB,mBAAoBhuB,KAGhB,UACJjC,EAAS,aACTF,EAAY,gBACZC,EAAe,gBACfiH,EAAe,mBACfC,EAAkB,kBAClBU,EAAiB,sBACjB1H,EAAqB,0BACrBC,GACEyG,EAAoB,CACtBC,WACApC,eACAE,kBACAE,eACAiC,kBACAC,eAA0B,OAAVzB,QAAU,IAAVA,OAAU,EAAVA,EAAY6qB,QAW9BnyB,EAAAA,EAAAA,kBAAgB,KAEd,MAAMiyB,GAAOtjB,EAAAA,EAAAA,QAAO/J,EAAwBgF,EAAmB1F,IAAuB8B,KAAKR,GAASA,EAAKN,MACzG4D,EAAgB,IAAIsB,IAAI6nB,GAAM,GAC7B,CAACroB,EAAmBd,IAEvB,MAAMspB,GAAmBzqB,EAAAA,EAAAA,UAAQ,KAE/B,MAAM0qB,E7D9FuB,G6D+F3BpsB,KAAKC,OAAO0D,EAAkB5D,IAAIJ,IA5EG,EA6EAnG,EAAMqB,QAAQumB,GAErD,OAAOphB,KAAKC,IA9EsB,IA8EamsB,EAAiB,GAC/D,CAACzoB,EAAmBnK,EAAMqB,QAAQumB,KAErC,OACEnnB,EAAAA,EAAAA,IAAA,OACEC,IAAGpC,GAMHkV,UAAWA,EAAU7S,SAAA,EAErBC,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHmN,QAASnO,EAAMqB,QAAQG,GACvB0P,aAAc,aAAalR,EAAMiM,OAAOgC,UACzC,IAACtN,UAEFC,EAAAA,EAAAA,GAACyB,EAA2B,CAC1BC,aAAcA,EACdC,gBAAiBA,EACjBC,UAAWA,EACXC,sBAAuBA,EACvBC,0BAA2BA,OAG/B9B,EAAAA,EAAAA,GAACuqB,EAA+B,CAC9BhsB,IAAKkzB,EACLzzB,aAAcA,EACdC,UAAWA,EACXC,aAAcA,EACdC,WACE6B,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACf7B,KAAM,EACN+U,SAAU0c,GACX,IAAChyB,UAEFC,EAAAA,EAAAA,GAAC0wB,GAAY,CACXC,UAAWpnB,EACXnD,aAAcA,EACdsnB,eAA+B,QAAjB2D,EAAU,OAAR7oB,QAAQ,IAARA,OAAQ,EAARA,EAAU8kB,aAAK,IAAA+D,EAAAA,EAAI,EACnC1D,aAA2B,QAAf2D,EAAU,OAAR9oB,QAAQ,IAARA,OAAQ,EAARA,EAAU6kB,WAAG,IAAAiE,EAAAA,EAAI,EAC/BhrB,gBAlEUnB,IACpBmB,EAAgBnB,IACZ0H,EAAAA,EAAAA,UAAa,OAAJ1H,QAAI,IAAJA,OAAI,EAAJA,EAAMN,OACL,OAAZusB,QAAY,IAAZA,GAAAA,EAAmB,OAAJjsB,QAAI,IAAJA,OAAI,EAAJA,EAAMN,KACvB,EA+DU/E,IAAGjC,GACHsM,aAAcA,EACd1B,gBAAiBA,EACjBG,gBAAiBA,EACjBC,mBAAoBA,MAI1BzK,aAAc2zB,EACd1zB,YACE2B,EAAAA,EAAAA,GAACwqB,GAA+B,CAC9B3b,WAAYzI,EACZ1E,aAAcA,EACd8K,YAAa5K,EAAUoB,MACvBuD,UAAWA,EACXC,aAAcA,IAGlBlI,cTrJ4B2zB,QSuJ1B,EC1KGC,GAA+BA,KAExClyB,EAAAA,EAAAA,GAACoP,EAAAA,MAAK,CACJ1E,OACE1K,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,2BAInBH,aACErP,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,mKAInB2iB,OAAOnyB,EAAAA,EAAAA,GAACqlB,EAAAA,EAAU,M,gBCZjB,MAAM+M,GAAyBA,EACpC7T,UACA8T,gBACAC,4BACAC,WAAU,MAOV,MAAM5S,EAAW,CAACC,EAAAA,GAA4BrB,GAE9C,OAAOiU,EAAAA,GAAAA,GAAS,CACd7S,WACA8S,QAASA,InCPmBC,GAAGnU,aACjCjC,GAAS,+BAA+BiC,KmCMvBmU,CAAiB,CAAEnU,YAClCW,UAAYvC,IACV0V,GAAeM,IAA0B,IAAAC,EAAAC,EAAA,MAAM,CAC7CtmB,KAAMomB,EAAepmB,KACrBulB,KAAiC,QAA7Bc,EAAU,OAARjW,QAAQ,IAARA,GAAe,QAAPkW,EAARlW,EAAUmW,aAAK,IAAAD,OAAP,EAARA,EAAiBE,kBAAU,IAAAH,EAAAA,EAAI,CAAC,EACvC,IACDN,GAA0B,EAAK,EAEjCnT,QAASA,KACPmT,GAA0B,EAAM,EAElCC,WACA,EC5BSS,GAAsCA,EACjDtoB,QACAuoB,YAKA,MAAM,MAAE7zB,IAAUC,EAAAA,EAAAA,KAClB,OACEQ,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfE,IAAKjD,EAAMqB,QAAQC,GACnB6M,QAASnO,EAAMqB,QAAQC,GACvB2M,OAAQ,aAAajO,EAAMiM,OAAOgC,SAClCH,aAAc9N,EAAM+N,QAAQC,gBAC7B,IAACrN,SAAA,CAED2K,IACC1K,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACtD,KAAGM,EAAAA,EAAAA,IAAE,CAAEO,WAAYvB,EAAMqB,QAAQG,IAAI,IAAEiQ,MAAI,EAAA9Q,SACzD2K,IAGJuoB,EAAMttB,KAAKsL,IACVjR,EAAAA,EAAAA,GAACgR,EAA0B,CAA0BC,KAAMA,GAA1BA,EAAKM,SAAS5T,UAE7C,EC3BGu1B,GAA2CA,EACtDxoB,QACAyoB,gBAKA,MAAM,MAAE/zB,IAAUC,EAAAA,EAAAA,KAClB,OACEQ,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHW,gBAAiB3B,EAAMiM,OAAO0G,kBAC9B7E,aAAc9N,EAAM+N,QAAQC,eAC5BC,OAAQ,aAAajO,EAAMiM,OAAOgC,UACnC,IAACtN,SAAA,CAED2K,IACC1K,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHmN,QAAS,GAAGnO,EAAMqB,QAAQG,QAAQxB,EAAMqB,QAAQC,OAChD4P,aAAc,aAAalR,EAAMiM,OAAOgC,UACzC,IAACtN,UAEFC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACyN,MAAI,EAAA9Q,SAAE2K,MAG1ByoB,EAAUxtB,KAAI,CAAC4Q,EAAUC,KACxBxW,EAAAA,EAAAA,GAAA,OAAeF,KAAGM,EAAAA,EAAAA,IAAE,CAAEkQ,aAAckG,IAAQ2c,EAAU1tB,OAAS,EAAI,aAAarG,EAAMiM,OAAOgC,SAAW,IAAI,IAACtN,UAC3GC,EAAAA,EAAAA,GAACwV,GAAmC,CAAWf,KAAM8B,EAASE,aAAchB,SAAUc,EAASd,UAArDe,IADlCA,OAIR,EC5BG4c,GAAsCA,EAAG1oB,QAAOnN,YAC3D,MAAM,MAAE6B,IAAUC,EAAAA,EAAAA,MACXgS,EAAUC,IAAe3S,EAAAA,EAAAA,WAAS,GAEnCiT,EAAerU,EAAMkI,OANG,IAOxB4tB,GACHhiB,GAAY9T,EAAMkI,OARS,IAQ0BlI,EAAMiO,MAAM,EARtC,KAQoE,MAAQjO,EAEpGsU,EAAcD,EAChB,CAAE,SAAU,CAAE7Q,gBAAiB3B,EAAMiM,OAAOyG,0BAA2BhR,OAAQ,YAC/E,CAAC,EAEL,OACEjB,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHiN,OAAQ,aAAajO,EAAMiM,OAAOgC,SAClCH,aAAc9N,EAAM+N,QAAQC,gBAC7B,IAACrN,SAAA,CAED2K,IACC7K,EAAAA,EAAAA,IAAA,OACEmS,KAAK,SACLlS,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT+B,eAAgB,gBAChBc,WAAY,SACZqK,QAAS,GAAGnO,EAAMqB,QAAQC,QAAQtB,EAAMqB,QAAQC,GAAKtB,EAAMqB,QAAQG,UAChEiR,GACJ,IACDlO,QAASA,IAAM2N,GAAaD,GAAUtR,SAAA,EAEtCC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACyN,MAAI,EAAA9Q,SAAE2K,IACtBkH,IAAiBP,GAAWrR,EAAAA,EAAAA,GAAC4D,EAAAA,gBAAe,KAAM5D,EAAAA,EAAAA,GAACiS,EAAAA,EAAgB,SAGxEpS,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfE,IAAKjD,EAAMqB,QAAQC,GACnBuN,YAAa7O,EAAMqB,QAAQC,GAAKtB,EAAMqB,QAAQG,GAC9CmmB,aAAc3nB,EAAMqB,QAAQC,GAAKtB,EAAMqB,QAAQG,GAC/CuU,WAAYzK,EAAQ,EAAItL,EAAMqB,QAAQC,GACtCuU,cAAe7V,EAAMqB,QAAQC,GAE7B,uBAAwB,CACtByR,aAAc,IAEjB,IAACpS,SAAA,EAEFC,EAAAA,EAAAA,GAACkV,GAAAA,EAAqB,CAAAnV,SAAEszB,IACvBzhB,IACC5R,EAAAA,EAAAA,GAACmD,EAAAA,EAAWyjB,KAAI,CACdjjB,QAASA,IAAM2N,GAAaD,GAC5B9O,YAAY,uDAAsDxC,SAEjEsR,GACCrR,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,cAIjBxP,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,oBAOrB,ECnEG8jB,GAAkCA,EAC7C5oB,QACA6B,OACAN,iBAMA,MAAMU,GAAarF,EAAAA,EAAAA,UAAQ,KACzB,IACE,OAAOyE,KAAKa,MAAML,EACpB,CAAE,MAAOrL,GACP,OAAOqL,CACT,IACC,CAACA,IAEEZ,GAAekB,EAAAA,EAAAA,UAASF,GACxBpC,GAAegpB,EAAAA,EAAAA,IAAsB5mB,GACrC6mB,EAAc1c,MAAMC,QAAQpK,IAAeA,EAAWlH,OAAS,IAAKguB,EAAAA,EAAAA,OAAM9mB,EAAY+mB,EAAAA,IACtFC,EACJ7c,MAAMC,QAAQpK,IAAeA,EAAWlH,OAAS,IAAKguB,EAAAA,EAAAA,OAAM9mB,EAAYinB,EAAAA,IAE1E,MAAmB,SAAf3nB,GACKjM,EAAAA,EAAAA,GAACqM,EAA6B,CAAC3B,MAAOA,EAAO6B,KAAMA,EAAMX,kBAAmBC,EAAAA,GAAsBE,OAGxF,SAAfE,GACKjM,EAAAA,EAAAA,GAACqM,EAA6B,CAAC3B,MAAOA,EAAO6B,KAAMA,EAAMX,kBAAmBC,EAAAA,GAAsBK,OAGvGP,GACK3L,EAAAA,EAAAA,GAACozB,GAAmC,CAAC1oB,MAAOA,EAAOnN,MAAOoP,IAG/DpC,GAAgBA,EAAa9E,OAAS,GACjCzF,EAAAA,EAAAA,GAACoS,EAA8B,CAACC,SAAU9H,IAG/CipB,GACKxzB,EAAAA,EAAAA,GAACgzB,GAAmC,CAACtoB,MAAOA,EAAOuoB,MAAOtmB,IAG/DgnB,GACK3zB,EAAAA,EAAAA,GAACkzB,GAAwC,CAACxoB,MAAOA,EAAOyoB,UAAWxmB,KAGrE3M,EAAAA,EAAAA,GAACqM,EAA6B,CAAC3B,MAAOA,EAAO6B,KAAMA,GAAQ,ECnDvDsnB,GAAiDA,EAAG1uB,WAA0C,IAAD2uB,EACxG,MAAM,MAAE10B,IAAUC,EAAAA,EAAAA,KACZ00B,GAAkBC,EAAAA,EAAAA,IAAuB7uB,GACzC8uB,GAAU9uB,EAAK8E,SAIfiqB,EAAiBH,EAAgB,GAEvC,OAAKG,GAKHl0B,EAAAA,EAAAA,GAACyS,GAAoC,CACnC3S,KAAGM,EAAAA,EAAAA,IAAE,CAAE+R,aAAc8hB,EAAS70B,EAAMqB,QAAQC,GAAK,GAAG,IACpDiS,WAAYshB,EAEZvhB,WAAYwhB,EAAev2B,KAC3B+M,OACE7K,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ6C,WAAY,SAAUb,IAAKjD,EAAMqB,QAAQC,IAAI,IAACX,SAAA,EACzEC,EAAAA,EAAAA,GAACgX,EAAAA,YAAW,CAACtJ,MAAM,YACnB1N,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACsK,MAAM,QAAQmD,MAAI,EAAA9Q,SAAC,iBAIvCA,UAEDC,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfE,IAAKjD,EAAMqB,QAAQC,GACnBuU,cAAe7V,EAAMqB,QAAQC,GAC7BuN,YAAagmB,EAAS,EAAI70B,EAAMqB,QAAQumB,IACzC,IAACjnB,SAEDsO,OAAOoB,QAAiC,QAA1BqkB,EAACI,EAAeplB,kBAAU,IAAAglB,EAAAA,EAAI,CAAC,GAAGnuB,KAAI,EAAEsR,EAAW1Z,MAChEyC,EAAAA,EAAAA,GAACszB,GAA+B,CAE9B5oB,MAAOuM,EACP1K,KAAMR,KAAK2D,UAAUnS,EAAO,KAAM,GAClC0O,WAAW,QAHNgL,QAtBNid,EAAev2B,MAPf,IAoCgC,ECtCrB,IAAAD,GAAA,CAAAC,KAAA,SAAAC,OAAA,yDAAAC,GAAA,CAAAF,KAAA,SAAAC,OAAA,iEAAAE,GAAA,CAAAH,KAAA,UAAAC,OAAA,sDAEf,MAAMu2B,GAA4CA,EACvDhvB,OACA8G,iBAKA,MAAM,MAAE7M,IAAUC,EAAAA,EAAAA,MACXgS,EAAUC,IAAe3S,EAAAA,EAAAA,WAAS,GACnC0U,GAAY/L,EAAAA,EAAAA,UAAQ,KAAMgM,EAAAA,EAAAA,IAAqBnO,EAAK4C,SAAS,CAAC5C,IAC9DoO,GAAajM,EAAAA,EAAAA,UAAQ,KAAMgM,EAAAA,EAAAA,IAAqBnO,EAAK6C,UAAU,CAAC7C,IAGhE6e,GAFkBgQ,EAAAA,EAAAA,IAAuB7uB,GAEVM,OAAS,EACxC+N,EAAiBH,EAAU5N,OAAS,EACpCgO,EAAkBF,EAAW9N,OAAS,GAEtC,gBAAEa,EAAe,cAAEH,EAAa,yBAAEO,GAA6BI,IAErE,OACEjH,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,MACftB,UA1BW,GA2BXyU,WAAY,GACb,IAACvV,SAAA,EAEFC,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEwU,OA9BC,GA8BmBvU,QAAS,OAAQ6C,WAAY,UAAU,IAACnD,UACtEC,EAAAA,EAAAA,GAACwD,EAAAA,EAAM,CACLrC,KAAK,QACL,cAAa,wBAAwBgE,EAAKN,MAC1C/E,KAAGM,EAAAA,EAAAA,IAAE,CAAEkV,WAAY,EAAGrS,YAAa7D,EAAMqB,QAAQG,IAAI,IACrD6C,KAAM4N,GAAWrR,EAAAA,EAAAA,GAAC4D,EAAAA,gBAAe,KAAM5D,EAAAA,EAAAA,GAACiS,EAAAA,EAAgB,IACxDtO,QAASA,IAAM2N,GAAaD,GAC5B9O,YAAY,+CAGhBvC,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHI,SAAU,WACVuU,UAAW,aACXH,OAAQ,OACRsR,WAAY,aAAa9mB,EAAMiM,OAAOgC,SACtCrO,MA/Cc,IAgDf,IAACe,UAEFC,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHI,SAAU,WACVwlB,MAAO,EACPC,IAAK,GACLrR,OAvDY,GAwDZ5V,MAxDY,GAyDZ+V,UAAW,aACXjC,uBAAwB1T,EAAM+N,QAAQiD,eACtCE,aAAc,aAAalR,EAAMiM,OAAOgC,SACxC6Y,WAAY,aAAa9mB,EAAMiM,OAAOgC,UACvC,SAGLxN,EAAAA,EAAAA,IAAA,OAAKC,IAAGpC,GAAqEqC,SAAA,EAC3EF,EAAAA,EAAAA,IAAA,OAAKC,IAAGjC,GAA6EkC,SAAA,EACnFC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACsK,MAAM,YAAY5N,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,cAAe6C,WAAY,SAAU0R,OAjE/E,IAiEmG,IAAC7U,UAC3GC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,wBAEflB,OAAQ,CACN8lB,UAAUp0B,EAAAA,EAAAA,GAAC8jB,GAAsB,CAAC3e,KAAMA,UAI9CnF,EAAAA,EAAAA,GAAA,QACE2D,QAASA,KACP2C,EAAgBnB,GAChBgB,EAAc,UACdO,GAAyB,EAAK,EAC9B3G,UAEFC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CACdtD,IAAGhC,GAMH4P,MAAM,YAAW3N,SAEhBgF,EAAkBI,EAAKkoB,IAAMloB,EAAKmoB,cAIxCjc,IACCxR,EAAAA,EAAAA,IAAA,OAAAE,SAAA,CACGikB,IAAgBhkB,EAAAA,EAAAA,GAAC6zB,GAA8C,CAAC1uB,KAAMA,IACtEqO,IACCxT,EAAAA,EAAAA,GAACyS,GAAoC,CACnCC,WAAW,QACXhI,OACE1K,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,WAGlBzP,UAEDC,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfE,IAAKjD,EAAMqB,QAAQC,GACnBuN,YAAa7O,EAAMqB,QAAQumB,GAC3B7U,aAAcsB,EAAkB,EAAIrU,EAAMqB,QAAQC,IACnD,IAACX,SAEDsT,EAAU1N,KAAI,EAAGd,MAAKtH,SAASgV,KAC9BvS,EAAAA,EAAAA,GAACszB,GAA+B,CAE9B5oB,MAAO7F,EACP0H,KAAMhP,EACN0O,WAAYA,GAHPpH,GAAO0N,SASrBkB,IACCzT,EAAAA,EAAAA,GAACyS,GAAoC,CACnCC,WAAW,SACXhI,OACE1K,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,YAGlBzP,UAEDC,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfE,IAAKjD,EAAMqB,QAAQC,GACnBuN,YAAa7O,EAAMqB,QAAQumB,GAC3B7U,aAAc/S,EAAMqB,QAAQC,IAC7B,IAACX,SAEDwT,EAAW5N,KAAI,EAAGd,MAAKtH,YACtByC,EAAAA,EAAAA,GAACszB,GAA+B,CAAW5oB,MAAO7F,EAAK0H,KAAMhP,EAAO0O,WAAYA,GAA1CpH,iBAQhD,EC3JGwvB,GAAiCA,EAC5CruB,WACAsuB,wBAKA,MAAM,MAAEl1B,IAAUC,EAAAA,EAAAA,MACX4M,EAAYa,IAAiBnO,EAAAA,EAAAA,UAAuC,WAErE41B,EAAavuB,EAAS+B,OACtBysB,EAAcxuB,EAASgC,QACvBysB,GAAaT,EAAAA,EAAAA,IAAuBhuB,GACpC0uB,EAAuBJ,EAAkB7uB,OAAS,EAClDkvB,EAAgBF,EAAWhvB,OAAS,EAEpC4N,GAAYC,EAAAA,EAAAA,IAAqBihB,GACjChhB,GAAaD,EAAAA,EAAAA,IAAqBkhB,GAExC,OACE30B,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACf7B,KAAM,EACNO,UAAW,EACX0M,QAASnO,EAAMqB,QAAQ0O,GACvBgG,WAAY/V,EAAMqB,QAAQC,GAC1B4M,SAAU,OACV+H,SA/B+B,KAgChC,IAACtV,SAAA,EAEFC,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,MAAOC,eAAgB,WAAY+P,aAAc/S,EAAMqB,QAAQC,IAAI,IAACX,UAC9GF,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQgC,IAAKjD,EAAMqB,QAAQC,IAAI,IAACX,SAAA,EACnDF,EAAAA,EAAAA,IAACgW,EAAAA,sBAAqB,CACpBlY,KAAK,cACL4E,YAAY,uDACZhF,MAAO0O,EACP9K,KAAK,QACLwB,SAAWmT,GAAUhJ,EAAcgJ,EAAMlT,OAAOrF,OAAOwC,SAAA,EAEvDC,EAAAA,EAAAA,GAAC+V,EAAAA,uBAAsB,CAACxY,MAAM,UAASwC,UACrCC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,eAInBxP,EAAAA,EAAAA,GAAC+V,EAAAA,uBAAsB,CAACxY,MAAM,OAAMwC,UAClCC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,eAKrBxP,EAAAA,EAAAA,GAACwX,GAAoB,SAGxBmd,IAAiB30B,EAAAA,EAAAA,GAAC6zB,GAA8C,CAAC1uB,KAAMa,KACxEhG,EAAAA,EAAAA,GAACyS,GAAoC,CACnCE,YAAU,EACVjI,OACE1K,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,WAInB1P,KAAGM,EAAAA,EAAAA,IAAE,CAAE+R,aAAcuiB,EAAuB,EAAIt1B,EAAMqB,QAAQ0O,IAAI,IAClEuD,WAAW,iBAAgB3S,UAE3BC,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,SAAUE,IAAKjD,EAAMqB,QAAQC,IAAI,IAACX,SAC3EsT,EAAU1N,KAAI,EAAGd,MAAKtH,SAASgV,KAC9BvS,EAAAA,EAAAA,GAACszB,GAA+B,CAAoB5oB,MAAO7F,EAAK0H,KAAMhP,EAAO0O,WAAYA,GAAnDpH,GAAO0N,SAIlDmiB,GACCJ,EAAkB3uB,KAAKR,IACrBnF,EAAAA,EAAAA,GAACm0B,GAAyC,CAAgBhvB,KAAMA,EAAM8G,WAAYA,GAAlC9G,EAAKN,QAEzD7E,EAAAA,EAAAA,GAACyS,GAAoC,CACnCE,YAAU,EACVjI,OACE1K,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,YAInBkD,WAAW,kBAAiB3S,UAE5BC,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,SAAUE,IAAKjD,EAAMqB,QAAQC,IAAI,IAACX,SAC3EwT,EAAW5N,KAAI,EAAGd,MAAKtH,SAASgV,KAC/BvS,EAAAA,EAAAA,GAACszB,GAA+B,CAAoB5oB,MAAO7F,EAAK0H,KAAMhP,EAAO0O,WAAYA,GAAnDpH,GAAO0N,WAI/C,EC/FJqiB,GAAmBzvB,IAA8B,IAAD4e,EAGpD,QAAK5e,EAAK8E,WAKR,CACEua,EAAAA,GAAcqQ,MACdrQ,EAAAA,GAAcsQ,UACdtQ,EAAAA,GAAcuQ,WACdvQ,EAAAA,GAAcwQ,KACdxQ,EAAAA,GAAcyQ,KACdhqB,SAAkB,QAAV8Y,EAAC5e,EAAK6D,YAAI,IAAA+a,EAAAA,EAAIS,EAAAA,GAAcC,WAAYR,EAAAA,EAAAA,IAAsB9e,GAAQ,EAAC,EAIxE+vB,GAAgCA,EAAGjuB,iBAC9C,MAAM,MAAE7H,IAAUC,EAAAA,EAAAA,MACXpB,EAAWC,IAAgBS,EAAAA,EAAAA,UAAS,MACrC,SAAEqH,EAAQ,QAAEC,EAAO,uBAAEY,EAAsB,wBAAEF,GAA4BG,IAEzEquB,GAAiB7tB,EAAAA,EAAAA,UAAQ,IAAM+G,OAAOC,OAAOrI,GAASmvB,SAASjwB,GAASA,EAAKyC,eAAc,CAAC3B,IAE5FquB,GAAoBhtB,EAAAA,EAAAA,UAAQ,KAChC,IAAKtB,EACH,MAAO,GAST,OAHcjC,EAAyB,CAACiC,IACRqvB,OAAOT,GAEf,GACvB,CAAC5uB,IAEJ,OAAKA,EAeEa,GAA0BF,GAC/B3G,EAAAA,EAAAA,GAACuqB,EAA+B,CAC9BvsB,aAAc,IACdC,UAAWA,EACXC,aAAcA,EACdC,WAAW6B,EAAAA,EAAAA,GAACq0B,GAA8B,CAACruB,SAAUA,EAAUsuB,kBAAmBA,IAClFj2B,YAAY2B,EAAAA,EAAAA,GAACkpB,GAAe,CAACthB,YAAautB,EAAgB5W,QAASvY,EAASuY,QAASiK,kBAAcniB,IACnGjI,aD/DiC,ICgEjCE,cAAe4c,MAGjBlb,EAAAA,EAAAA,GAACq0B,GAA8B,CAACruB,SAAUA,EAAUsuB,kBAAmBA,KAxBrEt0B,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAE8O,UAAW9P,EAAMqB,QAAQumB,IAAI,IAACjnB,UACxCC,EAAAA,EAAAA,GAACoP,EAAAA,MAAK,CACJC,aACErP,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,+BAqB1B,E,4BC7D8F,IAAA9R,GAAA,CAAAC,KAAA,SAAAC,OAAA,kBAEjG,MAAM03B,GAAgCA,EACpCC,QACAh4B,QACAkG,OACA+xB,SACA9nB,QAAQ,OACR+nB,oBACAC,iBACAC,aAWA,MAAM,MAAEv2B,IAAUC,EAAAA,EAAAA,KAOlB,OACEQ,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT6C,WAAY,SACZd,eAAgB,SAChBD,cAAe,MACfE,IAAKjD,EAAMqB,QAAQC,IACpB,IAACX,SAAA,EAEFC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACjC,KAAK,KAAKuM,MAAM,YAAW3N,SACzCw1B,KAEHv1B,EAAAA,EAAAA,GAACsU,GAAAA,EAAO,CAAC/R,YAAamzB,EAAeF,GAASjhB,QAAShX,EAAO0B,SAAU,IAAIc,UAC1EC,EAAAA,EAAAA,GAACgO,EAAAA,IAAG,CAACzL,YAAamzB,EAAeF,GAAS9nB,MAAOA,EAAO/J,QAnB1CiyB,KAClBC,UAAUC,UAAUC,UAAUx4B,GAC9Bo4B,GAAQ,EAiB0E71B,IAAGpC,GAAwBqC,UACvGF,EAAAA,EAAAA,IAAA,QAAMC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,MAAOe,WAAY,SAAUb,IAAKjD,EAAMqB,QAAQG,IAAI,IAACb,SAAA,CAC/F0D,IAAQzD,EAAAA,EAAAA,GAAA,QAAAD,SAAO0D,KAChBzD,EAAAA,EAAAA,GAAA,QAAAD,SAAO01B,EAAkBl4B,cAI3B,EAER,IAAAM,GAAA,CAAAF,KAAA,SAAAC,OAAA,yEAAAE,GAAA,CAAAH,KAAA,SAAAC,OAAA,kBAEK,MAAMo4B,GAA0BA,EAAG/uB,iBAA8C,IAADgvB,GACxE9d,EAAAA,GAAAA,KAAb,MACM,MAAE/Y,IAAUC,EAAAA,EAAAA,MACX62B,EAAkBC,IAAuBx3B,EAAAA,EAAAA,WAAS,IACnD,SAAEqH,GAAac,IAEfsvB,EAAO/nB,OAAOoB,QAA4B,QAArBwmB,EAAChvB,EAAW6qB,KAAKsE,YAAI,IAAAH,EAAAA,EAAI,CAAC,GAAGZ,QAAO,EAAExwB,MAASwxB,QC1E5Cb,ED0E4D3wB,GCzElFyxB,WAJ4B,aAIWd,EAAOc,WAHtB,YAEFd,KD0EgE,IAExFe,GAAeC,EAAAA,EAAAA,IAAgBvvB,GAE/BwvB,GAAanvB,EAAAA,EAAAA,UAAQ,KAAO,IAADovB,EAAAC,EAAAC,EAK/B,MC/E0B5Z,KAC5B,IACE,OAAOjR,KAAKa,MAAMoQ,EACpB,CAAE,MAAO9b,GACP,MACF,GDsEqB21B,CACiE,QADpDH,EACd,QADcC,EAC7B1vB,EAAW6qB,YAAI,IAAA6E,GAAqC,QAArCC,EAAhBD,EAAuCG,sBAAc,IAAAF,OAArC,EAAhBA,EAAwD,kCAA0B,IAAAF,EAAAA,EAAI,KAGvE,GAChB,CAACzvB,EAAW6qB,OAETiF,GAAczvB,EAAAA,EAAAA,UAAQ,IAAgB,OAAVmvB,QAAU,IAAVA,OAAU,EAAVA,EAAYO,cAAc,CAACP,IAEvDQ,GAAU3vB,EAAAA,EAAAA,UAAQ,KACtB,GAAItB,EACF,OAAOjB,EAAkBiB,EAASqnB,IAAMrnB,EAASsnB,MAGnC,GACf,CAACtnB,IAEE0vB,GAAiBn2B,EAAAA,EAAAA,cAAasF,GAAgB,kDAAgCA,KAAO,IAMrF4wB,EAAqBF,GC1FmB2B,EAACC,EAAaC,KAC5D,MAAMC,EAAYC,IAAAA,SAAWH,EAAK,CAChC1xB,OAAQ2xB,IAEV,OAAOE,IAAAA,UAAYD,GAAYE,GAAkB,OAATA,IAAe5O,KAAK,GAAG,EDsFlBuO,CAAiC3B,EAAO,IAE/EiC,GAAaj4B,EAAAA,EAAAA,cAAY,KAC7B42B,GAAoB,GACpBsB,YAAW,IAAMtB,GAAoB,IAAQ,IAAK,GACjD,IAEH,OACEt2B,EAAAA,EAAAA,IAAA+Q,EAAAA,GAAA,CAAA7Q,SAAA,EACEF,EAAAA,EAAAA,IAAA,OAAKC,KAAGM,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQ8B,cAAe,MAAOE,IAAKjD,EAAMqB,QAAQ0O,GAAI4B,SAAU,QAAQ,IAAChR,SAAA,CAC1Fw2B,IACCv2B,EAAAA,EAAAA,GAACs1B,GAA6B,CAC5BC,OAAOv1B,EAAAA,EAAAA,GAACsP,GAAAA,EAAgB,CAAAC,GAAA,SAACC,eAAe,OACxCjS,MAAOg5B,EACPf,OAAQe,EACR7oB,MAAM,OACN+nB,kBAAmBA,EACnBC,eAAgBA,EAChBC,OAAQ6B,IAGXT,IACC/2B,EAAAA,EAAAA,GAACs1B,GAA6B,CAC5BC,OAAOv1B,EAAAA,EAAAA,GAACsP,GAAAA,EAAgB,CAAAC,GAAA,SAACC,eAAe,gBACxCjS,MAAOw5B,EAAYW,WACnBlC,OAAO,cACP9nB,MAAM,UACN+nB,kBAAmBA,EACnBC,eAAgBA,EAChBC,OAAQ6B,IAGXP,IACCj3B,EAAAA,EAAAA,GAACs1B,GAA6B,CAC5BC,OAAOv1B,EAAAA,EAAAA,GAACsP,GAAAA,EAAgB,CAAAC,GAAA,SAACC,eAAe,YACxC/L,MAAMzD,EAAAA,EAAAA,GAAC23B,EAAAA,EAAS,CAAC73B,IAAGjC,KACpBN,MAAO05B,EACPzB,OAAO,UACP9nB,MAAM,UACN+nB,kBAAmBA,EACnBC,eAAgBA,EAChBC,OAAQ6B,IAGXpB,EAAK3wB,OAAS,IACb5F,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT6C,WAAY,SACZd,eAAgB,SAChBD,cAAe,MACfE,IAAKjD,EAAMqB,QAAQC,IACpB,IAACX,SAAA,EAEFC,EAAAA,EAAAA,GAACmD,EAAAA,EAAWC,KAAI,CAACjC,KAAK,KAAKuM,MAAM,YAAW3N,UAC1CC,EAAAA,EAAAA,GAACsP,GAAAA,EAAgB,CAAAC,GAAA,SAACC,eAAe,YAEnCxP,EAAAA,EAAAA,GAAC43B,EAAAA,SAAQ,CAACC,UAAQ,EAAA93B,SACfq2B,EAAKzwB,KAAI,EAAEd,EAAKtH,MACf,MAAMi4B,EAAS,GAAG3wB,KAAOtH,IACnBu6B,EAAW,GAAGjzB,MAAQtH,IAE5B,OACEyC,EAAAA,EAAAA,GAACsU,GAAAA,EAAO,CAAW/R,YAAamzB,EAAeF,GAASjhB,QAASujB,EAAS/3B,UACxEC,EAAAA,EAAAA,GAACgO,EAAAA,IAAG,CACFzL,YAAamzB,EAAeF,GAC5B9nB,MAAM,OACN/J,QAASA,KAvEL8Q,QAwEaqjB,EAvEnCjC,UAAUC,UAAUC,UAAUthB,GAwEV+iB,GAAY,EAEd13B,IAAGhC,GAAwBiC,SAE1B01B,EAAkB,GAAG5wB,MAAQtH,QAVpBsH,EAYJ,YAQrBqxB,IACCr2B,EAAAA,EAAAA,IAACk4B,EAAAA,aAAa3vB,SAAQ,CAAArI,SAAA,EACpBC,EAAAA,EAAAA,GAAC+3B,EAAAA,aAAalqB,KAAI,CAACmqB,SAAS,UAAUz1B,YA5KT,0DA4KqDxC,UAChFC,EAAAA,EAAAA,GAAC+3B,EAAAA,aAAavqB,MAAK,CAAAzN,UACjBC,EAAAA,EAAAA,GAACsP,GAAAA,EAAgB,CAAAC,GAAA,SACfC,eAAe,6BAKrBxP,EAAAA,EAAAA,GAAC+3B,EAAAA,aAAaE,SAAQ,SAGzB,EExL6D,IAAAv6B,GAAA,CAAAC,KAAA,SAAAC,OAAA,wHAAAC,GAAA,CAAAF,KAAA,SAAAC,OAAA,0DAAAE,GAAA,CAAAH,KAAA,SAAAC,OAAA,0DAEpE,MAAMs6B,GAA4BA,EAChCjxB,aACA2L,YACAue,iBACAC,mBAOA,MAAM,MAAEhyB,IAAUC,EAAAA,EAAAA,MACZ,WAAE6G,EAAU,cAAEC,GAAkBW,IAEtC,OACEjH,EAAAA,EAAAA,IAACuqB,EAAAA,KAAKvc,KAAI,CACRtL,YAAY,uBACZhF,MAAO2I,EACPkI,cAAgB7Q,GAAU4I,EAAc5I,GACxCuC,IAAGpC,GASDqC,SAAA,EAEFC,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAE6N,YAAa7O,EAAMqB,QAAQ0O,GAAI8F,cAAe7V,EAAMqB,QAAQC,IAAI,IAACX,UAC3EC,EAAAA,EAAAA,GAACg2B,GAAuB,CAAC/uB,WAAYA,OAEvCpH,EAAAA,EAAAA,IAACuqB,EAAAA,KAAKE,KAAI,CAACxqB,KAAGM,EAAAA,EAAAA,IAAE,CAAE6N,YAAa7O,EAAMqB,QAAQ0O,GAAImG,WAAY,GAAG,IAACvV,SAAA,EAC/DC,EAAAA,EAAAA,GAACoqB,EAAAA,KAAKtc,QAAO,CAACvQ,MAAM,UAASwC,UAC3BC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,eAInBxP,EAAAA,EAAAA,GAACoqB,EAAAA,KAAKtc,QAAO,CAACvQ,MAAM,SAAQwC,UAC1BC,EAAAA,EAAAA,GAACsP,EAAAA,GAAgB,CAAAC,GAAA,SACfC,eAAe,6BAKrBxP,EAAAA,EAAAA,GAACoqB,EAAAA,KAAKlc,QAAO,CACX3Q,MAAM,UACNuC,IAAGjC,GAKDkC,UAEFC,EAAAA,EAAAA,GAACk1B,GAA6B,CAACjuB,WAAYA,OAE7CjH,EAAAA,EAAAA,GAACoqB,EAAAA,KAAKlc,QAAO,CACX3Q,MAAM,SACNuC,IAAGhC,GAKDiC,UAEFC,EAAAA,EAAAA,GAACkxB,GAA4B,CAC3BjqB,WAAYA,EACZ2L,UAAWA,EACXue,eAAgBA,EAChBC,aAAcA,QAGR,EAIV+G,GAAmBA,EAAGp4B,eACnBC,EAAAA,EAAAA,GAACo4B,EAAAA,GAAa,CAACC,eAAgBnG,GAA6BnyB,SAAEA,IA6D1Du4B,GA1DyBC,EACpCtxB,WAAYuxB,EACZ5lB,YACA1L,oBACAiqB,iBACAC,mBAOK,IAADqH,EACJ,MAAOxxB,EAAYorB,IAAiB1zB,EAAAA,EAAAA,UAAS65B,IACtCE,EAAcC,IAAmBh6B,EAAAA,EAAAA,WAAS,GAC3C4f,GAAUiY,EAAAA,EAAAA,IAAgBgC,IAKzB3xB,EAAwByrB,IAHrBmG,GAAGG,EAAAA,EAAAA,IAAkBJ,IAG6B75B,EAAAA,EAAAA,UAAS4f,EAAQ+X,WAAW,SAmBxF,OAjBAlE,GAAuB,CACrB7T,UACA8T,gBACAC,4BACAC,QAA0BhU,EAAQ+X,WAAW,UAG/CnuB,EAAAA,EAAAA,YAAU,KACRkqB,EAAcmG,EAAkB,GAG/B,CAACja,KAOFve,EAAAA,EAAAA,GAACm4B,GAAgB,CAAC5Z,QAASA,EAAQxe,UACjCC,EAAAA,EAAAA,GAACgH,EAAmC,CAClCC,WAAYA,EACZC,kBAAmBA,EACnBC,uBAAwBgqB,EACxBtqB,uBAAwBA,EAAuB9G,UAE/CC,EAAAA,EAAAA,GAACk4B,GAAyB,CACxBjxB,WAAYA,EACZ2L,UAAWA,EACXue,eAAgBA,EAChBC,aAAcA,OAGD,C,6HC3JoE,IAAA1zB,EAAA,CAAAC,KAAA,UAAAC,OAAA,oCAAAC,EAAA,CAAAF,KAAA,UAAAC,OAAA,6DAE3F,MAAMi7B,EAAgCA,EAAGC,YAAWv7B,YAClD,MAAM,MAAE6B,IAAUC,EAAAA,EAAAA,KACZg0B,GAAexmB,EAAAA,EAAAA,UAAStP,GAASA,EAAQwO,KAAK2D,UAAUnS,GAE9D,OACEyC,EAAAA,EAAAA,GAACsU,EAAAA,EAAO,CAACC,QAAS8e,EAAc9wB,YAAY,gEAA+DxC,UACzGC,EAAAA,EAAAA,GAACgO,EAAAA,IAAG,CACFN,MAAM,SACNnL,YAAY,yDACZzC,IAAGpC,EAA6CqC,UAEhDF,EAAAA,EAAAA,IAACsD,EAAAA,EAAWC,KAAI,CAACtD,IAAGjC,EAAyEkC,SAAA,CAC1F+4B,IACCj5B,EAAAA,EAAAA,IAACsD,EAAAA,EAAWC,KAAI,CAACyN,MAAI,EAAC/Q,KAAGM,EAAAA,EAAAA,IAAE,CAAE6C,YAAa7D,EAAMqB,QAAQG,IAAI,IAACb,SAAA,CAC1D+4B,EAAU,OAGdzF,QAGG,EAIDpO,EAA0BA,EACrCF,cACAgU,cAAa,MAKb,MAAM,MAAE35B,IAAUC,EAAAA,EAAAA,KAElB,OAAIyI,EAAAA,EAAAA,OAAMid,GACD,KAGLjO,MAAMC,QAAQgO,GACTgU,GACL/4B,EAAAA,EAAAA,GAAC64B,EAA6B,CAACt7B,MAAOwnB,KAEtC/kB,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfE,IAAKjD,EAAMqB,QAAQC,IACpB,IAACX,SAEDglB,EAAYpf,KAAI,CAACgU,EAAMpH,KACtBvS,EAAAA,EAAAA,GAAC64B,EAA6B,CAACt7B,MAAOoc,GAAWpH,QAMrDymB,EAAAA,EAAAA,UAASjU,GACJgU,GACL/4B,EAAAA,EAAAA,GAAC64B,EAA6B,CAACt7B,MAAOwnB,KAEtC/kB,EAAAA,EAAAA,GAAA,OACEF,KAAGM,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT8B,cAAe,SACfE,IAAKjD,EAAMqB,QAAQC,IACpB,IAACX,SAEDsO,OAAOoB,QAAQsV,GAAapf,KAAI,EAAEd,EAAKtH,MACtCyC,EAAAA,EAAAA,GAAC64B,EAA6B,CAAWC,UAAWj0B,EAAKtH,MAAOA,GAA5BsH,QAMrC7E,EAAAA,EAAAA,GAAC64B,EAA6B,CAACt7B,MAAOwnB,GAAe,C,wGC7EiC,IAAArnB,EAAA,CAAAC,KAAA,UAAAC,OAAA,4BAAAC,EAAA,CAAAF,KAAA,SAAAC,OAAA,UAExF,MAAMq7B,EAA6BA,EAAG1D,YAC3C,MAAM,MAAEn2B,IAAUC,EAAAA,EAAAA,KAClB,OACEQ,EAAAA,EAAAA,IAAA,OAAKC,IAAGpC,EAAsCqC,SAAA,EAC5CF,EAAAA,EAAAA,IAAA,OAAKC,IAAGjC,EAAckC,SAAA,EACpBC,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEmN,QAASnO,EAAMqB,QAAQC,GAAI4P,aAAc,aAAalR,EAAMiM,OAAOgC,UAAU,IAACtN,UACxFC,EAAAA,EAAAA,GAACk5B,EAAAA,cAAa,CAAC3D,MAAOA,OAExB11B,EAAAA,EAAAA,IAAA,OACEC,KAAGM,EAAAA,EAAAA,IAAE,CACH8M,aAAc9N,EAAMkX,cAAclG,eAClC9C,SAAU,SACVjN,QAAS,QACV,IAACN,SAAA,EAEFC,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEE,KAAM,EAAGiN,QAASnO,EAAMqB,QAAQC,GAAImrB,YAAa,aAAazsB,EAAMiM,OAAOgC,UAAU,IAACtN,UAChGC,EAAAA,EAAAA,GAACm5B,EAAAA,cAAa,CAACC,MAAO,OAExBp5B,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEE,KAAM,EAAGiN,QAASnO,EAAMqB,QAAQC,IAAI,IAACX,UAC/CC,EAAAA,EAAAA,GAACm5B,EAAAA,cAAa,CAACC,MAAO,aAI5Bp5B,EAAAA,EAAAA,GAAA,OAAKF,KAAGM,EAAAA,EAAAA,IAAE,CAAEmN,QAASnO,EAAMqB,QAAQ0O,GAAIgE,UAAW,OAAQ7S,KAAM,GAAG,IAACP,UAClEC,EAAAA,EAAAA,GAACm5B,EAAAA,cAAa,CAACC,MAAO,SAEpB,C,wDC5BH,MAAM7Y,EAAUA,IAGd,M,iICaT,MAAM8Y,GAA0BtzB,EAAAA,EAAAA,eAA4C,CAC1EiS,QAAS,KAQEshB,EAAkFA,EAC7Fv5B,WACA6H,kBAEA,MAAMoQ,GAAU1Q,EAAAA,EAAAA,UAAQ,ICnBaM,KAErC,MAAM2xB,EAA4D,CAAC,EAK7DC,EAAiE,CAAC,EAExE,IAAK,MAAMn8B,KAAcuK,EAAa,CACpC,GAAI2xB,EAAUl8B,EAAW8iB,iBACvB,SAKF,MAAM5iB,GAAQH,EAAAA,EAAAA,GAAmBC,GAEjC,IAAIyK,EAAAA,EAAAA,OAAMvK,GAAQ,CAChBi8B,EAAen8B,EAAW8iB,iBAAmB,CAC3CxiB,KAAMN,EAAW8iB,gBACjBrH,eAAgB,aAAczb,EAAa,WAAa,cACxD0b,SAAU,WAEZ,QACF,CAEA,MAAM0gB,EAA0B,gBAAiBp8B,GAAc,qBAAsBA,EAAWG,YAEhG,IAAIub,EACJ,cAAexb,GACb,IAAK,SACHwb,EAAW0gB,EAA0B,OAAS,SAC9C,MACF,IAAK,UAOL,QACE1gB,EAAW,UACX,MANF,IAAK,SACHA,EAAW,SAQfwgB,EAAUl8B,EAAW8iB,iBAAmB,CACtCxiB,KAAMN,EAAW8iB,gBACjBrH,eAAgB,aAAczb,EAAa,WAAa,cACxD0b,WAEJ,CAGA,IAAK,MAAOsF,EAAgBhG,KAAWhK,OAAOoB,QAAQ+pB,GAC9Cnb,KAAkBkb,IACtBA,EAAUlb,GAAkBhG,GAIhC,OAAOhK,OAAOC,OAAOirB,EAAU,EDzCDG,CAAuB9xB,IAAc,CAACA,IAC9DrK,GAAsC+J,EAAAA,EAAAA,UAC1C,MACE0Q,aAEF,CAACA,IAGH,OAAOhY,EAAAA,EAAAA,GAACq5B,EAAwBjxB,SAAQ,CAAC7K,MAAOA,EAAMwC,SAAEA,GAA4C,EAGzFkY,EAAuBA,KAC3BlR,EAAAA,EAAAA,YAAWsyB,E","sources":["shared/web-shared/model-trace-explorer/assessments-pane/utils.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerResizablePane.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerSearchBox.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTree.utils.ts","shared/web-shared/model-trace-explorer/ModelTraceExplorerViewStateContext.tsx","shared/web-shared/model-trace-explorer/hooks/useModelTraceSearch.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerHighlightedSnippetTitle.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerCodeSnippet.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerAttributesTab.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatToolParam.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatTool.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerConversation.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerCollapsibleSection.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatTab.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerDefaultSpanView.tsx","shared/web-shared/model-trace-explorer/key-value-tag/KeyValueTag.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerRetrieverDocumentFull.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerRetrieverDocumentPreview.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerRetrieverDocument.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerRenderModeToggle.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerRetrieverSpanView.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerContentTab.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerEventsTab.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerBadge.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentPaneToggle.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentCreateNameTypeahead.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentsPane.utils.tsx","shared/web-shared/model-trace-explorer/assessments-pane/components/BooleanInput.tsx","shared/web-shared/model-trace-explorer/assessments-pane/components/NumericInput.tsx","shared/web-shared/model-trace-explorer/assessments-pane/components/TextInput.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorer.request.utils.tsx","shared/web-shared/model-trace-explorer/api.ts","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentCreateForm.tsx","shared/web-shared/model-trace-explorer/assessments-pane/components/JsonInput.tsx","shared/web-shared/model-trace-explorer/hooks/useCreateAssessment.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentCreateButton.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentActionsOverflowMenu.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentDeleteModal.tsx","shared/web-shared/model-trace-explorer/hooks/useOverrideAssessment.tsx","shared/web-shared/model-trace-explorer/hooks/useUpdateAssessment.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentEditForm.tsx","shared/web-shared/model-trace-explorer/assessments-pane/SpanNameDetailViewLink.tsx","shared/web-shared/model-trace-explorer/assessments-pane/ExpectationItem.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentDisplayValue.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentSourceName.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentItemHeader.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackErrorItem.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackHistoryItem.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackHistoryModal.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackItemContent.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackItem.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackValueGroupSourceCounts.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackValueGroup.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackGroup.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentsPane.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerRightPaneTabs.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTreeFilterButton.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTreeHeader.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTreeHierarchyBars.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTreeSpanTooltip.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTreeNode.tsx","shared/web-shared/model-trace-explorer/timeline-tree/gantt/TimelineTreeGanttNode.tsx","shared/web-shared/model-trace-explorer/timeline-tree/gantt/TimelineTreeGanttBars.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTree.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerDetailView.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerErrorState.tsx","shared/web-shared/model-trace-explorer/hooks/useGetModelTraceInfoV3.tsx","shared/web-shared/model-trace-explorer/field-renderers/ModelTraceExplorerChatToolsRenderer.tsx","shared/web-shared/model-trace-explorer/field-renderers/ModelTraceExplorerRetrieverFieldRenderer.tsx","shared/web-shared/model-trace-explorer/field-renderers/ModelTraceExplorerTextFieldRenderer.tsx","shared/web-shared/model-trace-explorer/field-renderers/ModelTraceExplorerFieldRenderer.tsx","shared/web-shared/model-trace-explorer/summary-view/ModelTraceExplorerSummaryViewExceptionsSection.tsx","shared/web-shared/model-trace-explorer/summary-view/ModelTraceExplorerSummaryIntermediateNode.tsx","shared/web-shared/model-trace-explorer/summary-view/ModelTraceExplorerSummarySpans.tsx","shared/web-shared/model-trace-explorer/summary-view/ModelTraceExplorerSummaryView.tsx","shared/web-shared/model-trace-explorer/ModelTraceHeaderDetails.tsx","shared/web-shared/model-trace-explorer/TagUtils.ts","shared/web-shared/model-trace-explorer/ModelTraceExplorer.tsx","shared/web-shared/model-trace-explorer/assessments-pane/ExpectationValuePreview.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerSkeleton.tsx","shared/web-shared/global-settings/getUser.tsx","shared/web-shared/model-trace-explorer/contexts/AssessmentSchemaContext.tsx","shared/web-shared/model-trace-explorer/contexts/AssessmentSchemaContext.utils.tsx"],"sourcesContent":["import type { Assessment } from '../ModelTrace.types';\n\nexport const getAssessmentValue = (assessment: Assessment) => {\n  if ('feedback' in assessment) {\n    return assessment.feedback.value;\n  }\n\n  if ('value' in assessment.expectation) {\n    return assessment.expectation.value;\n  }\n\n  return assessment.expectation.serialized_value.value;\n};\n","import { Global } from '@emotion/react';\nimport { clamp } from 'lodash';\nimport React, { forwardRef, useCallback, useImperativeHandle, useLayoutEffect, useRef, useState } from 'react';\nimport { ResizableBox } from 'react-resizable';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport { useResizeObserver } from '../hooks';\n\ninterface ModelTraceExplorerResizablePaneProps {\n  initialRatio: number;\n  paneWidth: number;\n  setPaneWidth: (paneWidth: number) => void;\n  leftChild: React.ReactNode;\n  leftMinWidth: number;\n  rightChild: React.ReactNode;\n  rightMinWidth: number;\n}\n\nexport interface ModelTraceExplorerResizablePaneRef {\n  updateRatio: (newPaneWidth: number) => void;\n}\n\n/**\n * This component takes a left and right child, and adds\n * a draggable handle between them to resize. It handles\n * logic such as preserving the ratio of the pane width\n * when the container/window is resized, and also ensures\n * that the left and right panes conform to specified min\n * widths.\n */\nconst ModelTraceExplorerResizablePane = forwardRef<\n  ModelTraceExplorerResizablePaneRef,\n  ModelTraceExplorerResizablePaneProps\n>(({ initialRatio, paneWidth, setPaneWidth, leftChild, leftMinWidth, rightChild, rightMinWidth }, ref) => {\n  const [isResizing, setIsResizing] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const containerWidth = useResizeObserver({ ref: containerRef })?.width;\n  // if container width is not available, don't set a max width\n  const maxWidth = (containerWidth ?? Infinity) - rightMinWidth;\n\n  const ratio = useRef(initialRatio);\n  const { theme } = useDesignSystemTheme();\n\n  const updateRatio = useCallback(\n    // used by the parent component to update the ratio when\n    // the pane is resized via the show/hide gantt button\n    (newPaneWidth: number) => {\n      if (containerWidth) {\n        ratio.current = newPaneWidth / containerWidth;\n      }\n    },\n    [containerWidth],\n  );\n\n  useImperativeHandle(ref, () => ({\n    updateRatio,\n  }));\n\n  useLayoutEffect(() => {\n    // preserve the ratio of the pane width when the container is resized\n    if (containerWidth) {\n      setPaneWidth(clamp(containerWidth * ratio.current, leftMinWidth, maxWidth));\n    }\n  }, [containerWidth, maxWidth, leftMinWidth, rightMinWidth, setPaneWidth]);\n\n  return (\n    <div\n      ref={containerRef}\n      css={{\n        display: 'flex',\n        flex: 1,\n        overflow: 'hidden',\n        flexDirection: 'row',\n      }}\n    >\n      {isResizing && (\n        <Global\n          styles={{\n            'body, :host': {\n              userSelect: 'none',\n            },\n          }}\n        />\n      )}\n      <ResizableBox\n        axis=\"x\"\n        width={paneWidth}\n        css={{ display: 'flex', flex: `0 0 ${paneWidth}px` }}\n        handle={\n          <div css={{ width: 0, position: 'relative' }}>\n            <div\n              css={{\n                position: 'relative',\n                width: theme.spacing.sm,\n                marginLeft: -theme.spacing.xs,\n                minHeight: '100%',\n                cursor: 'ew-resize',\n                backgroundColor: `rgba(0,0,0,0)`,\n                zIndex: 1,\n                ':hover': {\n                  backgroundColor: `rgba(0,0,0,0.1)`,\n                },\n              }}\n            />\n          </div>\n        }\n        onResize={(e, { size }) => {\n          const clampedSize = clamp(size.width, leftMinWidth, maxWidth);\n          setPaneWidth(clampedSize);\n          if (containerWidth) {\n            ratio.current = clampedSize / containerWidth;\n          }\n        }}\n        onResizeStart={() => setIsResizing(true)}\n        onResizeStop={() => setIsResizing(false)}\n        minConstraints={[leftMinWidth, Infinity]}\n        maxConstraints={[maxWidth, Infinity]}\n      >\n        {leftChild}\n      </ResizableBox>\n      {rightChild}\n    </div>\n  );\n});\n\nexport default ModelTraceExplorerResizablePane;\n","import React, { useState } from 'react';\nimport { useDebouncedCallback } from 'use-debounce';\n\nimport {\n  Button,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Input,\n  SearchIcon,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\n\nimport type { SearchMatch } from './ModelTrace.types';\n\nconst ModelTraceExplorerSearchBox = ({\n  searchFilter,\n  setSearchFilter,\n  matchData,\n  handleNextSearchMatch,\n  handlePreviousSearchMatch,\n}: {\n  searchFilter: string;\n  setSearchFilter: (searchFilter: string) => void;\n  matchData: {\n    match: SearchMatch | null;\n    totalMatches: number;\n    currentMatchIndex: number;\n  };\n  handleNextSearchMatch: () => void;\n  handlePreviousSearchMatch: () => void;\n}) => {\n  const [searchValue, setSearchValue] = useState(searchFilter);\n  const debouncedSetSearchFilter = useDebouncedCallback(setSearchFilter, 350);\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        gap: theme.spacing.sm,\n      }}\n    >\n      <Input\n        componentId=\"shared.model-trace-explorer.search-input\"\n        allowClear\n        placeholder=\"Search\"\n        value={searchValue}\n        onClear={() => {\n          setSearchFilter('');\n          setSearchValue('');\n        }}\n        onChange={(e) => {\n          setSearchValue(e.target.value);\n          debouncedSetSearchFilter(e.target.value.toLowerCase());\n        }}\n        prefix={<SearchIcon />}\n        css={{\n          width: '100%',\n          boxSizing: 'border-box',\n        }}\n      />\n      {matchData.match && (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'row',\n            marginLeft: theme.spacing.xs,\n            marginRight: theme.spacing.sm,\n            alignItems: 'center',\n          }}\n        >\n          <Typography.Text css={{ whiteSpace: 'nowrap', marginRight: theme.spacing.sm }}>\n            {matchData.currentMatchIndex + 1} / {matchData.totalMatches}\n          </Typography.Text>\n          <Button\n            data-testid=\"prev-search-match\"\n            icon={<ChevronUpIcon />}\n            onClick={handlePreviousSearchMatch}\n            componentId=\"shared.model-trace-explorer.prev-search-match\"\n          />\n          <Button\n            data-testid=\"next-search-match\"\n            icon={<ChevronDownIcon />}\n            onClick={handleNextSearchMatch}\n            componentId=\"shared.model-trace-explorer.next-search-match\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ModelTraceExplorerSearchBox;\n","import { values } from 'lodash';\nimport { useState } from 'react';\n\nimport type { TimelineTreeNode } from './TimelineTree.types';\nimport type { ModelTraceSpanNode } from '../ModelTrace.types';\n\n// expand all nodes by default\nexport const DEFAULT_EXPAND_DEPTH = Infinity;\nexport const SPAN_INDENT_WIDTH = 16;\nexport const SPAN_ROW_HEIGHT = 32;\nexport const TimelineTreeZIndex = {\n  HIGH: 5,\n  NORMAL: 3,\n  LOW: 1,\n};\n\n// Gets the min and max start and end times of the tree\nexport const getTimelineTreeSpanConstraints = (\n  nodes: TimelineTreeNode[],\n  constraints = { min: Number.MAX_SAFE_INTEGER, max: 0 },\n) => {\n  nodes.forEach((node) => {\n    const { start, end, children } = node;\n    if (start < constraints.min) {\n      constraints.min = start;\n    }\n    if (end > constraints.max) {\n      constraints.max = end;\n    }\n    getTimelineTreeSpanConstraints(children ?? [], constraints);\n  });\n\n  return constraints;\n};\n\n// Gets a flat list of all expanded nodes in the tree\nexport const getTimelineTreeExpandedNodesList = <T extends TimelineTreeNode & { children?: T[] }>(\n  nodes: T[],\n  expandedKeys: Set<string | number>,\n) => {\n  const expandedNodesFlat: T[] = [];\n  const traverseExpanded = (traversedNode: T | undefined) => {\n    if (!traversedNode) {\n      return;\n    }\n    expandedNodesFlat.push(traversedNode);\n    if (expandedKeys.has(traversedNode.key)) {\n      traversedNode.children?.forEach(traverseExpanded);\n    }\n  };\n\n  nodes.forEach(traverseExpanded);\n  return expandedNodesFlat;\n};\n\n// Gets a flat list of all nodes in the tree (regardless of expansion status)\nexport const getTimelineTreeNodesList = <T extends TimelineTreeNode & { children?: T[] }>(nodes: T[]) => {\n  const expandedNodesFlat: T[] = [];\n  const traverseExpanded = (traversedNode: T | undefined) => {\n    if (!traversedNode) {\n      return;\n    }\n    expandedNodesFlat.push(traversedNode);\n    traversedNode.children?.forEach(traverseExpanded);\n  };\n\n  nodes.forEach(traverseExpanded);\n  return expandedNodesFlat;\n};\n\nexport const getTimelineTreeNodesMap = <T extends TimelineTreeNode & { children?: T[] }>(\n  nodes: T[],\n  expandDepth = Infinity,\n) => {\n  const nodesMap: { [nodeId: string]: T } = {};\n\n  const traverse = (traversedNode: T | undefined, depth: number) => {\n    if (!traversedNode || depth > expandDepth) {\n      return;\n    }\n    nodesMap[traversedNode.key] = traversedNode;\n    traversedNode.children?.forEach((child: T) => traverse(child, depth + 1));\n  };\n\n  nodes.forEach(traverse, 0);\n  return nodesMap;\n};\n\nexport const useTimelineTreeExpandedNodes = <T extends ModelTraceSpanNode & { children?: T[] }>(\n  params: {\n    rootNodes?: T[];\n    // nodes beyond this depth will be collapsed\n    initialExpandDepth?: number;\n  } = {},\n) => {\n  const [expandedKeys, setExpandedKeys] = useState<Set<string | number>>(() => {\n    if (params.rootNodes) {\n      const list = values(getTimelineTreeNodesMap(params.rootNodes, params.initialExpandDepth)).map((node) => node.key);\n      return new Set(list);\n    }\n    return new Set();\n  });\n\n  return {\n    expandedKeys,\n    setExpandedKeys,\n  };\n};\n\nexport const useTimelineTreeSelectedNode = () => {\n  const [selectedNode, setSelectedNode] = useState<ModelTraceSpanNode | undefined>(undefined);\n\n  return {\n    selectedNode,\n    setSelectedNode,\n  };\n};\n\nexport const spanTimeFormatter = (executionTimeUs: number) => {\n  // Convert to different units based on the time scale\n  if (executionTimeUs === 0) {\n    return '0s';\n  } else if (executionTimeUs >= 60 * 1e6) {\n    // More than or equal to 1 minute\n    const executionTimeMin = executionTimeUs / 1e6 / 60;\n    return `${executionTimeMin.toFixed(2)}m`;\n  } else if (executionTimeUs >= 1e5) {\n    // More than or equal to 0.1 second. this\n    // is to avoid showing 3-digit ms numbers\n    const executionTimeSec = executionTimeUs / 1e6;\n    return `${executionTimeSec.toFixed(2)}s`;\n  } else {\n    // Less than 0.1 second (milliseconds)\n    const executionTimeMs = executionTimeUs / 1e3;\n    return `${executionTimeMs.toFixed(2)}ms`;\n  }\n};\n\nexport const getActiveChildIndex = (node: ModelTraceSpanNode, activeNodeId: string): number => {\n  if (node.key === activeNodeId) {\n    return 0;\n  }\n\n  return (node.children ?? []).findIndex((child) => getActiveChildIndex(child, activeNodeId) > -1);\n};\n\nexport const getModelTraceSpanNodeDepth = (node: ModelTraceSpanNode): number => {\n  if (!node.children || node.children?.length === 0) {\n    return 0;\n  }\n\n  const childDepths = node.children.map(getModelTraceSpanNodeDepth);\n  return Math.max(...childDepths) + 1;\n};\n\nexport const getSpanNodeParentIds = (node: ModelTraceSpanNode, nodeMap: { [nodeId: string]: ModelTraceSpanNode }) => {\n  const parents = new Set<string | number>();\n\n  let currentNode = node;\n  while (currentNode && currentNode.parentId) {\n    parents.add(currentNode.parentId);\n    currentNode = nodeMap[currentNode.parentId];\n  }\n\n  return parents;\n};\n","import { createContext, useContext, useEffect, useMemo, useState } from 'react';\n\nimport type { ModelTrace, ModelTraceExplorerTab, ModelTraceSpanNode } from './ModelTrace.types';\nimport { getDefaultActiveTab, parseModelTraceToTree, searchTreeBySpanId } from './ModelTraceExplorer.utils';\nimport { getTimelineTreeNodesMap } from './timeline-tree/TimelineTree.utils';\nimport { isNil } from 'lodash';\n\nexport type ModelTraceExplorerViewState = {\n  rootNode: ModelTraceSpanNode | null;\n  nodeMap: Record<string, ModelTraceSpanNode>;\n  activeView: 'summary' | 'detail';\n  setActiveView: (view: 'summary' | 'detail') => void;\n  selectedNode: ModelTraceSpanNode | undefined;\n  setSelectedNode: (node: ModelTraceSpanNode | undefined) => void;\n  activeTab: ModelTraceExplorerTab;\n  setActiveTab: (tab: ModelTraceExplorerTab) => void;\n  showTimelineTreeGantt: boolean;\n  setShowTimelineTreeGantt: (show: boolean) => void;\n  assessmentsPaneExpanded: boolean;\n  setAssessmentsPaneExpanded: (expanded: boolean) => void;\n  assessmentsPaneEnabled: boolean;\n};\n\nexport const ModelTraceExplorerViewStateContext = createContext<ModelTraceExplorerViewState>({\n  rootNode: null,\n  nodeMap: {},\n  activeView: 'summary',\n  setActiveView: () => {},\n  selectedNode: undefined,\n  setSelectedNode: () => {},\n  activeTab: 'content',\n  setActiveTab: () => {},\n  showTimelineTreeGantt: false,\n  setShowTimelineTreeGantt: () => {},\n  assessmentsPaneExpanded: false,\n  setAssessmentsPaneExpanded: () => {},\n  assessmentsPaneEnabled: true,\n});\n\nexport const useModelTraceExplorerViewState = () => {\n  return useContext(ModelTraceExplorerViewStateContext);\n};\n\nexport const ModelTraceExplorerViewStateProvider = ({\n  modelTrace,\n  initialActiveView,\n  selectedSpanIdOnRender,\n  // assessments pane is disabled if\n  // the trace doesn't exist in the backend\n  // (i.e. if the traceinfo fetch fails)\n  assessmentsPaneEnabled,\n  children,\n}: {\n  modelTrace: ModelTrace;\n  initialActiveView?: 'summary' | 'detail';\n  selectedSpanIdOnRender?: string;\n  children: React.ReactNode;\n  assessmentsPaneEnabled: boolean;\n}) => {\n  const rootNode = useMemo(() => parseModelTraceToTree(modelTrace), [modelTrace]);\n  const nodeMap = useMemo(() => (rootNode ? getTimelineTreeNodesMap([rootNode]) : {}), [rootNode]);\n  const selectedSpanOnRender = searchTreeBySpanId(rootNode, selectedSpanIdOnRender);\n  const defaultSelectedNode = selectedSpanOnRender ?? rootNode ?? undefined;\n  const hasAssessments = (defaultSelectedNode?.assessments?.length ?? 0) > 0;\n  const hasInputsOrOutputs = !isNil(rootNode?.inputs) || !isNil(rootNode?.outputs);\n\n  const [activeView, setActiveView] = useState<'summary' | 'detail'>(\n    initialActiveView ?? (hasInputsOrOutputs ? 'summary' : 'detail'),\n  );\n  const [selectedNode, setSelectedNode] = useState<ModelTraceSpanNode | undefined>(defaultSelectedNode);\n  const defaultActiveTab = getDefaultActiveTab(selectedNode);\n  const [activeTab, setActiveTab] = useState<ModelTraceExplorerTab>(defaultActiveTab);\n  const [showTimelineTreeGantt, setShowTimelineTreeGantt] = useState(false);\n  const [assessmentsPaneExpanded, setAssessmentsPaneExpanded] = useState(hasAssessments);\n\n  useEffect(() => {\n    const defaultActiveTab = getDefaultActiveTab(selectedNode);\n    setActiveTab(defaultActiveTab);\n  }, [selectedNode]);\n\n  const value = useMemo(\n    () => ({\n      rootNode,\n      nodeMap,\n      activeView,\n      setActiveView,\n      activeTab,\n      setActiveTab,\n      selectedNode,\n      setSelectedNode,\n      showTimelineTreeGantt,\n      setShowTimelineTreeGantt,\n      assessmentsPaneExpanded,\n      setAssessmentsPaneExpanded,\n      assessmentsPaneEnabled,\n    }),\n    [\n      activeView,\n      nodeMap,\n      activeTab,\n      rootNode,\n      selectedNode,\n      showTimelineTreeGantt,\n      setShowTimelineTreeGantt,\n      assessmentsPaneExpanded,\n      setAssessmentsPaneExpanded,\n      assessmentsPaneEnabled,\n    ],\n  );\n\n  return (\n    <ModelTraceExplorerViewStateContext.Provider value={value}>{children}</ModelTraceExplorerViewStateContext.Provider>\n  );\n};\n","import { compact, isNil } from 'lodash';\nimport { useCallback, useLayoutEffect, useMemo, useState } from 'react';\n\nimport type {\n  ModelTraceExplorerTab,\n  ModelTraceSpanNode,\n  SearchMatch,\n  SpanFilterState,\n  ModelTrace,\n} from '../ModelTrace.types';\nimport { searchTree } from '../ModelTraceExplorer.utils';\nimport {\n  getSpanNodeParentIds,\n  getTimelineTreeNodesList,\n  getTimelineTreeNodesMap,\n} from '../timeline-tree/TimelineTree.utils';\n\nconst getDefaultSpanFilterState = (treeNode: ModelTraceSpanNode | null): SpanFilterState => {\n  const spanTypeDisplayState: Record<string, boolean> = {};\n\n  // populate the spanTypeDisplayState with\n  // all span types that exist on the trace\n  if (treeNode) {\n    const allSpanTypes = compact(getTimelineTreeNodesList<ModelTraceSpanNode>([treeNode]).map((node) => node.type));\n    allSpanTypes.forEach((spanType) => {\n      spanTypeDisplayState[spanType] = true;\n    });\n  }\n\n  return {\n    showParents: true,\n    showExceptions: true,\n    spanTypeDisplayState,\n  };\n};\n\nconst getTabForMatch = (match: SearchMatch): ModelTraceExplorerTab => {\n  switch (match.section) {\n    case 'inputs':\n    case 'outputs':\n      return 'content';\n    case 'attributes':\n      return 'attributes';\n    case 'events':\n      return 'events';\n    default:\n      // shouldn't happen\n      return 'content';\n  }\n};\n\nexport const useModelTraceSearch = ({\n  treeNode,\n  selectedNode,\n  setSelectedNode,\n  setActiveTab,\n  setExpandedKeys,\n  modelTraceInfo,\n}: {\n  treeNode: ModelTraceSpanNode | null;\n  selectedNode: ModelTraceSpanNode | undefined;\n  setSelectedNode: (node: ModelTraceSpanNode) => void;\n  setActiveTab: (tab: ModelTraceExplorerTab) => void;\n  setExpandedKeys: React.Dispatch<React.SetStateAction<Set<string | number>>>;\n  modelTraceInfo: ModelTrace['info'] | null;\n}): {\n  searchFilter: string;\n  setSearchFilter: (filter: string) => void;\n  spanFilterState: SpanFilterState;\n  setSpanFilterState: (state: SpanFilterState) => void;\n  filteredTreeNodes: ModelTraceSpanNode[];\n  matchData: {\n    match: SearchMatch | null;\n    totalMatches: number;\n    currentMatchIndex: number;\n  };\n  handleNextSearchMatch: () => void;\n  handlePreviousSearchMatch: () => void;\n} => {\n  const [searchFilter, setSearchFilter] = useState<string>('');\n  const [spanFilterState, setSpanFilterState] = useState<SpanFilterState>(() => getDefaultSpanFilterState(treeNode));\n  const [activeMatchIndex, setActiveMatchIndex] = useState(0);\n  const { filteredTreeNodes, matches } = useMemo(() => {\n    if (isNil(treeNode)) {\n      return {\n        filteredTreeNodes: [],\n        matches: [],\n      };\n    }\n\n    return searchTree(treeNode, searchFilter, spanFilterState);\n    // use the span ID to determine whether the state should be recomputed.\n    // using the whole object seems to cause the state to be reset at\n    // unexpected times.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [treeNode?.key, searchFilter, spanFilterState, modelTraceInfo]);\n\n  const nodeMap = useMemo(() => {\n    return getTimelineTreeNodesMap(filteredTreeNodes);\n  }, [filteredTreeNodes]);\n\n  const selectMatch = useCallback(\n    (newMatchIndex: number) => {\n      if (newMatchIndex >= matches.length || newMatchIndex < 0) {\n        return;\n      }\n      setActiveMatchIndex(newMatchIndex);\n      const match = matches[newMatchIndex];\n      setSelectedNode(match.span);\n      setActiveTab(getTabForMatch(match));\n      // Make sure parents are expanded\n      const parents = getSpanNodeParentIds(match.span, nodeMap);\n      setExpandedKeys((expandedKeys) => {\n        // set.union seems to not be available in all environments\n        return new Set([...expandedKeys, ...parents]);\n      });\n    },\n    [matches, setSelectedNode, setActiveTab, nodeMap, setExpandedKeys],\n  );\n\n  const handleNextSearchMatch = useCallback(() => {\n    selectMatch(activeMatchIndex + 1);\n  }, [activeMatchIndex, selectMatch]);\n\n  const handlePreviousSearchMatch = useCallback(() => {\n    selectMatch(activeMatchIndex - 1);\n  }, [activeMatchIndex, selectMatch]);\n\n  useLayoutEffect(() => {\n    if (filteredTreeNodes.length === 0) {\n      return;\n    }\n\n    // this case can trigger on two conditions:\n    // 1. the search term is cleared, therefore there are no matches\n    // 2. the search term only matches on span names, which don't count\n    //    as matches since we don't support jumping to them.\n    if (matches.length === 0) {\n      // if the selected node is no longer in the tree, then select\n      // the first node. this can occur from condition #2 above\n      const selectedNodeKey = selectedNode?.key ?? '';\n      if (!(selectedNodeKey in nodeMap)) {\n        const newSpan = filteredTreeNodes[0];\n        setSelectedNode(newSpan);\n        setActiveTab(newSpan?.chatMessages ? 'chat' : 'content');\n      } else {\n        // another reason the tree can change is if modelTraceInfo changes.\n        // (e.g. tags/assessments were updated). if this happens, we need\n        // to reselect the updated node from the node map, otherwise the\n        // updates will not be reflected in the UI.\n        setSelectedNode(nodeMap[selectedNodeKey]);\n      }\n\n      // otherwise, if search was cleared, then we don't want to\n      // do anything. this is to preserve the user's context\n      // (e.g. they've jumped to a span and now want to dive deeper)\n      return;\n    }\n\n    // when matches update, select the first match\n    setActiveMatchIndex(0);\n    setSelectedNode(matches[0].span);\n    setActiveTab(getTabForMatch(matches[0]));\n    // don't subscribe to selectedNode to prevent infinite loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filteredTreeNodes, matches, setSelectedNode]);\n\n  return {\n    matchData: {\n      match: matches[activeMatchIndex] ?? null,\n      totalMatches: matches.length,\n      currentMatchIndex: activeMatchIndex,\n    },\n    searchFilter: searchFilter.toLowerCase().trim(),\n    setSearchFilter,\n    spanFilterState,\n    setSpanFilterState,\n    filteredTreeNodes,\n    handleNextSearchMatch,\n    handlePreviousSearchMatch,\n  };\n};\n","import React, { useCallback } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport { ACTIVE_HIGHLIGHT_COLOR, INACTIVE_HIGHLIGHT_COLOR } from './constants';\n\nexport const ModelTraceExplorerHighlightedSnippetTitle = ({\n  title,\n  searchFilter,\n  isActiveMatch,\n}: {\n  title: string;\n  searchFilter: string;\n  isActiveMatch: boolean;\n}): React.ReactElement => {\n  const { theme } = useDesignSystemTheme();\n  const scrollToActiveMatch = useCallback((node: HTMLElement | null) => {\n    node?.scrollIntoView({ block: 'nearest', inline: 'nearest' });\n  }, []);\n\n  const titleLower = title.toLowerCase();\n  if (!titleLower.includes(searchFilter)) {\n    return <div>{title}</div>;\n  }\n\n  const startIdx = titleLower.indexOf(searchFilter);\n  const endIdx = startIdx + searchFilter.length;\n  const backgroundColor = isActiveMatch ? theme.colors[ACTIVE_HIGHLIGHT_COLOR] : theme.colors[INACTIVE_HIGHLIGHT_COLOR];\n\n  return (\n    <div>\n      {title.slice(0, startIdx)}\n      <span ref={isActiveMatch ? scrollToActiveMatch : null} css={{ backgroundColor, scrollMarginTop: 50 }}>\n        {title.slice(startIdx, endIdx)}\n      </span>\n      {title.slice(endIdx)}\n    </div>\n  );\n};\n","import { isString } from 'lodash';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport { ChevronDownIcon, DropdownMenu, Tag, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { SearchMatch } from './ModelTrace.types';\nimport { CodeSnippetRenderMode } from './ModelTrace.types';\nimport { ModelTraceExplorerCodeSnippetBody } from './ModelTraceExplorerCodeSnippetBody';\nimport { ModelTraceExplorerHighlightedSnippetTitle } from './ModelTraceExplorerHighlightedSnippetTitle';\n\n// return the initial render mode if specified, otherwise\n// default to markdown for string data and json for non-string data\nfunction getInitialRenderMode(dataIsString: boolean, initialRenderMode?: CodeSnippetRenderMode) {\n  if (initialRenderMode) {\n    return initialRenderMode;\n  }\n\n  if (dataIsString) {\n    return CodeSnippetRenderMode.MARKDOWN;\n  }\n\n  return CodeSnippetRenderMode.JSON;\n}\n\nfunction getRenderModeDisplayText(renderMode: CodeSnippetRenderMode) {\n  switch (renderMode) {\n    case CodeSnippetRenderMode.JSON:\n      return 'JSON';\n    case CodeSnippetRenderMode.TEXT:\n      return 'Text';\n    case CodeSnippetRenderMode.MARKDOWN:\n      return 'Markdown';\n    case CodeSnippetRenderMode.PYTHON:\n      return 'Python';\n  }\n}\n\nexport function ModelTraceExplorerCodeSnippet({\n  title,\n  tokens,\n  data,\n  searchFilter = '',\n  activeMatch = null,\n  containsActiveMatch = false,\n  initialRenderMode,\n}: {\n  title: string;\n  tokens?: number;\n  data: string;\n  searchFilter?: string;\n  // the current active search match\n  activeMatch?: SearchMatch | null;\n  // whether the snippet being rendered contains the\n  // current active match (either in the key or value)\n  containsActiveMatch?: boolean;\n  initialRenderMode?: CodeSnippetRenderMode;\n}) {\n  const parsedData = useMemo(() => JSON.parse(data), [data]);\n  const dataIsString = isString(parsedData);\n  const { theme } = useDesignSystemTheme();\n  // string data can be rendered in multiple formats\n  const [renderMode, setRenderMode] = useState<CodeSnippetRenderMode>(\n    getInitialRenderMode(dataIsString, initialRenderMode),\n  );\n  const isTitleMatch = containsActiveMatch && (activeMatch?.isKeyMatch ?? false);\n  const shouldShowRenderModeDropdown = dataIsString && !searchFilter;\n\n  // we need to reset the render mode when the data changes\n  useEffect(() => {\n    setRenderMode(getInitialRenderMode(dataIsString, initialRenderMode));\n  }, [dataIsString, initialRenderMode]);\n\n  return (\n    <div\n      css={{\n        position: 'relative',\n      }}\n    >\n      <div\n        css={{\n          borderRadius: theme.borders.borderRadiusSm,\n          border: `1px solid ${theme.colors.border}`,\n          overflow: 'hidden',\n        }}\n      >\n        {(title || shouldShowRenderModeDropdown) && (\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'row',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              padding: theme.spacing.sm,\n            }}\n          >\n            {/* TODO: support other types of formatting, e.g. markdown */}\n            <Typography.Title\n              css={{\n                maxWidth: '100%',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap',\n              }}\n              level={4}\n              color=\"secondary\"\n              withoutMargins\n            >\n              <ModelTraceExplorerHighlightedSnippetTitle\n                title={title}\n                searchFilter={searchFilter}\n                isActiveMatch={isTitleMatch}\n              />\n            </Typography.Title>\n            <div css={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n              {shouldShowRenderModeDropdown && (\n                <DropdownMenu.Root>\n                  <DropdownMenu.Trigger asChild>\n                    <Tag\n                      componentId=\"shared.model-trace-explorer.snippet-render-mode-tag\"\n                      css={{\n                        height: 'min-content',\n                        margin: 0,\n                      }}\n                    >\n                      {/* for some reason `cursor: pointer` doesn't work if you set it on the Tag css */}\n                      <div css={{ paddingLeft: theme.spacing.xs, marginRight: theme.spacing.xs, cursor: 'pointer' }}>\n                        <Typography.Text size=\"sm\" color=\"secondary\">\n                          {getRenderModeDisplayText(renderMode)}\n                        </Typography.Text>\n                        <ChevronDownIcon />\n                      </div>\n                    </Tag>\n                  </DropdownMenu.Trigger>\n                  <DropdownMenu.Content>\n                    <DropdownMenu.RadioGroup\n                      componentId=\"shared.model-trace-explorer.snippet-render-mode-radio\"\n                      value={renderMode}\n                      onValueChange={(value) => setRenderMode(value as CodeSnippetRenderMode)}\n                    >\n                      {Object.values(CodeSnippetRenderMode).map((mode) => {\n                        if (mode === CodeSnippetRenderMode.PYTHON) {\n                          return null;\n                        }\n                        return (\n                          <DropdownMenu.RadioItem key={mode} value={mode}>\n                            <DropdownMenu.ItemIndicator />\n                            {getRenderModeDisplayText(mode)}\n                          </DropdownMenu.RadioItem>\n                        );\n                      })}\n                    </DropdownMenu.RadioGroup>\n                    <DropdownMenu.Arrow />\n                  </DropdownMenu.Content>\n                </DropdownMenu.Root>\n              )}\n            </div>\n          </div>\n        )}\n        <ModelTraceExplorerCodeSnippetBody\n          data={data}\n          searchFilter={searchFilter}\n          activeMatch={activeMatch}\n          containsActiveMatch={containsActiveMatch}\n          renderMode={renderMode}\n        />\n      </div>\n    </div>\n  );\n}\n","import { isNil, keys } from 'lodash';\n\nimport { Empty, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { ModelTraceSpanNode, SearchMatch } from '../ModelTrace.types';\nimport { ModelTraceExplorerCodeSnippet } from '../ModelTraceExplorerCodeSnippet';\n\nexport function ModelTraceExplorerAttributesTab({\n  activeSpan,\n  searchFilter,\n  activeMatch,\n}: {\n  activeSpan: ModelTraceSpanNode;\n  searchFilter: string;\n  activeMatch: SearchMatch | null;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const { attributes } = activeSpan;\n  const containsAttributes = keys(attributes).length > 0;\n  const isActiveMatchSpan = !isNil(activeMatch) && activeMatch.span.key === activeSpan.key;\n\n  if (!containsAttributes || isNil(attributes)) {\n    return (\n      <div css={{ marginTop: theme.spacing.md }}>\n        <Empty\n          description={\n            <FormattedMessage\n              defaultMessage=\"No attributes found\"\n              description=\"Empty state for the attributes tab in the model trace explorer. Attributes are properties of a span that the user defines.\"\n            />\n          }\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n        padding: theme.spacing.md,\n      }}\n    >\n      {Object.entries(attributes).map(([key, value]) => (\n        <ModelTraceExplorerCodeSnippet\n          key={key}\n          title={key}\n          data={JSON.stringify(value, null, 2)}\n          searchFilter={searchFilter}\n          activeMatch={activeMatch}\n          containsActiveMatch={isActiveMatchSpan && activeMatch.section === 'attributes' && activeMatch.key === key}\n        />\n      ))}\n    </div>\n  );\n}\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { ModelTraceChatToolParamProperty } from '../ModelTrace.types';\n\nexport function ModelTraceExplorerChatToolParam({\n  paramName,\n  paramProperties,\n  isRequired,\n}: {\n  paramName: string;\n  paramProperties: ModelTraceChatToolParamProperty;\n  isRequired: boolean;\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  const { type, description, enum: enumValues } = paramProperties;\n\n  const hasAdditionalInfo = type || description || enumValues;\n\n  const borderStyles = hasAdditionalInfo\n    ? {\n        borderTopLeftRadius: theme.borders.borderRadiusMd,\n        borderTopRightRadius: theme.borders.borderRadiusMd,\n        borderBottom: `1px solid ${theme.colors.border}`,\n      }\n    : {\n        borderRadius: theme.borders.borderRadiusMd,\n      };\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%',\n        borderRadius: theme.borders.borderRadiusMd,\n        border: `1px solid ${theme.colors.border}`,\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          backgroundColor: theme.colors.backgroundSecondary,\n          padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n          gap: theme.spacing.sm,\n          ...borderStyles,\n        }}\n      >\n        <Typography.Title withoutMargins style={{ whiteSpace: 'nowrap', textOverflow: 'ellipsis', overflow: 'hidden' }}>\n          {paramName}\n        </Typography.Title>\n        {isRequired && (\n          <Typography.Text withoutMargins color=\"error\">\n            <FormattedMessage\n              defaultMessage=\"required\"\n              description=\"Text displayed next to a function parameter to indicate that it is required\"\n            />\n          </Typography.Text>\n        )}\n      </div>\n      {hasAdditionalInfo && (\n        <div\n          css={{\n            display: 'grid',\n            gridTemplateColumns: 'auto 1fr',\n            gridTemplateRows: 'auto',\n            gap: theme.spacing.md,\n            padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n          }}\n        >\n          {type && (\n            <>\n              <Typography.Text withoutMargins bold>\n                <FormattedMessage\n                  defaultMessage=\"Type\"\n                  description=\"Row heading in a table that contains the type of a function parameter (e.g. string, boolean)\"\n                />\n              </Typography.Text>\n              <Typography.Text withoutMargins code>\n                {type}\n              </Typography.Text>\n            </>\n          )}\n          {description && (\n            <>\n              <Typography.Text withoutMargins bold>\n                <FormattedMessage\n                  defaultMessage=\"Description\"\n                  description=\"Row heading in a table that contains the description of a function parameter.\"\n                />\n              </Typography.Text>\n              <Typography.Text withoutMargins>{description}</Typography.Text>\n            </>\n          )}\n          {enumValues && (\n            <>\n              <Typography.Text withoutMargins bold>\n                <FormattedMessage\n                  defaultMessage=\"Enum Values\"\n                  description=\"Row heading in a table that contains the potential enum values that a function parameter can have.\"\n                />\n              </Typography.Text>\n              <div css={{ display: 'flex', flexDirection: 'row', gap: theme.spacing.sm, flexWrap: 'wrap' }}>\n                {enumValues.map((value) => (\n                  <Typography.Text withoutMargins code key={value}>\n                    {value}\n                  </Typography.Text>\n                ))}\n              </div>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","import { useState } from 'react';\n\nimport { ChevronDownIcon, ChevronRightIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport { ModelTraceExplorerChatToolParam } from './ModelTraceExplorerChatToolParam';\nimport type { ModelTraceChatTool } from '../ModelTrace.types';\n\nexport function ModelTraceExplorerChatTool({ tool }: { tool: ModelTraceChatTool }) {\n  const { theme } = useDesignSystemTheme();\n  const [expanded, setExpanded] = useState(false);\n\n  const description = tool.function.description;\n  const paramProperties = tool.function.parameters?.properties;\n  const requiredParams = tool.function.parameters?.required ?? [];\n\n  // tools only need to have names, so it's\n  // possible that no additional info exists\n  const isExpandable = description || paramProperties;\n\n  const hoverStyles = isExpandable\n    ? { ':hover': { backgroundColor: theme.colors.actionIconBackgroundHover, cursor: 'pointer' } }\n    : {};\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%',\n        borderRadius: theme.borders.borderRadiusMd,\n        border: `1px solid ${theme.colors.border}`,\n        backgroundColor: theme.colors.backgroundPrimary,\n      }}\n      data-testid=\"model-trace-explorer-chat-tool\"\n    >\n      <div\n        role=\"button\"\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          gap: theme.spacing.sm,\n          alignItems: 'center',\n          borderBottom: isExpandable && expanded ? `1px solid ${theme.colors.border}` : 'none',\n          padding: theme.spacing.sm,\n          ...hoverStyles,\n        }}\n        onClick={() => setExpanded(!expanded)}\n        data-testid=\"model-trace-explorer-chat-tool-toggle\"\n      >\n        {isExpandable && (expanded ? <ChevronDownIcon /> : <ChevronRightIcon />)}\n        <Typography.Text\n          bold\n          withoutMargins\n          style={{ whiteSpace: 'nowrap', textOverflow: 'ellipsis', overflow: 'hidden' }}\n        >\n          {tool.function.name}\n        </Typography.Text>\n      </div>\n      {isExpandable && expanded && (\n        <div css={{ padding: theme.spacing.sm }}>\n          {description && (\n            <Typography.Paragraph\n              style={{ whiteSpace: 'pre-wrap', marginBottom: theme.spacing.sm, padding: `0px ${theme.spacing.xs}px` }}\n            >\n              {tool.function.description}\n            </Typography.Paragraph>\n          )}\n          {paramProperties && (\n            <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n              {Object.keys(paramProperties).map((key) => (\n                <ModelTraceExplorerChatToolParam\n                  key={key}\n                  paramName={key}\n                  paramProperties={paramProperties[key]}\n                  isRequired={requiredParams.includes(key)}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","import { isNil } from 'lodash';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport { ModelTraceExplorerChatMessage } from './ModelTraceExplorerChatMessage';\nimport type { ModelTraceChatMessage } from '../ModelTrace.types';\n\nexport function ModelTraceExplorerConversation({ messages }: { messages: ModelTraceChatMessage[] | null }) {\n  const { theme } = useDesignSystemTheme();\n\n  if (isNil(messages)) {\n    return null;\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n      }}\n    >\n      {messages.map((message, index) => (\n        <ModelTraceExplorerChatMessage key={index} message={message} />\n      ))}\n    </div>\n  );\n}\n","import { useState } from 'react';\n\nimport { Button, ChevronDownIcon, ChevronRightIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nexport const ModelTraceExplorerCollapsibleSection = ({\n  sectionKey,\n  title,\n  children,\n  withBorder = false,\n  className,\n}: {\n  sectionKey: string;\n  title: React.ReactNode;\n  children: React.ReactNode;\n  withBorder?: boolean;\n  className?: string;\n}) => {\n  const [expanded, setExpanded] = useState(true);\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      className={className}\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        borderRadius: theme.borders.borderRadiusMd,\n      }}\n    >\n      <div\n        css={{\n          alignItems: 'center',\n          display: 'flex',\n          flexDirection: 'row',\n          gap: theme.spacing.xs,\n          padding: withBorder ? theme.spacing.sm : 0,\n          background: withBorder ? theme.colors.backgroundSecondary : undefined,\n          borderTopLeftRadius: theme.borders.borderRadiusMd,\n          borderTopRightRadius: theme.borders.borderRadiusMd,\n          borderBottomLeftRadius: expanded ? 0 : theme.borders.borderRadiusMd,\n          borderBottomRightRadius: expanded ? 0 : theme.borders.borderRadiusMd,\n          border: withBorder ? `1px solid ${theme.colors.border}` : undefined,\n          marginBottom: withBorder ? 0 : theme.spacing.sm,\n        }}\n      >\n        <Button\n          size=\"small\"\n          componentId={`shared.model-trace-explorer.expand-${sectionKey}`}\n          type=\"tertiary\"\n          icon={expanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n          onClick={() => setExpanded(!expanded)}\n        />\n        <Typography.Title withoutMargins level={4} css={{ width: '100%' }}>\n          {title}\n        </Typography.Title>\n      </div>\n      {expanded && (\n        <div\n          css={{\n            border: withBorder ? `1px solid ${theme.colors.border}` : undefined,\n            borderTop: 'none',\n            borderBottomLeftRadius: withBorder ? theme.borders.borderRadiusMd : undefined,\n            borderBottomRightRadius: withBorder ? theme.borders.borderRadiusMd : undefined,\n            padding: withBorder ? theme.spacing.sm : 0,\n          }}\n        >\n          {children}\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { ModelTraceExplorerChatTool } from './ModelTraceExplorerChatTool';\nimport { ModelTraceExplorerConversation } from './ModelTraceExplorerConversation';\nimport type { ModelTraceChatMessage, ModelTraceChatTool } from '../ModelTrace.types';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\n\nexport function ModelTraceExplorerChatTab({\n  chatMessages,\n  chatTools,\n}: {\n  chatMessages: ModelTraceChatMessage[];\n  chatTools?: ModelTraceChatTool[];\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        overflowY: 'auto',\n        padding: theme.spacing.md,\n      }}\n      data-testid=\"model-trace-explorer-chat-tab\"\n    >\n      {chatTools && (\n        <ModelTraceExplorerCollapsibleSection\n          css={{ marginBottom: theme.spacing.sm }}\n          title={\n            <FormattedMessage\n              defaultMessage=\"Tools\"\n              description=\"Section header in the chat tab that displays all tools that were available for the chat model to call during execution\"\n            />\n          }\n          sectionKey=\"messages\"\n        >\n          <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n            {chatTools.map((tool) => (\n              <ModelTraceExplorerChatTool key={tool.function.name} tool={tool} />\n            ))}\n          </div>\n        </ModelTraceExplorerCollapsibleSection>\n      )}\n\n      <ModelTraceExplorerCollapsibleSection\n        title={\n          <FormattedMessage\n            defaultMessage=\"Messages\"\n            description=\"Section header in the chat tab that displays the message history between the user and the chat model\"\n          />\n        }\n        sectionKey=\"messages\"\n      >\n        <ModelTraceExplorerConversation messages={chatMessages} />\n      </ModelTraceExplorerCollapsibleSection>\n    </div>\n  );\n}\n","import { isNil } from 'lodash';\nimport { useMemo } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { ModelTraceSpanNode, SearchMatch } from '../ModelTrace.types';\nimport { createListFromObject } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCodeSnippet } from '../ModelTraceExplorerCodeSnippet';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\n\nexport function ModelTraceExplorerDefaultSpanView({\n  activeSpan,\n  className,\n  searchFilter,\n  activeMatch,\n}: {\n  activeSpan: ModelTraceSpanNode | undefined;\n  className?: string;\n  searchFilter: string;\n  activeMatch: SearchMatch | null;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const inputList = useMemo(() => createListFromObject(activeSpan?.inputs), [activeSpan]);\n  const outputList = useMemo(() => createListFromObject(activeSpan?.outputs), [activeSpan]);\n\n  if (isNil(activeSpan)) {\n    return null;\n  }\n\n  const containsInputs = inputList.length > 0;\n  const containsOutputs = outputList.length > 0;\n\n  const isActiveMatchSpan = !isNil(activeMatch) && activeMatch.span.key === activeSpan.key;\n\n  return (\n    <div data-testid=\"model-trace-explorer-default-span-view\">\n      {containsInputs && (\n        <ModelTraceExplorerCollapsibleSection\n          withBorder\n          css={{ marginBottom: theme.spacing.sm }}\n          sectionKey=\"input\"\n          title={\n            <div\n              css={{\n                display: 'flex',\n                flexDirection: 'row',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                width: '100%',\n              }}\n            >\n              <FormattedMessage\n                defaultMessage=\"Inputs\"\n                description=\"Model trace explorer > selected span > inputs header\"\n              />\n            </div>\n          }\n        >\n          <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n            {inputList.map(({ key, value }, index) => (\n              <ModelTraceExplorerCodeSnippet\n                key={key || index}\n                title={key}\n                data={value}\n                searchFilter={searchFilter}\n                activeMatch={activeMatch}\n                containsActiveMatch={isActiveMatchSpan && activeMatch.section === 'inputs' && activeMatch.key === key}\n              />\n            ))}\n          </div>\n        </ModelTraceExplorerCollapsibleSection>\n      )}\n      {containsOutputs && (\n        <ModelTraceExplorerCollapsibleSection\n          withBorder\n          sectionKey=\"output\"\n          title={\n            <div css={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', width: '100%' }}>\n              <FormattedMessage\n                defaultMessage=\"Outputs\"\n                description=\"Model trace explorer > selected span > outputs header\"\n              />\n            </div>\n          }\n        >\n          <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n            {outputList.map(({ key, value }) => (\n              <ModelTraceExplorerCodeSnippet\n                key={key}\n                title={key}\n                data={value}\n                searchFilter={searchFilter}\n                activeMatch={activeMatch}\n                containsActiveMatch={isActiveMatchSpan && activeMatch.section === 'outputs' && activeMatch.key === key}\n              />\n            ))}\n          </div>\n        </ModelTraceExplorerCollapsibleSection>\n      )}\n    </div>\n  );\n}\n","import type { Interpolation, Theme } from '@emotion/react';\n\nimport { Tag, Tooltip, Typography } from '@databricks/design-system';\n\n// max characters for key + value before truncation\nconst MAX_CHARS_LENGTH = 18;\n\nconst getTruncatedStyles = (shouldTruncate: boolean): Interpolation<Theme> =>\n  shouldTruncate\n    ? {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      }\n    : { whiteSpace: 'nowrap' };\n\n/**\n * A <Tag /> wrapper used for displaying key-value entity\n */\nexport const KeyValueTag = ({\n  itemKey,\n  itemValue,\n  charLimit = MAX_CHARS_LENGTH,\n  maxWidth = 150,\n  className,\n}: {\n  itemKey: string;\n  itemValue: string;\n  charLimit?: number;\n  maxWidth?: number;\n  className?: string;\n}) => {\n  const { shouldTruncateKey, shouldTruncateValue } = getKeyAndValueComplexTruncation(itemKey, itemValue, charLimit);\n\n  return (\n    <Tooltip componentId=\"shared.model-trace-explorer.key-value-tag.hover-tooltip\" content={`${itemKey}: ${itemValue}`}>\n      <Tag componentId=\"shared.model-trace-explorer.key-value-tag\" className={className}>\n        <span css={{ maxWidth, display: 'inline-flex' }}>\n          <Typography.Text bold css={getTruncatedStyles(shouldTruncateKey)} size=\"sm\">\n            {itemKey}\n          </Typography.Text>\n          :&nbsp;\n          <Typography.Text css={getTruncatedStyles(shouldTruncateValue)} size=\"sm\">\n            {itemValue}\n          </Typography.Text>\n        </span>\n      </Tag>\n    </Tooltip>\n  );\n};\n\nexport function getKeyAndValueComplexTruncation(\n  key: string,\n  value: string,\n  charLimit: number,\n): { shouldTruncateKey: boolean; shouldTruncateValue: boolean } {\n  const fullLength = key.length + value.length;\n  const isKeyLonger = key.length > value.length;\n  const shorterLength = isKeyLonger ? value.length : key.length;\n\n  // No need to truncate if tag is short enough\n  if (fullLength <= charLimit) return { shouldTruncateKey: false, shouldTruncateValue: false };\n  // If the shorter string is too long, truncate both key and value.\n  if (shorterLength > charLimit / 2) return { shouldTruncateKey: true, shouldTruncateValue: true };\n\n  // Otherwise truncate the longer string\n  return {\n    shouldTruncateKey: isKeyLonger,\n    shouldTruncateValue: !isKeyLonger,\n  };\n}\n","import { Button, ChevronUpIcon, FileDocumentIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { GenAIMarkdownRenderer } from '../../genai-markdown-renderer';\nimport { KeyValueTag } from '../key-value-tag/KeyValueTag';\n\nexport function ModelTraceExplorerRetrieverDocumentFull({\n  text,\n  metadataTags,\n  setExpanded,\n  logDocumentClick,\n}: {\n  text: string;\n  metadataTags: { key: string; value: string }[];\n  setExpanded: (expanded: boolean) => void;\n  logDocumentClick?: (action: string) => void;\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'column' }}>\n      <div\n        role=\"button\"\n        onClick={() => {\n          setExpanded(false);\n          logDocumentClick?.('collapse');\n        }}\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          cursor: 'pointer',\n          padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n          height: theme.typography.lineHeightBase,\n          boxSizing: 'content-box',\n          '&:hover': {\n            backgroundColor: theme.colors.backgroundSecondary,\n          },\n        }}\n      >\n        <FileDocumentIcon />\n      </div>\n      <div css={{ padding: theme.spacing.md, paddingBottom: 0 }}>\n        <GenAIMarkdownRenderer>{text}</GenAIMarkdownRenderer>\n      </div>\n      <div css={{ padding: theme.spacing.md, paddingTop: 0 }}>\n        {metadataTags.map(({ key, value }) => (\n          <KeyValueTag key={key} itemKey={key} itemValue={value} />\n        ))}\n      </div>\n      <Button\n        css={{ width: '100%', padding: theme.spacing.sm }}\n        componentId=\"shared.model-trace-explorer.retriever-document-collapse\"\n        icon={<ChevronUpIcon />}\n        type=\"tertiary\"\n        onClick={() => setExpanded(false)}\n      >\n        <FormattedMessage\n          defaultMessage=\"See less\"\n          description=\"Model trace explorer > selected span > code snippet > see less button\"\n        />\n      </Button>\n    </div>\n  );\n}\n","import { FileDocumentIcon, Tag, Tooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport { KeyValueTag } from '../key-value-tag/KeyValueTag';\n\nexport function ModelTraceExplorerRetrieverDocumentPreview({\n  text,\n  metadataTags,\n  setExpanded,\n  logDocumentClick,\n}: {\n  text: string;\n  metadataTags: { key: string; value: string }[];\n  setExpanded: (expanded: boolean) => void;\n  logDocumentClick?: (action: string) => void;\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      role=\"button\"\n      onClick={() => {\n        setExpanded(true);\n        logDocumentClick?.('expand');\n      }}\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n        gap: theme.spacing.sm,\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        cursor: 'pointer',\n        '&:hover': {\n          backgroundColor: theme.colors.backgroundSecondary,\n        },\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          gap: theme.spacing.sm,\n          alignItems: 'center',\n          minWidth: 0,\n          flexShrink: 1,\n        }}\n      >\n        <FileDocumentIcon />\n        <Typography.Text ellipsis size=\"md\">\n          {text}\n        </Typography.Text>\n      </div>\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          gap: theme.spacing.sm,\n        }}\n      >\n        {metadataTags.length > 0 ? (\n          <KeyValueTag css={{ margin: 0 }} itemKey={metadataTags[0].key} itemValue={metadataTags[0].value} />\n        ) : null}\n        {metadataTags.length > 1 ? (\n          <Tooltip\n            componentId=\"shared.model-trace-explorer.tag-count.hover-tooltip\"\n            content={metadataTags.slice(1).map(({ key, value }) => (\n              <span key={key} css={{ display: 'inline-block' }}>\n                {`${key}: ${value}`}\n              </span>\n            ))}\n          >\n            <Tag componentId=\"shared.model-trace-explorer.tag-count\" css={{ whiteSpace: 'nowrap', margin: 0 }}>\n              +{metadataTags.length - 1}\n            </Tag>\n          </Tooltip>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n","import { useCallback, useState } from 'react';\n\nimport { ModelTraceExplorerRetrieverDocumentFull } from './ModelTraceExplorerRetrieverDocumentFull';\nimport { ModelTraceExplorerRetrieverDocumentPreview } from './ModelTraceExplorerRetrieverDocumentPreview';\nimport { createListFromObject } from '../ModelTraceExplorer.utils';\n\nexport function ModelTraceExplorerRetrieverDocument({\n  text,\n  metadata,\n}: {\n  text: string;\n  metadata: { [key: string]: any };\n}) {\n  const [expanded, setExpanded] = useState(false);\n  const metadataTags = createListFromObject(metadata);\n\n  return expanded ? (\n    <ModelTraceExplorerRetrieverDocumentFull\n      // comment to prevent copybara formatting\n      text={text}\n      metadataTags={metadataTags}\n      setExpanded={setExpanded}\n    />\n  ) : (\n    <ModelTraceExplorerRetrieverDocumentPreview\n      // comment to prevent copybara formatting\n      text={text}\n      metadataTags={metadataTags}\n      setExpanded={setExpanded}\n    />\n  );\n}\n","import {\n  MIcon,\n  SegmentedControlButton,\n  SegmentedControlGroup,\n  TextBoxIcon,\n  Tooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nexport function ModelTraceExplorerRenderModeToggle({\n  shouldRenderMarkdown,\n  setShouldRenderMarkdown,\n}: {\n  shouldRenderMarkdown: boolean;\n  setShouldRenderMarkdown: (value: boolean) => void;\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <SegmentedControlGroup\n      data-testid=\"model-trace-explorer-render-mode-toggle\"\n      name=\"render-mode\"\n      size=\"small\"\n      componentId={`shared.model-trace-explorer.toggle-markdown-rendering-${!shouldRenderMarkdown}`}\n      value={shouldRenderMarkdown}\n      onChange={(event) => {\n        setShouldRenderMarkdown(event.target.value);\n      }}\n    >\n      <SegmentedControlButton data-testid=\"model-trace-explorer-render-raw-input-button\" value={false}>\n        <Tooltip\n          componentId=\"shared.model-trace-explorer.raw-input-rendering-tooltip\"\n          content={\n            <FormattedMessage\n              defaultMessage=\"Raw input\"\n              description=\"Tooltip content for a button that changes the render mode of the data to raw input (JSON)\"\n            />\n          }\n        >\n          <div css={{ display: 'flex', alignItems: 'center' }}>\n            <TextBoxIcon css={{ fontSize: theme.typography.fontSizeLg }} />\n          </div>\n        </Tooltip>\n      </SegmentedControlButton>\n      <SegmentedControlButton data-testid=\"model-trace-explorer-render-default-button\" value>\n        <Tooltip\n          componentId=\"shared.model-trace-explorer.default-rendering-tooltip\"\n          content={\n            <FormattedMessage\n              defaultMessage=\"Default rendering\"\n              description=\"Tooltip content for a button that changes the render mode to default\"\n            />\n          }\n        >\n          <div css={{ display: 'flex', alignItems: 'center' }}>\n            <MIcon css={{ fontSize: theme.typography.fontSizeLg }} />\n          </div>\n        </Tooltip>\n      </SegmentedControlButton>\n    </SegmentedControlGroup>\n  );\n}\n","import { isNil } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { Tag, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { ModelTraceExplorerRetrieverDocument } from './ModelTraceExplorerRetrieverDocument';\nimport type { ModelTraceSpanNode, RetrieverDocument, SearchMatch } from '../ModelTrace.types';\nimport { createListFromObject } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCodeSnippet } from '../ModelTraceExplorerCodeSnippet';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\nimport { ModelTraceExplorerRenderModeToggle } from '../ModelTraceExplorerRenderModeToggle';\n\nexport function ModelTraceExplorerRetrieverSpanView({\n  activeSpan,\n  className,\n  searchFilter,\n  activeMatch,\n}: {\n  activeSpan: ModelTraceSpanNode;\n  className?: string;\n  searchFilter: string;\n  activeMatch: SearchMatch | null;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const [shouldRenderMarkdown, setShouldRenderMarkdown] = useState(true);\n  const inputList = useMemo(() => createListFromObject(activeSpan.inputs), [activeSpan]);\n\n  const outputs = activeSpan.outputs as RetrieverDocument[];\n\n  const containsInputs = inputList.length > 0;\n\n  // search highlighting is not supported in markdown rendering, so\n  // if there is an active match in the documents, we have to render\n  // them as code snippets.\n  const isActiveMatchSpan = !isNil(activeMatch) && activeMatch.span.key === activeSpan.key;\n  const outputsContainsActiveMatch = isActiveMatchSpan && activeMatch.section === 'outputs';\n\n  return (\n    <div className={className} data-testid=\"model-trace-explorer-retriever-span-view\">\n      {containsInputs && (\n        <ModelTraceExplorerCollapsibleSection\n          sectionKey=\"input\"\n          css={{ marginBottom: theme.spacing.sm }}\n          title={\n            <FormattedMessage\n              defaultMessage=\"Inputs\"\n              description=\"Model trace explorer > selected span > inputs header\"\n            />\n          }\n        >\n          <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n            {inputList.map(({ key, value }, index) => (\n              <ModelTraceExplorerCodeSnippet\n                key={key || index}\n                title={key}\n                data={value}\n                searchFilter={searchFilter}\n                activeMatch={activeMatch}\n                containsActiveMatch={isActiveMatchSpan && activeMatch.section === 'inputs' && activeMatch.key === key}\n              />\n            ))}\n          </div>\n        </ModelTraceExplorerCollapsibleSection>\n      )}\n\n      <ModelTraceExplorerCollapsibleSection\n        sectionKey=\"output\"\n        title={\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n              width: '100%',\n            }}\n          >\n            <div css={{ display: 'flex', flexDirection: 'row', gap: theme.spacing.sm }}>\n              <FormattedMessage\n                defaultMessage=\"Documents\"\n                description=\"Model trace explorer > retriever span > documents header\"\n              />\n              <Tag componentId=\"shared.model-trace-explorer.document-count\">{outputs.length}</Tag>\n            </div>\n            {!outputsContainsActiveMatch && (\n              <ModelTraceExplorerRenderModeToggle\n                shouldRenderMarkdown={shouldRenderMarkdown}\n                setShouldRenderMarkdown={setShouldRenderMarkdown}\n              />\n            )}\n          </div>\n        }\n      >\n        {shouldRenderMarkdown && !outputsContainsActiveMatch ? (\n          <div\n            css={{\n              border: `1px solid ${theme.colors.border}`,\n              borderRadius: theme.legacyBorders.borderRadiusMd,\n            }}\n          >\n            {outputs.map((document, idx) => (\n              <div\n                key={idx}\n                css={{ borderBottom: idx !== outputs.length - 1 ? `1px solid ${theme.colors.border}` : '' }}\n              >\n                <ModelTraceExplorerRetrieverDocument\n                  key={idx}\n                  text={document.page_content}\n                  metadata={document.metadata}\n                />\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div\n            css={{\n              border: `1px solid ${theme.colors.border}`,\n              borderRadius: theme.legacyBorders.borderRadiusMd,\n              padding: theme.spacing.md,\n            }}\n          >\n            <ModelTraceExplorerCodeSnippet\n              title=\"\"\n              data={JSON.stringify(outputs, null, 2)}\n              searchFilter={searchFilter}\n              activeMatch={activeMatch}\n              containsActiveMatch={isActiveMatchSpan && activeMatch.section === 'outputs'}\n            />\n          </div>\n        )}\n      </ModelTraceExplorerCollapsibleSection>\n    </div>\n  );\n}\n","import { isNil } from 'lodash';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport { ModelTraceExplorerDefaultSpanView } from './ModelTraceExplorerDefaultSpanView';\nimport { ModelTraceExplorerRetrieverSpanView } from './ModelTraceExplorerRetrieverSpanView';\nimport type { ModelTraceSpanNode, SearchMatch } from '../ModelTrace.types';\nimport { isRenderableRetrieverSpan } from '../ModelTraceExplorer.utils';\n\nexport function ModelTraceExplorerContentTab({\n  activeSpan,\n  className,\n  searchFilter,\n  activeMatch,\n}: {\n  activeSpan: ModelTraceSpanNode | undefined;\n  className?: string;\n  searchFilter: string;\n  activeMatch: SearchMatch | null;\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  if (!isNil(activeSpan) && isRenderableRetrieverSpan(activeSpan)) {\n    return (\n      <div\n        css={{\n          overflowY: 'auto',\n          padding: theme.spacing.md,\n        }}\n        className={className}\n        data-testid=\"model-trace-explorer-content-tab\"\n      >\n        <ModelTraceExplorerRetrieverSpanView\n          activeSpan={activeSpan}\n          className={className}\n          searchFilter={searchFilter}\n          activeMatch={activeMatch}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      css={{\n        overflowY: 'auto',\n        padding: theme.spacing.md,\n      }}\n      className={className}\n      data-testid=\"model-trace-explorer-content-tab\"\n    >\n      <ModelTraceExplorerDefaultSpanView\n        activeSpan={activeSpan}\n        className={className}\n        searchFilter={searchFilter}\n        activeMatch={activeMatch}\n      />\n    </div>\n  );\n}\n","import { isNil } from 'lodash';\n\nimport { Empty, Typography, useDesignSystemTheme, XCircleIcon } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { CodeSnippetRenderMode, type ModelTraceSpanNode, type SearchMatch } from '../ModelTrace.types';\nimport { getEventAttributeKey } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCodeSnippet } from '../ModelTraceExplorerCodeSnippet';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\n\nexport function ModelTraceExplorerEventsTab({\n  activeSpan,\n  searchFilter,\n  activeMatch,\n}: {\n  activeSpan: ModelTraceSpanNode;\n  searchFilter: string;\n  activeMatch: SearchMatch | null;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const { events } = activeSpan;\n  const isActiveMatchSpan = !isNil(activeMatch) && activeMatch.span.key === activeSpan.key;\n\n  if (!Array.isArray(events) || events.length === 0) {\n    return (\n      <div css={{ marginTop: theme.spacing.md }}>\n        <Empty\n          description={\n            <FormattedMessage\n              defaultMessage=\"No events found\"\n              description=\"Empty state for the events tab in the model trace explorer. Events are logs of arbitrary things (e.g. exceptions) that occur during the execution of a span, and can be user-defined.\"\n            />\n          }\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div css={{ padding: theme.spacing.md }}>\n      {events.map((event, index) => {\n        const attributes = event.attributes;\n        const title =\n          event.name === 'exception' ? (\n            <>\n              <XCircleIcon css={{ marginRight: theme.spacing.sm }} color=\"danger\" />\n              <Typography.Text color=\"error\" bold>\n                Exception\n              </Typography.Text>\n            </>\n          ) : (\n            event.name\n          );\n\n        if (!attributes) return null;\n\n        return (\n          <ModelTraceExplorerCollapsibleSection\n            key={`${event.name}-${index}`}\n            sectionKey={event.name}\n            title={title}\n            withBorder\n          >\n            <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n              {Object.keys(attributes).map((attribute) => {\n                const key = getEventAttributeKey(event.name, index, attribute);\n\n                return (\n                  <ModelTraceExplorerCodeSnippet\n                    key={key}\n                    title={attribute}\n                    data={JSON.stringify(attributes[attribute], null, 2)}\n                    searchFilter={searchFilter}\n                    activeMatch={activeMatch}\n                    containsActiveMatch={\n                      isActiveMatchSpan && activeMatch.section === 'events' && activeMatch.key === key\n                    }\n                    initialRenderMode={CodeSnippetRenderMode.TEXT}\n                  />\n                );\n              })}\n            </div>\n          </ModelTraceExplorerCollapsibleSection>\n        );\n      })}\n    </div>\n  );\n}\n","import { useDesignSystemTheme } from '@databricks/design-system';\n\nexport function ModelTraceExplorerBadge({ count }: { count: number }) {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: theme.typography.fontSizeBase,\n        height: theme.typography.fontSizeBase,\n        backgroundColor: theme.colors.actionDangerPrimaryBackgroundDefault,\n        padding: theme.spacing.xs,\n        marginLeft: theme.spacing.xs,\n        boxSizing: 'border-box',\n      }}\n    >\n      <span css={{ color: theme.colors.actionPrimaryTextDefault, fontSize: 11 }}>{count}</span>\n    </div>\n  );\n}\n","import { GavelIcon, SegmentedControlGroup, SegmentedControlButton } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\nexport const AssessmentPaneToggle = () => {\n  const { assessmentsPaneExpanded, setAssessmentsPaneExpanded, assessmentsPaneEnabled } =\n    useModelTraceExplorerViewState();\n\n  return (\n    <SegmentedControlGroup\n      css={{ display: 'block' }}\n      name=\"shared.model-trace-explorer.assessments-pane-toggle\"\n      componentId=\"shared.model-trace-explorer.assessments-pane-toggle\"\n      value={assessmentsPaneExpanded}\n      size=\"small\"\n    >\n      <SegmentedControlButton\n        value\n        disabled={!assessmentsPaneEnabled}\n        icon={<GavelIcon />}\n        onClick={() => setAssessmentsPaneExpanded?.(!assessmentsPaneExpanded)}\n        css={{\n          '& > span': {\n            display: 'flex',\n            alignItems: 'center',\n          },\n        }}\n      >\n        {!assessmentsPaneExpanded && (\n          <FormattedMessage\n            defaultMessage=\"Assessments\"\n            description=\"Label for the assessments pane of the model trace explorer.\"\n          />\n        )}\n      </SegmentedControlButton>\n    </SegmentedControlGroup>\n  );\n};\n","import type { Dispatch, SetStateAction } from 'react';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport {\n  FormUI,\n  TypeaheadComboboxInput,\n  TypeaheadComboboxMenu,\n  TypeaheadComboboxMenuItem,\n  TypeaheadComboboxRoot,\n  useComboboxState,\n} from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nimport type { AssessmentSchema } from '../contexts/AssessmentSchemaContext';\nimport { useAssessmentSchemas } from '../contexts/AssessmentSchemaContext';\n\nconst getDefaultSchema = (name: string): AssessmentSchema => ({\n  name,\n  assessmentType: 'feedback',\n  dataType: 'boolean',\n});\n\nexport const AssessmentCreateNameTypeahead = ({\n  name,\n  setName,\n  nameError,\n  setNameError,\n  handleChangeSchema,\n}: {\n  name: string;\n  setName: Dispatch<SetStateAction<string>>;\n  nameError: React.ReactNode | null;\n  setNameError: Dispatch<SetStateAction<React.ReactNode | null>>;\n  handleChangeSchema: (schema: AssessmentSchema | null) => void;\n}) => {\n  const { schemas } = useAssessmentSchemas();\n  const intl = useIntl();\n  const schemaNames = schemas.map((schema) => schema.name ?? '');\n\n  const [selectedItem, setSelectedItem] = useState<AssessmentSchema | null>(null);\n  const [itemsTest, setItemsTest] = useState<(AssessmentSchema | null)[]>(schemas);\n\n  const items = useMemo(() => {\n    const filteredItems = [...itemsTest];\n\n    // hack to allow creating a new assessment name even if it's not in\n    // the schemas. basically creates a fake schema with the name of the\n    // input value so it always shows up in the typeahead\n    if (name && !schemaNames.includes(name)) {\n      const newSchema = getDefaultSchema(name);\n      filteredItems.unshift(newSchema);\n    }\n\n    return filteredItems;\n  }, [name, itemsTest, schemaNames]);\n\n  const formOnChange = useCallback(\n    (newSelectedItem: AssessmentSchema | null) => {\n      setSelectedItem(newSelectedItem);\n      handleChangeSchema(newSelectedItem);\n      setNameError(null);\n    },\n    [handleChangeSchema, setNameError],\n  );\n\n  const comboboxState = useComboboxState<AssessmentSchema | null>({\n    componentId: 'shared.model-trace-explorer.assessment-name-typeahead',\n    allItems: schemas,\n    items,\n    setItems: setItemsTest,\n    multiSelect: false,\n    setInputValue: (value) => {\n      setName(value);\n      setNameError(null);\n    },\n    itemToString: (item) => item?.name ?? '',\n    matcher: (item, query) => item?.name?.toLowerCase().includes(query.toLowerCase()) ?? false,\n    formValue: selectedItem,\n    formOnChange,\n    preventUnsetOnBlur: true,\n  });\n\n  return (\n    <TypeaheadComboboxRoot\n      onKeyDown={(e) => {\n        // disable left and right to prevent the previous/next\n        // trace interaction while typing an assessment name,\n        // but still allow up and down for tabbing through\n        // typeahead options\n        if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n          e.stopPropagation();\n        }\n      }}\n      id=\"shared.model-trace-explorer.assessment-name-typeahead\"\n      comboboxState={comboboxState}\n    >\n      <TypeaheadComboboxInput\n        data-testid=\"assessment-name-typeahead-input\"\n        placeholder={intl.formatMessage({\n          defaultMessage: 'Enter an assessment name',\n          description: 'Placeholder for the assessment name typeahead',\n        })}\n        validationState={nameError ? 'error' : undefined}\n        comboboxState={comboboxState}\n        formOnChange={formOnChange}\n        onPressEnter={() => {\n          if (items.length > 0) {\n            formOnChange(items[0]);\n          }\n        }}\n        allowClear\n        showComboboxToggleButton\n      />\n      {nameError && <FormUI.Message type=\"error\" message={nameError} />}\n      <TypeaheadComboboxMenu comboboxState={comboboxState}>\n        {items.map((item, index) => (\n          <TypeaheadComboboxMenuItem\n            data-testid={`assessment-name-typeahead-item-${item?.name ?? ''}`}\n            key={`assessment-name-typeahead-${item?.name ?? ''}`}\n            item={item}\n            index={index}\n            comboboxState={comboboxState}\n          >\n            {item?.name ?? ''}\n          </TypeaheadComboboxMenuItem>\n        ))}\n      </TypeaheadComboboxMenu>\n    </TypeaheadComboboxRoot>\n  );\n};\n","import { FormattedMessage } from '@databricks/i18n';\n\nimport type { Expectation, Feedback } from '../ModelTrace.types';\n\nexport type AssessmentFormInputDataType = 'string' | 'boolean' | 'number' | 'json';\n\nexport const ASSESSMENT_PANE_MIN_WIDTH = 250;\n\n// assessment names from databricks judges can sometimes have several\n// prefixes that function like namespaces. for example:\n//\n// metric/global_guideline_adherence/api_code\n//\n// in this case, we only want to display the last element, as that\n// is the most helpful name to the user (and to save ui space).\n// if there are more slashes beyond that, we assume the user added\n// it themselves, so we retain them.\nexport const getAssessmentDisplayName = (name: string): string => {\n  const split = name.split('/');\n  if (split.length === 1) {\n    return name;\n  } else if (split.length === 2) {\n    return split[1];\n  }\n  return split.slice(2).join('/');\n};\n\n// forked from mlflow/web/js/src/common/utils/Utils.tsx\nexport const timeSinceStr = (date: any, referenceDate = new Date()) => {\n  const seconds = Math.max(0, Math.floor((referenceDate.getTime() - date) / 1000));\n  let interval = Math.floor(seconds / 31536000);\n\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 year} other {# years}} ago\"\n        description=\"Text for time in years since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  interval = Math.floor(seconds / 2592000);\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 month} other {# months}} ago\"\n        description=\"Text for time in months since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  interval = Math.floor(seconds / 86400);\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 day} other {# days}} ago\"\n        description=\"Text for time in days since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  interval = Math.floor(seconds / 3600);\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 hour} other {# hours}} ago\"\n        description=\"Text for time in hours since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  interval = Math.floor(seconds / 60);\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 minute} other {# minutes}} ago\"\n        description=\"Text for time in minutes since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  return (\n    <FormattedMessage\n      defaultMessage=\"{timeSince, plural, =1 {1 second} other {# seconds}} ago\"\n      description=\"Text for time in seconds since given date for MLflow views\"\n      values={{ timeSince: seconds }}\n    />\n  );\n};\n\nexport const getParsedExpectationValue = (expectation: Expectation) => {\n  if ('value' in expectation) {\n    return expectation.value;\n  }\n\n  try {\n    // at the moment, \"JSON_FORMAT\" is the only serialization format\n    // that is supported. in the future, we may switch on the\n    // expectation.serialized_value.serialization_format field\n    // to determine how to parse the value.\n    return JSON.parse(expectation.serialized_value.value);\n  } catch (e) {\n    return expectation.serialized_value.value;\n  }\n};\n\nexport const getCreateAssessmentPayloadValue = ({\n  formValue,\n  dataType,\n  isFeedback,\n}: {\n  formValue: string | boolean | number | null;\n  dataType: AssessmentFormInputDataType;\n  isFeedback: boolean;\n}): { feedback: Feedback } | { expectation: Expectation } => {\n  if (isFeedback) {\n    return { feedback: { value: formValue } };\n  }\n\n  if (dataType === 'json') {\n    return { expectation: { serialized_value: { value: String(formValue), serialization_format: 'JSON_FORMAT' } } };\n  }\n\n  return { expectation: { value: formValue } };\n};\n","import { SegmentedControlButton, SegmentedControlGroup } from '@databricks/design-system';\n\nimport type { AssessmentValueInputFieldProps } from './types';\n\nexport const BooleanInput = ({\n  value,\n  valueError,\n  setValue,\n  setValueError,\n  isSubmitting,\n}: AssessmentValueInputFieldProps) => {\n  return (\n    <div>\n      <SegmentedControlGroup\n        data-testid=\"assessment-value-boolean-input\"\n        componentId=\"shared.model-trace-explorer.assessment-value-boolean-input\"\n        name=\"shared.model-trace-explorer.assessment-value-boolean-input\"\n        value={value}\n        disabled={isSubmitting}\n        onChange={(e) => {\n          setValue(e.target.value);\n          setValueError(null);\n        }}\n      >\n        <SegmentedControlButton value>True</SegmentedControlButton>\n        <SegmentedControlButton value={false}>False</SegmentedControlButton>\n      </SegmentedControlGroup>\n      {valueError && <div css={{ marginTop: '8px', color: 'red' }}>{valueError}</div>}\n    </div>\n  );\n};\n","import { Input } from '@databricks/design-system';\n\nimport type { AssessmentValueInputFieldProps } from './types';\n\nexport const NumericInput = ({\n  value,\n  valueError,\n  setValue,\n  setValueError,\n  isSubmitting,\n}: AssessmentValueInputFieldProps) => {\n  return (\n    <div>\n      <Input\n        data-testid=\"assessment-value-number-input\"\n        componentId=\"shared.model-trace-explorer.assessment-value-number-input\"\n        value={String(value)}\n        onKeyDown={(e) => e.stopPropagation()}\n        onChange={(e) => {\n          setValue(e.target.value ? Number(e.target.value) : '');\n          setValueError(null);\n        }}\n        type=\"number\"\n        disabled={isSubmitting}\n        allowClear\n      />\n      {valueError && <div css={{ marginTop: '8px', color: 'red' }}>{valueError}</div>}\n    </div>\n  );\n};\n","import { Input } from '@databricks/design-system';\n\nimport type { AssessmentValueInputFieldProps } from './types';\n\nexport const TextInput = ({\n  value,\n  valueError,\n  setValue,\n  setValueError,\n  isSubmitting,\n}: AssessmentValueInputFieldProps) => {\n  return (\n    <div>\n      <Input\n        data-testid=\"assessment-value-string-input\"\n        componentId=\"shared.model-trace-explorer.assessment-value-string-input\"\n        value={String(value)}\n        onKeyDown={(e) => e.stopPropagation()}\n        onChange={(e) => {\n          setValue(e.target.value);\n          setValueError(null);\n        }}\n        disabled={isSubmitting}\n        allowClear\n      />\n      {valueError && <div css={{ marginTop: '8px', color: 'red' }}>{valueError}</div>}\n    </div>\n  );\n};\n","import { matchPredefinedError } from '@databricks/web-shared/errors';\n\n// eslint-disable-next-line no-restricted-globals -- See go/spog-fetch\nconst fetchFn = fetch;\n\nfunction serializeRequestBody(payload: any | FormData | Blob) {\n  if (payload === undefined) {\n    return undefined;\n  }\n  return typeof payload === 'string' || payload instanceof FormData || payload instanceof Blob\n    ? payload\n    : JSON.stringify(payload);\n}\n\nexport const fetchAPI = async (url: string, method: 'POST' | 'GET' | 'PATCH' | 'DELETE' = 'GET', body?: any) => {\n  const response = await fetchFn(url, {\n    method,\n    body: serializeRequestBody(body),\n    headers: body ? { 'Content-Type': 'application/json' } : {},\n  });\n  if (!response.ok) {\n    const predefinedError = matchPredefinedError(response);\n    if (predefinedError) {\n      try {\n        // Attempt to use message from the response\n        const message = (await response.json()).message;\n        predefinedError.message = message ?? predefinedError.message;\n      } catch {\n        // If the message can't be parsed, use default one\n      }\n      throw predefinedError;\n    }\n  }\n  return response.json();\n};\n","import type { Assessment, Expectation, Feedback } from './ModelTrace.types';\nimport { fetchAPI } from './ModelTraceExplorer.request.utils';\n\nexport const deleteAssessment = ({ traceId, assessmentId }: { traceId: string; assessmentId: string }) =>\n  fetchAPI(`/ajax-api/3.0/mlflow/traces/${traceId}/assessments/${assessmentId}`, 'DELETE');\n\n// these fields are set by the server on create\nexport type CreateAssessmentPayload = {\n  assessment: Omit<Assessment, 'assessment_id' | 'create_time' | 'last_update_time'>;\n};\n\nexport const createAssessment = ({ payload }: { payload: CreateAssessmentPayload }) =>\n  fetchAPI(`/ajax-api/3.0/mlflow/traces/${payload.assessment.trace_id}/assessments`, 'POST', payload);\n\nexport const fetchTraceInfoV3 = ({ traceId }: { traceId: string }) =>\n  fetchAPI(`/ajax-api/3.0/mlflow/traces/${traceId}`);\n\nexport type UpdateAssessmentPayload = {\n  // we only support updating these fields\n  assessment: {\n    feedback?: Feedback;\n    expectation?: Expectation;\n    rationale?: string;\n    metadata?: Record<string, string>;\n  };\n  // comma-separated list of fields to update\n  update_mask: string;\n};\n\nexport const updateAssessment = ({\n  traceId,\n  assessmentId,\n  payload,\n}: {\n  traceId: string;\n  assessmentId: string;\n  payload: UpdateAssessmentPayload;\n}) => fetchAPI(`/ajax-api/3.0/mlflow/traces/${traceId}/assessments/${assessmentId}`, 'PATCH', payload);\n","import { isNil } from 'lodash';\nimport { forwardRef, useCallback, useState } from 'react';\n\nimport {\n  Button,\n  Input,\n  SimpleSelect,\n  SimpleSelectOption,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { getUser } from '@databricks/web-shared/global-settings';\n\nimport { AssessmentCreateNameTypeahead } from './AssessmentCreateNameTypeahead';\nimport type { AssessmentFormInputDataType } from './AssessmentsPane.utils';\nimport { getCreateAssessmentPayloadValue } from './AssessmentsPane.utils';\nimport { BooleanInput } from './components/BooleanInput';\nimport { JsonInput } from './components/JsonInput';\nimport { NumericInput } from './components/NumericInput';\nimport { TextInput } from './components/TextInput';\nimport type { AssessmentValueInputFieldProps } from './components/types';\nimport type { CreateAssessmentPayload } from '../api';\nimport type { AssessmentSchema } from '../contexts/AssessmentSchemaContext';\nimport { useCreateAssessment } from '../hooks/useCreateAssessment';\n\nconst ComponentMap: Record<AssessmentFormInputDataType, React.ComponentType<AssessmentValueInputFieldProps>> = {\n  json: JsonInput,\n  string: TextInput,\n  boolean: BooleanInput,\n  number: NumericInput,\n};\n\ntype AssessmentCreateFormProps = {\n  assessmentName?: string;\n  spanId?: string;\n  traceId: string;\n  setExpanded: (expanded: boolean) => void;\n};\n\nexport const AssessmentCreateForm = forwardRef<HTMLDivElement, AssessmentCreateFormProps>(\n  (\n    {\n      assessmentName,\n      spanId,\n      traceId,\n      // used to close the form\n      // after the assessment is created\n      setExpanded,\n    },\n    ref,\n  ) => {\n    const { theme } = useDesignSystemTheme();\n\n    const [name, setName] = useState('');\n    const [assessmentType, setAssessmentType] = useState<'feedback' | 'expectation'>('feedback');\n    const [dataType, setDataType] = useState<AssessmentFormInputDataType>('boolean');\n    const [value, setValue] = useState<string | boolean | number>(true);\n    const [rationale, setRationale] = useState('');\n    const [nameError, setNameError] = useState<React.ReactNode | null>(null);\n    const [valueError, setValueError] = useState<React.ReactNode | null>(null);\n    const isNamePrefilled = !isNil(assessmentName);\n\n    // default to string if somehow the data type is not supported\n    const InputComponent = ComponentMap[dataType] ?? ComponentMap['string'];\n\n    const { createAssessmentMutation, isLoading } = useCreateAssessment({\n      traceId,\n      onSettled: () => {\n        setExpanded(false);\n      },\n    });\n\n    const handleCreate = useCallback(async () => {\n      if (dataType === 'json') {\n        try {\n          // validate JSON\n          JSON.parse(value as string);\n        } catch (e) {\n          setValueError(\n            <FormattedMessage\n              defaultMessage=\"The provided value is not valid JSON\"\n              description=\"Error message for invalid JSON in an assessment creation form\"\n            />,\n          );\n          return;\n        }\n      }\n\n      if (!isNamePrefilled && name === '') {\n        setNameError(\n          <FormattedMessage\n            defaultMessage=\"Please enter a name\"\n            description=\"Error message for empty assessment name in a creation form\"\n          />,\n        );\n        return;\n      }\n\n      const valueObj = getCreateAssessmentPayloadValue({\n        formValue: value,\n        dataType,\n        isFeedback: assessmentType === 'feedback',\n      });\n\n      const payload: CreateAssessmentPayload = {\n        assessment: {\n          assessment_name: isNamePrefilled ? assessmentName : name,\n          trace_id: traceId,\n          source: {\n            source_type: 'HUMAN',\n            source_id: getUser() ?? '',\n          },\n          span_id: spanId,\n          rationale,\n          ...valueObj,\n        },\n      };\n\n      createAssessmentMutation(payload);\n    }, [\n      dataType,\n      value,\n      assessmentType,\n      isNamePrefilled,\n      assessmentName,\n      name,\n      traceId,\n      spanId,\n      rationale,\n      createAssessmentMutation,\n    ]);\n\n    const handleChangeSchema = useCallback((schema: AssessmentSchema | null) => {\n      // clear the form back to defaults\n      if (!schema) {\n        setName('');\n        setAssessmentType('feedback');\n        setDataType('boolean');\n        setValue(true);\n        setRationale('');\n        setValueError(null);\n        return;\n      }\n\n      setName(schema.name);\n      setAssessmentType(schema.assessmentType);\n      setDataType(schema.dataType);\n\n      // set the appropriate empty value for the data type\n      switch (schema.dataType) {\n        case 'string':\n        case 'json':\n          setValue('');\n          break;\n        case 'number':\n          setValue(0);\n          break;\n        case 'boolean':\n          setValue(true);\n          break;\n      }\n    }, []);\n\n    return (\n      <div\n        ref={ref}\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.xs,\n          marginTop: theme.spacing.sm,\n          border: `1px solid ${theme.colors.border}`,\n          padding: theme.spacing.sm,\n          borderRadius: theme.borders.borderRadiusSm,\n        }}\n      >\n        <Typography.Text size=\"sm\" color=\"secondary\">\n          <FormattedMessage\n            defaultMessage=\"Assessment Type\"\n            description=\"Field label for assessment type in a creation form\"\n          />\n        </Typography.Text>\n        <SimpleSelect\n          id=\"shared.model-trace-explorer.assessment-type-select\"\n          componentId=\"shared.model-trace-explorer.assessment-type-select\"\n          value={assessmentType}\n          disabled={isLoading}\n          onChange={(e) => {\n            setAssessmentType(e.target.value as 'feedback' | 'expectation');\n            // JSON data is not available for feedback\n            if (e.target.value === 'feedback' && dataType === 'json') {\n              setDataType('string');\n            }\n          }}\n        >\n          <SimpleSelectOption value=\"feedback\">\n            <FormattedMessage defaultMessage=\"Feedback\" description=\"Feedback select menu option for assessment type\" />\n          </SimpleSelectOption>\n          <SimpleSelectOption value=\"expectation\">\n            <FormattedMessage\n              defaultMessage=\"Expectation\"\n              description=\"Expectation select menu option for assessment type\"\n            />\n          </SimpleSelectOption>\n        </SimpleSelect>\n        <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n          <FormattedMessage\n            defaultMessage=\"Assessment Name\"\n            description=\"Field label for assessment name in a creation form\"\n          />\n        </Typography.Text>\n        {isNamePrefilled ? (\n          <Typography.Text>{assessmentName}</Typography.Text>\n        ) : (\n          <AssessmentCreateNameTypeahead\n            name={name}\n            setName={setName}\n            handleChangeSchema={handleChangeSchema}\n            nameError={nameError}\n            setNameError={setNameError}\n          />\n        )}\n        <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n          <FormattedMessage\n            defaultMessage=\"Data Type\"\n            description=\"Field label for assessment data type in a creation form\"\n          />\n        </Typography.Text>\n        <SimpleSelect\n          id=\"shared.model-trace-explorer.assessment-data-type-select\"\n          componentId=\"shared.model-trace-explorer.assessment-data-type-select\"\n          value={dataType}\n          disabled={isLoading}\n          onChange={(e) => {\n            setDataType(e.target.value as AssessmentFormInputDataType);\n            setValueError(null);\n          }}\n        >\n          {assessmentType === 'expectation' && (\n            <SimpleSelectOption value=\"json\">\n              <FormattedMessage defaultMessage=\"JSON\" description=\"JSON select menu option for assessment data type\" />\n            </SimpleSelectOption>\n          )}\n          <SimpleSelectOption value=\"string\">\n            <FormattedMessage\n              defaultMessage=\"String\"\n              description=\"String select menu option for assessment data type\"\n            />\n          </SimpleSelectOption>\n          <SimpleSelectOption value=\"boolean\">\n            <FormattedMessage\n              defaultMessage=\"Boolean\"\n              description=\"Boolean select menu option for assessment data type\"\n            />\n          </SimpleSelectOption>\n          <SimpleSelectOption value=\"number\">\n            <FormattedMessage\n              defaultMessage=\"Number\"\n              description=\"Numeric select menu option for assessment data type\"\n            />\n          </SimpleSelectOption>\n        </SimpleSelect>\n        <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n          <FormattedMessage defaultMessage=\"Value\" description=\"Field label for assessment value in a creation form\" />\n        </Typography.Text>\n        <InputComponent\n          value={value}\n          valueError={valueError}\n          setValue={setValue}\n          setValueError={setValueError}\n          isSubmitting={isLoading}\n        />\n        <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n          <FormattedMessage\n            defaultMessage=\"Rationale\"\n            description=\"Field label for assessment rationale in a creation form\"\n          />\n        </Typography.Text>\n        <Input.TextArea\n          componentId=\"shared.model-trace-explorer.assessment-rationale-input\"\n          value={rationale}\n          autoSize={{ minRows: 1, maxRows: 5 }}\n          disabled={isLoading}\n          onKeyDown={(e) => e.stopPropagation()}\n          onChange={(e) => setRationale(e.target.value)}\n        />\n        <div css={{ display: 'flex', justifyContent: 'flex-end', marginTop: theme.spacing.xs }}>\n          <Button\n            componentId=\"shared.model-trace-explorer.assessment-create-button\"\n            disabled={isLoading}\n            onClick={() => setExpanded(false)}\n          >\n            <FormattedMessage\n              defaultMessage=\"Cancel\"\n              description=\"Button label for cancelling the creation of an assessment\"\n            />\n          </Button>\n          <Button\n            css={{ marginLeft: theme.spacing.sm }}\n            type=\"primary\"\n            componentId=\"shared.model-trace-explorer.assessment-create-button\"\n            onClick={handleCreate}\n            loading={isLoading}\n          >\n            <FormattedMessage defaultMessage=\"Create\" description=\"Button label for creating an assessment\" />\n          </Button>\n        </div>\n      </div>\n    );\n  },\n);\n","import { FormUI, Input } from '@databricks/design-system';\n\nimport type { AssessmentValueInputFieldProps } from './types';\n\nexport const JsonInput = ({\n  value,\n  valueError,\n  setValue,\n  setValueError,\n  isSubmitting,\n}: AssessmentValueInputFieldProps) => {\n  return (\n    <div>\n      <Input.TextArea\n        data-testid=\"assessment-value-json-input\"\n        componentId=\"shared.model-trace-explorer.assessment-edit-value-string-input\"\n        value={String(value)}\n        autoSize={{ minRows: 1, maxRows: 5 }}\n        onKeyDown={(e) => e.stopPropagation()}\n        onChange={(e) => {\n          setValue(e.target.value);\n          setValueError(null);\n        }}\n        validationState={valueError ? 'error' : undefined}\n        disabled={isSubmitting}\n      />\n      {valueError && (\n        <FormUI.Message\n          id=\"shared.model-trace-explorer.assessment-edit-value-json-error\"\n          message={valueError}\n          type=\"error\"\n        />\n      )}\n    </div>\n  );\n};\n","import { useIntl } from '@databricks/i18n';\nimport { useMutation, useQueryClient } from '@databricks/web-shared/query-client';\n\nimport { FETCH_TRACE_INFO_QUERY_KEY, displayErrorNotification } from '../ModelTraceExplorer.utils';\nimport { createAssessment } from '../api';\nimport type { CreateAssessmentPayload } from '../api';\n\nexport const useCreateAssessment = ({\n  traceId,\n  onSuccess,\n  onError,\n  onSettled,\n}: {\n  traceId: string;\n  onSuccess?: () => void;\n  onError?: (error: any) => void;\n  onSettled?: () => void;\n}) => {\n  const intl = useIntl();\n  const queryClient = useQueryClient();\n  const { mutate: createAssessmentMutation, isLoading } = useMutation({\n    mutationFn: (payload: CreateAssessmentPayload) => createAssessment({ payload }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [FETCH_TRACE_INFO_QUERY_KEY, traceId] });\n      onSuccess?.();\n    },\n    onError: (error) => {\n      displayErrorNotification(\n        intl.formatMessage(\n          {\n            defaultMessage: 'Failed to create assessment. Error: {error}',\n            description: 'Error message when creating an assessment fails',\n          },\n          {\n            error: error instanceof Error ? error.message : String(error),\n          },\n        ),\n      );\n      onError?.(error);\n    },\n    onSettled: () => {\n      onSettled?.();\n    },\n  });\n\n  return {\n    createAssessmentMutation,\n    isLoading,\n  };\n};\n","import { useEffect, useRef, useState } from 'react';\n\nimport { Button, PlusIcon } from '@databricks/design-system';\n\nimport { AssessmentCreateForm } from './AssessmentCreateForm';\n\nexport const AssessmentCreateButton = ({\n  title,\n  assessmentName,\n  spanId,\n  traceId,\n}: {\n  title: React.ReactNode;\n  assessmentName?: string;\n  spanId?: string;\n  traceId: string;\n}) => {\n  const [expanded, setExpanded] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (expanded && ref.current) {\n      // scroll form into view after the form is expanded\n      ref.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\n    }\n  }, [expanded]);\n\n  return (\n    <div>\n      <Button\n        size=\"small\"\n        componentId=\"shared.model-trace-explorer.add-new-assessment\"\n        icon={<PlusIcon />}\n        onClick={() => setExpanded(true)}\n      >\n        {title}\n      </Button>\n      {expanded && (\n        <AssessmentCreateForm\n          ref={ref}\n          assessmentName={assessmentName}\n          spanId={spanId}\n          traceId={traceId}\n          setExpanded={setExpanded}\n        />\n      )}\n    </div>\n  );\n};\n","import { PencilIcon, TrashIcon, OverflowIcon, Button, DropdownMenu } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { getUser } from '@databricks/web-shared/global-settings';\n\nimport type { Assessment } from '../ModelTrace.types';\n\nexport const AssessmentActionsOverflowMenu = ({\n  assessment,\n  setIsEditing,\n  setShowDeleteModal,\n}: {\n  assessment: Assessment;\n  setIsEditing?: (isEditing: boolean) => void;\n  setShowDeleteModal: (showDeleteModal: boolean) => void;\n}) => {\n  const isFeedback = 'feedback' in assessment;\n  const user = getUser() ?? '';\n\n  const doesUserHavePermissions =\n    user === assessment.source.source_id || (isFeedback && assessment.source.source_type !== 'HUMAN');\n  const showEditButton = doesUserHavePermissions && setIsEditing;\n\n  return (\n    <DropdownMenu.Root>\n      <DropdownMenu.Trigger asChild>\n        <Button componentId=\"shared.model-trace-explorer.assessment-more-button\" icon={<OverflowIcon />} size=\"small\" />\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content minWidth={100}>\n        {showEditButton && (\n          <DropdownMenu.Item\n            componentId=\"shared.model-trace-explorer.assessment-edit-button\"\n            onClick={() => setIsEditing?.(true)}\n          >\n            <DropdownMenu.IconWrapper>\n              <PencilIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage defaultMessage=\"Edit\" description=\"Edit assessment menu item\" />\n          </DropdownMenu.Item>\n        )}\n        <DropdownMenu.Item\n          componentId=\"shared.model-trace-explorer.assessment-delete-button\"\n          onClick={() => setShowDeleteModal(true)}\n        >\n          <DropdownMenu.IconWrapper>\n            <TrashIcon />\n          </DropdownMenu.IconWrapper>\n          <FormattedMessage defaultMessage=\"Delete\" description=\"Delete assessment menu item\" />\n        </DropdownMenu.Item>\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import { useCallback } from 'react';\n\nimport { Modal } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from '@databricks/i18n';\nimport { useMutation, useQueryClient } from '@databricks/web-shared/query-client';\n\nimport type { Assessment } from '../ModelTrace.types';\nimport { displayErrorNotification, FETCH_TRACE_INFO_QUERY_KEY } from '../ModelTraceExplorer.utils';\nimport { deleteAssessment } from '../api';\n\nexport const AssessmentDeleteModal = ({\n  assessment,\n  isModalVisible,\n  setIsModalVisible,\n}: {\n  assessment: Assessment;\n  isModalVisible: boolean;\n  setIsModalVisible: (isModalVisible: boolean) => void;\n}) => {\n  const intl = useIntl();\n  const queryClient = useQueryClient();\n\n  const { mutate: deleteAssessmentMutation, isLoading } = useMutation({\n    mutationFn: () => deleteAssessment({ traceId: assessment.trace_id, assessmentId: assessment.assessment_id }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [FETCH_TRACE_INFO_QUERY_KEY, assessment.trace_id] });\n    },\n    onError: (error) => {\n      displayErrorNotification(\n        intl.formatMessage(\n          {\n            defaultMessage: 'Failed to delete assessment. Error: {error}',\n            description: 'Error message when deleting an assessment fails.',\n          },\n          {\n            error: error instanceof Error ? error.message : String(error),\n          },\n        ),\n      );\n    },\n    onSettled: () => {\n      setIsModalVisible(false);\n    },\n  });\n\n  const handleDelete = useCallback(() => {\n    deleteAssessmentMutation();\n  }, [deleteAssessmentMutation]);\n\n  return (\n    <Modal\n      componentId=\"shared.model-trace-explorer.assessment-delete-modal\"\n      visible={isModalVisible}\n      onOk={handleDelete}\n      okButtonProps={{ danger: true, loading: isLoading }}\n      okText={<FormattedMessage defaultMessage=\"Delete\" description=\"Delete assessment modal button text\" />}\n      onCancel={() => {\n        setIsModalVisible(false);\n      }}\n      cancelText={<FormattedMessage defaultMessage=\"Cancel\" description=\"Delete assessment modal cancel button text\" />}\n      confirmLoading={isLoading}\n      title={<FormattedMessage defaultMessage=\"Delete assessment\" description=\"Delete assessments modal title\" />}\n    >\n      <FormattedMessage\n        defaultMessage=\"Are you sure you want to delete this assessment?\"\n        description=\"Delete assessments modal confirmation text\"\n      />\n    </Modal>\n  );\n};\n","import { omit } from 'lodash';\n\nimport { useIntl } from '@databricks/i18n';\nimport { getUser } from '@databricks/web-shared/global-settings';\nimport { useMutation, useQueryClient } from '@databricks/web-shared/query-client';\n\nimport type { Assessment, Expectation, Feedback } from '../ModelTrace.types';\nimport { displayErrorNotification, FETCH_TRACE_INFO_QUERY_KEY } from '../ModelTraceExplorer.utils';\nimport type { CreateAssessmentPayload } from '../api';\nimport { createAssessment } from '../api';\n\nexport const useOverrideAssessment = ({\n  traceId,\n  onSuccess,\n  onError,\n  onSettled,\n}: {\n  traceId: string;\n  onSuccess?: () => void;\n  onError?: (error: any) => void;\n  onSettled?: () => void;\n}) => {\n  const intl = useIntl();\n  const queryClient = useQueryClient();\n\n  const { mutate: overrideAssessmentMutation, isLoading } = useMutation({\n    mutationFn: ({\n      oldAssessment,\n      value,\n      rationale,\n    }: {\n      oldAssessment: Assessment;\n      value: { feedback: Feedback } | { expectation: Expectation };\n      rationale?: string;\n    }) => {\n      const newAssessment: Assessment = {\n        ...oldAssessment,\n        ...value,\n        rationale,\n        source: {\n          source_id: getUser() ?? '',\n          source_type: 'HUMAN',\n        },\n        overrides: oldAssessment.assessment_id,\n      };\n      const payload: CreateAssessmentPayload = {\n        assessment: omit(newAssessment, 'assessment_id', 'create_time', 'last_update_time', 'overriddenAssessments'),\n      };\n      return createAssessment({ payload });\n    },\n    onError: (error) => {\n      displayErrorNotification(\n        intl.formatMessage(\n          {\n            defaultMessage: 'Failed to override assessment. Error: {error}',\n            description: 'Error message when overriding an assessment fails',\n          },\n          {\n            error: error instanceof Error ? error.message : String(error),\n          },\n        ),\n      );\n      onError?.(error);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [FETCH_TRACE_INFO_QUERY_KEY, traceId] });\n      onSuccess?.();\n    },\n    onSettled: () => {\n      onSettled?.();\n    },\n  });\n\n  return {\n    overrideAssessmentMutation,\n    isLoading,\n  };\n};\n","import { useIntl } from '@databricks/i18n';\nimport { useMutation, useQueryClient } from '@databricks/web-shared/query-client';\n\nimport type { Assessment } from '../ModelTrace.types';\nimport { displayErrorNotification, FETCH_TRACE_INFO_QUERY_KEY } from '../ModelTraceExplorer.utils';\nimport type { UpdateAssessmentPayload } from '../api';\nimport { updateAssessment } from '../api';\n\n// This API is used to update an assessment in place.\n// To override an assessment (preserving the original)\n// use `useOverrideAssessment` instead\nexport const useUpdateAssessment = ({\n  assessment,\n  onSuccess,\n  onError,\n  onSettled,\n}: {\n  assessment: Assessment;\n  onSuccess?: () => void;\n  onError?: (error: any) => void;\n  onSettled?: () => void;\n}) => {\n  const intl = useIntl();\n  const queryClient = useQueryClient();\n\n  const { mutate: updateAssessmentMutation, isLoading } = useMutation({\n    mutationFn: (payload: UpdateAssessmentPayload) =>\n      updateAssessment({ traceId: assessment.trace_id, assessmentId: assessment.assessment_id, payload }),\n    onError: (error) => {\n      displayErrorNotification(\n        intl.formatMessage(\n          {\n            defaultMessage: 'Failed to update assessment. Error: {error}',\n            description: 'Error message when updating an assessment fails',\n          },\n          {\n            error: error instanceof Error ? error.message : String(error),\n          },\n        ),\n      );\n      onError?.(error);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [FETCH_TRACE_INFO_QUERY_KEY, assessment.trace_id] });\n      onSuccess?.();\n    },\n    onSettled: () => {\n      onSettled?.();\n    },\n  });\n\n  return {\n    updateAssessmentMutation,\n    isLoading,\n  };\n};\n","import { useCallback, useState } from 'react';\n\nimport {\n  Typography,\n  useDesignSystemTheme,\n  SimpleSelect,\n  SimpleSelectOption,\n  SegmentedControlGroup,\n  SegmentedControlButton,\n  Input,\n  Button,\n  FormUI,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { getUser } from '@databricks/web-shared/global-settings';\n\nimport type { AssessmentFormInputDataType } from './AssessmentsPane.utils';\nimport { getCreateAssessmentPayloadValue } from './AssessmentsPane.utils';\nimport { getAssessmentValue } from './utils';\nimport type { Assessment } from '../ModelTrace.types';\nimport type { UpdateAssessmentPayload } from '../api';\nimport { useOverrideAssessment } from '../hooks/useOverrideAssessment';\nimport { useUpdateAssessment } from '../hooks/useUpdateAssessment';\n\n// default to the original type of the value if possible. however,\n// we only support editing simple types in the UI (i.e. not arrays / objects)\n// so if the value does not fit, we just default to boolean for simplicity\nconst getDefaultType = (value: any, isFeedback: boolean): AssessmentFormInputDataType => {\n  if (typeof value === 'string') {\n    // treat empty strings as null, default to boolean\n    if (value === '') {\n      return 'boolean';\n    }\n\n    if (isFeedback) {\n      return 'string';\n    }\n\n    try {\n      JSON.parse(value);\n      return 'json';\n    } catch (e) {\n      // not valid JSON, default to string\n      return 'string';\n    }\n  }\n\n  if (typeof value === 'boolean' || typeof value === 'number') {\n    return typeof value as 'boolean' | 'number';\n  }\n  return 'boolean';\n};\n\nconst getDefaultValue = (value: any): string | boolean | number | null => {\n  if (typeof value === 'string') {\n    // treat empty strings as null\n    return value || null;\n  }\n  if (typeof value === 'boolean' || typeof value === 'number') {\n    return value;\n  }\n  return null;\n};\n\nexport const AssessmentEditForm = ({\n  assessment,\n  onSuccess,\n  onSettled,\n  onCancel,\n}: {\n  assessment: Assessment;\n  onSuccess?: () => void;\n  onSettled?: () => void;\n  onCancel: () => void;\n}) => {\n  const isFeedback = 'feedback' in assessment;\n  const initialValue = getAssessmentValue(assessment);\n  const defaultType = getDefaultType(initialValue, isFeedback);\n  const defaultValue = getDefaultValue(initialValue);\n  const user = getUser() ?? '';\n\n  const { theme } = useDesignSystemTheme();\n  const [dataType, setDataType] = useState<AssessmentFormInputDataType>(defaultType);\n  const [value, setValue] = useState<string | boolean | number | null>(defaultValue);\n  const [rationale, setRationale] = useState(assessment.rationale);\n  const [valueError, setValueError] = useState<React.ReactNode | null>(null);\n\n  const { updateAssessmentMutation, isLoading: isUpdating } = useUpdateAssessment({\n    assessment,\n    onSuccess,\n    onSettled,\n  });\n\n  const { overrideAssessmentMutation, isLoading: isOverwriting } = useOverrideAssessment({\n    traceId: assessment.trace_id,\n    onSuccess,\n    onSettled,\n  });\n\n  const isLoading = isUpdating || isOverwriting;\n\n  const handleUpdate = useCallback(async () => {\n    if (dataType === 'json') {\n      try {\n        JSON.parse(value as string);\n      } catch (e) {\n        setValueError(\n          <FormattedMessage\n            defaultMessage=\"The provided value is not valid JSON\"\n            description=\"Error message for invalid JSON in an assessment edit form\"\n          />,\n        );\n        return;\n      }\n    }\n\n    const valueObj = getCreateAssessmentPayloadValue({\n      formValue: value,\n      dataType,\n      isFeedback,\n    });\n\n    // if a user edits their own assessment, we update it in\n    // place as they are likely just correcting a mistake.\n    // expectation edits should always call the update API\n    if (user === assessment.source.source_id || !isFeedback) {\n      const payload: UpdateAssessmentPayload = {\n        assessment: {\n          ...valueObj,\n          rationale,\n        },\n        update_mask: `${isFeedback ? 'feedback' : 'expectation'},rationale`,\n      };\n\n      updateAssessmentMutation(payload);\n    } else {\n      overrideAssessmentMutation({\n        oldAssessment: assessment,\n        value: valueObj,\n        ...(rationale ? { rationale } : {}),\n      });\n    }\n  }, [dataType, value, isFeedback, user, assessment, rationale, updateAssessmentMutation, overrideAssessmentMutation]);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.xs,\n        marginTop: theme.spacing.sm,\n        border: `1px solid ${theme.colors.border}`,\n        padding: theme.spacing.sm,\n        borderRadius: theme.borders.borderRadiusSm,\n      }}\n    >\n      <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n        <FormattedMessage\n          defaultMessage=\"Data Type\"\n          description=\"Field label for assessment data type in an edit form\"\n        />\n      </Typography.Text>\n      <SimpleSelect\n        id=\"shared.model-trace-explorer.assessment-edit-data-type-select\"\n        componentId=\"shared.model-trace-explorer.assessment-edit-data-type-select\"\n        value={dataType}\n        disabled={isLoading}\n        onChange={(e) => {\n          setDataType(e.target.value as AssessmentFormInputDataType);\n          setValueError(null);\n        }}\n      >\n        {!isFeedback && (\n          <SimpleSelectOption value=\"json\">\n            <FormattedMessage defaultMessage=\"JSON\" description=\"JSON select menu option for assessment data type\" />\n          </SimpleSelectOption>\n        )}\n        <SimpleSelectOption value=\"string\">\n          <FormattedMessage defaultMessage=\"String\" description=\"String select menu option for assessment data type\" />\n        </SimpleSelectOption>\n        <SimpleSelectOption value=\"boolean\">\n          <FormattedMessage\n            defaultMessage=\"Boolean\"\n            description=\"Boolean select menu option for assessment data type\"\n          />\n        </SimpleSelectOption>\n        <SimpleSelectOption value=\"number\">\n          <FormattedMessage defaultMessage=\"Number\" description=\"Numeric select menu option for assessment data type\" />\n        </SimpleSelectOption>\n      </SimpleSelect>\n      <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n        <FormattedMessage defaultMessage=\"Value\" description=\"Field label for assessment value in an edit form\" />\n      </Typography.Text>\n      {dataType === 'json' && (\n        <>\n          <Input.TextArea\n            componentId=\"shared.model-trace-explorer.assessment-edit-value-string-input\"\n            value={String(value)}\n            rows={3}\n            onKeyDown={(e) => e.stopPropagation()}\n            onChange={(e) => {\n              setValue(e.target.value);\n              setValueError(null);\n            }}\n            validationState={valueError ? 'error' : undefined}\n            disabled={isLoading}\n          />\n          {valueError && (\n            <FormUI.Message\n              id=\"shared.model-trace-explorer.assessment-edit-value-json-error\"\n              message={valueError}\n              type=\"error\"\n            />\n          )}\n        </>\n      )}\n      {dataType === 'string' && (\n        <Input\n          componentId=\"shared.model-trace-explorer.assessment-edit-value-string-input\"\n          value={String(value)}\n          onKeyDown={(e) => e.stopPropagation()}\n          onChange={(e) => {\n            setValue(e.target.value);\n            setValueError(null);\n          }}\n          disabled={isLoading}\n          allowClear\n        />\n      )}\n      {dataType === 'boolean' && (\n        <SegmentedControlGroup\n          componentId=\"shared.model-trace-explorer.assessment-edit-value-boolean-input\"\n          name=\"shared.model-trace-explorer.assessment-edit-value-boolean-input\"\n          value={value}\n          disabled={isLoading}\n          onChange={(e) => {\n            setValue(e.target.value);\n            setValueError(null);\n          }}\n        >\n          <SegmentedControlButton value>True</SegmentedControlButton>\n          <SegmentedControlButton value={false}>False</SegmentedControlButton>\n        </SegmentedControlGroup>\n      )}\n      {dataType === 'number' && (\n        <Input\n          componentId=\"shared.model-trace-explorer.assessment-edit-value-number-input\"\n          value={String(value)}\n          onKeyDown={(e) => e.stopPropagation()}\n          onChange={(e) => {\n            setValue(e.target.value ? Number(e.target.value) : '');\n            setValueError(null);\n          }}\n          type=\"number\"\n          disabled={isLoading}\n          allowClear\n        />\n      )}\n      <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n        <FormattedMessage\n          defaultMessage=\"Rationale\"\n          description=\"Field label for assessment rationale in an edit form\"\n        />\n      </Typography.Text>\n      <Input.TextArea\n        componentId=\"shared.model-trace-explorer.assessment-edit-rationale-input\"\n        value={rationale}\n        autoSize={{ minRows: 1, maxRows: 5 }}\n        disabled={isLoading}\n        onKeyDown={(e) => e.stopPropagation()}\n        onChange={(e) => setRationale(e.target.value)}\n      />\n      <div css={{ display: 'flex', justifyContent: 'flex-end', marginTop: theme.spacing.xs }}>\n        <Button\n          componentId=\"shared.model-trace-explorer.assessment-edit-cancel-button\"\n          disabled={isLoading}\n          onClick={onCancel}\n        >\n          <FormattedMessage\n            defaultMessage=\"Cancel\"\n            description=\"Button label for cancelling the edit of an assessment\"\n          />\n        </Button>\n        <Button\n          css={{ marginLeft: theme.spacing.sm }}\n          type=\"primary\"\n          componentId=\"shared.model-trace-explorer.assessment-edit-save-button\"\n          onClick={handleUpdate}\n          loading={isLoading}\n        >\n          <FormattedMessage defaultMessage=\"Save\" description=\"Button label for saving an edit to an assessment\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { ModelTraceSpanNode } from '../ModelTrace.types';\nimport { ModelSpanType } from '../ModelTrace.types';\nimport { getIconTypeForSpan, getSpanExceptionCount } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerIcon } from '../ModelTraceExplorerIcon';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\nexport const SpanNameDetailViewLink = ({ node }: { node: ModelTraceSpanNode }) => {\n  const { theme } = useDesignSystemTheme();\n  const { setSelectedNode, setActiveView, setShowTimelineTreeGantt } = useModelTraceExplorerViewState();\n  const hasException = getSpanExceptionCount(node) > 0;\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        marginRight: theme.spacing.xs,\n        gap: theme.spacing.xs,\n        '&:hover': {\n          textDecoration: 'underline',\n          textDecorationColor: hasException\n            ? theme.colors.actionDangerDefaultTextDefault\n            : theme.colors.actionDefaultTextDefault,\n          cursor: 'pointer',\n        },\n      }}\n      onClick={() => {\n        setSelectedNode(node);\n        setActiveView('detail');\n        setShowTimelineTreeGantt(false);\n      }}\n    >\n      <ModelTraceExplorerIcon\n        hasException={hasException}\n        type={getIconTypeForSpan(node.type ?? ModelSpanType.UNKNOWN)}\n      />\n      <Typography.Text\n        color={hasException ? 'error' : 'primary'}\n        css={{ marginLeft: theme.spacing.xs, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}\n      >\n        {node.title}\n      </Typography.Text>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { AssessmentActionsOverflowMenu } from './AssessmentActionsOverflowMenu';\nimport { AssessmentDeleteModal } from './AssessmentDeleteModal';\nimport { AssessmentEditForm } from './AssessmentEditForm';\nimport { getParsedExpectationValue } from './AssessmentsPane.utils';\nimport { ExpectationValuePreview } from './ExpectationValuePreview';\nimport { SpanNameDetailViewLink } from './SpanNameDetailViewLink';\nimport type { ExpectationAssessment } from '../ModelTrace.types';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\nexport const ExpectationItem = ({ expectation }: { expectation: ExpectationAssessment }) => {\n  const { theme } = useDesignSystemTheme();\n  const [isEditing, setIsEditing] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const { nodeMap, activeView } = useModelTraceExplorerViewState();\n\n  const associatedSpan = expectation.span_id ? nodeMap[expectation.span_id] : null;\n  // the summary view displays all assessments regardless of span, so\n  // we need some way to indicate which span an assessment is associated with.\n  const showAssociatedSpan = activeView === 'summary' && associatedSpan;\n\n  const parsedValue = getParsedExpectationValue(expectation.expectation);\n\n  return (\n    <div\n      css={{\n        padding: theme.spacing.sm + theme.spacing.xs,\n        paddingTop: theme.spacing.sm,\n        border: `1px solid ${theme.colors.border}`,\n        borderRadius: theme.borders.borderRadiusMd,\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n      }}\n    >\n      <div css={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n        <Typography.Text bold css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n          {expectation.assessment_name}\n        </Typography.Text>\n        <AssessmentActionsOverflowMenu\n          assessment={expectation}\n          setIsEditing={setIsEditing}\n          setShowDeleteModal={setShowDeleteModal}\n        />\n        <AssessmentDeleteModal\n          assessment={expectation}\n          isModalVisible={showDeleteModal}\n          setIsModalVisible={setShowDeleteModal}\n        />\n      </div>\n      {isEditing ? (\n        <AssessmentEditForm\n          assessment={expectation}\n          onSuccess={() => setIsEditing(false)}\n          onCancel={() => setIsEditing(false)}\n        />\n      ) : (\n        <ExpectationValuePreview parsedValue={parsedValue} />\n      )}\n      {showAssociatedSpan && (\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n          <Typography.Text size=\"sm\" color=\"secondary\">\n            <FormattedMessage defaultMessage=\"Span\" description=\"Label for the associated span of an assessment\" />\n          </Typography.Text>\n          <SpanNameDetailViewLink node={associatedSpan} />\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport type { TagColors } from '@databricks/design-system';\nimport {\n  CheckCircleIcon,\n  DangerIcon,\n  Tag,\n  Tooltip,\n  useDesignSystemTheme,\n  XCircleIcon,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\n// displays a single JSON-strigified assessment value as a tag\nexport const AssessmentDisplayValue = ({ jsonValue }: { jsonValue: string }) => {\n  const { theme } = useDesignSystemTheme();\n\n  // treat empty strings as null\n  if (!jsonValue || jsonValue === '\"\"') {\n    return null;\n  }\n\n  let parsedValue: any;\n  try {\n    parsedValue = JSON.parse(jsonValue);\n  } catch (e) {\n    // if the value is not valid JSON, just use the string value\n    parsedValue = jsonValue;\n  }\n\n  let color: TagColors = 'default';\n  let children: React.ReactNode = JSON.stringify(parsedValue, null, 2);\n  if (parsedValue === 'yes') {\n    color = 'lime';\n    children = (\n      <>\n        <CheckCircleIcon css={{ marginRight: theme.spacing.xs }} />\n        <FormattedMessage defaultMessage=\"Yes\" description=\"Label for an assessment with a 'yes' value\" />\n      </>\n    );\n  } else if (parsedValue === 'no') {\n    color = 'coral';\n    children = (\n      <>\n        <XCircleIcon css={{ marginRight: theme.spacing.xs }} />\n        <FormattedMessage defaultMessage=\"No\" description=\"Label for an assessment with a 'no' value\" />\n      </>\n    );\n  } else if (typeof parsedValue === 'string') {\n    children = parsedValue;\n  } else if (parsedValue === null) {\n    // feedback can only have null values if they are errors\n    color = 'coral';\n    children = (\n      <>\n        <DangerIcon css={{ marginRight: theme.spacing.xs }} />\n        <FormattedMessage defaultMessage=\"Error\" description=\"Label for an assessment with an error\" />\n      </>\n    );\n  } else if (parsedValue === true) {\n    color = 'lime';\n    children = (\n      <>\n        <CheckCircleIcon css={{ marginRight: theme.spacing.xs }} />\n        <FormattedMessage defaultMessage=\"True\" description=\"Label for an assessment with a 'true' boolean value\" />\n      </>\n    );\n  } else if (parsedValue === false) {\n    color = 'coral';\n    children = (\n      <>\n        <XCircleIcon css={{ marginRight: theme.spacing.xs }} />\n        <FormattedMessage defaultMessage=\"False\" description=\"Label for an assessment with a 'false' boolean value\" />\n      </>\n    );\n  }\n\n  return (\n    <Tooltip componentId=\"shared.model-trace-explorer.assesment-value-tooltip\" content={children}>\n      <Tag\n        css={{ display: 'inline-flex', maxWidth: '100%', minWidth: theme.spacing.md, marginRight: 0 }}\n        componentId=\"shared.model-trace-explorer.assesment-value-tag\"\n        color={color}\n      >\n        <span\n          css={{\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            textWrap: 'nowrap',\n          }}\n        >\n          {children}\n        </span>\n      </Tag>\n    </Tooltip>\n  );\n};\n","import { Tooltip, useDesignSystemTheme, Typography } from '@databricks/design-system';\n\nimport type { AssessmentSource } from '../ModelTrace.types';\n\nexport const AssessmentSourceName = ({ source }: { source: AssessmentSource }) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Tooltip componentId=\"shared.model-trace-explorer.assessment-source-name\" content={source.source_id}>\n      {/* wrap in span so the tooltip can show up */}\n      <span\n        css={{\n          flexShrink: 1,\n          overflow: 'hidden',\n          textOverflow: 'ellipsis',\n          textWrap: 'nowrap',\n          marginLeft: theme.spacing.sm,\n          minWidth: theme.spacing.md,\n        }}\n      >\n        <Typography.Text>\n          <span css={{ color: theme.colors.blue500 }}>{source.source_id}</span>\n        </Typography.Text>\n      </span>\n    </Tooltip>\n  );\n};\n","import { useState } from 'react';\n\nimport { useDesignSystemTheme, Typography, SparkleIcon, UserIcon, CodeIcon } from '@databricks/design-system';\n\nimport { AssessmentActionsOverflowMenu } from './AssessmentActionsOverflowMenu';\nimport { AssessmentDeleteModal } from './AssessmentDeleteModal';\nimport { AssessmentSourceName } from './AssessmentSourceName';\nimport { timeSinceStr } from './AssessmentsPane.utils';\nimport type { Assessment } from '../ModelTrace.types';\n\nconst getSourceIcon = (source: Assessment['source']) => {\n  switch (source.source_type) {\n    case 'HUMAN':\n      return UserIcon;\n    case 'LLM_JUDGE':\n      return SparkleIcon;\n    default:\n      return CodeIcon;\n  }\n};\n\nexport const AssessmentItemHeader = ({\n  // connector is not displayed in history items\n  renderConnector = true,\n  assessment,\n  setIsEditing,\n}: {\n  renderConnector?: boolean;\n  assessment: Assessment;\n  setIsEditing?: (isEditing: boolean) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const SourceIcon = getSourceIcon(assessment.source);\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n      {renderConnector && (\n        <div\n          css={{\n            position: 'absolute',\n            left: -1,\n            top: 0,\n            width: 10,\n            height: theme.typography.lineHeightBase,\n            boxSizing: 'border-box',\n            borderBottomLeftRadius: theme.borders.borderRadiusMd,\n            borderBottom: `1px solid ${theme.colors.border}`,\n            borderLeft: `1px solid ${theme.colors.border}`,\n          }}\n        />\n      )}\n      <SourceIcon\n        size={theme.typography.fontSizeSm}\n        css={{\n          padding: 2,\n          backgroundColor: theme.colors.actionIconBackgroundHover,\n          borderRadius: theme.borders.borderRadiusFull,\n        }}\n      />\n      <AssessmentSourceName source={assessment.source} />\n      <div\n        css={{\n          marginLeft: 'auto',\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          gap: theme.spacing.xs,\n        }}\n      >\n        {assessment.last_update_time && (\n          <Typography.Text\n            color=\"secondary\"\n            size=\"sm\"\n            css={{\n              marginLeft: theme.spacing.sm,\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              textWrap: 'nowrap',\n            }}\n          >\n            {timeSinceStr(new Date(assessment.last_update_time))}\n          </Typography.Text>\n        )}\n        <AssessmentActionsOverflowMenu\n          assessment={assessment}\n          setIsEditing={setIsEditing}\n          setShowDeleteModal={setShowDeleteModal}\n        />\n        <AssessmentDeleteModal\n          assessment={assessment}\n          isModalVisible={showDeleteModal}\n          setIsModalVisible={setShowDeleteModal}\n        />\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { Alert, Modal, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { CodeSnippetRenderMode, type AssessmentError } from '../ModelTrace.types';\nimport { ModelTraceExplorerCodeSnippet } from '../ModelTraceExplorerCodeSnippet';\n\nexport const FeedbackErrorItem = ({ error }: { error: AssessmentError }) => {\n  const { theme } = useDesignSystemTheme();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n      <Alert\n        type=\"error\"\n        closable={false}\n        message={error.error_code}\n        componentId=\"shared.model-trace-explorer.feedback-error-item\"\n        description={\n          <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n            <span>{error.error_message}</span>\n            {error.stack_trace && (\n              <Typography.Link\n                componentId=\"shared.model-trace-explorer.feedback-error-item-stack-trace-link\"\n                onClick={() => setIsModalVisible(true)}\n              >\n                <FormattedMessage\n                  defaultMessage=\"View stack trace\"\n                  description=\"Link to view the stack trace for an assessment error\"\n                />\n              </Typography.Link>\n            )}\n          </div>\n        }\n      />\n      {error.stack_trace && (\n        <Modal\n          title={\n            <FormattedMessage\n              defaultMessage=\"Error stack trace\"\n              description=\"Title of the assessment error stack trace modal\"\n            />\n          }\n          visible={isModalVisible}\n          componentId=\"shared.model-trace-explorer.feedback-error-stack-trace-modal\"\n          footer={null}\n          onCancel={() => setIsModalVisible(false)}\n        >\n          <ModelTraceExplorerCodeSnippet\n            data={JSON.stringify(error.stack_trace)}\n            title=\"\"\n            initialRenderMode={CodeSnippetRenderMode.TEXT}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n};\n","import { isNil } from 'lodash';\n\nimport { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { GenAIMarkdownRenderer } from '@databricks/web-shared/genai-markdown-renderer';\n\nimport { AssessmentDisplayValue } from './AssessmentDisplayValue';\nimport { AssessmentItemHeader } from './AssessmentItemHeader';\nimport { FeedbackErrorItem } from './FeedbackErrorItem';\nimport type { FeedbackAssessment } from '../ModelTrace.types';\n\n// this is mostly a copy of FeedbackItem, but with\n// different styling and no ability to edit.\nexport const FeedbackHistoryItem = ({ feedback }: { feedback: FeedbackAssessment }) => {\n  const { theme } = useDesignSystemTheme();\n  const value = feedback.feedback.value;\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        position: 'relative',\n      }}\n    >\n      <AssessmentItemHeader renderConnector={false} assessment={feedback} />\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.xs,\n          marginLeft: 10,\n          paddingLeft: theme.spacing.md,\n          paddingTop: theme.spacing.sm,\n          paddingBottom: theme.spacing.md,\n          paddingRight: theme.spacing.lg,\n          borderLeft: `1px solid ${theme.colors.border}`,\n        }}\n      >\n        {!isNil(feedback.feedback.error) ? (\n          <FeedbackErrorItem error={feedback.feedback.error} />\n        ) : (\n          <>\n            <Typography.Text size=\"sm\" color=\"secondary\">\n              <FormattedMessage defaultMessage=\"Feedback\" description=\"Label for the value of an feedback assessment\" />\n            </Typography.Text>\n            <div>\n              <AssessmentDisplayValue jsonValue={JSON.stringify(value)} />\n            </div>\n          </>\n        )}\n        {feedback.rationale && (\n          <>\n            <Typography.Text size=\"sm\" color=\"secondary\" css={{ marginTop: theme.spacing.xs }}>\n              <FormattedMessage\n                defaultMessage=\"Rationale\"\n                description=\"Label for the rationale of an expectation assessment\"\n              />\n            </Typography.Text>\n            <GenAIMarkdownRenderer>{feedback.rationale}</GenAIMarkdownRenderer>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { useMemo } from 'react';\n\nimport { Modal } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { FeedbackHistoryItem } from './FeedbackHistoryItem';\nimport type { Assessment, FeedbackAssessment } from '../ModelTrace.types';\n\n// helper function to traverse the linked list of overridden\n// assessments. this function handles cycles by keeping track\n// of the assessments we've seen. the backend should prevent\n// such cases from existing, but we should be defensive.\nconst flattenOverrides = (assessment: Assessment) => {\n  const seen = new Set<string>();\n  const flattened = [];\n\n  let currentAssessment: Assessment | undefined = assessment;\n  while (currentAssessment && !seen.has(currentAssessment.assessment_id)) {\n    seen.add(currentAssessment.assessment_id);\n    flattened.push(currentAssessment);\n    currentAssessment = currentAssessment.overriddenAssessment;\n  }\n\n  return flattened;\n};\n\nexport const FeedbackHistoryModal = ({\n  isModalVisible,\n  setIsModalVisible,\n  feedback,\n}: {\n  isModalVisible: boolean;\n  setIsModalVisible: (isModalVisible: boolean) => void;\n  feedback: FeedbackAssessment;\n}) => {\n  const assessmentHistory = useMemo(() => flattenOverrides(feedback), [feedback]);\n\n  return (\n    <Modal\n      componentId=\"shared.model-trace-explorer.feedback-history-modal\"\n      visible={isModalVisible}\n      footer={null}\n      onCancel={() => {\n        setIsModalVisible(false);\n      }}\n      title={\n        <FormattedMessage\n          defaultMessage=\"Edit history\"\n          description=\"Title of a modal that shows the edit history of an assessment\"\n        />\n      }\n    >\n      {assessmentHistory.map((assessment) =>\n        'feedback' in assessment ? <FeedbackHistoryItem key={assessment.assessment_id} feedback={assessment} /> : null,\n      )}\n    </Modal>\n  );\n};\n","import { isNil } from 'lodash';\nimport { useState } from 'react';\n\nimport { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { GenAIMarkdownRenderer } from '@databricks/web-shared/genai-markdown-renderer';\n\nimport { AssessmentDisplayValue } from './AssessmentDisplayValue';\nimport { FeedbackErrorItem } from './FeedbackErrorItem';\nimport { FeedbackHistoryModal } from './FeedbackHistoryModal';\nimport { SpanNameDetailViewLink } from './SpanNameDetailViewLink';\nimport type { FeedbackAssessment } from '../ModelTrace.types';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\nexport const FeedbackItemContent = ({ feedback }: { feedback: FeedbackAssessment }) => {\n  const [isHistoryModalVisible, setIsHistoryModalVisible] = useState(false);\n  const { theme } = useDesignSystemTheme();\n  const { nodeMap, activeView } = useModelTraceExplorerViewState();\n\n  const value = feedback.feedback.value;\n\n  const associatedSpan = feedback.span_id ? nodeMap[feedback.span_id] : null;\n  // the summary view displays all assessments regardless of span, so\n  // we need some way to indicate which span an assessment is associated with.\n  const showAssociatedSpan = activeView === 'summary' && associatedSpan;\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm, marginLeft: theme.spacing.lg }}>\n      {!isNil(feedback.feedback.error) && <FeedbackErrorItem error={feedback.feedback.error} />}\n      {showAssociatedSpan && (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.xs,\n          }}\n        >\n          <Typography.Text size=\"sm\" color=\"secondary\">\n            <FormattedMessage defaultMessage=\"Span\" description=\"Label for the associated span of an assessment\" />\n          </Typography.Text>\n          <SpanNameDetailViewLink node={associatedSpan} />\n        </div>\n      )}\n      {isNil(feedback.feedback.error) && (\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n          <Typography.Text size=\"sm\" color=\"secondary\">\n            <FormattedMessage defaultMessage=\"Feedback\" description=\"Label for the value of an feedback assessment\" />\n          </Typography.Text>\n          <div css={{ display: 'flex', gap: theme.spacing.xs }}>\n            <AssessmentDisplayValue jsonValue={JSON.stringify(value)} />\n            {feedback.overriddenAssessment && (\n              <>\n                <span onClick={() => setIsHistoryModalVisible(true)}>\n                  <Typography.Text\n                    css={{\n                      '&:hover': {\n                        textDecoration: 'underline',\n                        cursor: 'pointer',\n                      },\n                    }}\n                    color=\"secondary\"\n                  >\n                    <FormattedMessage\n                      defaultMessage=\"(edited)\"\n                      description=\"Link text in an edited assessment that allows the user to click to see the previous value\"\n                    />\n                  </Typography.Text>\n                </span>\n                <FeedbackHistoryModal\n                  isModalVisible={isHistoryModalVisible}\n                  setIsModalVisible={setIsHistoryModalVisible}\n                  feedback={feedback}\n                />\n              </>\n            )}\n          </div>\n        </div>\n      )}\n      {feedback.rationale && (\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n          <Typography.Text size=\"sm\" color=\"secondary\">\n            <FormattedMessage\n              defaultMessage=\"Rationale\"\n              description=\"Label for the rationale of an expectation assessment\"\n            />\n          </Typography.Text>\n          <div css={{ '& > div:last-of-type': { marginBottom: 0 } }}>\n            <GenAIMarkdownRenderer>{feedback.rationale}</GenAIMarkdownRenderer>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport { AssessmentEditForm } from './AssessmentEditForm';\nimport { AssessmentItemHeader } from './AssessmentItemHeader';\nimport { FeedbackItemContent } from './FeedbackItemContent';\nimport type { FeedbackAssessment } from '../ModelTrace.types';\n\nexport const FeedbackItem = ({ feedback }: { feedback: FeedbackAssessment }) => {\n  const { theme } = useDesignSystemTheme();\n  const [isEditing, setIsEditing] = useState(false);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.xs,\n        paddingLeft: theme.spacing.lg / 2,\n        marginLeft: theme.spacing.lg / 2,\n        paddingTop: theme.spacing.sm,\n        paddingBottom: theme.spacing.sm,\n        borderLeft: `1px solid ${theme.colors.border}`,\n        position: 'relative',\n      }}\n    >\n      <AssessmentItemHeader assessment={feedback} setIsEditing={setIsEditing} />\n      {isEditing ? (\n        <AssessmentEditForm\n          assessment={feedback}\n          onSuccess={() => setIsEditing(false)}\n          onCancel={() => setIsEditing(false)}\n        />\n      ) : (\n        <FeedbackItemContent feedback={feedback} />\n      )}\n    </div>\n  );\n};\n","import { countBy } from 'lodash';\n\nimport { CodeIcon, SparkleIcon, Tag, Typography, useDesignSystemTheme, UserIcon } from '@databricks/design-system';\n\nimport type { AssessmentSourceType, FeedbackAssessment } from '../ModelTrace.types';\n\nconst getSourceTypeIcon = (sourceType: AssessmentSourceType) => {\n  const smallIconStyles = {\n    '& > svg': {\n      width: 12,\n      height: 12,\n    },\n  };\n  switch (sourceType) {\n    case 'HUMAN':\n      return <UserIcon css={smallIconStyles} />;\n    case 'LLM_JUDGE':\n      return <SparkleIcon css={smallIconStyles} />;\n    case 'CODE':\n      return <CodeIcon css={smallIconStyles} />;\n    default:\n      return null;\n  }\n};\n\nexport const FeedbackValueGroupSourceCounts = ({ feedbacks }: { feedbacks: FeedbackAssessment[] }) => {\n  const { theme } = useDesignSystemTheme();\n\n  if (feedbacks.length < 2) {\n    return null;\n  }\n\n  const sourceCounts = countBy(feedbacks, (feedback) => feedback.source.source_type);\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center', marginLeft: theme.spacing.xs }}>\n      {Object.entries(sourceCounts).map(([sourceType, count]) => (\n        <Tag\n          componentId={`shared.model-trace-explorer.feedback-source-count-${sourceType}`}\n          css={{\n            margin: 0,\n          }}\n          key={sourceType}\n        >\n          <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n            {getSourceTypeIcon(sourceType as AssessmentSourceType)}\n            <Typography.Text>{count}</Typography.Text>\n          </div>\n        </Tag>\n      ))}\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { Button, ChevronDownIcon, ChevronRightIcon, useDesignSystemTheme } from '@databricks/design-system';\n\nimport { AssessmentDisplayValue } from './AssessmentDisplayValue';\nimport { FeedbackItem } from './FeedbackItem';\nimport { FeedbackValueGroupSourceCounts } from './FeedbackValueGroupSourceCounts';\nimport type { FeedbackAssessment } from '../ModelTrace.types';\n\nexport const FeedbackValueGroup = ({\n  jsonValue,\n  feedbacks,\n}: {\n  jsonValue: string;\n  feedbacks: FeedbackAssessment[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [expanded, setExpanded] = useState(false);\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'column' }}>\n      <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n        <Button\n          componentId=\"shared.model-trace-explorer.toggle-assessment-expanded\"\n          css={{ flexShrink: 0 }}\n          size=\"small\"\n          icon={expanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n          onClick={() => setExpanded(!expanded)}\n        />\n        <AssessmentDisplayValue jsonValue={jsonValue} />\n        <FeedbackValueGroupSourceCounts feedbacks={feedbacks} />\n      </div>\n      {expanded && (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          {feedbacks.map((feedback) =>\n            // don't display assessments that have been overridden\n            feedback?.valid === false ? null : <FeedbackItem feedback={feedback} key={feedback.assessment_id} />,\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import { isNil } from 'lodash';\nimport { useState } from 'react';\n\nimport { useDesignSystemTheme, Typography, Button, PlusIcon, Tooltip, DangerIcon } from '@databricks/design-system';\n\nimport { AssessmentCreateForm } from './AssessmentCreateForm';\nimport { getAssessmentDisplayName } from './AssessmentsPane.utils';\nimport { FeedbackValueGroup } from './FeedbackValueGroup';\nimport type { FeedbackAssessment } from '../ModelTrace.types';\n\nexport const FeedbackGroup = ({\n  name,\n  valuesMap,\n  traceId,\n  activeSpanId,\n}: {\n  name: string;\n  valuesMap: { [value: string]: FeedbackAssessment[] };\n  traceId: string;\n  activeSpanId?: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const displayName = getAssessmentDisplayName(name);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const hasError = Object.values(valuesMap)\n    .flat()\n    .some((feedback) => !isNil(feedback.feedback.error));\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        marginBottom: theme.spacing.sm,\n        border: `1px solid ${theme.colors.border}`,\n        borderRadius: theme.borders.borderRadiusMd,\n        padding: theme.spacing.sm + theme.spacing.xs,\n        paddingTop: theme.spacing.sm,\n        gap: theme.spacing.sm,\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: theme.spacing.sm,\n        }}\n      >\n        <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm, flex: 1, minWidth: 0 }}>\n          <Typography.Text bold css={{ overflow: 'hidden', textOverflow: 'ellipsis', textWrap: 'nowrap' }}>\n            {displayName}\n          </Typography.Text>\n          {hasError && <DangerIcon css={{ flexShrink: 0 }} color=\"danger\" />}\n        </div>\n        <Tooltip content=\"Add new feedback\" componentId=\"shared.model-trace-explorer.add-feedback-in-group-tooltip\">\n          <Button\n            componentId=\"shared.model-trace-explorer.add-feedback\"\n            css={{ flexShrink: 0, marginRight: -theme.spacing.xs }}\n            size=\"small\"\n            icon={<PlusIcon />}\n            onClick={() => setShowCreateForm(true)}\n          />\n        </Tooltip>\n      </div>\n      {Object.entries(valuesMap).map(([jsonValue, feedbacks]) => (\n        <FeedbackValueGroup jsonValue={jsonValue} feedbacks={feedbacks} key={jsonValue} />\n      ))}\n      {showCreateForm && (\n        <AssessmentCreateForm\n          assessmentName={name}\n          spanId={activeSpanId}\n          traceId={traceId}\n          setExpanded={setShowCreateForm}\n        />\n      )}\n    </div>\n  );\n};\n","import { isNil, partition } from 'lodash';\nimport { useMemo } from 'react';\n\nimport { Button, CloseIcon, Tooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { AssessmentCreateButton } from './AssessmentCreateButton';\nimport { ASSESSMENT_PANE_MIN_WIDTH } from './AssessmentsPane.utils';\nimport { ExpectationItem } from './ExpectationItem';\nimport { FeedbackGroup } from './FeedbackGroup';\nimport type { Assessment, FeedbackAssessment } from '../ModelTrace.types';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\ntype GroupedFeedbacksByValue = { [value: string]: FeedbackAssessment[] };\n\ntype GroupedFeedbacks = [assessmentName: string, feedbacks: GroupedFeedbacksByValue][];\n\nconst groupFeedbacks = (feedbacks: FeedbackAssessment[]): GroupedFeedbacks => {\n  const aggregated: Record<string, GroupedFeedbacksByValue> = {};\n  feedbacks.forEach((feedback) => {\n    if (feedback.valid === false) {\n      return;\n    }\n\n    let value = null;\n    if (feedback.feedback.value !== '') {\n      value = JSON.stringify(feedback.feedback.value);\n    }\n\n    const { assessment_name } = feedback;\n    if (!aggregated[assessment_name]) {\n      aggregated[assessment_name] = {};\n    }\n\n    const group = aggregated[assessment_name];\n    if (!isNil(value)) {\n      if (!group[value]) {\n        group[value] = [];\n      }\n      group[value].push(feedback);\n    }\n  });\n\n  return Object.entries(aggregated).toSorted(([leftName], [rightName]) => leftName.localeCompare(rightName));\n};\n\nexport const AssessmentsPane = ({\n  assessments,\n  traceId,\n  activeSpanId,\n}: {\n  assessments: Assessment[];\n  traceId: string;\n  activeSpanId?: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { setAssessmentsPaneExpanded } = useModelTraceExplorerViewState();\n  const [feedbacks, expectations] = useMemo(\n    () => partition(assessments, (assessment) => 'feedback' in assessment),\n    [assessments],\n  );\n  const groupedFeedbacks = useMemo(() => groupFeedbacks(feedbacks), [feedbacks]);\n  const sortedExpectations = expectations.toSorted((left, right) =>\n    left.assessment_name.localeCompare(right.assessment_name),\n  );\n\n  return (\n    <div\n      data-testid=\"assessments-pane\"\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        padding: theme.spacing.sm,\n        paddingTop: theme.spacing.xs,\n        height: '100%',\n        borderLeft: `1px solid ${theme.colors.border}`,\n        overflowY: 'scroll',\n        minWidth: ASSESSMENT_PANE_MIN_WIDTH,\n        width: '100%',\n        boxSizing: 'border-box',\n      }}\n    >\n      <div css={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\n        <Typography.Text css={{ marginBottom: theme.spacing.sm }} bold>\n          <FormattedMessage defaultMessage=\"Assessments\" description=\"Label for the assessments pane\" />\n        </Typography.Text>\n        {setAssessmentsPaneExpanded && (\n          <Tooltip\n            componentId=\"shared.model-trace-explorer.close-assessments-pane-tooltip\"\n            content={\n              <FormattedMessage\n                defaultMessage=\"Hide assessments\"\n                description=\"Tooltip for a button that closes the assessments pane\"\n              />\n            }\n          >\n            <Button\n              data-testid=\"close-assessments-pane-button\"\n              componentId=\"shared.model-trace-explorer.close-assessments-pane\"\n              size=\"small\"\n              icon={<CloseIcon />}\n              onClick={() => setAssessmentsPaneExpanded(false)}\n            />\n          </Tooltip>\n        )}\n      </div>\n      {groupedFeedbacks.map(([name, valuesMap]) => (\n        <FeedbackGroup key={name} name={name} valuesMap={valuesMap} traceId={traceId} activeSpanId={activeSpanId} />\n      ))}\n      {sortedExpectations.length > 0 && (\n        <>\n          <Typography.Text color=\"secondary\" css={{ marginBottom: theme.spacing.sm }}>\n            <FormattedMessage\n              defaultMessage=\"Expectations\"\n              description=\"Label for the expectations section in the assessments pane\"\n            />\n          </Typography.Text>\n          <div\n            css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm, marginBottom: theme.spacing.sm }}\n          >\n            {sortedExpectations.map((expectation) => (\n              <ExpectationItem expectation={expectation} key={expectation.assessment_id} />\n            ))}\n          </div>\n        </>\n      )}\n      <AssessmentCreateButton\n        title={\n          <FormattedMessage\n            defaultMessage=\"Add new assessment\"\n            description=\"Label for the button to add a new assessment\"\n          />\n        }\n        spanId={activeSpanId}\n        traceId={traceId}\n      />\n    </div>\n  );\n};\n","import type { Interpolation, Theme } from '@emotion/react';\nimport { isNil } from 'lodash';\nimport React, { useState } from 'react';\n\nimport { Empty, Tabs, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { ModelTraceExplorerAttributesTab } from './ModelTraceExplorerAttributesTab';\nimport { ModelTraceExplorerChatTab } from './ModelTraceExplorerChatTab';\nimport { ModelTraceExplorerContentTab } from './ModelTraceExplorerContentTab';\nimport { ModelTraceExplorerEventsTab } from './ModelTraceExplorerEventsTab';\nimport type { ModelTraceExplorerTab, ModelTraceSpanNode, SearchMatch } from '../ModelTrace.types';\nimport { getSpanExceptionCount } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerBadge } from '../ModelTraceExplorerBadge';\nimport ModelTraceExplorerResizablePane from '../ModelTraceExplorerResizablePane';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\nimport { AssessmentPaneToggle } from '../assessments-pane/AssessmentPaneToggle';\nimport { AssessmentsPane } from '../assessments-pane/AssessmentsPane';\nimport { ASSESSMENT_PANE_MIN_WIDTH } from '../assessments-pane/AssessmentsPane.utils';\n\nexport const CONTENT_PANE_MIN_WIDTH = 250;\n// used by the parent component to set min-width on the resizable box\nexport const RIGHT_PANE_MIN_WIDTH = CONTENT_PANE_MIN_WIDTH + ASSESSMENT_PANE_MIN_WIDTH;\nconst DEFAULT_SPLIT_RATIO = 0.7;\n\nfunction ModelTraceExplorerRightPaneTabsImpl({\n  activeSpan,\n  searchFilter,\n  activeMatch,\n  activeTab,\n  setActiveTab,\n}: {\n  activeSpan: ModelTraceSpanNode | undefined;\n  searchFilter: string;\n  activeMatch: SearchMatch | null;\n  activeTab: ModelTraceExplorerTab;\n  setActiveTab: (tab: ModelTraceExplorerTab) => void;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const [paneWidth, setPaneWidth] = useState(500);\n  const contentStyle: Interpolation<Theme> = { flex: 1, marginTop: -theme.spacing.md, overflowY: 'auto' };\n  const { assessmentsPaneExpanded, assessmentsPaneEnabled } = useModelTraceExplorerViewState();\n\n  if (isNil(activeSpan)) {\n    return <Empty description=\"Please select a span to view more information\" />;\n  }\n\n  const exceptionCount = getSpanExceptionCount(activeSpan);\n  const hasException = exceptionCount > 0;\n  const hasInputsOrOutputs = !isNil(activeSpan?.inputs) || !isNil(activeSpan?.outputs);\n\n  const tabContent = (\n    <Tabs.Root\n      componentId=\"shared.model-trace-explorer.right-pane-tabs\"\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        flex: 1,\n        borderLeft: `1px solid ${theme.colors.border}`,\n        minWidth: 200,\n        position: 'relative',\n      }}\n      value={activeTab}\n      onValueChange={(tab: string) => setActiveTab(tab as ModelTraceExplorerTab)}\n    >\n      <div\n        css={{\n          position: 'absolute',\n          right: assessmentsPaneExpanded ? theme.spacing.xs : theme.spacing.md,\n          top: theme.spacing.xs,\n        }}\n      >\n        <AssessmentPaneToggle />\n      </div>\n      <Tabs.List\n        css={{\n          padding: 0,\n          paddingLeft: theme.spacing.md,\n          paddingRight: theme.spacing.sm,\n          boxSizing: 'border-box',\n          width: '100%',\n        }}\n      >\n        {activeSpan.chatMessages && (\n          <Tabs.Trigger value=\"chat\">\n            <FormattedMessage defaultMessage=\"Chat\" description=\"Label for the chat tab of the model trace explorer.\" />\n          </Tabs.Trigger>\n        )}\n        {hasInputsOrOutputs && (\n          <Tabs.Trigger value=\"content\">\n            <FormattedMessage\n              defaultMessage=\"Inputs / Outputs\"\n              description=\"Label for the inputs and outputs tab of the model trace explorer.\"\n            />\n          </Tabs.Trigger>\n        )}\n        {/* no i18n for attributes and events as these are properties specified by code,\n            and it might be confusing for users to have different labels here */}\n        <Tabs.Trigger value=\"attributes\">Attributes</Tabs.Trigger>\n        <Tabs.Trigger value=\"events\">\n          Events {hasException && <ModelTraceExplorerBadge count={exceptionCount} />}\n        </Tabs.Trigger>\n      </Tabs.List>\n      {activeSpan.chatMessages && (\n        <Tabs.Content css={contentStyle} value=\"chat\">\n          <ModelTraceExplorerChatTab chatMessages={activeSpan.chatMessages} chatTools={activeSpan.chatTools} />\n        </Tabs.Content>\n      )}\n      <Tabs.Content css={contentStyle} value=\"content\">\n        <ModelTraceExplorerContentTab activeSpan={activeSpan} searchFilter={searchFilter} activeMatch={activeMatch} />\n      </Tabs.Content>\n      <Tabs.Content css={contentStyle} value=\"attributes\">\n        <ModelTraceExplorerAttributesTab\n          activeSpan={activeSpan}\n          searchFilter={searchFilter}\n          activeMatch={activeMatch}\n        />\n      </Tabs.Content>\n      <Tabs.Content css={contentStyle} value=\"events\">\n        <ModelTraceExplorerEventsTab activeSpan={activeSpan} searchFilter={searchFilter} activeMatch={activeMatch} />\n      </Tabs.Content>\n    </Tabs.Root>\n  );\n\n  return assessmentsPaneEnabled && assessmentsPaneExpanded ? (\n    <ModelTraceExplorerResizablePane\n      initialRatio={DEFAULT_SPLIT_RATIO}\n      paneWidth={paneWidth}\n      setPaneWidth={setPaneWidth}\n      leftChild={tabContent}\n      leftMinWidth={CONTENT_PANE_MIN_WIDTH}\n      rightChild={\n        <AssessmentsPane\n          assessments={activeSpan.assessments}\n          traceId={activeSpan.traceId}\n          activeSpanId={activeSpan.parentId ? String(activeSpan.key) : undefined}\n        />\n      }\n      rightMinWidth={ASSESSMENT_PANE_MIN_WIDTH}\n    />\n  ) : (\n    tabContent\n  );\n}\n\nexport const ModelTraceExplorerRightPaneTabs = React.memo(ModelTraceExplorerRightPaneTabsImpl);\n","import {\n  Button,\n  Checkbox,\n  FilterIcon,\n  InfoTooltip,\n  Popover,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { SpanFilterState } from '../ModelTrace.types';\nimport { getDisplayNameForSpanType, getIconTypeForSpan } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerIcon } from '../ModelTraceExplorerIcon';\n\nexport const TimelineTreeFilterButton = ({\n  spanFilterState,\n  setSpanFilterState,\n}: {\n  spanFilterState: SpanFilterState;\n  setSpanFilterState: (state: SpanFilterState) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Popover.Root componentId=\"shared.model-trace-explorer.timeline-tree-filter-popover\">\n      <Popover.Trigger asChild>\n        <Button\n          componentId=\"shared.model-trace-explorer.timeline-tree-filter-button\"\n          icon={<FilterIcon />}\n          size=\"small\"\n        >\n          <FormattedMessage defaultMessage=\"Filter\" description=\"Label for the filter button in the trace explorer.\" />\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content align=\"start\">\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm, paddingBottom: theme.spacing.xs }}>\n          <Typography.Text bold>\n            <FormattedMessage\n              defaultMessage=\"Filter\"\n              description=\"Label for the span filters popover in the trace explorer.\"\n            />\n          </Typography.Text>\n          <Typography.Text color=\"secondary\">\n            <FormattedMessage\n              defaultMessage=\"Span type\"\n              description=\"Section label for span type filters in the trace explorer.\"\n            />\n          </Typography.Text>\n          {Object.entries(spanFilterState.spanTypeDisplayState).map(([spanType, shouldDisplay]) => {\n            const icon = <ModelTraceExplorerIcon type={getIconTypeForSpan(spanType)} />;\n            return (\n              <Checkbox\n                key={spanType}\n                componentId={`shared.model-trace-explorer.toggle-span-filter_${spanType}-${!shouldDisplay}`}\n                style={{ width: '100%' }}\n                isChecked={shouldDisplay}\n                onChange={() =>\n                  setSpanFilterState({\n                    ...spanFilterState,\n                    spanTypeDisplayState: {\n                      ...spanFilterState.spanTypeDisplayState,\n                      [spanType]: !shouldDisplay,\n                    },\n                  })\n                }\n              >\n                {icon}\n                <Typography.Text css={{ marginLeft: theme.spacing.xs }}>\n                  {getDisplayNameForSpanType(spanType)}\n                </Typography.Text>\n              </Checkbox>\n            );\n          })}\n          <Typography.Text color=\"secondary\">\n            <FormattedMessage\n              defaultMessage=\"Settings\"\n              description=\"Section label for filter settings in the trace explorer.\"\n            />\n          </Typography.Text>\n          <Checkbox\n            componentId={`shared.model-trace-explorer.toggle-show-parents_${!spanFilterState.showParents}`}\n            style={{ width: '100%' }}\n            isChecked={spanFilterState.showParents}\n            onChange={() =>\n              setSpanFilterState({\n                ...spanFilterState,\n                showParents: !spanFilterState.showParents,\n              })\n            }\n          >\n            <Typography.Text css={{ marginRight: theme.spacing.xs }}>\n              <FormattedMessage\n                defaultMessage=\"Show all parent spans\"\n                description=\"Checkbox label for a setting that enables showing all parent spans in the trace explorer regardless of filter conditions.\"\n              />\n            </Typography.Text>\n            <InfoTooltip\n              componentId=\"shared.model-trace-explorer.show-parents-tooltip\"\n              content={\n                <FormattedMessage\n                  defaultMessage=\"Always show parents of matched spans, regardless of filter conditions\"\n                  description=\"Tooltip for a span filter setting that enables showing parents of matched spans\"\n                />\n              }\n            />\n          </Checkbox>\n          <Checkbox\n            componentId={`shared.model-trace-explorer.toggle-show-parents_${!spanFilterState.showExceptions}`}\n            style={{ width: '100%' }}\n            isChecked={spanFilterState.showExceptions}\n            onChange={() =>\n              setSpanFilterState({\n                ...spanFilterState,\n                showExceptions: !spanFilterState.showExceptions,\n              })\n            }\n          >\n            <Typography.Text css={{ marginRight: theme.spacing.xs }}>\n              <FormattedMessage\n                defaultMessage=\"Show exceptions\"\n                description=\"Checkbox label for a setting that enables showing spans with exceptions in the trace explorer regardless of filter conditions.\"\n              />\n            </Typography.Text>\n            <InfoTooltip\n              componentId=\"shared.model-trace-explorer.show-exceptions-tooltip\"\n              content={\n                <FormattedMessage\n                  defaultMessage=\"Always show spans with exceptions, regardless of filter conditions\"\n                  description=\"Tooltip for a span filter setting that enables showing spans with exceptions\"\n                />\n              }\n            />\n          </Checkbox>\n        </div>\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n","import {\n  BarsAscendingVerticalIcon,\n  ListBorderIcon,\n  SegmentedControlButton,\n  SegmentedControlGroup,\n  Tooltip,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { TimelineTreeFilterButton } from './TimelineTreeFilterButton';\nimport type { SpanFilterState } from '../ModelTrace.types';\n\nexport const TimelineTreeHeader = ({\n  showTimelineInfo,\n  setShowTimelineInfo,\n  spanFilterState,\n  setSpanFilterState,\n}: {\n  showTimelineInfo: boolean;\n  setShowTimelineInfo: (showTimelineInfo: boolean) => void;\n  spanFilterState: SpanFilterState;\n  setSpanFilterState: (state: SpanFilterState) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        padding: `${theme.spacing.xs}px ${theme.spacing.sm}px`,\n        paddingBottom: 3,\n        borderBottom: `1px solid ${theme.colors.border}`,\n        boxSizing: 'border-box',\n        paddingLeft: theme.spacing.sm,\n        alignItems: 'center',\n        display: 'flex',\n        justifyContent: 'space-between',\n      }}\n    >\n      <Typography.Text bold>\n        <FormattedMessage\n          defaultMessage=\"Trace breakdown\"\n          description=\"Header for the span tree within the MLflow trace UI\"\n        />\n      </Typography.Text>\n      <div css={{ display: 'flex', flexDirection: 'row', gap: theme.spacing.sm }}>\n        <TimelineTreeFilterButton spanFilterState={spanFilterState} setSpanFilterState={setSpanFilterState} />\n        <SegmentedControlGroup\n          name=\"size-story\"\n          value={showTimelineInfo}\n          onChange={(event) => {\n            setShowTimelineInfo(event.target.value);\n          }}\n          size=\"small\"\n          componentId=\"shared.model-trace-explorer.toggle-show-timeline\"\n        >\n          <SegmentedControlButton\n            data-testid=\"hide-timeline-info-button\"\n            icon={\n              <Tooltip\n                componentId=\"shared.model-trace-explorer.hide-timeline-info-tooltip\"\n                content={\n                  <FormattedMessage\n                    defaultMessage=\"Show span tree\"\n                    description=\"Tooltip for a button that show the span tree view of the trace UI.\"\n                  />\n                }\n              >\n                <ListBorderIcon />\n              </Tooltip>\n            }\n            value={false}\n          />\n          <SegmentedControlButton\n            data-testid=\"show-timeline-info-button\"\n            icon={\n              <Tooltip\n                componentId=\"shared.model-trace-explorer.show-timeline-info-tooltip\"\n                content={\n                  <FormattedMessage\n                    defaultMessage=\"Show execution timeline\"\n                    description=\"Tooltip for a button that shows execution timeline info in the trace UI.\"\n                  />\n                }\n              >\n                <BarsAscendingVerticalIcon />\n              </Tooltip>\n            }\n            value\n          />\n        </SegmentedControlGroup>\n      </div>\n    </div>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { HierarchyBar } from './TimelineTree.types';\nimport { SPAN_INDENT_WIDTH, SPAN_ROW_HEIGHT, TimelineTreeZIndex } from './TimelineTree.utils';\n\nconst IconBottomConnector = ({ active }: { active: boolean }) => {\n  const { theme } = useDesignSystemTheme();\n  const borderColor = active ? theme.colors.blue500 : theme.colors.border;\n\n  return (\n    <div\n      css={{\n        position: 'absolute',\n        left: '100%',\n        bottom: 0,\n        // not sure why the +1 is necessary but\n        // there is a 1 pixel misalignment with the\n        // left connector otherwise\n        width: SPAN_INDENT_WIDTH / 2 + 1,\n        height: theme.spacing.md,\n        boxSizing: 'border-box',\n        borderTopRightRadius: theme.borders.borderRadiusMd,\n        borderTop: `1px solid ${borderColor}`,\n        borderRight: `1px solid ${borderColor}`,\n        zIndex: TimelineTreeZIndex.LOW, // render behind the span's icon\n      }}\n    />\n  );\n};\n\nconst IconLeftConnector = ({ active }: { active: boolean }) => {\n  const { theme } = useDesignSystemTheme();\n  const borderColor = active ? theme.colors.blue500 : theme.colors.border;\n\n  return (\n    <div\n      css={{\n        position: 'absolute',\n        left: '50%',\n        top: 0,\n        width: SPAN_INDENT_WIDTH / 2,\n        height: theme.spacing.md,\n        boxSizing: 'border-box',\n        borderBottomLeftRadius: theme.borders.borderRadiusMd,\n        borderBottom: `1px solid ${borderColor}`,\n        borderLeft: `1px solid ${borderColor}`,\n        zIndex: active ? TimelineTreeZIndex.NORMAL : TimelineTreeZIndex.LOW,\n      }}\n    />\n  );\n};\n\nconst VerticalConnector = ({ active }: { active: boolean }) => {\n  const { theme } = useDesignSystemTheme();\n  const borderColor = active ? theme.colors.blue500 : theme.colors.border;\n\n  return (\n    <div\n      css={{\n        position: 'absolute',\n        width: SPAN_INDENT_WIDTH / 2,\n        left: '50%',\n        height: SPAN_ROW_HEIGHT,\n        borderLeft: `1px solid ${borderColor}`,\n        boxSizing: 'border-box',\n        zIndex: active ? TimelineTreeZIndex.NORMAL : TimelineTreeZIndex.LOW,\n      }}\n    />\n  );\n};\n\n/**\n * This component renders the bars that represent the hierarchical\n * connections in the span tree.\n */\nexport const TimelineTreeHierarchyBars = ({\n  isActiveSpan,\n  isInActiveChain,\n  linesToRender,\n  hasChildren,\n  isExpanded,\n}: {\n  // whether or not the current span is active\n  isActiveSpan: boolean;\n  // true if the span is either active or a parent of the active span\n  isInActiveChain: boolean;\n  // an array of bars to render to the left of the span icon / name\n  linesToRender: Array<HierarchyBar>;\n  hasChildren: boolean;\n  isExpanded: boolean;\n}) => {\n  if (linesToRender.length === 0) {\n    return (\n      <div\n        css={{\n          width: 0,\n          height: SPAN_ROW_HEIGHT,\n          boxSizing: 'border-box',\n          position: 'relative',\n        }}\n      >\n        {hasChildren && <IconBottomConnector active={isInActiveChain && !isActiveSpan} />}\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {linesToRender.map(({ shouldRender, isActive }, idx) => (\n        // for each depth level, render a spacer. depending on the span's\n        // position within the tree, the spacer might be empty or contain\n        // a vertical bar\n        <div\n          key={idx}\n          css={{\n            width: SPAN_INDENT_WIDTH,\n            height: SPAN_ROW_HEIGHT,\n            boxSizing: 'border-box',\n            position: 'relative',\n          }}\n        >\n          {shouldRender && (\n            // render a vertical bar in the middle of the spacer\n            <VerticalConnector active={isActive} />\n          )}\n          {idx === linesToRender.length - 1 && (\n            // at the last spacer, render a curved\n            // line that connects up to the parent\n            <>\n              <IconLeftConnector active={isInActiveChain} />\n              {hasChildren && isExpanded && <IconBottomConnector active={isInActiveChain && !isActiveSpan} />}\n            </>\n          )}\n        </div>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\n\nimport { Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { spanTimeFormatter } from './TimelineTree.utils';\nimport type { ModelTraceSpanNode } from '../ModelTrace.types';\nimport { ModelSpanType } from '../ModelTrace.types';\nimport { getIconTypeForSpan } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerIcon } from '../ModelTraceExplorerIcon';\n\nexport const TimelineTreeSpanTooltip = ({\n  span,\n  children,\n}: {\n  span: ModelTraceSpanNode;\n  children: React.ReactNode;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const iconType = getIconTypeForSpan(span.type ?? ModelSpanType.UNKNOWN);\n  const primaryTextColor = theme.isDarkMode ? theme.colors.grey800 : theme.colors.grey100;\n  const secondaryTextColor = theme.isDarkMode ? theme.colors.grey500 : theme.colors.grey350;\n\n  return (\n    <Tooltip\n      componentId=\"shared.model-trace-explorer.timeline-tree-node-tooltip\"\n      hideWhenDetached={false}\n      content={\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'row',\n              gap: theme.spacing.xs,\n              alignItems: 'center',\n              overflow: 'hidden',\n              wordBreak: 'break-all',\n            }}\n          >\n            <ModelTraceExplorerIcon type={iconType} isInTooltip />\n            <span css={{ color: primaryTextColor }}>{span.title}</span>\n            <span\n              css={{ marginLeft: theme.spacing.xs, color: secondaryTextColor, fontSize: theme.typography.fontSizeSm }}\n            >\n              {spanTimeFormatter(span.end - span.start)}\n            </span>\n          </div>\n          <div css={{ display: 'flex', flexDirection: 'row', color: primaryTextColor }}>\n            <FormattedMessage defaultMessage=\"Start:\" description=\"Label for the start time of a span\" />{' '}\n            {spanTimeFormatter(span.start)}\n            {' | '}\n            <FormattedMessage defaultMessage=\"End:\" description=\"Label for the end time of a span\" />{' '}\n            {spanTimeFormatter(span.end)}\n          </div>\n        </div>\n      }\n      side=\"right\"\n      maxWidth={700}\n    >\n      {children}\n    </Tooltip>\n  );\n};\n","import {\n  Button,\n  Typography,\n  useDesignSystemTheme,\n  ChevronDownIcon,\n  ChevronRightIcon,\n  Tag,\n  GavelIcon,\n} from '@databricks/design-system';\n\nimport type { HierarchyBar } from './TimelineTree.types';\nimport { getActiveChildIndex, TimelineTreeZIndex } from './TimelineTree.utils';\nimport { TimelineTreeHierarchyBars } from './TimelineTreeHierarchyBars';\nimport { TimelineTreeSpanTooltip } from './TimelineTreeSpanTooltip';\nimport { type ModelTraceSpanNode } from '../ModelTrace.types';\nimport { getSpanExceptionCount } from '../ModelTraceExplorer.utils';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\nexport const TimelineTreeNode = ({\n  node,\n  selectedKey,\n  expandedKeys,\n  setExpandedKeys,\n  traceStartTime,\n  traceEndTime,\n  onSelect,\n  linesToRender,\n}: {\n  node: ModelTraceSpanNode;\n  selectedKey: string | number;\n  expandedKeys: Set<string | number>;\n  setExpandedKeys: (keys: Set<string | number>) => void;\n  traceStartTime: number;\n  traceEndTime: number;\n  onSelect: ((node: ModelTraceSpanNode) => void) | undefined;\n  // a boolean array that signifies whether or not a vertical\n  // connecting line is supposed to in at the `i`th spacer. see\n  // TimelineTreeHierarchyBars for more details.\n  linesToRender: Array<HierarchyBar>;\n}) => {\n  const expanded = expandedKeys.has(node.key);\n  const { theme } = useDesignSystemTheme();\n  const hasChildren = (node.children ?? []).length > 0;\n  const { setAssessmentsPaneExpanded } = useModelTraceExplorerViewState();\n\n  const isActive = selectedKey === node.key;\n  const activeChildIndex = getActiveChildIndex(node, String(selectedKey));\n  // true if a span has active children OR is the active span\n  const isInActiveChain = activeChildIndex > -1;\n\n  const hasException = getSpanExceptionCount(node) > 0;\n\n  const backgroundColor = isActive ? theme.colors.actionDefaultBackgroundHover : 'transparent';\n\n  return (\n    <>\n      <TimelineTreeSpanTooltip span={node}>\n        <div\n          data-testid={`timeline-tree-node-${node.key}`}\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            width: '100%',\n            cursor: 'pointer',\n            boxSizing: 'border-box',\n            backgroundColor,\n            ':hover': {\n              backgroundColor: theme.colors.actionDefaultBackgroundHover,\n            },\n            ':active': {\n              backgroundColor: theme.colors.actionDefaultBackgroundPress,\n            },\n          }}\n          onClick={() => {\n            onSelect?.(node);\n          }}\n        >\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n              // add padding to root nodes, because they have no connecting lines\n              padding: `0px ${theme.spacing.sm}px`,\n              justifyContent: 'space-between',\n              overflow: 'hidden',\n              flex: 1,\n            }}\n          >\n            <div css={{ display: 'flex', flexDirection: 'row', alignItems: 'center', overflow: 'hidden', flex: 1 }}>\n              {hasChildren ? (\n                <Button\n                  size=\"small\"\n                  data-testid={`toggle-span-expanded-${node.key}`}\n                  css={{ flexShrink: 0, marginRight: theme.spacing.xs }}\n                  icon={expanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n                  onClick={(event) => {\n                    // prevent the node from being selected when the expand button is clicked\n                    event.stopPropagation();\n                    const newExpandedKeys = new Set(expandedKeys);\n                    if (expanded) {\n                      newExpandedKeys.delete(node.key);\n                    } else {\n                      newExpandedKeys.add(node.key);\n                    }\n                    setExpandedKeys(newExpandedKeys);\n                  }}\n                  componentId=\"shared.model-trace-explorer.toggle-span\"\n                />\n              ) : (\n                <div css={{ width: 24, marginRight: theme.spacing.xs }} />\n              )}\n              <TimelineTreeHierarchyBars\n                isActiveSpan={isActive}\n                isInActiveChain={isInActiveChain}\n                linesToRender={linesToRender}\n                hasChildren={hasChildren}\n                isExpanded={expanded}\n              />\n              <span\n                css={{\n                  flexShrink: 0,\n                  marginRight: theme.spacing.xs,\n                  borderRadius: theme.borders.borderRadiusSm,\n                  border: `1px solid ${\n                    activeChildIndex > -1 ? theme.colors.blue500 : theme.colors.backgroundSecondary\n                  }`,\n                  zIndex: TimelineTreeZIndex.NORMAL,\n                }}\n              >\n                {node.icon}\n              </span>\n              <Typography.Text\n                color={hasException ? 'error' : 'primary'}\n                css={{\n                  overflow: 'hidden',\n                  whiteSpace: 'nowrap',\n                  textOverflow: 'ellipsis',\n                  flex: 1,\n                }}\n              >\n                {node.title}\n              </Typography.Text>\n              {node.assessments.length > 0 && (\n                <Tag\n                  color=\"indigo\"\n                  data-testid={`assessment-tag-${node.key}`}\n                  componentId=\"shared.model-trace-explorer.assessment-count\"\n                  css={{\n                    margin: 0,\n                    borderRadius: theme.borders.borderRadiusSm,\n                  }}\n                  onClick={() => setAssessmentsPaneExpanded?.(true)}\n                >\n                  <GavelIcon />\n                  <Typography.Text css={{ marginLeft: theme.spacing.xs }}>{node.assessments.length}</Typography.Text>\n                </Tag>\n              )}\n            </div>\n          </div>\n        </div>\n      </TimelineTreeSpanTooltip>\n      {expanded &&\n        node.children?.map((child, idx) => (\n          <TimelineTreeNode\n            key={child.key}\n            node={child}\n            expandedKeys={expandedKeys}\n            setExpandedKeys={setExpandedKeys}\n            selectedKey={selectedKey}\n            traceStartTime={traceStartTime}\n            traceEndTime={traceEndTime}\n            onSelect={onSelect}\n            linesToRender={linesToRender.concat({\n              // render the connecting line at this depth\n              // if there are more children to render\n              shouldRender: idx < (node.children?.length ?? 0) - 1,\n              // make the vertical line blue if the active span\n              // is below this child\n              isActive: idx < activeChildIndex,\n            })}\n          />\n        ))}\n    </>\n  );\n};\n","import { useLayoutEffect, useRef } from 'react';\n\nimport { useDesignSystemTheme, Typography, Button, ChevronDownIcon, ChevronRightIcon } from '@databricks/design-system';\n\nimport type { ModelTraceSpanNode } from '../../ModelTrace.types';\nimport { spanTimeFormatter, TimelineTreeZIndex } from '../TimelineTree.utils';\nimport { TimelineTreeSpanTooltip } from '../TimelineTreeSpanTooltip';\n\nexport const TimelineTreeGanttNode = ({\n  node,\n  selectedKey,\n  leftOffset,\n  width,\n  onSelect,\n  expandedKeys,\n  setExpandedKeys,\n}: {\n  node: ModelTraceSpanNode;\n  selectedKey: string | number;\n  leftOffset: number;\n  width: number;\n  onSelect: ((node: ModelTraceSpanNode) => void) | undefined;\n  expandedKeys: Set<string | number>;\n  setExpandedKeys: (keys: Set<string | number>) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const titleInBarRef = useRef<HTMLSpanElement>(null);\n  const titleBesideBarRef = useRef<HTMLSpanElement>(null);\n  const isActive = selectedKey === node.key;\n  const backgroundColor = isActive ? theme.colors.actionDefaultBackgroundHover : 'transparent';\n  const hasChildren = (node.children ?? []).length > 0;\n  const expanded = expandedKeys.has(node.key);\n\n  useLayoutEffect(() => {\n    if (!titleInBarRef.current || !titleBesideBarRef.current) {\n      return;\n    }\n\n    const spanWidth = Math.max(titleInBarRef.current.offsetWidth, titleBesideBarRef.current.offsetWidth);\n\n    if (spanWidth < width - theme.spacing.sm) {\n      titleInBarRef.current.style.display = 'inline';\n      titleBesideBarRef.current.style.display = 'none';\n    } else {\n      titleInBarRef.current.style.display = 'none';\n      titleBesideBarRef.current.style.display = 'inline';\n    }\n  }, [theme.spacing.sm, width]);\n\n  return (\n    <TimelineTreeSpanTooltip span={node}>\n      <div\n        key={node.key}\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          cursor: 'pointer',\n          boxSizing: 'border-box',\n          paddingLeft: theme.spacing.xs,\n          paddingRight: theme.spacing.sm,\n          paddingTop: theme.spacing.xs,\n          paddingBottom: theme.spacing.xs,\n          backgroundColor: backgroundColor,\n          alignItems: 'center',\n          ':hover': {\n            backgroundColor: theme.colors.actionDefaultBackgroundHover,\n          },\n          ':active': {\n            backgroundColor: theme.colors.actionDefaultBackgroundPress,\n          },\n          zIndex: TimelineTreeZIndex.NORMAL,\n        }}\n        onClick={() => onSelect?.(node)}\n      >\n        {hasChildren ? (\n          <Button\n            size=\"small\"\n            data-testid={`toggle-timeline-span-expanded-${node.key}`}\n            css={{ flexShrink: 0, marginRight: theme.spacing.xs }}\n            icon={expanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n            onClick={(event) => {\n              // prevent the node from being selected when the expand button is clicked\n              event.stopPropagation();\n              const newExpandedKeys = new Set(expandedKeys);\n              if (expanded) {\n                newExpandedKeys.delete(node.key);\n              } else {\n                newExpandedKeys.add(node.key);\n              }\n              setExpandedKeys(newExpandedKeys);\n            }}\n            componentId=\"shared.model-trace-explorer.toggle-timeline-span\"\n          />\n        ) : (\n          <div css={{ width: 24, marginRight: theme.spacing.xs }} />\n        )}\n        <div css={{ width: leftOffset, flexShrink: 0 }} />\n        <div\n          css={{\n            position: 'relative',\n            width,\n            height: theme.typography.lineHeightBase,\n            backgroundColor: theme.colors.blue600,\n            borderRadius: theme.borders.borderRadiusSm,\n            flexShrink: 0,\n          }}\n        >\n          <Typography.Text>\n            <span\n              ref={titleInBarRef}\n              css={{\n                marginLeft: theme.spacing.xs,\n                color: theme.colors.white,\n                display: 'none',\n              }}\n            >\n              {node.title}\n            </span>\n          </Typography.Text>\n        </div>\n        <div css={{ flex: 1, overflow: 'hidden', whiteSpace: 'nowrap', textOverflow: 'ellipsis' }}>\n          <Typography.Text>\n            <span\n              ref={titleBesideBarRef}\n              css={{\n                marginLeft: theme.spacing.xs,\n                color: theme.colors.textPrimary,\n              }}\n            >\n              {node.title}\n            </span>\n          </Typography.Text>\n          <Typography.Text css={{ marginLeft: theme.spacing.xs }} color=\"secondary\">\n            {spanTimeFormatter(node.end - node.start)}\n          </Typography.Text>\n        </div>\n      </div>\n    </TimelineTreeSpanTooltip>\n  );\n};\n","import { useMemo, useRef } from 'react';\n\nimport { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useResizeObserver } from '@databricks/web-shared/hooks';\n\nimport { TimelineTreeGanttNode } from './TimelineTreeGanttNode';\nimport type { ModelTraceSpanNode } from '../../ModelTrace.types';\nimport { spanTimeFormatter, TimelineTreeZIndex } from '../TimelineTree.utils';\n\n// the amount of space required to accomodate the collapse buttons\nconst TIMELINE_BAR_LEFT_OFFSET = 32;\n\n// this function generates an array of \"nice\" x-ticks (e.g. nearest 0.1, 0.2, 0.5 to the value)\nfunction getNiceXTicks(left: number, right: number, graphWidth: number, minPixelsBetweenTicks = 60): number[] {\n  const range = right - left;\n  if (range <= 0 || graphWidth <= 0) return [];\n\n  const maxTickCount = Math.floor(graphWidth / minPixelsBetweenTicks);\n  if (maxTickCount < 1) return [];\n\n  // Step 1: raw interval\n  const rawInterval = range / maxTickCount;\n\n  // Step 2: round to a \"nice\" interval\n  const magnitude = Math.pow(10, Math.floor(Math.log10(rawInterval)));\n  const residual = rawInterval / magnitude;\n\n  let niceFraction;\n  if (residual <= 1) niceFraction = 1;\n  else if (residual <= 2) niceFraction = 2;\n  else if (residual <= 5) niceFraction = 5;\n  else niceFraction = 10;\n\n  const niceInterval = niceFraction * magnitude;\n\n  // Step 3: extend right bound so we always overshoot it\n  // this guarantees that there will be enough space to\n  // render the span labels.\n  const extendedRight = right + 2 * niceInterval;\n\n  // Step 4: Generate tick positions\n  const firstTick = Math.ceil(left / niceInterval) * niceInterval;\n  const ticks: number[] = [];\n\n  for (let tick = firstTick; tick <= extendedRight; tick += niceInterval) {\n    ticks.push(Number(tick.toFixed(10))); // Avoid float errors\n  }\n\n  return ticks;\n}\n\n// converts timestamp numbers to real pixel values\nfunction scaleX(value: number, left: number, right: number, width: number) {\n  return ((value - left) / (right - left)) * width;\n}\n\nexport const TimelineTreeGanttBars = ({\n  nodes,\n  selectedKey,\n  onSelect,\n  traceStartTime,\n  traceEndTime,\n  expandedKeys,\n  setExpandedKeys,\n}: {\n  nodes: ModelTraceSpanNode[];\n  selectedKey: string | number;\n  onSelect: ((node: ModelTraceSpanNode) => void) | undefined;\n  traceStartTime: number;\n  traceEndTime: number;\n  expandedKeys: Set<string | number>;\n  setExpandedKeys: (keys: Set<string | number>) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const treeContainerRef = useRef<HTMLDivElement>(null);\n  const treeElementWidth = useResizeObserver({ ref: treeContainerRef })?.width ?? 0;\n  const initialXTicks = useMemo(\n    () => getNiceXTicks(traceStartTime, traceEndTime, treeElementWidth),\n    [traceEndTime, traceStartTime, treeElementWidth],\n  );\n  const left = Math.min(...initialXTicks);\n  // for the right limit of the graph, we take the average of the last\n  // two ticks so that the graph does not end directly on a line. if\n  // the graph ends on the line, the ticklabel at the top might render\n  // slightly off screen, which looks bad\n  const right = (initialXTicks[initialXTicks.length - 1] + initialXTicks[initialXTicks.length - 2]) / 2;\n  // pop the last tick since we will not render it (it's beyond the right limit)\n  const xTicks = initialXTicks.slice(0, -1);\n\n  const scaleDurationToTreeWidth = (value: number) => scaleX(value, left, right, treeElementWidth);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        position: 'relative',\n        boxSizing: 'border-box',\n      }}\n    >\n      {/* gantt bar header with the tick labels */}\n      <div\n        ref={treeContainerRef}\n        css={{\n          display: 'flex',\n          width: '100%',\n          flexDirection: 'row',\n          height: theme.typography.lineHeightBase,\n          paddingLeft: TIMELINE_BAR_LEFT_OFFSET,\n          paddingRight: theme.spacing.lg,\n          boxSizing: 'border-box',\n          position: 'sticky',\n          top: 0,\n          backgroundColor: theme.colors.backgroundPrimary,\n          zIndex: TimelineTreeZIndex.HIGH,\n        }}\n      >\n        <div\n          data-testid=\"time-marker-area\"\n          css={{\n            position: 'relative',\n          }}\n        >\n          {xTicks.map((n) => (\n            <Typography.Text\n              css={{\n                position: 'absolute',\n                transform: `translateX(-50%)`,\n                left: scaleDurationToTreeWidth(n),\n                whiteSpace: 'nowrap',\n              }}\n              key={n}\n            >\n              {spanTimeFormatter(n)}\n            </Typography.Text>\n          ))}\n        </div>\n      </div>\n      {/* vertical gantt markers */}\n      <div\n        css={{\n          flex: 1,\n          pointerEvents: 'none',\n          zIndex: TimelineTreeZIndex.LOW,\n        }}\n      >\n        <div\n          css={{\n            position: 'absolute',\n            height: '100%',\n            width: '100%',\n          }}\n        >\n          {xTicks.map((n) => (\n            <div\n              key={n}\n              css={{\n                position: 'absolute',\n                left: scaleDurationToTreeWidth(n) + TIMELINE_BAR_LEFT_OFFSET,\n                borderRight: `1px solid ${theme.colors.border}`,\n                height: '100%',\n              }}\n            />\n          ))}\n        </div>\n      </div>\n      {/* colored horizontal gantt bars */}\n      {nodes.map((node) => {\n        const leftOffset = scaleDurationToTreeWidth(node.start);\n        const width = scaleDurationToTreeWidth(node.end) - leftOffset;\n        return (\n          <TimelineTreeGanttNode\n            key={node.key}\n            selectedKey={selectedKey}\n            onSelect={onSelect}\n            node={node}\n            leftOffset={leftOffset}\n            width={width}\n            expandedKeys={expandedKeys}\n            setExpandedKeys={setExpandedKeys}\n          />\n        );\n      })}\n    </div>\n  );\n};\n","import { useCallback, useMemo } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { getTimelineTreeExpandedNodesList } from './TimelineTree.utils';\nimport { TimelineTreeHeader } from './TimelineTreeHeader';\nimport { TimelineTreeNode } from './TimelineTreeNode';\nimport { TimelineTreeGanttBars } from './gantt/TimelineTreeGanttBars';\nimport type { ModelTraceSpanNode, SpanFilterState } from '../ModelTrace.types';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\nexport const TimelineTree = <NodeType extends ModelTraceSpanNode & { children?: NodeType[] }>({\n  rootNodes,\n  selectedNode,\n  setSelectedNode,\n  traceStartTime,\n  traceEndTime,\n  expandedKeys,\n  setExpandedKeys,\n  spanFilterState,\n  setSpanFilterState,\n  className,\n}: {\n  selectedNode?: NodeType;\n  setSelectedNode: (node: ModelTraceSpanNode) => void;\n  traceStartTime: number;\n  traceEndTime: number;\n  rootNodes: NodeType[];\n  expandedKeys: Set<string | number>;\n  setExpandedKeys: (keys: Set<string | number>) => void;\n  spanFilterState: SpanFilterState;\n  setSpanFilterState: (state: SpanFilterState) => void;\n  className?: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const onSpanClick = useCallback(\n    (node) => {\n      setSelectedNode?.(node);\n    },\n    [\n      // comment to prevent prettier format after copybara\n      setSelectedNode,\n    ],\n  );\n\n  const { showTimelineTreeGantt: showTimelineInfo, setShowTimelineTreeGantt: setShowTimelineInfo } =\n    useModelTraceExplorerViewState();\n\n  const expandedNodesList = useMemo(\n    () => getTimelineTreeExpandedNodesList(rootNodes, expandedKeys),\n    [rootNodes, expandedKeys],\n  );\n\n  const treeElement = useMemo(\n    () => (\n      <div\n        css={{\n          flex: 1,\n          overflow: 'auto',\n          minHeight: '100%',\n          boxSizing: 'border-box',\n          display: 'flex',\n          flexDirection: 'column',\n        }}\n      >\n        {showTimelineInfo ? (\n          <TimelineTreeGanttBars\n            nodes={expandedNodesList}\n            selectedKey={selectedNode?.key ?? ''}\n            onSelect={onSpanClick}\n            traceStartTime={traceStartTime}\n            traceEndTime={traceEndTime}\n            expandedKeys={expandedKeys}\n            setExpandedKeys={setExpandedKeys}\n          />\n        ) : (\n          rootNodes.map((node) => (\n            <TimelineTreeNode\n              key={node.key}\n              node={node}\n              expandedKeys={expandedKeys}\n              setExpandedKeys={setExpandedKeys}\n              selectedKey={selectedNode?.key ?? ''}\n              traceStartTime={traceStartTime}\n              traceEndTime={traceEndTime}\n              onSelect={onSpanClick}\n              linesToRender={[]}\n            />\n          ))\n        )}\n      </div>\n    ),\n    [\n      showTimelineInfo,\n      expandedNodesList,\n      selectedNode?.key,\n      onSpanClick,\n      traceStartTime,\n      traceEndTime,\n      rootNodes,\n      expandedKeys,\n      setExpandedKeys,\n    ],\n  );\n\n  return (\n    <div\n      css={{\n        height: '100%',\n        borderRadius: theme.legacyBorders.borderRadiusMd,\n        overflow: 'hidden',\n        display: 'flex',\n      }}\n      className={className}\n    >\n      <div\n        css={{\n          overflow: 'hidden',\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n        }}\n      >\n        <div css={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n          <TimelineTreeHeader\n            showTimelineInfo={showTimelineInfo}\n            setShowTimelineInfo={setShowTimelineInfo}\n            spanFilterState={spanFilterState}\n            setSpanFilterState={setSpanFilterState}\n          />\n          {rootNodes.length > 0 ? (\n            <div css={{ flex: 1, overflowY: 'auto', display: 'flex' }}>{treeElement}</div>\n          ) : (\n            <div\n              css={{\n                flex: 1,\n                display: 'flex',\n                justifyContent: 'center',\n                padding: theme.spacing.md,\n                paddingTop: theme.spacing.lg,\n              }}\n            >\n              <FormattedMessage\n                defaultMessage=\"No results found. Try using a different search term.\"\n                description=\"Model trace explorer > no results found\"\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { values, isString } from 'lodash';\nimport { useLayoutEffect, useMemo, useRef, useState } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { ModelTrace, ModelTraceSpanNode } from './ModelTrace.types';\nimport type { ModelTraceExplorerResizablePaneRef } from './ModelTraceExplorerResizablePane';\nimport ModelTraceExplorerResizablePane from './ModelTraceExplorerResizablePane';\nimport ModelTraceExplorerSearchBox from './ModelTraceExplorerSearchBox';\nimport { useModelTraceExplorerViewState } from './ModelTraceExplorerViewStateContext';\nimport { useModelTraceSearch } from './hooks/useModelTraceSearch';\nimport { ModelTraceExplorerRightPaneTabs, RIGHT_PANE_MIN_WIDTH } from './right-pane/ModelTraceExplorerRightPaneTabs';\nimport { TimelineTree } from './timeline-tree';\nimport {\n  DEFAULT_EXPAND_DEPTH,\n  getModelTraceSpanNodeDepth,\n  getTimelineTreeNodesMap,\n  SPAN_INDENT_WIDTH,\n  useTimelineTreeExpandedNodes,\n} from './timeline-tree/TimelineTree.utils';\n\n// this is the number of large spacings we need in order to\n// properly calculate the min width for the left pane. it's:\n// - 1 for left and right padding\n// - 4 for the right collapse button + time marker\n// - 1 for span icon\n// - 1 for buffer (leave some space to render text)\nconst LEFT_PANE_MIN_WIDTH_LARGE_SPACINGS = 7;\nconst LEFT_PANE_HEADER_MIN_WIDTH_PX = 275;\n\nconst getDefaultSplitRatio = (): number => {\n  if (window.innerWidth <= 768) {\n    return 0.33;\n  }\n\n  return 0.25;\n};\n\nexport const ModelTraceExplorerDetailView = ({\n  modelTrace,\n  className,\n  selectedSpanId,\n  onSelectSpan,\n}: {\n  modelTrace: ModelTrace;\n  className?: string;\n  selectedSpanId?: string;\n  onSelectSpan?: (selectedSpanId?: string) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const initialRatio = getDefaultSplitRatio();\n  const paneRef = useRef<ModelTraceExplorerResizablePaneRef>(null);\n  const [paneWidth, setPaneWidth] = useState(500);\n\n  const {\n    rootNode: treeNode,\n    selectedNode,\n    setSelectedNode,\n    activeTab,\n    setActiveTab,\n  } = useModelTraceExplorerViewState();\n\n  const { expandedKeys, setExpandedKeys } = useTimelineTreeExpandedNodes({\n    rootNodes: treeNode ? [treeNode] : [],\n    // nodes beyond this depth will be collapsed\n    initialExpandDepth: DEFAULT_EXPAND_DEPTH,\n  });\n\n  const {\n    matchData,\n    searchFilter,\n    setSearchFilter,\n    spanFilterState,\n    setSpanFilterState,\n    filteredTreeNodes,\n    handleNextSearchMatch,\n    handlePreviousSearchMatch,\n  } = useModelTraceSearch({\n    treeNode,\n    selectedNode,\n    setSelectedNode,\n    setActiveTab,\n    setExpandedKeys,\n    modelTraceInfo: modelTrace?.info,\n  });\n\n  const onSelectNode = (node?: ModelTraceSpanNode) => {\n    setSelectedNode(node);\n    if (isString(node?.key)) {\n      onSelectSpan?.(node?.key);\n    }\n  };\n\n  // initial render\n  useLayoutEffect(() => {\n    // expand all nodes up to the default depth when the tree changes\n    const list = values(getTimelineTreeNodesMap(filteredTreeNodes, DEFAULT_EXPAND_DEPTH)).map((node) => node.key);\n    setExpandedKeys(new Set(list));\n  }, [filteredTreeNodes, setExpandedKeys]);\n\n  const leftPaneMinWidth = useMemo(() => {\n    // min width necessary to render all the spans in the tree accounting for indentation\n    const minWidthForSpans =\n      Math.max(...filteredTreeNodes.map(getModelTraceSpanNodeDepth)) * SPAN_INDENT_WIDTH +\n      LEFT_PANE_MIN_WIDTH_LARGE_SPACINGS * theme.spacing.lg;\n    // min width necessary to render the header, given that it has a bunch of buttons\n    return Math.max(LEFT_PANE_HEADER_MIN_WIDTH_PX, minWidthForSpans);\n  }, [filteredTreeNodes, theme.spacing.lg]);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        flex: 1,\n        minHeight: 0,\n      }}\n      className={className}\n    >\n      <div\n        css={{\n          padding: theme.spacing.xs,\n          borderBottom: `1px solid ${theme.colors.border}`,\n        }}\n      >\n        <ModelTraceExplorerSearchBox\n          searchFilter={searchFilter}\n          setSearchFilter={setSearchFilter}\n          matchData={matchData}\n          handleNextSearchMatch={handleNextSearchMatch}\n          handlePreviousSearchMatch={handlePreviousSearchMatch}\n        />\n      </div>\n      <ModelTraceExplorerResizablePane\n        ref={paneRef}\n        initialRatio={initialRatio}\n        paneWidth={paneWidth}\n        setPaneWidth={setPaneWidth}\n        leftChild={\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'column',\n              flex: 1,\n              minWidth: leftPaneMinWidth,\n            }}\n          >\n            <TimelineTree\n              rootNodes={filteredTreeNodes}\n              selectedNode={selectedNode}\n              traceStartTime={treeNode?.start ?? 0}\n              traceEndTime={treeNode?.end ?? 0}\n              setSelectedNode={onSelectNode}\n              css={{ flex: 1 }}\n              expandedKeys={expandedKeys}\n              setExpandedKeys={setExpandedKeys}\n              spanFilterState={spanFilterState}\n              setSpanFilterState={setSpanFilterState}\n            />\n          </div>\n        }\n        leftMinWidth={leftPaneMinWidth}\n        rightChild={\n          <ModelTraceExplorerRightPaneTabs\n            activeSpan={selectedNode}\n            searchFilter={searchFilter}\n            activeMatch={matchData.match}\n            activeTab={activeTab}\n            setActiveTab={setActiveTab}\n          />\n        }\n        rightMinWidth={RIGHT_PANE_MIN_WIDTH}\n      />\n    </div>\n  );\n};\n","import { DangerIcon, Empty } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nexport const ModelTraceExplorerErrorState = () => {\n  return (\n    <Empty\n      title={\n        <FormattedMessage\n          defaultMessage=\"Trace failed to render\"\n          description=\"Title for the error state in the model trace explorer\"\n        />\n      }\n      description={\n        <FormattedMessage\n          defaultMessage=\"Unfortunately, the trace could not be rendered due to an unknown error. You can reload the page to try again. If the problem persists, please contact support.\"\n          description=\"Description for the error state in the model trace explorer\"\n        />\n      }\n      image={<DangerIcon />}\n    />\n  );\n};\n","import { useQuery } from '@databricks/web-shared/query-client';\n\nimport type { ModelTrace } from '../ModelTrace.types';\nimport { FETCH_TRACE_INFO_QUERY_KEY } from '../ModelTraceExplorer.utils';\nimport { fetchTraceInfoV3 } from '../api';\n\nexport const useGetModelTraceInfoV3 = ({\n  traceId,\n  setModelTrace,\n  setAssessmentsPaneEnabled,\n  enabled = true,\n}: {\n  traceId: string;\n  setModelTrace: React.Dispatch<React.SetStateAction<ModelTrace>>;\n  setAssessmentsPaneEnabled: React.Dispatch<React.SetStateAction<boolean>>;\n  enabled?: boolean;\n}) => {\n  const queryKey = [FETCH_TRACE_INFO_QUERY_KEY, traceId];\n\n  return useQuery({\n    queryKey,\n    queryFn: () => fetchTraceInfoV3({ traceId }),\n    onSuccess: (response) => {\n      setModelTrace((prevModelTrace: ModelTrace) => ({\n        data: prevModelTrace.data,\n        info: response?.trace?.trace_info ?? {},\n      }));\n      setAssessmentsPaneEnabled(true);\n    },\n    onError: () => {\n      setAssessmentsPaneEnabled(false);\n    },\n    enabled,\n  });\n};\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { ModelTraceChatTool } from '../ModelTrace.types';\nimport { ModelTraceExplorerChatTool } from '../right-pane/ModelTraceExplorerChatTool';\n\nexport const ModelTraceExplorerChatToolsRenderer = ({\n  title,\n  tools,\n}: {\n  title: string;\n  tools: ModelTraceChatTool[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n        padding: theme.spacing.sm,\n        border: `1px solid ${theme.colors.border}`,\n        borderRadius: theme.borders.borderRadiusSm,\n      }}\n    >\n      {title && (\n        <Typography.Text css={{ marginLeft: theme.spacing.xs }} bold>\n          {title}\n        </Typography.Text>\n      )}\n      {tools.map((tool) => (\n        <ModelTraceExplorerChatTool key={tool.function.name} tool={tool} />\n      ))}\n    </div>\n  );\n};\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { RetrieverDocument } from '../ModelTrace.types';\nimport { ModelTraceExplorerRetrieverDocument } from '../right-pane/ModelTraceExplorerRetrieverDocument';\n\nexport const ModelTraceExplorerRetrieverFieldRenderer = ({\n  title,\n  documents,\n}: {\n  title: string;\n  documents: RetrieverDocument[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        backgroundColor: theme.colors.backgroundPrimary,\n        borderRadius: theme.borders.borderRadiusSm,\n        border: `1px solid ${theme.colors.border}`,\n      }}\n    >\n      {title && (\n        <div\n          css={{\n            padding: `${theme.spacing.xs}px ${theme.spacing.sm}px`,\n            borderBottom: `1px solid ${theme.colors.border}`,\n          }}\n        >\n          <Typography.Text bold>{title}</Typography.Text>\n        </div>\n      )}\n      {documents.map((document, idx) => (\n        <div key={idx} css={{ borderBottom: idx !== documents.length - 1 ? `1px solid ${theme.colors.border}` : '' }}>\n          <ModelTraceExplorerRetrieverDocument key={idx} text={document.page_content} metadata={document.metadata} />\n        </div>\n      ))}\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { ChevronDownIcon, ChevronRightIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { GenAIMarkdownRenderer } from '@databricks/web-shared/genai-markdown-renderer';\n\nconst STRING_TRUNCATION_LIMIT = 400;\n\nexport const ModelTraceExplorerTextFieldRenderer = ({ title, value }: { title: string; value: string }) => {\n  const { theme } = useDesignSystemTheme();\n  const [expanded, setExpanded] = useState(false);\n\n  const isExpandable = value.length > STRING_TRUNCATION_LIMIT;\n  const displayValue =\n    !expanded && value.length > STRING_TRUNCATION_LIMIT ? value.slice(0, STRING_TRUNCATION_LIMIT) + '...' : value;\n\n  const hoverStyles = isExpandable\n    ? { ':hover': { backgroundColor: theme.colors.actionIconBackgroundHover, cursor: 'pointer' } }\n    : {};\n\n  return (\n    <div\n      css={{\n        border: `1px solid ${theme.colors.border}`,\n        borderRadius: theme.borders.borderRadiusSm,\n      }}\n    >\n      {title && (\n        <div\n          role=\"button\"\n          css={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            padding: `${theme.spacing.sm}px ${theme.spacing.sm + theme.spacing.xs}px`,\n            ...hoverStyles,\n          }}\n          onClick={() => setExpanded(!expanded)}\n        >\n          <Typography.Text bold>{title}</Typography.Text>\n          {isExpandable && (expanded ? <ChevronDownIcon /> : <ChevronRightIcon />)}\n        </div>\n      )}\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.sm,\n          paddingLeft: theme.spacing.sm + theme.spacing.xs,\n          paddingRight: theme.spacing.sm + theme.spacing.xs,\n          paddingTop: title ? 0 : theme.spacing.sm,\n          paddingBottom: theme.spacing.sm,\n          // get rid of last margin in markdown renderer\n          '& > div:last-of-type': {\n            marginBottom: 0,\n          },\n        }}\n      >\n        <GenAIMarkdownRenderer>{displayValue}</GenAIMarkdownRenderer>\n        {isExpandable && (\n          <Typography.Link\n            onClick={() => setExpanded(!expanded)}\n            componentId=\"shared.model-trace-explorer.text-field-see-more-link\"\n          >\n            {expanded ? (\n              <FormattedMessage\n                defaultMessage=\"See less\"\n                description=\"Button to collapse a long text field in the trace explorer summary field renderer\"\n              />\n            ) : (\n              <FormattedMessage\n                defaultMessage=\"See more\"\n                description=\"Button to expand a long text field in the trace explorer summary field renderer\"\n              />\n            )}\n          </Typography.Link>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { every, isString } from 'lodash';\nimport { useMemo } from 'react';\n\nimport { ModelTraceExplorerChatToolsRenderer } from './ModelTraceExplorerChatToolsRenderer';\nimport { ModelTraceExplorerRetrieverFieldRenderer } from './ModelTraceExplorerRetrieverFieldRenderer';\nimport { ModelTraceExplorerTextFieldRenderer } from './ModelTraceExplorerTextFieldRenderer';\nimport { CodeSnippetRenderMode } from '../ModelTrace.types';\nimport { isModelTraceChatTool, isRetrieverDocument, normalizeConversation } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCodeSnippet } from '../ModelTraceExplorerCodeSnippet';\nimport { ModelTraceExplorerConversation } from '../right-pane/ModelTraceExplorerConversation';\n\nexport const ModelTraceExplorerFieldRenderer = ({\n  title,\n  data,\n  renderMode,\n}: {\n  title: string;\n  data: string;\n  renderMode: 'default' | 'json' | 'text';\n}) => {\n  const parsedData = useMemo(() => {\n    try {\n      return JSON.parse(data);\n    } catch (e) {\n      return data;\n    }\n  }, [data]);\n\n  const dataIsString = isString(parsedData);\n  const chatMessages = normalizeConversation(parsedData);\n  const isChatTools = Array.isArray(parsedData) && parsedData.length > 0 && every(parsedData, isModelTraceChatTool);\n  const isRetrieverDocuments =\n    Array.isArray(parsedData) && parsedData.length > 0 && every(parsedData, isRetrieverDocument);\n\n  if (renderMode === 'json') {\n    return <ModelTraceExplorerCodeSnippet title={title} data={data} initialRenderMode={CodeSnippetRenderMode.JSON} />;\n  }\n\n  if (renderMode === 'text') {\n    return <ModelTraceExplorerCodeSnippet title={title} data={data} initialRenderMode={CodeSnippetRenderMode.TEXT} />;\n  }\n\n  if (dataIsString) {\n    return <ModelTraceExplorerTextFieldRenderer title={title} value={parsedData} />;\n  }\n\n  if (chatMessages && chatMessages.length > 0) {\n    return <ModelTraceExplorerConversation messages={chatMessages} />;\n  }\n\n  if (isChatTools) {\n    return <ModelTraceExplorerChatToolsRenderer title={title} tools={parsedData} />;\n  }\n\n  if (isRetrieverDocuments) {\n    return <ModelTraceExplorerRetrieverFieldRenderer title={title} documents={parsedData} />;\n  }\n\n  return <ModelTraceExplorerCodeSnippet title={title} data={data} />;\n};\n","import { Typography, XCircleIcon, useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { ModelTraceSpanNode } from '../ModelTrace.types';\nimport { getSpanExceptionEvents } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\nimport { ModelTraceExplorerFieldRenderer } from '../field-renderers/ModelTraceExplorerFieldRenderer';\n\nexport const ModelTraceExplorerSummaryViewExceptionsSection = ({ node }: { node: ModelTraceSpanNode }) => {\n  const { theme } = useDesignSystemTheme();\n  const exceptionEvents = getSpanExceptionEvents(node);\n  const isRoot = !node.parentId;\n  // to prevent excessive nesting, we only show the first exception.\n  // it is likely that any given span only has one exception,\n  // since execution usually stops after throwing.\n  const firstException = exceptionEvents[0];\n\n  if (!firstException) {\n    return null;\n  }\n\n  return (\n    <ModelTraceExplorerCollapsibleSection\n      css={{ marginBottom: isRoot ? theme.spacing.sm : 0 }}\n      withBorder={isRoot}\n      key={firstException.name}\n      sectionKey={firstException.name}\n      title={\n        <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }}>\n          <XCircleIcon color=\"danger\" />\n          <Typography.Text color=\"error\" bold>\n            Exception\n          </Typography.Text>\n        </div>\n      }\n    >\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.sm,\n          paddingBottom: theme.spacing.sm,\n          paddingLeft: isRoot ? 0 : theme.spacing.lg,\n        }}\n      >\n        {Object.entries(firstException.attributes ?? {}).map(([attribute, value]) => (\n          <ModelTraceExplorerFieldRenderer\n            key={attribute}\n            title={attribute}\n            data={JSON.stringify(value, null, 2)}\n            renderMode=\"text\"\n          />\n        ))}\n      </div>\n    </ModelTraceExplorerCollapsibleSection>\n  );\n};\n","import { useMemo, useState } from 'react';\n\nimport { Button, ChevronRightIcon, ChevronDownIcon, useDesignSystemTheme, Typography } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { ModelTraceExplorerSummaryViewExceptionsSection } from './ModelTraceExplorerSummaryViewExceptionsSection';\nimport { type ModelTraceSpanNode } from '../ModelTrace.types';\nimport { createListFromObject, getSpanExceptionEvents } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\nimport { SpanNameDetailViewLink } from '../assessments-pane/SpanNameDetailViewLink';\nimport { ModelTraceExplorerFieldRenderer } from '../field-renderers/ModelTraceExplorerFieldRenderer';\nimport { spanTimeFormatter } from '../timeline-tree/TimelineTree.utils';\n\nconst CONNECTOR_WIDTH = 12;\nconst ROW_HEIGHT = 48;\n\nexport const ModelTraceExplorerSummaryIntermediateNode = ({\n  node,\n  renderMode,\n}: {\n  node: ModelTraceSpanNode;\n  renderMode: 'default' | 'json';\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [expanded, setExpanded] = useState(false);\n  const inputList = useMemo(() => createListFromObject(node.inputs), [node]);\n  const outputList = useMemo(() => createListFromObject(node.outputs), [node]);\n  const exceptionEvents = getSpanExceptionEvents(node);\n\n  const hasException = exceptionEvents.length > 0;\n  const containsInputs = inputList.length > 0;\n  const containsOutputs = outputList.length > 0;\n\n  const { setSelectedNode, setActiveView, setShowTimelineTreeGantt } = useModelTraceExplorerViewState();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        minHeight: ROW_HEIGHT,\n        flexShrink: 0,\n      }}\n    >\n      <div css={{ height: ROW_HEIGHT, display: 'flex', alignItems: 'center' }}>\n        <Button\n          size=\"small\"\n          data-testid={`toggle-span-expanded-${node.key}`}\n          css={{ flexShrink: 0, marginRight: theme.spacing.xs }}\n          icon={expanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n          onClick={() => setExpanded(!expanded)}\n          componentId=\"shared.model-trace-explorer.toggle-span\"\n        />\n      </div>\n      <div\n        css={{\n          position: 'relative',\n          boxSizing: 'border-box',\n          height: '100%',\n          borderLeft: `2px solid ${theme.colors.border}`,\n          width: CONNECTOR_WIDTH,\n        }}\n      >\n        <div\n          css={{\n            position: 'absolute',\n            left: -2,\n            top: 14,\n            height: CONNECTOR_WIDTH,\n            width: CONNECTOR_WIDTH,\n            boxSizing: 'border-box',\n            borderBottomLeftRadius: theme.borders.borderRadiusMd,\n            borderBottom: `2px solid ${theme.colors.border}`,\n            borderLeft: `2px solid ${theme.colors.border}`,\n          }}\n        />\n      </div>\n      <div css={{ display: 'flex', flexDirection: 'column', flex: 1, minWidth: 0 }}>\n        <div css={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Typography.Text color=\"secondary\" css={{ display: 'inline-flex', alignItems: 'center', height: ROW_HEIGHT }}>\n            <FormattedMessage\n              defaultMessage=\"{spanName} was called\"\n              description=\"Label for an intermediate node in the trace explorer summary view, indicating that a span/function was called in the course of execution.\"\n              values={{\n                spanName: <SpanNameDetailViewLink node={node} />,\n              }}\n            />\n          </Typography.Text>\n          <span\n            onClick={() => {\n              setSelectedNode(node);\n              setActiveView('detail');\n              setShowTimelineTreeGantt(true);\n            }}\n          >\n            <Typography.Text\n              css={{\n                '&:hover': {\n                  textDecoration: 'underline',\n                  cursor: 'pointer',\n                },\n              }}\n              color=\"secondary\"\n            >\n              {spanTimeFormatter(node.end - node.start)}\n            </Typography.Text>\n          </span>\n        </div>\n        {expanded && (\n          <div>\n            {hasException && <ModelTraceExplorerSummaryViewExceptionsSection node={node} />}\n            {containsInputs && (\n              <ModelTraceExplorerCollapsibleSection\n                sectionKey=\"input\"\n                title={\n                  <FormattedMessage\n                    defaultMessage=\"Inputs\"\n                    description=\"Model trace explorer > selected span > inputs header\"\n                  />\n                }\n              >\n                <div\n                  css={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    gap: theme.spacing.sm,\n                    paddingLeft: theme.spacing.lg,\n                    marginBottom: containsOutputs ? 0 : theme.spacing.sm,\n                  }}\n                >\n                  {inputList.map(({ key, value }, index) => (\n                    <ModelTraceExplorerFieldRenderer\n                      key={key || index}\n                      title={key}\n                      data={value}\n                      renderMode={renderMode}\n                    />\n                  ))}\n                </div>\n              </ModelTraceExplorerCollapsibleSection>\n            )}\n            {containsOutputs && (\n              <ModelTraceExplorerCollapsibleSection\n                sectionKey=\"output\"\n                title={\n                  <FormattedMessage\n                    defaultMessage=\"Outputs\"\n                    description=\"Model trace explorer > selected span > outputs header\"\n                  />\n                }\n              >\n                <div\n                  css={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    gap: theme.spacing.sm,\n                    paddingLeft: theme.spacing.lg,\n                    marginBottom: theme.spacing.sm,\n                  }}\n                >\n                  {outputList.map(({ key, value }) => (\n                    <ModelTraceExplorerFieldRenderer key={key} title={key} data={value} renderMode={renderMode} />\n                  ))}\n                </div>\n              </ModelTraceExplorerCollapsibleSection>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { SegmentedControlButton, SegmentedControlGroup, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { ModelTraceExplorerSummaryIntermediateNode } from './ModelTraceExplorerSummaryIntermediateNode';\nimport { ModelTraceExplorerSummaryViewExceptionsSection } from './ModelTraceExplorerSummaryViewExceptionsSection';\nimport type { ModelTraceExplorerRenderMode, ModelTraceSpanNode } from '../ModelTrace.types';\nimport { createListFromObject, getSpanExceptionEvents } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\nimport { AssessmentPaneToggle } from '../assessments-pane/AssessmentPaneToggle';\nimport { ModelTraceExplorerFieldRenderer } from '../field-renderers/ModelTraceExplorerFieldRenderer';\n\nexport const SUMMARY_SPANS_MIN_WIDTH = 400;\n\nexport const ModelTraceExplorerSummarySpans = ({\n  rootNode,\n  intermediateNodes,\n}: {\n  rootNode: ModelTraceSpanNode;\n  intermediateNodes: ModelTraceSpanNode[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [renderMode, setRenderMode] = useState<ModelTraceExplorerRenderMode>('default');\n\n  const rootInputs = rootNode.inputs;\n  const rootOutputs = rootNode.outputs;\n  const exceptions = getSpanExceptionEvents(rootNode);\n  const hasIntermediateNodes = intermediateNodes.length > 0;\n  const hasExceptions = exceptions.length > 0;\n\n  const inputList = createListFromObject(rootInputs);\n  const outputList = createListFromObject(rootOutputs);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        flex: 1,\n        minHeight: 0,\n        padding: theme.spacing.md,\n        paddingTop: theme.spacing.sm,\n        overflow: 'auto',\n        minWidth: SUMMARY_SPANS_MIN_WIDTH,\n      }}\n    >\n      <div css={{ display: 'flex', flexDirection: 'row', justifyContent: 'flex-end', marginBottom: theme.spacing.sm }}>\n        <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n          <SegmentedControlGroup\n            name=\"render-mode\"\n            componentId=\"shared.model-trace-explorer.summary-view.render-mode\"\n            value={renderMode}\n            size=\"small\"\n            onChange={(event) => setRenderMode(event.target.value)}\n          >\n            <SegmentedControlButton value=\"default\">\n              <FormattedMessage\n                defaultMessage=\"Default\"\n                description=\"Label for the default render mode selector in the model trace explorer summary view\"\n              />\n            </SegmentedControlButton>\n            <SegmentedControlButton value=\"json\">\n              <FormattedMessage\n                defaultMessage=\"JSON\"\n                description=\"Label for the JSON render mode selector in the model trace explorer summary view\"\n              />\n            </SegmentedControlButton>\n          </SegmentedControlGroup>\n          <AssessmentPaneToggle />\n        </div>\n      </div>\n      {hasExceptions && <ModelTraceExplorerSummaryViewExceptionsSection node={rootNode} />}\n      <ModelTraceExplorerCollapsibleSection\n        withBorder\n        title={\n          <FormattedMessage\n            defaultMessage=\"Inputs\"\n            description=\"Model trace explorer > selected span > inputs header\"\n          />\n        }\n        css={{ marginBottom: hasIntermediateNodes ? 0 : theme.spacing.md }}\n        sectionKey=\"summary-inputs\"\n      >\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n          {inputList.map(({ key, value }, index) => (\n            <ModelTraceExplorerFieldRenderer key={key || index} title={key} data={value} renderMode={renderMode} />\n          ))}\n        </div>\n      </ModelTraceExplorerCollapsibleSection>\n      {hasIntermediateNodes &&\n        intermediateNodes.map((node) => (\n          <ModelTraceExplorerSummaryIntermediateNode key={node.key} node={node} renderMode={renderMode} />\n        ))}\n      <ModelTraceExplorerCollapsibleSection\n        withBorder\n        title={\n          <FormattedMessage\n            defaultMessage=\"Outputs\"\n            description=\"Model trace explorer > selected span > outputs header\"\n          />\n        }\n        sectionKey=\"summary-outputs\"\n      >\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n          {outputList.map(({ key, value }, index) => (\n            <ModelTraceExplorerFieldRenderer key={key || index} title={key} data={value} renderMode={renderMode} />\n          ))}\n        </div>\n      </ModelTraceExplorerCollapsibleSection>\n    </div>\n  );\n};\n","import { useMemo, useState } from 'react';\n\nimport { Empty, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { ModelTraceExplorerSummarySpans, SUMMARY_SPANS_MIN_WIDTH } from './ModelTraceExplorerSummarySpans';\nimport { ModelSpanType } from '../ModelTrace.types';\nimport type { ModelTraceSpanNode, ModelTrace } from '../ModelTrace.types';\nimport { getSpanExceptionCount } from '../ModelTraceExplorer.utils';\nimport ModelTraceExplorerResizablePane from '../ModelTraceExplorerResizablePane';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\nimport { AssessmentsPane } from '../assessments-pane/AssessmentsPane';\nimport { ASSESSMENT_PANE_MIN_WIDTH } from '../assessments-pane/AssessmentsPane.utils';\nimport { getTimelineTreeNodesList } from '../timeline-tree/TimelineTree.utils';\n\nconst isNodeImportant = (node: ModelTraceSpanNode) => {\n  // root node is shown at top level, so we don't need to\n  // show it in the intermediate nodes list\n  if (!node.parentId) {\n    return false;\n  }\n\n  return (\n    [\n      ModelSpanType.AGENT,\n      ModelSpanType.RETRIEVER,\n      ModelSpanType.CHAT_MODEL,\n      ModelSpanType.TOOL,\n      ModelSpanType.LLM,\n    ].includes(node.type ?? ModelSpanType.UNKNOWN) || getSpanExceptionCount(node) > 0\n  );\n};\n\nexport const ModelTraceExplorerSummaryView = ({ modelTrace }: { modelTrace: ModelTrace }) => {\n  const { theme } = useDesignSystemTheme();\n  const [paneWidth, setPaneWidth] = useState(500);\n  const { rootNode, nodeMap, assessmentsPaneEnabled, assessmentsPaneExpanded } = useModelTraceExplorerViewState();\n\n  const allAssessments = useMemo(() => Object.values(nodeMap).flatMap((node) => node.assessments), [nodeMap]);\n\n  const intermediateNodes = useMemo(() => {\n    if (!rootNode) {\n      return [];\n    }\n\n    // the summary view is meant to be a high-level view of the trace,\n    // so we show \"important\" nodes as a flat list between the inputs\n    // and outputs of the root node.\n    const nodes = getTimelineTreeNodesList([rootNode]);\n    const intermediateNodes = nodes.filter(isNodeImportant);\n\n    return intermediateNodes;\n  }, [rootNode]);\n\n  if (!rootNode) {\n    return (\n      <div css={{ marginTop: theme.spacing.lg }}>\n        <Empty\n          description={\n            <FormattedMessage\n              defaultMessage=\"No span data to display\"\n              description=\"Title for the empty state in the model trace explorer summary view\"\n            />\n          }\n        />\n      </div>\n    );\n  }\n\n  return assessmentsPaneEnabled && assessmentsPaneExpanded ? (\n    <ModelTraceExplorerResizablePane\n      initialRatio={0.75}\n      paneWidth={paneWidth}\n      setPaneWidth={setPaneWidth}\n      leftChild={<ModelTraceExplorerSummarySpans rootNode={rootNode} intermediateNodes={intermediateNodes} />}\n      rightChild={<AssessmentsPane assessments={allAssessments} traceId={rootNode.traceId} activeSpanId={undefined} />}\n      leftMinWidth={SUMMARY_SPANS_MIN_WIDTH}\n      rightMinWidth={ASSESSMENT_PANE_MIN_WIDTH}\n    />\n  ) : (\n    <ModelTraceExplorerSummarySpans rootNode={rootNode} intermediateNodes={intermediateNodes} />\n  );\n};\n","import {\n  Overflow,\n  Tag,\n  TagColors,\n  Typography,\n  useDesignSystemTheme,\n  Tooltip,\n  ClockIcon,\n} from '@databricks/design-system';\nimport { Notification } from '@databricks/design-system';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport type { ModelTrace, ModelTraceInfoV3 } from './ModelTrace.types';\nimport { getModelTraceId } from './ModelTraceExplorer.utils';\nimport { spanTimeFormatter } from './timeline-tree/TimelineTree.utils';\nimport { useModelTraceExplorerViewState } from './ModelTraceExplorerViewStateContext';\nimport { isUserFacingTag, parseJSONSafe, truncateToFirstLineWithMaxLength } from './TagUtils';\n\nconst BASE_TAG_COMPONENT_ID = 'mlflow.model_trace_explorer.header_details';\nconst BASE_NOTIFICATION_COMPONENT_ID = 'mlflow.model_trace_explorer.header_details.notification';\n\nconst ModelTraceHeaderMetricSection = ({\n  label,\n  value,\n  icon,\n  tagKey,\n  color = 'teal',\n  getTruncatedLabel,\n  getComponentId,\n  onCopy,\n}: {\n  label: React.ReactNode;\n  value: string;\n  icon?: React.ReactNode;\n  tagKey: string;\n  color?: TagColors;\n  getTruncatedLabel: (label: string) => string;\n  getComponentId: (key: string) => string;\n  onCopy: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(value);\n    onCopy();\n  };\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'row',\n        gap: theme.spacing.sm,\n      }}\n    >\n      <Typography.Text size=\"md\" color=\"secondary\">\n        {label}\n      </Typography.Text>\n      <Tooltip componentId={getComponentId(tagKey)} content={value} maxWidth={400}>\n        <Tag componentId={getComponentId(tagKey)} color={color} onClick={handleClick} css={{ cursor: 'pointer' }}>\n          <span css={{ display: 'flex', flexDirection: 'row', alignItems: 'center', gap: theme.spacing.xs }}>\n            {icon && <span>{icon}</span>}\n            <span>{getTruncatedLabel(value)}</span>\n          </span>\n        </Tag>\n      </Tooltip>\n    </div>\n  );\n};\n\nexport const ModelTraceHeaderDetails = ({ modelTrace }: { modelTrace: ModelTrace }) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const [showNotification, setShowNotification] = useState(false);\n  const { rootNode } = useModelTraceExplorerViewState();\n\n  const tags = Object.entries(modelTrace.info.tags ?? {}).filter(([key]) => isUserFacingTag(key));\n\n  const modelTraceId = getModelTraceId(modelTrace);\n\n  const tokenUsage = useMemo(() => {\n    const tokenUsage = parseJSONSafe(\n      (modelTrace.info as ModelTraceInfoV3)?.trace_metadata?.['mlflow.trace.tokenUsage'] ?? '{}',\n    );\n\n    return tokenUsage;\n  }, [modelTrace.info]);\n\n  const totalTokens = useMemo(() => tokenUsage?.total_tokens, [tokenUsage]);\n\n  const latency = useMemo((): string | undefined => {\n    if (rootNode) {\n      return spanTimeFormatter(rootNode.end - rootNode.start);\n    }\n\n    return undefined;\n  }, [rootNode]);\n\n  const getComponentId = useCallback((key: string) => `${BASE_TAG_COMPONENT_ID}.tag-${key}`, []);\n\n  const handleTagClick = (text: string) => {\n    navigator.clipboard.writeText(text);\n  };\n\n  const getTruncatedLabel = (label: string) => truncateToFirstLineWithMaxLength(label, 40);\n\n  const handleCopy = useCallback(() => {\n    setShowNotification(true);\n    setTimeout(() => setShowNotification(false), 2000);\n  }, []);\n\n  return (\n    <>\n      <div css={{ display: 'flex', flexDirection: 'row', gap: theme.spacing.md, flexWrap: 'wrap' }}>\n        {modelTraceId && (\n          <ModelTraceHeaderMetricSection\n            label={<FormattedMessage defaultMessage=\"ID\" description=\"Label for the ID section\" />}\n            value={modelTraceId}\n            tagKey={modelTraceId}\n            color=\"pink\"\n            getTruncatedLabel={getTruncatedLabel}\n            getComponentId={getComponentId}\n            onCopy={handleCopy}\n          />\n        )}\n        {totalTokens && (\n          <ModelTraceHeaderMetricSection\n            label={<FormattedMessage defaultMessage=\"Token count\" description=\"Label for the token count section\" />}\n            value={totalTokens.toString()}\n            tagKey=\"token-count\"\n            color=\"default\"\n            getTruncatedLabel={getTruncatedLabel}\n            getComponentId={getComponentId}\n            onCopy={handleCopy}\n          />\n        )}\n        {latency && (\n          <ModelTraceHeaderMetricSection\n            label={<FormattedMessage defaultMessage=\"Latency\" description=\"Label for the latency section\" />}\n            icon={<ClockIcon css={{ fontSize: 12, display: 'flex', alignItems: 'center', justifyContent: 'center' }} />}\n            value={latency}\n            tagKey=\"latency\"\n            color=\"default\"\n            getTruncatedLabel={getTruncatedLabel}\n            getComponentId={getComponentId}\n            onCopy={handleCopy}\n          />\n        )}\n        {tags.length > 0 && (\n          <div\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              flexDirection: 'row',\n              gap: theme.spacing.sm,\n            }}\n          >\n            <Typography.Text size=\"md\" color=\"secondary\">\n              <FormattedMessage defaultMessage=\"Tags\" description=\"Label for the tags section\" />\n            </Typography.Text>\n            <Overflow noMargin>\n              {tags.map(([key, value]) => {\n                const tagKey = `${key}-${value}`;\n                const fullText = `${key}: ${value}`;\n\n                return (\n                  <Tooltip key={key} componentId={getComponentId(tagKey)} content={fullText}>\n                    <Tag\n                      componentId={getComponentId(tagKey)}\n                      color=\"teal\"\n                      onClick={() => {\n                        handleTagClick(fullText);\n                        handleCopy();\n                      }}\n                      css={{ cursor: 'pointer' }}\n                    >\n                      {getTruncatedLabel(`${key}: ${value}`)}\n                    </Tag>\n                  </Tooltip>\n                );\n              })}\n            </Overflow>\n          </div>\n        )}\n      </div>\n\n      {showNotification && (\n        <Notification.Provider>\n          <Notification.Root severity=\"success\" componentId={BASE_NOTIFICATION_COMPONENT_ID}>\n            <Notification.Title>\n              <FormattedMessage\n                defaultMessage=\"Copied to clipboard\"\n                description=\"Success message for the notification\"\n              />\n            </Notification.Title>\n          </Notification.Root>\n          <Notification.Viewport />\n        </Notification.Provider>\n      )}\n    </>\n  );\n};\n","import _ from 'lodash';\n\nexport const MLFLOW_INTERNAL_PREFIX = 'mlflow.';\nconst MLFLOW_INTERNAL_PREFIX_UC = '_mlflow_';\n\nexport const isUserFacingTag = (tagKey: string) =>\n  !tagKey.startsWith(MLFLOW_INTERNAL_PREFIX) && !tagKey.startsWith(MLFLOW_INTERNAL_PREFIX_UC);\n\n// Safe JSON.parse that returns undefined instead of throwing an error\nexport const parseJSONSafe = (json: string) => {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    return undefined;\n  }\n};\n\nexport const truncateToFirstLineWithMaxLength = (str: string, maxLength: number): string => {\n  const truncated = _.truncate(str, {\n    length: maxLength,\n  });\n  return _.takeWhile(truncated, (char) => char !== '\\n').join('');\n};\n","import { useEffect, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\n\nimport { Tabs, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { getLargeTraceDisplaySizeThreshold, shouldBlockLargeTraceDisplay } from './FeatureUtils';\nimport type { ModelTrace } from './ModelTrace.types';\nimport { getModelTraceId, getModelTraceSize } from './ModelTraceExplorer.utils';\nimport { ModelTraceExplorerDetailView } from './ModelTraceExplorerDetailView';\nimport { ModelTraceExplorerErrorState } from './ModelTraceExplorerErrorState';\nimport { ModelTraceExplorerGenericErrorState } from './ModelTraceExplorerGenericErrorState';\nimport { ModelTraceExplorerTraceTooLargeView } from './ModelTraceExplorerTraceTooLargeView';\nimport {\n  ModelTraceExplorerViewStateProvider,\n  useModelTraceExplorerViewState,\n} from './ModelTraceExplorerViewStateContext';\nimport { useGetModelTraceInfoV3 } from './hooks/useGetModelTraceInfoV3';\nimport { ModelTraceExplorerSummaryView } from './summary-view/ModelTraceExplorerSummaryView';\nimport { ModelTraceHeaderDetails } from './ModelTraceHeaderDetails';\n\nconst ModelTraceExplorerContent = ({\n  modelTrace,\n  className,\n  selectedSpanId,\n  onSelectSpan,\n}: {\n  modelTrace: ModelTrace;\n  className?: string;\n  selectedSpanId?: string;\n  onSelectSpan?: (selectedSpanId?: string) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { activeView, setActiveView } = useModelTraceExplorerViewState();\n\n  return (\n    <Tabs.Root\n      componentId=\"model-trace-explorer\"\n      value={activeView}\n      onValueChange={(value) => setActiveView(value as 'summary' | 'detail')}\n      css={{\n        '& > div:nth-of-type(2)': {\n          marginBottom: 0,\n          flexShrink: 0,\n        },\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n        overflow: 'hidden',\n      }}\n    >\n      <div css={{ paddingLeft: theme.spacing.md, paddingBottom: theme.spacing.sm }}>\n        <ModelTraceHeaderDetails modelTrace={modelTrace} />\n      </div>\n      <Tabs.List css={{ paddingLeft: theme.spacing.md, flexShrink: 0 }}>\n        <Tabs.Trigger value=\"summary\">\n          <FormattedMessage\n            defaultMessage=\"Summary\"\n            description=\"Label for the summary view tab in the model trace explorer\"\n          />\n        </Tabs.Trigger>\n        <Tabs.Trigger value=\"detail\">\n          <FormattedMessage\n            defaultMessage=\"Details & Timeline\"\n            description=\"Label for the details & timeline view tab in the model trace explorer\"\n          />\n        </Tabs.Trigger>\n      </Tabs.List>\n      <Tabs.Content\n        value=\"summary\"\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          minHeight: 0,\n        }}\n      >\n        <ModelTraceExplorerSummaryView modelTrace={modelTrace} />\n      </Tabs.Content>\n      <Tabs.Content\n        value=\"detail\"\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          minHeight: 0,\n        }}\n      >\n        <ModelTraceExplorerDetailView\n          modelTrace={modelTrace}\n          className={className}\n          selectedSpanId={selectedSpanId}\n          onSelectSpan={onSelectSpan}\n        />\n      </Tabs.Content>\n    </Tabs.Root>\n  );\n};\n\nconst ContextProviders = ({ children }: { traceId: string; children: React.ReactNode }) => {\n  return <ErrorBoundary fallbackRender={ModelTraceExplorerErrorState}>{children}</ErrorBoundary>;\n};\n\nexport const ModelTraceExplorerImpl = ({\n  modelTrace: initialModelTrace,\n  className,\n  initialActiveView,\n  selectedSpanId,\n  onSelectSpan,\n}: {\n  modelTrace: ModelTrace;\n  className?: string;\n  initialActiveView?: 'summary' | 'detail';\n  selectedSpanId?: string;\n  onSelectSpan?: (selectedSpanId?: string) => void;\n}) => {\n  const [modelTrace, setModelTrace] = useState(initialModelTrace);\n  const [forceDisplay, setForceDisplay] = useState(false);\n  const traceId = getModelTraceId(initialModelTrace);\n  // older traces don't have a size, so we default to 0 to always display them\n  const size = getModelTraceSize(initialModelTrace) ?? 0;\n  // always displayable if the feature flag is disabled\n  const isDisplayable = shouldBlockLargeTraceDisplay() ? size < getLargeTraceDisplaySizeThreshold() : true;\n  const [assessmentsPaneEnabled, setAssessmentsPaneEnabled] = useState(traceId.startsWith('tr-'));\n\n  useGetModelTraceInfoV3({\n    traceId,\n    setModelTrace,\n    setAssessmentsPaneEnabled,\n    enabled: isDisplayable && traceId.startsWith('tr-'),\n  });\n\n  useEffect(() => {\n    setModelTrace(initialModelTrace);\n    // reset the model trace when the traceId changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [traceId]);\n\n  if (!isDisplayable && !forceDisplay) {\n    return <ModelTraceExplorerTraceTooLargeView traceId={traceId} setForceDisplay={setForceDisplay} />;\n  }\n\n  return (\n    <ContextProviders traceId={traceId}>\n      <ModelTraceExplorerViewStateProvider\n        modelTrace={modelTrace}\n        initialActiveView={initialActiveView}\n        selectedSpanIdOnRender={selectedSpanId}\n        assessmentsPaneEnabled={assessmentsPaneEnabled}\n      >\n        <ModelTraceExplorerContent\n          modelTrace={modelTrace}\n          className={className}\n          selectedSpanId={selectedSpanId}\n          onSelectSpan={onSelectSpan}\n        />\n      </ModelTraceExplorerViewStateProvider>\n    </ContextProviders>\n  );\n};\n\nexport const ModelTraceExplorer = ModelTraceExplorerImpl;\n","import { isString, isObject, isNil } from 'lodash';\n\nimport { Tag, Tooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nconst SingleExpectationValuePreview = ({ objectKey, value }: { objectKey?: string; value: any }) => {\n  const { theme } = useDesignSystemTheme();\n  const displayValue = isString(value) ? value : JSON.stringify(value);\n\n  return (\n    <Tooltip content={displayValue} componentId=\"shared.model-trace-explorer.expectation-value-preview-tooltip\">\n      <Tag\n        color=\"indigo\"\n        componentId=\"shared.model-trace-explorer.expectation-array-item-tag\"\n        css={{ width: 'min-content', maxWidth: '100%' }}\n      >\n        <Typography.Text css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n          {objectKey && (\n            <Typography.Text bold css={{ marginRight: theme.spacing.xs }}>\n              {objectKey}:\n            </Typography.Text>\n          )}\n          {displayValue}\n        </Typography.Text>\n      </Tag>\n    </Tooltip>\n  );\n};\n\nexport const ExpectationValuePreview = ({\n  parsedValue,\n  singleLine = false,\n}: {\n  parsedValue: any;\n  singleLine?: boolean;\n}): React.ReactElement | null => {\n  const { theme } = useDesignSystemTheme();\n\n  if (isNil(parsedValue)) {\n    return null;\n  }\n\n  if (Array.isArray(parsedValue)) {\n    return singleLine ? (\n      <SingleExpectationValuePreview value={parsedValue} />\n    ) : (\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.sm,\n        }}\n      >\n        {parsedValue.map((item, index) => (\n          <SingleExpectationValuePreview value={item} key={index} />\n        ))}\n      </div>\n    );\n  }\n\n  if (isObject(parsedValue)) {\n    return singleLine ? (\n      <SingleExpectationValuePreview value={parsedValue} />\n    ) : (\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.sm,\n        }}\n      >\n        {Object.entries(parsedValue).map(([key, value]) => (\n          <SingleExpectationValuePreview key={key} objectKey={key} value={value} />\n        ))}\n      </div>\n    );\n  }\n\n  return <SingleExpectationValuePreview value={parsedValue} />;\n};\n","import { TableSkeleton, TitleSkeleton, useDesignSystemTheme } from '@databricks/design-system';\n\nexport const ModelTraceExplorerSkeleton = ({ label }: { label?: React.ReactNode }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div css={{ display: 'flex', height: '100%' }}>\n      <div css={{ flex: 1 }}>\n        <div css={{ padding: theme.spacing.sm, borderBottom: `1px solid ${theme.colors.border}` }}>\n          <TitleSkeleton label={label} />\n        </div>\n        <div\n          css={{\n            borderRadius: theme.legacyBorders.borderRadiusMd,\n            overflow: 'hidden',\n            display: 'flex',\n          }}\n        >\n          <div css={{ flex: 1, padding: theme.spacing.sm, borderRight: `1px solid ${theme.colors.border}` }}>\n            <TableSkeleton lines={5} />\n          </div>\n          <div css={{ flex: 2, padding: theme.spacing.sm }}>\n            <TableSkeleton lines={5} />\n          </div>\n        </div>\n      </div>\n      <div css={{ padding: theme.spacing.md, overflowY: 'auto', flex: 1 }}>\n        <TableSkeleton lines={12} />\n      </div>\n    </div>\n  );\n};\n","export const getUser = () => {\n  // return a dummy user as the OSS backend\n  // does not transmit user info to frontend\n  return 'User';\n};\n","import React, { createContext, useContext, type ReactNode, useMemo } from 'react';\n\nimport { parseAssessmentSchemas } from './AssessmentSchemaContext.utils';\nimport type { Assessment } from '../ModelTrace.types';\nimport type { AssessmentFormInputDataType } from '../assessments-pane/AssessmentsPane.utils';\n\nexport type AssessmentSchema = {\n  name: string;\n  assessmentType: 'feedback' | 'expectation';\n  dataType: AssessmentFormInputDataType;\n};\n\ninterface AssessmentSchemaContextValue {\n  schemas: AssessmentSchema[];\n}\n\nconst AssessmentSchemaContext = createContext<AssessmentSchemaContextValue>({\n  schemas: [],\n});\n\ninterface AssessmentSchemaContextProviderProps {\n  children: ReactNode;\n  assessments: Assessment[];\n}\n\nexport const AssessmentSchemaContextProvider: React.FC<AssessmentSchemaContextProviderProps> = ({\n  children,\n  assessments,\n}) => {\n  const schemas = useMemo(() => parseAssessmentSchemas(assessments), [assessments]);\n  const value: AssessmentSchemaContextValue = useMemo(\n    () => ({\n      schemas,\n    }),\n    [schemas],\n  );\n\n  return <AssessmentSchemaContext.Provider value={value}>{children}</AssessmentSchemaContext.Provider>;\n};\n\nexport const useAssessmentSchemas = (): AssessmentSchemaContextValue => {\n  return useContext(AssessmentSchemaContext);\n};\n","import { isNil } from 'lodash';\n\nimport type { AssessmentSchema } from './AssessmentSchemaContext';\nimport type { Assessment } from '../ModelTrace.types';\nimport type { AssessmentFormInputDataType } from '../assessments-pane/AssessmentsPane.utils';\nimport { getAssessmentValue } from '../assessments-pane/utils';\n\n// this function accepts a flat list of assessments (e.g. the result\n// of tracesInfos.flatMap(info => info.assessments)), and returns a\n// list of assessment schemas\nexport const parseAssessmentSchemas = (assessments: Assessment[]): AssessmentSchema[] => {\n  // stores all schemas for which we can determine the data type\n  const schemaMap: { [assessmentName: string]: AssessmentSchema } = {};\n  // stores all schemas with null / undefined values.\n  // after parsing all values, we will merge the two,\n  // keeping the data type from the schemaMap if it exists,\n  // and using `boolean` if it does not.\n  const nullsSchemaMap: { [assessmentName: string]: AssessmentSchema } = {};\n\n  for (const assessment of assessments) {\n    if (schemaMap[assessment.assessment_name]) {\n      continue;\n    }\n\n    // NOTE: the getAssessmentValue function does not parse\n    // serialized JSON, and just returns them as strings.\n    const value = getAssessmentValue(assessment);\n\n    if (isNil(value)) {\n      nullsSchemaMap[assessment.assessment_name] = {\n        name: assessment.assessment_name,\n        assessmentType: 'feedback' in assessment ? 'feedback' : 'expectation',\n        dataType: 'boolean',\n      };\n      continue;\n    }\n\n    const isSerializedExpectation = 'expectation' in assessment && 'serialized_value' in assessment.expectation;\n\n    let dataType: AssessmentFormInputDataType;\n    switch (typeof value) {\n      case 'string':\n        dataType = isSerializedExpectation ? 'json' : 'string';\n        break;\n      case 'boolean':\n        dataType = 'boolean';\n        break;\n      case 'number':\n        dataType = 'number';\n        break;\n      // for unexpected types, just default to boolean\n      default:\n        dataType = 'boolean';\n        break;\n    }\n\n    schemaMap[assessment.assessment_name] = {\n      name: assessment.assessment_name,\n      assessmentType: 'feedback' in assessment ? 'feedback' : 'expectation',\n      dataType,\n    };\n  }\n\n  // combine the two maps, keeping the data type from the schemaMap if it exists,\n  for (const [assessmentName, schema] of Object.entries(nullsSchemaMap)) {\n    if (!(assessmentName in schemaMap)) {\n      schemaMap[assessmentName] = schema;\n    }\n  }\n\n  return Object.values(schemaMap);\n};\n"],"names":["getAssessmentValue","assessment","feedback","value","expectation","serialized_value","_ref","name","styles","_ref2","_ref3","forwardRef","initialRatio","paneWidth","setPaneWidth","leftChild","leftMinWidth","rightChild","rightMinWidth","ref","_useResizeObserver","isResizing","setIsResizing","useState","containerRef","useRef","containerWidth","useResizeObserver","width","maxWidth","Infinity","ratio","theme","useDesignSystemTheme","updateRatio","useCallback","newPaneWidth","current","useImperativeHandle","useLayoutEffect","clamp","_jsxs","css","children","_jsx","Global","ResizableBox","axis","_css","display","flex","handle","position","spacing","sm","marginLeft","xs","minHeight","cursor","backgroundColor","zIndex","onResize","e","size","clampedSize","onResizeStart","onResizeStop","minConstraints","maxConstraints","ModelTraceExplorerSearchBox","searchFilter","setSearchFilter","matchData","handleNextSearchMatch","handlePreviousSearchMatch","searchValue","setSearchValue","debouncedSetSearchFilter","useDebouncedCallback","flexDirection","justifyContent","gap","Input","componentId","allowClear","placeholder","onClear","onChange","target","toLowerCase","prefix","SearchIcon","match","marginRight","alignItems","Typography","Text","whiteSpace","currentMatchIndex","totalMatches","Button","icon","ChevronUpIcon","onClick","ChevronDownIcon","DEFAULT_EXPAND_DEPTH","TimelineTreeZIndex","getTimelineTreeNodesList","nodes","expandedNodesFlat","traverseExpanded","traversedNode","_traversedNode$childr2","push","forEach","getTimelineTreeNodesMap","expandDepth","nodesMap","traverse","depth","_traversedNode$childr3","key","child","spanTimeFormatter","executionTimeUs","toFixed","getActiveChildIndex","node","activeNodeId","_node$children","findIndex","getModelTraceSpanNodeDepth","_node$children2","length","childDepths","map","Math","max","ModelTraceExplorerViewStateContext","createContext","rootNode","nodeMap","activeView","setActiveView","selectedNode","undefined","setSelectedNode","activeTab","setActiveTab","showTimelineTreeGantt","setShowTimelineTreeGantt","assessmentsPaneExpanded","setAssessmentsPaneExpanded","assessmentsPaneEnabled","useModelTraceExplorerViewState","useContext","ModelTraceExplorerViewStateProvider","modelTrace","initialActiveView","selectedSpanIdOnRender","_defaultSelectedNode$","_defaultSelectedNode$2","useMemo","parseModelTraceToTree","selectedSpanOnRender","searchTreeBySpanId","defaultSelectedNode","hasAssessments","assessments","hasInputsOrOutputs","isNil","inputs","outputs","defaultActiveTab","getDefaultActiveTab","useEffect","Provider","getTabForMatch","section","useModelTraceSearch","treeNode","setExpandedKeys","modelTraceInfo","_matches$activeMatchI","spanFilterState","setSpanFilterState","spanTypeDisplayState","compact","type","spanType","showParents","showExceptions","getDefaultSpanFilterState","activeMatchIndex","setActiveMatchIndex","filteredTreeNodes","matches","searchTree","selectMatch","newMatchIndex","span","parents","getSpanNodeParentIds","Set","currentNode","parentId","add","expandedKeys","_selectedNode$key","selectedNodeKey","newSpan","chatMessages","trim","ModelTraceExplorerHighlightedSnippetTitle","title","isActiveMatch","scrollToActiveMatch","scrollIntoView","block","inline","titleLower","includes","startIdx","indexOf","endIdx","colors","ACTIVE_HIGHLIGHT_COLOR","INACTIVE_HIGHLIGHT_COLOR","slice","scrollMarginTop","getInitialRenderMode","dataIsString","initialRenderMode","CodeSnippetRenderMode","MARKDOWN","JSON","getRenderModeDisplayText","renderMode","TEXT","PYTHON","_ref4","ModelTraceExplorerCodeSnippet","tokens","data","activeMatch","containsActiveMatch","_activeMatch$isKeyMat","parsedData","parse","isString","setRenderMode","isTitleMatch","isKeyMatch","shouldShowRenderModeDropdown","borderRadius","borders","borderRadiusSm","border","overflow","padding","Title","level","color","withoutMargins","DropdownMenu","Root","Trigger","asChild","Tag","paddingLeft","Content","RadioGroup","onValueChange","Object","values","mode","RadioItem","ItemIndicator","Arrow","ModelTraceExplorerCodeSnippetBody","ModelTraceExplorerAttributesTab","activeSpan","attributes","containsAttributes","keys","isActiveMatchSpan","marginTop","md","Empty","description","FormattedMessage","id","defaultMessage","entries","stringify","ModelTraceExplorerChatToolParam","paramName","paramProperties","isRequired","enum","enumValues","hasAdditionalInfo","borderStyles","borderTopLeftRadius","borderRadiusMd","borderTopRightRadius","borderBottom","backgroundSecondary","style","textOverflow","gridTemplateColumns","gridTemplateRows","_Fragment","bold","code","flexWrap","ModelTraceExplorerChatTool","tool","_tool$function$parame","_tool$function$parame2","_tool$function$parame3","expanded","setExpanded","function","parameters","properties","requiredParams","required","isExpandable","hoverStyles","actionIconBackgroundHover","backgroundPrimary","role","ChevronRightIcon","Paragraph","marginBottom","ModelTraceExplorerConversation","messages","message","index","ModelTraceExplorerChatMessage","ModelTraceExplorerCollapsibleSection","sectionKey","withBorder","className","background","borderBottomLeftRadius","borderBottomRightRadius","borderTop","ModelTraceExplorerChatTab","chatTools","overflowY","ModelTraceExplorerDefaultSpanView","inputList","createListFromObject","outputList","containsInputs","containsOutputs","getTruncatedStyles","shouldTruncate","KeyValueTag","itemKey","itemValue","charLimit","shouldTruncateKey","shouldTruncateValue","fullLength","isKeyLonger","shorterLength","getKeyAndValueComplexTruncation","Tooltip","content","ModelTraceExplorerRetrieverDocumentFull","text","metadataTags","logDocumentClick","height","typography","lineHeightBase","boxSizing","FileDocumentIcon","paddingBottom","GenAIMarkdownRenderer","paddingTop","ModelTraceExplorerRetrieverDocumentPreview","minWidth","flexShrink","ellipsis","ModelTraceExplorerRetrieverDocument","metadata","ModelTraceExplorerRenderModeToggle","shouldRenderMarkdown","setShouldRenderMarkdown","SegmentedControlGroup","event","SegmentedControlButton","TextBoxIcon","fontSize","fontSizeLg","MIcon","ModelTraceExplorerRetrieverSpanView","outputsContainsActiveMatch","legacyBorders","document","idx","page_content","ModelTraceExplorerContentTab","isRenderableRetrieverSpan","ModelTraceExplorerEventsTab","events","Array","isArray","XCircleIcon","attribute","getEventAttributeKey","ModelTraceExplorerBadge","count","fontSizeBase","actionDangerPrimaryBackgroundDefault","actionPrimaryTextDefault","AssessmentPaneToggle","disabled","GavelIcon","AssessmentCreateNameTypeahead","setName","nameError","setNameError","handleChangeSchema","schemas","useAssessmentSchemas","intl","useIntl","schemaNames","schema","_schema$name","selectedItem","setSelectedItem","itemsTest","setItemsTest","items","filteredItems","newSchema","assessmentType","dataType","getDefaultSchema","unshift","formOnChange","newSelectedItem","comboboxState","useComboboxState","allItems","setItems","multiSelect","setInputValue","itemToString","item","_item$name","matcher","query","_item$name$toLowerCas","_item$name2","formValue","preventUnsetOnBlur","TypeaheadComboboxRoot","onKeyDown","stopPropagation","TypeaheadComboboxInput","formatMessage","validationState","onPressEnter","showComboboxToggleButton","FormUI","Message","TypeaheadComboboxMenu","_item$name3","_item$name4","_item$name5","TypeaheadComboboxMenuItem","ASSESSMENT_PANE_MIN_WIDTH","timeSinceStr","date","referenceDate","Date","seconds","floor","getTime","interval","timeSince","getCreateAssessmentPayloadValue","isFeedback","String","serialization_format","fetchFn","fetch","serializeRequestBody","payload","FormData","Blob","fetchAPI","async","url","method","body","response","headers","ok","predefinedError","matchPredefinedError","json","createAssessment","trace_id","ComponentMap","JsonInput","valueError","setValue","setValueError","isSubmitting","TextArea","autoSize","minRows","maxRows","string","TextInput","boolean","BooleanInput","number","NumericInput","Number","AssessmentCreateForm","assessmentName","spanId","traceId","_ComponentMap$dataTyp","setAssessmentType","setDataType","rationale","setRationale","isNamePrefilled","InputComponent","createAssessmentMutation","isLoading","useCreateAssessment","onSuccess","onError","onSettled","queryClient","useQueryClient","mutate","useMutation","mutationFn","invalidateQueries","queryKey","FETCH_TRACE_INFO_QUERY_KEY","error","displayErrorNotification","Error","handleCreate","_getUser","valueObj","assessment_name","source","source_type","source_id","getUser","span_id","SimpleSelect","SimpleSelectOption","loading","AssessmentCreateButton","behavior","PlusIcon","AssessmentActionsOverflowMenu","setIsEditing","setShowDeleteModal","showEditButton","OverflowIcon","Item","IconWrapper","PencilIcon","TrashIcon","AssessmentDeleteModal","isModalVisible","setIsModalVisible","deleteAssessmentMutation","deleteAssessment","assessmentId","assessment_id","handleDelete","Modal","visible","onOk","okButtonProps","danger","okText","onCancel","cancelText","confirmLoading","useUpdateAssessment","updateAssessmentMutation","updateAssessment","AssessmentEditForm","initialValue","defaultType","getDefaultType","defaultValue","getDefaultValue","user","isUpdating","overrideAssessmentMutation","isOverwriting","useOverrideAssessment","oldAssessment","newAssessment","overrides","omit","handleUpdate","update_mask","rows","SpanNameDetailViewLink","_node$type","hasException","getSpanExceptionCount","textDecoration","textDecorationColor","actionDangerDefaultTextDefault","actionDefaultTextDefault","ModelTraceExplorerIcon","getIconTypeForSpan","ModelSpanType","UNKNOWN","ExpectationItem","isEditing","showDeleteModal","associatedSpan","showAssociatedSpan","parsedValue","getParsedExpectationValue","ExpectationValuePreview","AssessmentDisplayValue","jsonValue","CheckCircleIcon","DangerIcon","AssessmentSourceName","textWrap","blue500","AssessmentItemHeader","renderConnector","SourceIcon","UserIcon","SparkleIcon","CodeIcon","getSourceIcon","left","top","borderLeft","fontSizeSm","borderRadiusFull","last_update_time","FeedbackErrorItem","Alert","closable","error_code","error_message","stack_trace","Link","footer","FeedbackHistoryItem","paddingRight","lg","FeedbackHistoryModal","assessmentHistory","seen","flattened","currentAssessment","has","overriddenAssessment","flattenOverrides","FeedbackItemContent","isHistoryModalVisible","setIsHistoryModalVisible","FeedbackItem","getSourceTypeIcon","sourceType","smallIconStyles","FeedbackValueGroupSourceCounts","feedbacks","sourceCounts","countBy","FeedbackValueGroup","valid","FeedbackGroup","valuesMap","activeSpanId","displayName","split","join","getAssessmentDisplayName","showCreateForm","setShowCreateForm","hasError","flat","some","AssessmentsPane","expectations","partition","groupedFeedbacks","aggregated","group","toSorted","leftName","rightName","localeCompare","groupFeedbacks","sortedExpectations","right","CloseIcon","ModelTraceExplorerRightPaneTabsImpl","contentStyle","exceptionCount","tabContent","Tabs","tab","List","ModelTraceExplorerResizablePane","ModelTraceExplorerRightPaneTabs","React","TimelineTreeFilterButton","Popover","FilterIcon","align","shouldDisplay","Checkbox","isChecked","getDisplayNameForSpanType","InfoTooltip","TimelineTreeHeader","showTimelineInfo","setShowTimelineInfo","ListBorderIcon","BarsAscendingVerticalIcon","IconBottomConnector","active","borderColor","bottom","SPAN_INDENT_WIDTH","borderRight","IconLeftConnector","VerticalConnector","TimelineTreeHierarchyBars","isActiveSpan","isInActiveChain","linesToRender","hasChildren","isExpanded","shouldRender","isActive","TimelineTreeSpanTooltip","_span$type","iconType","primaryTextColor","isDarkMode","grey800","grey100","secondaryTextColor","grey500","grey350","hideWhenDetached","wordBreak","isInTooltip","end","start","side","TimelineTreeNode","selectedKey","traceStartTime","traceEndTime","onSelect","activeChildIndex","actionDefaultBackgroundHover","actionDefaultBackgroundPress","newExpandedKeys","delete","margin","_node$children$length","_node$children3","concat","TimelineTreeGanttNode","leftOffset","titleInBarRef","titleBesideBarRef","offsetWidth","blue600","white","textPrimary","TimelineTreeGanttBars","_useResizeObserver$wi","treeContainerRef","treeElementWidth","initialXTicks","graphWidth","minPixelsBetweenTicks","range","maxTickCount","rawInterval","magnitude","pow","log10","residual","niceFraction","niceInterval","extendedRight","ticks","tick","ceil","getNiceXTicks","min","xTicks","scaleDurationToTreeWidth","scaleX","n","transform","pointerEvents","TimelineTree","rootNodes","onSpanClick","expandedNodesList","getTimelineTreeExpandedNodesList","_traversedNode$childr","treeElement","_selectedNode$key2","ModelTraceExplorerDetailView","selectedSpanId","onSelectSpan","_treeNode$start","_treeNode$end","window","innerWidth","paneRef","useTimelineTreeExpandedNodes","params","list","initialExpandDepth","info","leftPaneMinWidth","minWidthForSpans","CONTENT_PANE_MIN_WIDTH","ModelTraceExplorerErrorState","image","useGetModelTraceInfoV3","setModelTrace","setAssessmentsPaneEnabled","enabled","useQuery","queryFn","fetchTraceInfoV3","prevModelTrace","_response$trace$trace","_response$trace","trace","trace_info","ModelTraceExplorerChatToolsRenderer","tools","ModelTraceExplorerRetrieverFieldRenderer","documents","ModelTraceExplorerTextFieldRenderer","displayValue","ModelTraceExplorerFieldRenderer","normalizeConversation","isChatTools","every","isModelTraceChatTool","isRetrieverDocuments","isRetrieverDocument","ModelTraceExplorerSummaryViewExceptionsSection","_firstException$attri","exceptionEvents","getSpanExceptionEvents","isRoot","firstException","ModelTraceExplorerSummaryIntermediateNode","spanName","ModelTraceExplorerSummarySpans","intermediateNodes","rootInputs","rootOutputs","exceptions","hasIntermediateNodes","hasExceptions","isNodeImportant","AGENT","RETRIEVER","CHAT_MODEL","TOOL","LLM","ModelTraceExplorerSummaryView","allAssessments","flatMap","filter","ModelTraceHeaderMetricSection","label","tagKey","getTruncatedLabel","getComponentId","onCopy","handleClick","navigator","clipboard","writeText","ModelTraceHeaderDetails","_modelTrace$info$tags","showNotification","setShowNotification","tags","isUserFacingTag","startsWith","modelTraceId","getModelTraceId","tokenUsage","_trace_metadata$mlflo","_modelTrace$info","_modelTrace$info$trac","parseJSONSafe","trace_metadata","totalTokens","total_tokens","latency","truncateToFirstLineWithMaxLength","str","maxLength","truncated","_","char","handleCopy","setTimeout","toString","ClockIcon","Overflow","noMargin","fullText","Notification","severity","Viewport","ModelTraceExplorerContent","ContextProviders","ErrorBoundary","fallbackRender","ModelTraceExplorer","ModelTraceExplorerImpl","initialModelTrace","_getModelTraceSize","forceDisplay","setForceDisplay","getModelTraceSize","SingleExpectationValuePreview","objectKey","singleLine","isObject","ModelTraceExplorerSkeleton","TitleSkeleton","TableSkeleton","lines","AssessmentSchemaContext","AssessmentSchemaContextProvider","schemaMap","nullsSchemaMap","isSerializedExpectation","parseAssessmentSchemas"],"sourceRoot":""}