{"version":3,"file":"static/js/9786.44fbd407.chunk.js","mappings":"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","sources":["home/quick-actions.tsx","home/components/GetStarted.tsx","home/components/ExperimentsHomeView.tsx","home/news-items.tsx","home/components/DiscoverNews.tsx","home/HomePage.tsx","shared/building_blocks/CopyButton.tsx","common/components/ScrollablePageWrapper.tsx","experiment-tracking/components/ExperimentListTableTagsCell.tsx","experiment-tracking/components/ExperimentListTable.tsx","common/components/KeyValueTagFullViewModal.tsx","common/components/KeyValueTag.tsx"],"sourcesContent":["import React from 'react';\nimport { BeakerIcon, ModelsIcon, NotebookIcon, WorkflowsIcon } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport ExperimentTrackingRoutes from '../experiment-tracking/routes';\nimport type { HomeQuickActionDefinition } from './types';\n\nexport const homeQuickActions: HomeQuickActionDefinition[] = [\n  {\n    id: 'log-traces',\n    icon: WorkflowsIcon,\n    componentId: 'mlflow.home.quick_action.log_traces',\n    title: (\n      <FormattedMessage defaultMessage=\"Log traces\" description=\"Home page quick action title for logging traces\" />\n    ),\n    description: (\n      <FormattedMessage\n        defaultMessage=\"Trace LLM applications for debugging and monitoring.\"\n        description=\"Home page quick action description for logging traces\"\n      />\n    ),\n    link: 'https://mlflow.org/docs/latest/llms/tracing/index.html',\n  },\n  {\n    id: 'run-evaluation',\n    icon: BeakerIcon,\n    componentId: 'mlflow.home.quick_action.run_evaluation',\n    title: (\n      <FormattedMessage\n        defaultMessage=\"Run evaluation\"\n        description=\"Home page quick action title for running evaluations\"\n      />\n    ),\n    description: (\n      <FormattedMessage\n        defaultMessage=\"Iterate on quality with offline evaluations and comparisons.\"\n        description=\"Home page quick action description for running evaluations\"\n      />\n    ),\n    link: 'https://mlflow.org/docs/latest/llms/llm-evaluate/index.html',\n  },\n  {\n    id: 'train-models',\n    icon: NotebookIcon,\n    componentId: 'mlflow.home.quick_action.train_models',\n    title: (\n      <FormattedMessage defaultMessage=\"Train models\" description=\"Home page quick action title for training models\" />\n    ),\n    description: (\n      <FormattedMessage\n        defaultMessage=\"Track experiments, parameters, and metrics throughout training.\"\n        description=\"Home page quick action description for training models\"\n      />\n    ),\n    link: 'https://mlflow.org/docs/latest/ml/tracking/quickstart/',\n  },\n  {\n    id: 'register-prompts',\n    icon: ModelsIcon,\n    componentId: 'mlflow.home.quick_action.register_prompts',\n    title: (\n      <FormattedMessage\n        defaultMessage=\"Register prompts\"\n        description=\"Home page quick action title for registering prompts\"\n      />\n    ),\n    description: (\n      <FormattedMessage\n        defaultMessage=\"Manage prompt updates and collaborate across teams.\"\n        description=\"Home page quick action description for registering prompts\"\n      />\n    ),\n    link: 'https://mlflow.org/docs/latest/genai/prompt-registry/',\n  },\n];\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { homeQuickActions } from '../quick-actions';\n\ntype QuickAction = typeof homeQuickActions[number];\n\nconst GetStartedCard = ({ action }: { action: QuickAction }) => {\n  const { theme } = useDesignSystemTheme();\n  const linkStyles = {\n    textDecoration: 'none',\n    color: theme.colors.textPrimary,\n    display: 'block',\n  };\n  const containerStyles = {\n    overflow: 'hidden',\n    border: `1px solid ${theme.colors.actionDefaultBorderDefault}`,\n    borderRadius: theme.borders.borderRadiusMd,\n    background: theme.colors.backgroundPrimary,\n    padding: theme.spacing.sm + theme.spacing.xs,\n    display: 'flex',\n    gap: theme.spacing.sm,\n    width: 320,\n    minWidth: 320,\n    boxSizing: 'border-box' as const,\n    boxShadow: theme.shadows.sm,\n    cursor: 'pointer',\n    transition: 'background 150ms ease',\n    '&:hover': {\n      background: theme.colors.actionDefaultBackgroundHover,\n    },\n    '&:active': {\n      background: theme.colors.actionDefaultBackgroundPress,\n    },\n  };\n  const contentStyles = {\n    display: 'flex',\n    flexDirection: 'column' as const,\n    gap: theme.spacing.xs,\n    flex: 1,\n  };\n  const iconWrapperStyles = {\n    borderRadius: theme.borders.borderRadiusSm,\n    background: theme.colors.actionDefaultBackgroundHover,\n    padding: theme.spacing.xs,\n    color: theme.colors.blue500,\n    height: 'min-content',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  };\n\n  const card = (\n    <div css={containerStyles}>\n      <div css={iconWrapperStyles}>\n        <action.icon />\n      </div>\n      <div css={contentStyles}>\n        <span role=\"heading\" aria-level={2}>\n          <Typography.Text bold>{action.title}</Typography.Text>\n        </span>\n        <Typography.Text color=\"secondary\">{action.description}</Typography.Text>\n      </div>\n    </div>\n  );\n\n  return (\n    <a href={action.link} target=\"_blank\" rel=\"noopener noreferrer\" css={linkStyles}>\n      {card}\n    </a>\n  );\n};\n\nexport const GetStarted = () => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <section css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.md }}>\n      <Typography.Title level={3} css={{ margin: 0 }}>\n        <FormattedMessage defaultMessage=\"Get started\" description=\"Home page quick action section title\" />\n      </Typography.Title>\n      <section\n        css={{\n          marginBottom: 20,\n          width: '100%',\n          minWidth: 0,\n          display: 'flex',\n          gap: theme.spacing.sm + theme.spacing.xs,\n          flexWrap: 'wrap',\n        }}\n      >\n        {homeQuickActions.map((action) => (\n          <GetStartedCard key={action.id} action={action} />\n        ))}\n      </section>\n    </section>\n  );\n};\n","import { useMemo, useState } from 'react';\nimport { Alert, Button, Spacer, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { RowSelectionState, SortingState } from '@tanstack/react-table';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentListTable } from '../../experiment-tracking/components/ExperimentListTable';\nimport Routes from '../../experiment-tracking/routes';\nimport { Link } from '../../common/utils/RoutingUtils';\nimport type { ExperimentEntity } from '../../experiment-tracking/types';\n\ntype ExperimentsHomeViewProps = {\n  experiments?: ExperimentEntity[];\n  isLoading: boolean;\n  error?: Error | null;\n  onCreateExperiment: () => void;\n  onRetry: () => void;\n};\n\nconst ExperimentsEmptyState = ({ onCreateExperiment }: { onCreateExperiment: () => void }) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        padding: theme.spacing.lg,\n        textAlign: 'center',\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.md,\n      }}\n    >\n      <Typography.Title level={4} css={{ margin: 0 }}>\n        <FormattedMessage\n          defaultMessage=\"Create your first experiment\"\n          description=\"Home page experiments empty state title\"\n        />\n      </Typography.Title>\n      <Typography.Text css={{ color: theme.colors.textSecondary }}>\n        <FormattedMessage\n          defaultMessage=\"Create your first experiment to start tracking ML workflows.\"\n          description=\"Home page experiments empty state description\"\n        />\n      </Typography.Text>\n      <Button componentId=\"mlflow.home.experiments.create\" onClick={onCreateExperiment}>\n        <FormattedMessage defaultMessage=\"Create experiment\" description=\"Home page experiments empty state CTA\" />\n      </Button>\n    </div>\n  );\n};\n\nexport const ExperimentsHomeView = ({\n  experiments,\n  isLoading,\n  error,\n  onCreateExperiment,\n  onRetry,\n}: ExperimentsHomeViewProps) => {\n  const { theme } = useDesignSystemTheme();\n  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});\n  const [sorting, setSorting] = useState<SortingState>([]);\n\n  const topExperiments = useMemo(() => experiments?.slice(0, 5) ?? [], [experiments]);\n  const shouldShowEmptyState = !isLoading && !error && topExperiments.length === 0;\n\n  return (\n    <section css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n      <div\n        css={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: theme.spacing.md,\n        }}\n      >\n        <Typography.Title level={3} css={{ margin: 0 }}>\n          <FormattedMessage defaultMessage=\"Experiments\" description=\"Home page experiments preview title\" />\n        </Typography.Title>\n        <Link to={Routes.experimentsObservatoryRoute}>\n          <FormattedMessage defaultMessage=\"View all\" description=\"Home page experiments view all link\" />\n        </Link>\n      </div>\n      <div\n        css={{\n          border: `1px solid ${theme.colors.border}`,\n          overflow: 'hidden',\n          backgroundColor: theme.colors.backgroundPrimary,\n        }}\n      >\n        {error ? (\n          <div css={{ padding: theme.spacing.lg, display: 'flex', flexDirection: 'column', gap: theme.spacing.md }}>\n            <Alert\n              type=\"error\"\n              closable={false}\n              componentId=\"mlflow.home.experiments.error\"\n              message={\n                <FormattedMessage\n                  defaultMessage=\"We couldn't load your experiments.\"\n                  description=\"Home page experiments error message\"\n                />\n              }\n              description={error.message}\n            />\n            <div>\n              <Button componentId=\"mlflow.home.experiments.retry\" onClick={onRetry}>\n                <FormattedMessage defaultMessage=\"Retry\" description=\"Home page experiments retry CTA\" />\n              </Button>\n            </div>\n          </div>\n        ) : shouldShowEmptyState ? (\n          <ExperimentsEmptyState onCreateExperiment={onCreateExperiment} />\n        ) : (\n          <ExperimentListTable\n            experiments={topExperiments}\n            isLoading={isLoading}\n            rowSelection={rowSelection}\n            setRowSelection={setRowSelection}\n            sortingProps={{ sorting, setSorting }}\n            onEditTags={() => undefined}\n          />\n        )}\n      </div>\n      <Spacer shrinks={false} />\n    </section>\n  );\n};\n","import { FormattedMessage } from 'react-intl';\nimport { AssistantIcon, NotebookIcon, RobotIcon, DatabaseIcon } from '@databricks/design-system';\nimport type { HomeNewsItemDefinition } from './types';\n\nexport const homeNewsItems: HomeNewsItemDefinition[] = [\n  {\n    id: 'mlflow-mcp-server',\n    title: <FormattedMessage defaultMessage=\"MLflow MCP server\" description=\"Home page news card title one\" />,\n    description:\n      'Connect your coding assistants and AI applications to MLflow and automatically analyze your experiments and traces.',\n    link: 'https://mlflow.org/docs/latest/genai/mcp/index.html',\n    componentId: 'mlflow.home.news.auto_tune_llm_judge',\n    thumbnail: {\n      gradient: 'linear-gradient(135deg, #E9F2FF 0%, #F4EBFF 100%)',\n      icon: AssistantIcon,\n    },\n  },\n  {\n    id: 'optimize-prompts',\n    title: <FormattedMessage defaultMessage=\"Optimize prompts\" description=\"Home page news card title two\" />,\n    description:\n      'Access the state-of-the-art prompt optimization algorithms such as MIPROv2, GEPA, through MLflow Prompt Registry.',\n    link: 'https://mlflow.org/docs/latest/genai/prompt-registry/optimize-prompts',\n    componentId: 'mlflow.home.news.optimize_prompts',\n    thumbnail: {\n      gradient: 'linear-gradient(135deg, #E8F7F2 0%, #D5E8FF 100%)',\n      icon: NotebookIcon,\n    },\n  },\n  {\n    id: 'agents-as-a-judge',\n    title: <FormattedMessage defaultMessage=\"Agents-as-a-judge\" description=\"Home page news card title three\" />,\n    description: 'Leverage agents as a judge to perform deep trace analysis and improve your evaluation accuracy.',\n    link: 'https://mlflow.org/docs/latest/llms/index.html',\n    componentId: 'mlflow.home.news.agents_as_a_judge',\n    thumbnail: {\n      gradient: 'linear-gradient(135deg, #FFF5E1 0%, #FFE2F2 100%)',\n      icon: RobotIcon,\n    },\n  },\n  {\n    id: 'dataset-tracking',\n    title: <FormattedMessage defaultMessage=\"Dataset tracking\" description=\"Home page news card title four\" />,\n    description: 'Track dataset lineage and versions and effectively drive the quality improvement loop.',\n    link: 'https://mlflow.org/docs/latest/genai/datasets/',\n    componentId: 'mlflow.home.news.dataset_tracking',\n    thumbnail: {\n      gradient: 'linear-gradient(135deg, #E6F3FF 0%, #E0F1F6 100%)',\n      icon: DatabaseIcon,\n    },\n  },\n];\n","import type { ComponentType, ReactNode } from 'react';\nimport { Spacer, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { homeNewsItems } from '../news-items';\n\ntype NewsThumbnailProps = {\n  gradient: string;\n  title: ReactNode;\n  description: ReactNode;\n  icon?: ComponentType<{ className?: string; css?: any }>;\n};\n\nconst NewsThumbnail = ({ gradient, title, description, icon: IconComponent }: NewsThumbnailProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        borderRadius: theme.borders.borderRadiusMd,\n        aspectRatio: '16 / 9',\n        background: gradient,\n        display: 'flex',\n        flexDirection: 'column',\n        padding: theme.spacing.md,\n        gap: theme.spacing.md,\n      }}\n    >\n      <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n        <Typography.Text bold color=\"primary\">\n          {title}\n        </Typography.Text>\n        {description ? <Typography.Text color=\"secondary\">{description}</Typography.Text> : <Spacer size=\"sm\" />}\n      </div>\n      {IconComponent && (\n        <div css={{ display: 'flex', alignItems: 'flex-end', justifyContent: 'flex-end', flex: 1 }}>\n          <IconComponent css={{ color: theme.colors.white, fontSize: 24 }} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst DiscoverNewsCard = ({ title, description, link, thumbnail }: typeof homeNewsItems[number]) => {\n  const { theme } = useDesignSystemTheme();\n  const linkStyles = {\n    textDecoration: 'none',\n    color: theme.colors.textPrimary,\n    display: 'block',\n  };\n\n  const card = (\n    <div\n      css={{\n        overflow: 'hidden',\n        border: `1px solid ${theme.colors.actionDefaultBorderDefault}`,\n        borderRadius: theme.borders.borderRadiusMd,\n        background: theme.colors.backgroundPrimary,\n        padding: theme.spacing.sm + theme.spacing.xs,\n        display: 'flex',\n        flexDirection: 'column' as const,\n        gap: theme.spacing.sm,\n        boxSizing: 'border-box' as const,\n        boxShadow: theme.shadows.sm,\n        cursor: 'pointer',\n        transition: 'background 150ms ease',\n        height: '100%',\n        width: 320,\n        minWidth: 320,\n        '&:hover': {\n          background: theme.colors.actionDefaultBackgroundHover,\n        },\n        '&:active': {\n          background: theme.colors.actionDefaultBackgroundPress,\n        },\n      }}\n    >\n      <NewsThumbnail gradient={thumbnail.gradient} title={title} description={description} icon={thumbnail.icon} />\n    </div>\n  );\n\n  return (\n    <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" css={linkStyles}>\n      {card}\n    </a>\n  );\n};\n\nexport const DiscoverNews = () => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <section css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.md }}>\n      <div\n        css={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: theme.spacing.md,\n        }}\n      >\n        <Typography.Title level={3} css={{ margin: 0 }}>\n          <FormattedMessage defaultMessage=\"Discover new features\" description=\"Home page news section title\" />\n        </Typography.Title>\n        <Typography.Link\n          componentId=\"mlflow.home.news.view_more\"\n          href=\"https://mlflow.org/blog/\"\n          openInNewTab\n          css={{ color: theme.colors.textSecondary }}\n        >\n          <FormattedMessage defaultMessage=\"View all\" description=\"Home page news section view more link\" />\n        </Typography.Link>\n      </div>\n      <section css={{ width: '100%', minWidth: 0 }}>\n        <div\n          css={{\n            width: '100%',\n            display: 'flex',\n            gap: theme.spacing.sm + theme.spacing.xs,\n            flexWrap: 'wrap',\n          }}\n        >\n          {homeNewsItems.map((item) => (\n            <DiscoverNewsCard key={item.id} {...item} />\n          ))}\n        </div>\n      </section>\n    </section>\n  );\n};\n","import { useState } from 'react';\nimport { Header, Spacer, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ScrollablePageWrapper } from '../common/components/ScrollablePageWrapper';\nimport { useQuery } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { MlflowService } from '../experiment-tracking/sdk/MlflowService';\nimport type { SearchExperimentsApiResponse } from '../experiment-tracking/types';\nimport { CreateExperimentModal } from '../experiment-tracking/components/modals/CreateExperimentModal';\nimport { useInvalidateExperimentList } from '../experiment-tracking/components/experiment-page/hooks/useExperimentListQuery';\nimport { GetStarted } from './components/GetStarted';\nimport { ExperimentsHomeView } from './components/ExperimentsHomeView';\nimport { DiscoverNews } from './components/DiscoverNews';\n\ntype ExperimentQueryKey = ['home', 'recent-experiments'];\n\nconst RECENT_EXPERIMENTS_QUERY_KEY: ExperimentQueryKey = ['home', 'recent-experiments'];\n\nconst HomePage = () => {\n  const { theme } = useDesignSystemTheme();\n  const invalidateExperiments = useInvalidateExperimentList();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n\n  const { data, error, isLoading, refetch } = useQuery<\n    SearchExperimentsApiResponse,\n    Error,\n    SearchExperimentsApiResponse,\n    ExperimentQueryKey\n  >(RECENT_EXPERIMENTS_QUERY_KEY, {\n    queryFn: () =>\n      MlflowService.searchExperiments([\n        ['max_results', '5'],\n        ['order_by', 'last_update_time DESC'],\n      ]),\n    staleTime: 30_000,\n  });\n\n  const experiments = data?.experiments;\n\n  const handleOpenCreateModal = () => setIsCreateModalOpen(true);\n  const handleCloseCreateModal = () => setIsCreateModalOpen(false);\n\n  const handleExperimentCreated = () => {\n    handleCloseCreateModal();\n    invalidateExperiments();\n    refetch();\n  };\n\n  return (\n    <ScrollablePageWrapper\n      css={{\n        padding: theme.spacing.md,\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.lg,\n        height: 'min-content',\n      }}\n    >\n      <Header title={<FormattedMessage defaultMessage=\"Welcome to MLflow\" description=\"Home page hero title\" />} />\n      <GetStarted />\n      <ExperimentsHomeView\n        experiments={experiments}\n        isLoading={isLoading}\n        error={error}\n        onCreateExperiment={handleOpenCreateModal}\n        onRetry={refetch}\n      />\n      <DiscoverNews />\n\n      <CreateExperimentModal\n        isOpen={isCreateModalOpen}\n        onClose={handleCloseCreateModal}\n        onExperimentCreated={handleExperimentCreated}\n      />\n    </ScrollablePageWrapper>\n  );\n};\n\nexport default HomePage;\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, type ButtonProps, LegacyTooltip } from '@databricks/design-system';\n\ninterface CopyButtonProps extends Partial<ButtonProps> {\n  copyText: string;\n  showLabel?: React.ReactNode;\n  componentId?: string;\n}\n\nexport const CopyButton = ({ copyText, showLabel = true, componentId, ...buttonProps }: CopyButtonProps) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(copyText);\n    setShowTooltip(true);\n    setTimeout(() => {\n      setShowTooltip(false);\n    }, 3000);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <LegacyTooltip\n      title={\n        <FormattedMessage defaultMessage=\"Copied\" description=\"Tooltip text shown when copy operation completes\" />\n      }\n      dangerouslySetAntdProps={{\n        visible: showTooltip,\n      }}\n    >\n      <Button\n        componentId={componentId ?? 'mlflow.shared.copy_button'}\n        type=\"primary\"\n        onClick={handleClick}\n        onMouseLeave={handleMouseLeave}\n        css={{ 'z-index': 1 }}\n        // Define children as a explicit prop so it can be easily overrideable\n        children={\n          showLabel ? <FormattedMessage defaultMessage=\"Copy\" description=\"Button text for copy button\" /> : undefined\n        }\n        {...buttonProps}\n      />\n    </LegacyTooltip>\n  );\n};\n","import { PageWrapper } from '@databricks/design-system';\n\n/**\n * Wraps the page content in the scrollable container so e.g. constrained tables behave correctly.\n */\nexport const ScrollablePageWrapper = ({ children, className }: { children: React.ReactNode; className?: string }) => {\n  return (\n    <PageWrapper css={{ height: '100%' }} className={className}>\n      {children}\n    </PageWrapper>\n  );\n};\n","import { Button, PencilIcon } from '@databricks/design-system';\nimport 'react-virtualized/styles.css';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { KeyValueTag } from '../../common/components/KeyValueTag';\nimport { isUserFacingTag } from '../../common/utils/TagUtils';\nimport type { ExperimentTableColumnDef, ExperimentTableMetadata } from './ExperimentListTable';\n\nexport const ExperimentListTableTagsCell: ExperimentTableColumnDef['cell'] = ({\n  row: { original },\n  table: {\n    options: { meta },\n  },\n}) => {\n  const intl = useIntl();\n\n  const { onEditTags } = meta as ExperimentTableMetadata;\n\n  const visibleTagList = original?.tags?.filter((tag) => isUserFacingTag(tag.key)) || [];\n  const containsTags = visibleTagList.length > 0;\n\n  return (\n    <div css={{ display: 'flex' }}>\n      <div css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', display: 'flex' }}>\n        {visibleTagList?.map((tag) => (\n          <KeyValueTag key={tag.key} tag={tag} />\n        ))}\n      </div>\n      <Button\n        componentId=\"mlflow.experiment.list.tag.add\"\n        size=\"small\"\n        icon={!containsTags ? undefined : <PencilIcon />}\n        onClick={() => onEditTags?.(original)}\n        aria-label={intl.formatMessage({\n          defaultMessage: 'Edit tags',\n          description: 'Label for the edit tags button in the experiment list table',\n        })}\n        css={{\n          flexShrink: 0,\n          opacity: 0,\n          '[role=row]:hover &': {\n            opacity: 1,\n          },\n          '[role=row]:focus-within &': {\n            opacity: 1,\n          },\n        }}\n        type=\"tertiary\"\n      >\n        {!containsTags ? (\n          <FormattedMessage\n            defaultMessage=\"Add tags\"\n            description=\"Label for the add tags button in the experiment list table\"\n          />\n        ) : undefined}\n      </Button>\n    </div>\n  );\n};\n","import { useMemo } from 'react';\nimport type { CursorPaginationProps } from '@databricks/design-system';\nimport {\n  Checkbox,\n  useDesignSystemTheme,\n  Empty,\n  NoIcon,\n  Table,\n  CursorPagination,\n  TableRow,\n  TableHeader,\n  TableCell,\n  TableSkeletonRows,\n} from '@databricks/design-system';\nimport 'react-virtualized/styles.css';\nimport type { ExperimentEntity } from '../types';\nimport type { ColumnDef, OnChangeFn, RowSelectionState, SortingState } from '@tanstack/react-table';\nimport { flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';\nimport { isEmpty } from 'lodash';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Utils from '../../common/utils/Utils';\nimport { Link } from '../../common/utils/RoutingUtils';\nimport Routes from '../routes';\nimport { ExperimentListTableTagsCell } from './ExperimentListTableTagsCell';\n\nexport type ExperimentTableColumnDef = ColumnDef<ExperimentEntity>;\n\nexport type ExperimentTableMetadata = { onEditTags: (editedEntity: ExperimentEntity) => void };\n\nconst useExperimentsTableColumns = () => {\n  const intl = useIntl();\n  return useMemo(() => {\n    const resultColumns: ExperimentTableColumnDef[] = [\n      {\n        header: ({ table }) => (\n          <Checkbox\n            componentId=\"mlflow.experiment_list_view.check_all_box\"\n            isChecked={table.getIsSomeRowsSelected() ? null : table.getIsAllRowsSelected()}\n            onChange={(_, event) => table.getToggleAllRowsSelectedHandler()(event)}\n          />\n        ),\n        id: 'select',\n        cell: ExperimentListCheckbox,\n        enableSorting: false,\n      },\n      {\n        header: intl.formatMessage({\n          defaultMessage: 'Name',\n          description: 'Header for the name column in the experiments table',\n        }),\n        accessorKey: 'name',\n        id: 'name',\n        cell: ExperimentListTableCell,\n        enableSorting: true,\n      },\n      {\n        header: intl.formatMessage({\n          defaultMessage: 'Time created',\n          description: 'Header for the time created column in the experiments table',\n        }),\n        id: 'creation_time',\n        accessorFn: ({ creationTime }) => Utils.formatTimestamp(creationTime, intl),\n        enableSorting: true,\n      },\n      {\n        header: intl.formatMessage({\n          defaultMessage: 'Last modified',\n          description: 'Header for the last modified column in the experiments table',\n        }),\n        id: 'last_update_time',\n        accessorFn: ({ lastUpdateTime }) => Utils.formatTimestamp(lastUpdateTime, intl),\n        enableSorting: true,\n      },\n      {\n        header: intl.formatMessage({\n          defaultMessage: 'Description',\n          description: 'Header for the description column in the experiments table',\n        }),\n        id: 'description',\n        accessorFn: ({ tags }) => tags?.find(({ key }) => key === 'mlflow.note.content')?.value ?? '-',\n        enableSorting: false,\n      },\n      {\n        header: intl.formatMessage({\n          defaultMessage: 'Tags',\n          description: 'Header for the tags column in the experiments table',\n        }),\n        id: 'tags',\n        accessorKey: 'tags',\n        enableSorting: false,\n        cell: ExperimentListTableTagsCell,\n      },\n    ];\n\n    return resultColumns;\n  }, [intl]);\n};\n\nexport const ExperimentListTable = ({\n  experiments,\n  isFiltered,\n  isLoading,\n  rowSelection,\n  setRowSelection,\n  cursorPaginationProps,\n  sortingProps: { sorting, setSorting },\n  onEditTags,\n}: {\n  experiments?: ExperimentEntity[];\n  isFiltered?: boolean;\n  isLoading: boolean;\n  rowSelection: RowSelectionState;\n  setRowSelection: OnChangeFn<RowSelectionState>;\n  cursorPaginationProps?: Omit<CursorPaginationProps, 'componentId'>;\n  sortingProps: { sorting: SortingState; setSorting: OnChangeFn<SortingState> };\n  onEditTags: (editedEntity: ExperimentEntity) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const columns = useExperimentsTableColumns();\n\n  const table = useReactTable({\n    data: experiments ?? [],\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (row) => row.experimentId,\n    enableRowSelection: true,\n    enableMultiRowSelection: true,\n    onRowSelectionChange: setRowSelection,\n    onSortingChange: setSorting,\n    state: { rowSelection, sorting },\n    meta: { onEditTags } satisfies ExperimentTableMetadata,\n  });\n\n  const getEmptyState = () => {\n    const isEmptyList = !isLoading && isEmpty(experiments);\n    if (isEmptyList && isFiltered) {\n      return (\n        <Empty\n          image={<NoIcon />}\n          title={\n            <FormattedMessage\n              defaultMessage=\"No experiments found\"\n              description=\"Label for the empty state in the experiments table when no experiments are found\"\n            />\n          }\n          description={null}\n        />\n      );\n    }\n    if (isEmptyList) {\n      return (\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"No experiments created\"\n              description=\"A header for the empty state in the experiments table\"\n            />\n          }\n          description={\n            <FormattedMessage\n              defaultMessage='Use \"Create experiment\" button in order to create a new experiment'\n              description=\"Guidelines for the user on how to create a new experiment in the experiments list page\"\n            />\n          }\n        />\n      );\n    }\n\n    return null;\n  };\n\n  const selectColumnStyles = { flex: 'none', height: theme.general.heightBase };\n\n  return (\n    <Table\n      scrollable\n      pagination={\n        cursorPaginationProps ? (\n          <CursorPagination {...cursorPaginationProps} componentId=\"mlflow.experiment_list_view.pagination\" />\n        ) : undefined\n      }\n      empty={getEmptyState()}\n    >\n      <TableRow isHeader>\n        {table.getLeafHeaders().map((header) => (\n          <TableHeader\n            componentId=\"mlflow.experiment_list_view.table.header\"\n            key={header.id}\n            css={header.column.id === 'select' ? selectColumnStyles : undefined}\n            sortable={header.column.getCanSort()}\n            sortDirection={header.column.getIsSorted() || 'none'}\n            onToggleSort={header.column.getToggleSortingHandler()}\n          >\n            {flexRender(header.column.columnDef.header, header.getContext())}\n          </TableHeader>\n        ))}\n      </TableRow>\n      {isLoading ? (\n        <TableSkeletonRows table={table} />\n      ) : (\n        table.getRowModel().rows.map((row) => (\n          <TableRow key={row.id} css={{ height: theme.general.buttonHeight }} data-testid=\"experiment-list-item\">\n            {row.getAllCells().map((cell) => (\n              <TableCell\n                key={cell.id}\n                css={{ alignItems: 'center', ...(cell.column.id === 'select' ? selectColumnStyles : undefined) }}\n              >\n                {flexRender(cell.column.columnDef.cell, cell.getContext())}\n              </TableCell>\n            ))}\n          </TableRow>\n        ))\n      )}\n    </Table>\n  );\n};\n\nconst ExperimentListTableCell: ExperimentTableColumnDef['cell'] = ({ row: { original } }) => {\n  return (\n    <Link\n      className=\"experiment-link\"\n      css={{ whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis', flex: 1 }}\n      to={Routes.getExperimentPageRoute(original.experimentId)}\n      title={original.name}\n      data-testid=\"experiment-list-item-link\"\n    >\n      {original.name}\n    </Link>\n  );\n};\n\nconst ExperimentListCheckbox: ExperimentTableColumnDef['cell'] = ({ row }) => {\n  return (\n    <Checkbox\n      componentId=\"mlflow.experiment_list_view.check_box\"\n      id={row.original.experimentId}\n      key={row.original.experimentId}\n      data-testid=\"experiment-list-item-check-box\"\n      isChecked={row.getIsSelected()}\n      disabled={!row.getCanSelect()}\n      onChange={row.getToggleSelectedHandler()}\n    />\n  );\n};\n","import React from 'react';\nimport { Modal, Typography, CopyIcon, useDesignSystemTheme } from '@databricks/design-system';\nconst { Paragraph } = Typography;\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\n\nexport interface KeyValueTagFullViewModalProps {\n  tagKey: string;\n  tagValue: string;\n  setIsKeyValueTagFullViewModalVisible: React.Dispatch<React.SetStateAction<boolean>>;\n  isKeyValueTagFullViewModalVisible: boolean;\n}\n\nexport const KeyValueTagFullViewModal = React.memo((props: KeyValueTagFullViewModalProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_components_keyvaluetagfullviewmodal.tsx_17\"\n      title={'Tag: ' + props.tagKey}\n      visible={props.isKeyValueTagFullViewModalVisible}\n      onCancel={() => props.setIsKeyValueTagFullViewModalVisible(false)}\n    >\n      <div css={{ display: 'flex' }}>\n        <Paragraph css={{ flexGrow: 1 }}>\n          <pre\n            css={{\n              backgroundColor: theme.colors.backgroundPrimary,\n              marginTop: theme.spacing.sm,\n              whiteSpace: 'pre-wrap',\n              wordBreak: 'break-all',\n            }}\n          >\n            {props.tagValue}\n          </pre>\n        </Paragraph>\n        <div\n          css={{\n            marginTop: theme.spacing.sm,\n          }}\n        >\n          <CopyButton copyText={props.tagValue} showLabel={false} icon={<CopyIcon />} aria-label=\"Copy\" />\n        </div>\n      </div>\n    </Modal>\n  );\n});\n","import { Tag, LegacyTooltip, Typography } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../types';\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { KeyValueTagFullViewModal } from './KeyValueTagFullViewModal';\nimport type { Interpolation, Theme } from '@emotion/react';\n\n/**\n * An arbitrary number that is used to determine if a tag is too\n * long and should be truncated. We want to avoid short keys or values\n * in a long tag to be truncated\n * */\nconst TRUNCATE_ON_CHARS_LENGTH = 30;\n\nfunction getTruncatedStyles(shouldTruncate = true): Interpolation<Theme> {\n  return shouldTruncate\n    ? {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        textWrap: 'nowrap',\n        whiteSpace: 'nowrap' as const,\n      }\n    : { whiteSpace: 'nowrap' as const };\n}\n\n/**\n * A <Tag /> wrapper used for displaying key-value entity\n */\nexport const KeyValueTag = ({\n  isClosable = false,\n  onClose,\n  tag,\n  enableFullViewModal = false,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n  maxWidth = 300,\n  className,\n}: {\n  isClosable?: boolean;\n  onClose?: () => void;\n  tag: KeyValueEntity;\n  enableFullViewModal?: boolean;\n  charLimit?: number;\n  maxWidth?: number;\n  className?: string;\n}) => {\n  const intl = useIntl();\n\n  const [isKeyValueTagFullViewModalVisible, setIsKeyValueTagFullViewModalVisible] = useState(false);\n\n  const { shouldTruncateKey, shouldTruncateValue } = getKeyAndValueComplexTruncation(tag, charLimit);\n  const allowFullViewModal = enableFullViewModal && (shouldTruncateKey || shouldTruncateValue);\n\n  const fullViewModalLabel = intl.formatMessage({\n    defaultMessage: 'Click to see more',\n    description: 'Run page > Overview > Tags cell > Tag',\n  });\n\n  return (\n    <div>\n      <Tag\n        componentId=\"codegen_mlflow_app_src_common_components_keyvaluetag.tsx_60\"\n        closable={isClosable}\n        onClose={onClose}\n        title={tag.key}\n        className={className}\n      >\n        <LegacyTooltip title={allowFullViewModal ? fullViewModalLabel : ''}>\n          <span\n            css={{ maxWidth, display: 'inline-flex' }}\n            onClick={() => (allowFullViewModal ? setIsKeyValueTagFullViewModalVisible(true) : undefined)}\n          >\n            <Typography.Text bold title={tag.key} css={getTruncatedStyles(shouldTruncateKey)}>\n              {tag.key}\n            </Typography.Text>\n            {tag.value && (\n              <Typography.Text title={tag.value} css={getTruncatedStyles(shouldTruncateValue)}>\n                : {tag.value}\n              </Typography.Text>\n            )}\n          </span>\n        </LegacyTooltip>\n      </Tag>\n      <div>\n        {isKeyValueTagFullViewModalVisible && (\n          <KeyValueTagFullViewModal\n            tagKey={tag.key}\n            tagValue={tag.value}\n            isKeyValueTagFullViewModalVisible={isKeyValueTagFullViewModalVisible}\n            setIsKeyValueTagFullViewModalVisible={setIsKeyValueTagFullViewModalVisible}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport function getKeyAndValueComplexTruncation(\n  tag: KeyValueEntity,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n): { shouldTruncateKey: boolean; shouldTruncateValue: boolean } {\n  const { key, value } = tag;\n  const fullLength = key.length + value.length;\n  const isKeyLonger = key.length > value.length;\n  const shorterLength = isKeyLonger ? value.length : key.length;\n\n  // No need to truncate if tag is short enough\n  if (fullLength <= charLimit) return { shouldTruncateKey: false, shouldTruncateValue: false };\n  // If the shorter string is too long, truncate both key and value.\n  if (shorterLength > charLimit / 2) return { shouldTruncateKey: true, shouldTruncateValue: true };\n\n  // Otherwise truncate the longer string\n  return {\n    shouldTruncateKey: isKeyLonger,\n    shouldTruncateValue: !isKeyLonger,\n  };\n}\n"],"names":["homeQuickActions","id","icon","WorkflowsIcon","componentId","title","_jsx","FormattedMessage","defaultMessage","description","link","BeakerIcon","NotebookIcon","ModelsIcon","GetStartedCard","action","theme","useDesignSystemTheme","linkStyles","textDecoration","color","colors","textPrimary","display","containerStyles","overflow","border","actionDefaultBorderDefault","borderRadius","borders","borderRadiusMd","background","backgroundPrimary","padding","spacing","sm","xs","gap","width","minWidth","boxSizing","boxShadow","shadows","cursor","transition","actionDefaultBackgroundHover","actionDefaultBackgroundPress","contentStyles","flexDirection","flex","iconWrapperStyles","borderRadiusSm","blue500","height","alignItems","justifyContent","card","_jsxs","css","children","role","Typography","Text","bold","href","target","rel","_ref","name","styles","GetStarted","_css","md","Title","level","marginBottom","flexWrap","map","ExperimentsEmptyState","onCreateExperiment","lg","textAlign","textSecondary","Button","onClick","_ref2","ExperimentsHomeView","experiments","isLoading","error","onRetry","rowSelection","setRowSelection","useState","sorting","setSorting","topExperiments","useMemo","_experiments$slice","slice","shouldShowEmptyState","length","Link","to","Routes","experimentsObservatoryRoute","backgroundColor","Alert","type","closable","message","ExperimentListTable","sortingProps","onEditTags","Spacer","shrinks","homeNewsItems","thumbnail","gradient","AssistantIcon","RobotIcon","DatabaseIcon","NewsThumbnail","IconComponent","aspectRatio","size","white","fontSize","DiscoverNewsCard","_ref3","DiscoverNews","openInNewTab","item","RECENT_EXPERIMENTS_QUERY_KEY","HomePage","invalidateExperiments","useInvalidateExperimentList","isCreateModalOpen","setIsCreateModalOpen","data","refetch","useQuery","queryFn","MlflowService","searchExperiments","staleTime","handleCloseCreateModal","ScrollablePageWrapper","Header","handleOpenCreateModal","CreateExperimentModal","isOpen","onClose","onExperimentCreated","handleExperimentCreated","CopyButton","copyText","showLabel","buttonProps","showTooltip","setShowTooltip","LegacyTooltip","dangerouslySetAntdProps","visible","handleClick","navigator","clipboard","writeText","setTimeout","onMouseLeave","handleMouseLeave","undefined","className","PageWrapper","ExperimentListTableTagsCell","row","original","table","options","meta","_original$tags","intl","useIntl","visibleTagList","tags","filter","tag","isUserFacingTag","key","containsTags","KeyValueTag","PencilIcon","formatMessage","isFiltered","cursorPaginationProps","columns","useExperimentsTableColumns","header","Checkbox","isChecked","getIsSomeRowsSelected","getIsAllRowsSelected","onChange","_","event","getToggleAllRowsSelectedHandler","cell","ExperimentListCheckbox","enableSorting","accessorKey","ExperimentListTableCell","accessorFn","creationTime","Utils","formatTimestamp","lastUpdateTime","_tags$find$value","_tags$find","find","value","useReactTable","getCoreRowModel","getRowId","experimentId","enableRowSelection","enableMultiRowSelection","onRowSelectionChange","onSortingChange","state","selectColumnStyles","general","heightBase","Table","scrollable","pagination","CursorPagination","empty","getEmptyState","isEmptyList","isEmpty","Empty","image","NoIcon","TableRow","isHeader","getLeafHeaders","TableHeader","column","sortable","getCanSort","sortDirection","getIsSorted","onToggleSort","getToggleSortingHandler","flexRender","columnDef","getContext","TableSkeletonRows","getRowModel","rows","buttonHeight","getAllCells","TableCell","getExperimentPageRoute","getIsSelected","disabled","getCanSelect","getToggleSelectedHandler","Paragraph","KeyValueTagFullViewModal","React","props","Modal","tagKey","isKeyValueTagFullViewModalVisible","onCancel","setIsKeyValueTagFullViewModalVisible","marginTop","whiteSpace","wordBreak","tagValue","CopyIcon","getTruncatedStyles","shouldTruncate","textOverflow","textWrap","isClosable","enableFullViewModal","charLimit","maxWidth","shouldTruncateKey","shouldTruncateValue","fullLength","isKeyLonger","shorterLength","getKeyAndValueComplexTruncation","allowFullViewModal","fullViewModalLabel","Tag"],"sourceRoot":""}